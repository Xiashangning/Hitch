//
//  TestWindowDark.swift
//  ProjectName
//
//  Created by AuthorName on 7/21/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class TestWindowDark : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 434, height: 194), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 434, height: 194), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 434, y: resizedFrame.height / 194)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 434, resizedFrame.height / 194)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shadowTint = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.898, green: 0.898, blue: 0.898, alpha: 0.685)
        let fillColor3 = UIColor(red: 0.727, green: 0.727, blue: 0.727, alpha: 1.000)
        let textForeground = UIColor(red: 0.887, green: 0.887, blue: 0.887, alpha: 1.000)
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground3 = UIColor(red: 0.949, green: 0.949, blue: 0.949, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowTint.withAlphaComponent(0.15 * shadowTint.cgColor.alpha)
        shadow.shadowOffset = CGSize(width: 952, height: 0)
        shadow.shadowBlurRadius = 16

        //// Group 2
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 0, y: 0.16))
        clipPath.addLine(to: CGPoint(x: 433.83, y: 0.16))
        clipPath.addLine(to: CGPoint(x: 433.83, y: 193.66))
        clipPath.addLine(to: CGPoint(x: 0, y: 193.66))
        clipPath.addLine(to: CGPoint(x: 0, y: 0.16))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 45, y: 58.17))
        clipPath.addCurve(to: CGPoint(x: 58.01, y: 45.16), controlPoint1: CGPoint(x: 45, y: 50.99), controlPoint2: CGPoint(x: 50.82, y: 45.16))
        clipPath.addLine(to: CGPoint(x: 375.82, y: 45.16))
        clipPath.addCurve(to: CGPoint(x: 388.83, y: 58.17), controlPoint1: CGPoint(x: 383.01, y: 45.16), controlPoint2: CGPoint(x: 388.83, y: 50.99))
        clipPath.addLine(to: CGPoint(x: 388.83, y: 135.65))
        clipPath.addCurve(to: CGPoint(x: 375.82, y: 148.66), controlPoint1: CGPoint(x: 388.83, y: 142.83), controlPoint2: CGPoint(x: 383.01, y: 148.66))
        clipPath.addLine(to: CGPoint(x: 58.01, y: 148.66))
        clipPath.addCurve(to: CGPoint(x: 45, y: 135.65), controlPoint1: CGPoint(x: 50.82, y: 148.66), controlPoint2: CGPoint(x: 45, y: 142.83))
        clipPath.addLine(to: CGPoint(x: 45, y: 58.17))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: -920.03, y: 32.15, width: 369.85, height: 129.5), cornerRadius: 26)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        fillColor.setFill()
        rectanglePath.fill()
        context.restoreGState()



        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath(roundedRect: CGRect(x: 44.97, y: 45.15, width: 343.85, height: 103.5), cornerRadius: 13)
        clip4Path.addClip()


        //// Group 5
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 0, y: 0.16))
        clip3Path.addLine(to: CGPoint(x: 433.83, y: 0.16))
        clip3Path.addLine(to: CGPoint(x: 433.83, y: 193.66))
        clip3Path.addLine(to: CGPoint(x: 0, y: 193.66))
        clip3Path.addLine(to: CGPoint(x: 0, y: 0.16))
        clip3Path.close()
        clip3Path.move(to: CGPoint(x: 45, y: 58.17))
        clip3Path.addCurve(to: CGPoint(x: 58.01, y: 45.16), controlPoint1: CGPoint(x: 45, y: 50.99), controlPoint2: CGPoint(x: 50.82, y: 45.16))
        clip3Path.addLine(to: CGPoint(x: 375.82, y: 45.16))
        clip3Path.addCurve(to: CGPoint(x: 388.83, y: 58.17), controlPoint1: CGPoint(x: 383.01, y: 45.16), controlPoint2: CGPoint(x: 388.83, y: 50.99))
        clip3Path.addLine(to: CGPoint(x: 388.83, y: 135.65))
        clip3Path.addCurve(to: CGPoint(x: 375.82, y: 148.66), controlPoint1: CGPoint(x: 388.83, y: 142.83), controlPoint2: CGPoint(x: 383.01, y: 148.66))
        clip3Path.addLine(to: CGPoint(x: 58.01, y: 148.66))
        clip3Path.addCurve(to: CGPoint(x: 45, y: 135.65), controlPoint1: CGPoint(x: 50.82, y: 148.66), controlPoint2: CGPoint(x: 45, y: 142.83))
        clip3Path.addLine(to: CGPoint(x: 45, y: 58.17))
        clip3Path.close()
        clip3Path.usesEvenOddFillRule = true
        clip3Path.addClip()


        //// Group 6
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(rect: CGRect(x: 45, y: 45, width: 344, height: 104))
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -920.03, y: 32.15, width: 369.85, height: 129.5), cornerRadius: 26)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        fillColor.setFill()
        rectangle2Path.fill()
        context.restoreGState()



        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 45, y: 45, width: 344, height: 104))
        fillColor2.setFill()
        rectangle4Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 37, y: 36.03, width: 359, height: 112.65), cornerRadius: 13)
        fillColor3.setFill()
        rectangle6Path.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 52, y: 46, width: 67.79, height: 19)
        let labelTextContent = "CATAGORY"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [
            NSFontAttributeName: UIFont(name: "SFProDisplay-Bold", size: 12)!,
            NSForegroundColorAttributeName: textForeground,
            NSParagraphStyleAttributeName: labelStyle,
        ]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 52, y: 56, width: 77.52, height: 44)
        let label2TextContent = "Hello world!"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [
            NSFontAttributeName: UIFont(name: "SFProDisplay-Bold", size: 30)!,
            NSForegroundColorAttributeName: textForeground2,
            NSParagraphStyleAttributeName: label2Style,
        ]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 52, y: 100, width: 42.6, height: 19)
        let label3TextContent = "DETAIL"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [
            NSFontAttributeName: UIFont(name: "SFProDisplay-Bold", size: 13)!,
            NSForegroundColorAttributeName: textForeground3,
            NSParagraphStyleAttributeName: label3Style,
        ]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(TestWindowDarkResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
