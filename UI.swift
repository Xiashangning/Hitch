//
//  UI.swift
//
//  Created on 8/13/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

func *(_ frame: CGRect, _ scale: CGFloat) -> CGRect {
    var f = frame
    f.origin.x += (1-scale)*f.size.width/2
    f.origin.y += (1-scale)*f.size.height/2
    f.size.width *= scale
    f.size.height *= scale
    
    return f
}

class UI: NSObject {
    
    class func drawCancelPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 61.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -138.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 138.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 77.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0.012, brightness: 0.398, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLOGINPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.149, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.149, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.148, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 登录
            let layer = NSMutableAttributedString(string: "登录")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 20)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 1, saturation: 0.004, brightness: 0.633, alpha: 1), range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 126, y: 12))
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: -0.5, y: -0.5))
            line.addLine(to: CGPoint(x: 1, y: 1))
            context.saveGState()
            context.translateBy(x: 149, y: 31)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTAKEATOUR(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor.white.setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor.white.setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor.white.setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 试用
            let layer = NSMutableAttributedString(string: "试用")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 20)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.238, alpha: 1), range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 126, y: 12))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRegisterPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 21)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 60.48, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.56)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -96, dy: -96))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -237.48, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 237.48, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 16
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 75.65, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: 0.56)
                    UIColor(hue: 0.59, saturation: 0.68, brightness: 0.725, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: 0.56))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 61.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -138.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 138.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 77.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTAKEATOURPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.851, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.851, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.852, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 试用
            let layer = NSMutableAttributedString(string: "试用")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 20)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 126, y: 12))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLOGIN(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 登录
            let layer = NSMutableAttributedString(string: "登录")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 20)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: layer.length))
            context.saveGState()
            layer.draw(at: CGPoint(x: 126, y: 12))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRegister2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1)
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 60.92, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -137.92, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 137.92, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 76.09, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 344, height: 113), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 344, y: resizedFrame.height / 113)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY = NSMutableAttributedString(string: " CATAGORY \n")
            cATAGORY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.906, saturation: 0, brightness: 0.485, alpha: 1), range: NSRange(location: 0, length: 9))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 9, length: 2))
            cATAGORY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY.length))
            }
            context.saveGState()
            cATAGORY.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE = NSMutableAttributedString(string: "TITLE")
            tITLE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE.length))
            }
            context.saveGState()
            tITLE.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL = NSMutableAttributedString(string: " DETAIL ")
            dETAIL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL.length))
            }
            context.saveGState()
            dETAIL.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    class func drawWindowLight2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 344, height: 113), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 344, y: resizedFrame.height / 113)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(white: 0.727, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY = NSMutableAttributedString(string: "CATAGORY\n")
            cATAGORY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.887, alpha: 1), range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY.length))
            }
            context.saveGState()
            cATAGORY.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE = NSMutableAttributedString(string: "TITLE")
            tITLE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE.length))
            }
            context.saveGState()
            tITLE.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL = NSMutableAttributedString(string: "DETAIL")
            dETAIL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.949, alpha: 1), range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL.length))
            }
            context.saveGState()
            dETAIL.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonWhitePressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 6
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.662, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.13, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonBlackPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 7
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.064, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.508, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 6
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor.white.setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 577), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 577)
        
        /// Group 5
        do {
            context.saveGState()
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.422, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 31, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 164, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 201, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 7
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.8, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 577), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 577)
        
        /// Group 5
        do {
            context.saveGState()
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.725, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.933, alpha: 1), range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 30, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.964, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 164, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 201, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    //MARK: - Canvas Images
    
    /// Symbols
    
    class func imageOfCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UI.drawCancel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 344, height: 113), false, 0)
        UI.drawWindowLight3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegisterPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 21) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 21), false, 0)
        UI.drawRegisterPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 344, height: 113), false, 0)
        UI.drawWindowLight2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLOGINPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UI.drawLOGINPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonWhitePressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UI.drawButtonWhitePressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonBlackPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UI.drawButtonBlackPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UI.drawButtonWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTAKEATOUR(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UI.drawTAKEATOUR()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLOGIN(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UI.drawLOGIN()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegister2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UI.drawRegister2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 352, height: 577), false, 0)
        UI.drawWindowLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTAKEATOURPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UI.drawTAKEATOURPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UI.drawButtonBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 352, height: 577), false, 0)
        UI.drawWindowDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCancelPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UI.drawCancelPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
