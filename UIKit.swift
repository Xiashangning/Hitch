//
//  UIKit.swift
//
//  Created on 8/12/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class UIKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Guide - Colors
    
    class func drawGuideColors() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Labels + Background
        do {
            context.saveGState()
            
            /// Template Header and Footer
            // Warning: New symbols are not supported.
            
            /// R 255 G 59 B 48
            let r255G59B48 = NSMutableAttributedString(string: "R 255\nG 59\nB 48")
            r255G59B48.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r255G59B48.length))
            r255G59B48.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r255G59B48.length))
            r255G59B48.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r255G59B48.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r255G59B48.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r255G59B48.length))
            }
            context.saveGState()
            r255G59B48.draw(at: CGPoint(x: 20, y: 186))
            context.restoreGState()
            
            /// R 255 G 149 B 0
            let r255G149B0 = NSMutableAttributedString(string: "R 255\nG 149\nB 0")
            r255G149B0.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r255G149B0.length))
            r255G149B0.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r255G149B0.length))
            r255G149B0.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r255G149B0.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r255G149B0.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r255G149B0.length))
            }
            context.saveGState()
            r255G149B0.draw(at: CGPoint(x: 110, y: 186))
            context.restoreGState()
            
            /// R 255 G 204 B 0
            let r255G204B0 = NSMutableAttributedString(string: "R 255\nG 204\nB 0")
            r255G204B0.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r255G204B0.length))
            r255G204B0.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r255G204B0.length))
            r255G204B0.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r255G204B0.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r255G204B0.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r255G204B0.length))
            }
            context.saveGState()
            r255G204B0.draw(at: CGPoint(x: 200, y: 186))
            context.restoreGState()
            
            /// R 76 G 217 B 100
            let r76G217B100 = NSMutableAttributedString(string: "R 76\nG 217\nB 100")
            r76G217B100.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r76G217B100.length))
            r76G217B100.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r76G217B100.length))
            r76G217B100.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r76G217B100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r76G217B100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r76G217B100.length))
            }
            context.saveGState()
            r76G217B100.draw(at: CGPoint(x: 290, y: 186))
            context.restoreGState()
            
            /// R 90 G 200 B 250
            let r90G200B250 = NSMutableAttributedString(string: "R 90\nG 200\nB 250")
            r90G200B250.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r90G200B250.length))
            r90G200B250.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r90G200B250.length))
            r90G200B250.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r90G200B250.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r90G200B250.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r90G200B250.length))
            }
            context.saveGState()
            r90G200B250.draw(at: CGPoint(x: 380, y: 186))
            context.restoreGState()
            
            /// R 0 G 122 B 255
            let r0G122B255 = NSMutableAttributedString(string: "R 0\nG 122\nB 255")
            r0G122B255.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r0G122B255.length))
            r0G122B255.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r0G122B255.length))
            r0G122B255.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r0G122B255.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r0G122B255.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r0G122B255.length))
            }
            context.saveGState()
            r0G122B255.draw(at: CGPoint(x: 470, y: 186))
            context.restoreGState()
            
            /// R 88 G 86 B 214
            let r88G86B214 = NSMutableAttributedString(string: "R 88\nG 86\nB 214")
            r88G86B214.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r88G86B214.length))
            r88G86B214.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r88G86B214.length))
            r88G86B214.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r88G86B214.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r88G86B214.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r88G86B214.length))
            }
            context.saveGState()
            r88G86B214.draw(at: CGPoint(x: 560, y: 186))
            context.restoreGState()
            
            /// R 255 G 45 B 85
            let r255G45B85 = NSMutableAttributedString(string: "R 255\nG 45\nB 85")
            r255G45B85.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r255G45B85.length))
            r255G45B85.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r255G45B85.length))
            r255G45B85.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r255G45B85.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r255G45B85.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r255G45B85.length))
            }
            context.saveGState()
            r255G45B85.draw(at: CGPoint(x: 650, y: 186))
            context.restoreGState()
            
            /// R 255 G 255 B 255
            let r255G255B255 = NSMutableAttributedString(string: "R 255\nG 255\nB 255")
            r255G255B255.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r255G255B255.length))
            r255G255B255.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r255G255B255.length))
            r255G255B255.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r255G255B255.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r255G255B255.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r255G255B255.length))
            }
            context.saveGState()
            r255G255B255.draw(at: CGPoint(x: 20, y: 353))
            context.restoreGState()
            
            /// R 239 G 239 B 244
            let r239G239B244 = NSMutableAttributedString(string: "R 239\nG 239\nB 244")
            r239G239B244.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r239G239B244.length))
            r239G239B244.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r239G239B244.length))
            r239G239B244.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r239G239B244.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r239G239B244.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r239G239B244.length))
            }
            context.saveGState()
            r239G239B244.draw(at: CGPoint(x: 110, y: 353))
            context.restoreGState()
            
            /// R 229 G 229 B 234
            let r229G229B234 = NSMutableAttributedString(string: "R 229\nG 229\nB 234")
            r229G229B234.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r229G229B234.length))
            r229G229B234.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r229G229B234.length))
            r229G229B234.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r229G229B234.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r229G229B234.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r229G229B234.length))
            }
            context.saveGState()
            r229G229B234.draw(at: CGPoint(x: 200, y: 353))
            context.restoreGState()
            
            /// R 209 G 209 B 214
            let r209G209B214 = NSMutableAttributedString(string: "R 209\nG 209\nB 214")
            r209G209B214.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r209G209B214.length))
            r209G209B214.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r209G209B214.length))
            r209G209B214.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r209G209B214.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r209G209B214.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r209G209B214.length))
            }
            context.saveGState()
            r209G209B214.draw(at: CGPoint(x: 290, y: 353))
            context.restoreGState()
            
            /// R 199 G 199 B 204
            let r199G199B204 = NSMutableAttributedString(string: "R 199\nG 199\nB 204")
            r199G199B204.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r199G199B204.length))
            r199G199B204.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r199G199B204.length))
            r199G199B204.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r199G199B204.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r199G199B204.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r199G199B204.length))
            }
            context.saveGState()
            r199G199B204.draw(at: CGPoint(x: 380, y: 353))
            context.restoreGState()
            
            /// R 142 G 142 B 147
            let r142G142B147 = NSMutableAttributedString(string: "R 142\nG 142\nB 147")
            r142G142B147.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r142G142B147.length))
            r142G142B147.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r142G142B147.length))
            r142G142B147.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r142G142B147.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r142G142B147.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r142G142B147.length))
            }
            context.saveGState()
            r142G142B147.draw(at: CGPoint(x: 470, y: 353))
            context.restoreGState()
            
            /// R 0 B 0 G 0
            let r0B0G0 = NSMutableAttributedString(string: "R 0\nB 0\nG 0")
            r0B0G0.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r0B0G0.length))
            r0B0G0.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r0B0G0.length))
            r0B0G0.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r0B0G0.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                r0B0G0.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r0B0G0.length))
            }
            context.saveGState()
            r0B0G0.draw(at: CGPoint(x: 560, y: 353))
            context.restoreGState()
            
            /// Black
            let black = NSMutableAttributedString(string: "Black")
            black.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: black.length))
            black.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: black.length))
            black.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: black.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                black.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: black.length))
            }
            context.saveGState()
            black.draw(at: CGPoint(x: 560, y: 262))
            context.restoreGState()
            
            /// Gray
            let gray = NSMutableAttributedString(string: "Gray")
            gray.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: gray.length))
            gray.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: gray.length))
            gray.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: gray.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                gray.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: gray.length))
            }
            context.saveGState()
            gray.draw(at: CGPoint(x: 470, y: 262))
            context.restoreGState()
            
            /// Mid Gray
            let midGray = NSMutableAttributedString(string: "Mid Gray")
            midGray.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: midGray.length))
            midGray.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: midGray.length))
            midGray.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: midGray.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                midGray.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: midGray.length))
            }
            context.saveGState()
            midGray.draw(at: CGPoint(x: 380, y: 262))
            context.restoreGState()
            
            /// Light Gray 2
            let lightGray2 = NSMutableAttributedString(string: "Light Gray 2")
            lightGray2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: lightGray2.length))
            lightGray2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: lightGray2.length))
            lightGray2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: lightGray2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                lightGray2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: lightGray2.length))
            }
            context.saveGState()
            lightGray2.draw(at: CGPoint(x: 290, y: 262))
            context.restoreGState()
            
            /// Light Gray
            let lightGray = NSMutableAttributedString(string: "Light Gray")
            lightGray.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: lightGray.length))
            lightGray.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: lightGray.length))
            lightGray.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: lightGray.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                lightGray.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: lightGray.length))
            }
            context.saveGState()
            lightGray.draw(at: CGPoint(x: 200, y: 262))
            context.restoreGState()
            
            /// Custom Gray
            let customGray = NSMutableAttributedString(string: "Custom Gray")
            customGray.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: customGray.length))
            customGray.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: customGray.length))
            customGray.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: customGray.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                customGray.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: customGray.length))
            }
            context.saveGState()
            customGray.draw(at: CGPoint(x: 110, y: 262))
            context.restoreGState()
            
            /// White
            let white = NSMutableAttributedString(string: "White")
            white.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: white.length))
            white.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: white.length))
            white.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: white.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                white.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: white.length))
            }
            context.saveGState()
            white.draw(at: CGPoint(x: 20, y: 262))
            context.restoreGState()
            
            /// Pink
            let pink = NSMutableAttributedString(string: "Pink")
            pink.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: pink.length))
            pink.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: pink.length))
            pink.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: pink.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                pink.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: pink.length))
            }
            context.saveGState()
            pink.draw(at: CGPoint(x: 650, y: 95))
            context.restoreGState()
            
            /// Purple
            let purple = NSMutableAttributedString(string: "Purple")
            purple.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: purple.length))
            purple.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: purple.length))
            purple.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: purple.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                purple.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: purple.length))
            }
            context.saveGState()
            purple.draw(at: CGPoint(x: 560, y: 95))
            context.restoreGState()
            
            /// Blue
            let blue = NSMutableAttributedString(string: "Blue")
            blue.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: blue.length))
            blue.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: blue.length))
            blue.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: blue.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                blue.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: blue.length))
            }
            context.saveGState()
            blue.draw(at: CGPoint(x: 470, y: 95))
            context.restoreGState()
            
            /// Teal Blue
            let tealBlue = NSMutableAttributedString(string: "Teal Blue")
            tealBlue.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tealBlue.length))
            tealBlue.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tealBlue.length))
            tealBlue.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tealBlue.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                tealBlue.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tealBlue.length))
            }
            context.saveGState()
            tealBlue.draw(at: CGPoint(x: 380, y: 95))
            context.restoreGState()
            
            /// Green
            let green = NSMutableAttributedString(string: "Green")
            green.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: green.length))
            green.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: green.length))
            green.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: green.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                green.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: green.length))
            }
            context.saveGState()
            green.draw(at: CGPoint(x: 290, y: 95))
            context.restoreGState()
            
            /// Yellow
            let yellow = NSMutableAttributedString(string: "Yellow")
            yellow.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: yellow.length))
            yellow.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: yellow.length))
            yellow.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: yellow.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                yellow.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: yellow.length))
            }
            context.saveGState()
            yellow.draw(at: CGPoint(x: 200, y: 95))
            context.restoreGState()
            
            /// Orange
            let orange = NSMutableAttributedString(string: "Orange")
            orange.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: orange.length))
            orange.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: orange.length))
            orange.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: orange.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                orange.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: orange.length))
            }
            context.saveGState()
            orange.draw(at: CGPoint(x: 110, y: 95))
            context.restoreGState()
            
            /// Red
            let red = NSMutableAttributedString(string: "Red")
            red.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: red.length))
            red.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: red.length))
            red.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: red.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                red.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: red.length))
            }
            context.saveGState()
            red.draw(at: CGPoint(x: 20, y: 95))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Swatches
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 117)
            
            /// Swatch - Black
            let swatchBlack = UIBezierPath()
            swatchBlack.move(to: CGPoint(x: 60, y: 50.96))
            swatchBlack.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchBlack.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchBlack.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchBlack.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchBlack.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchBlack.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchBlack.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchBlack.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchBlack.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchBlack.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchBlack.addLine(to: CGPoint(x: 13, y: 60))
            swatchBlack.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchBlack.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchBlack.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchBlack.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchBlack.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchBlack.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchBlack.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchBlack.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchBlack.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchBlack.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchBlack.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchBlack.addLine(to: CGPoint(x: 0, y: 47))
            swatchBlack.addLine(to: CGPoint(x: 0, y: 13))
            swatchBlack.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchBlack.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchBlack.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchBlack.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchBlack.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchBlack.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchBlack.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchBlack.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchBlack.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchBlack.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchBlack.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchBlack.addLine(to: CGPoint(x: 13, y: 0))
            swatchBlack.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchBlack.addLine(to: CGPoint(x: 47, y: 0))
            swatchBlack.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchBlack.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchBlack.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchBlack.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchBlack.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchBlack.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchBlack.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchBlack.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchBlack.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchBlack.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchBlack.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchBlack.addLine(to: CGPoint(x: 60, y: 13))
            swatchBlack.addLine(to: CGPoint(x: 60, y: 47))
            swatchBlack.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchBlack.close()
            swatchBlack.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 540, y: 167)
            swatchBlack.usesEvenOddFillRule = true
            UIColor.black.setFill()
            swatchBlack.fill()
            context.restoreGState()
            
            /// Swatch - Gray
            let swatchGray = UIBezierPath()
            swatchGray.move(to: CGPoint(x: 60, y: 50.96))
            swatchGray.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchGray.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchGray.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchGray.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchGray.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchGray.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchGray.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchGray.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchGray.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchGray.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchGray.addLine(to: CGPoint(x: 13, y: 60))
            swatchGray.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchGray.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchGray.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchGray.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchGray.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchGray.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchGray.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchGray.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchGray.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchGray.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchGray.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchGray.addLine(to: CGPoint(x: 0, y: 47))
            swatchGray.addLine(to: CGPoint(x: 0, y: 13))
            swatchGray.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchGray.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchGray.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchGray.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchGray.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchGray.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchGray.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchGray.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchGray.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchGray.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchGray.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchGray.addLine(to: CGPoint(x: 13, y: 0))
            swatchGray.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchGray.addLine(to: CGPoint(x: 47, y: 0))
            swatchGray.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchGray.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchGray.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchGray.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchGray.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchGray.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchGray.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchGray.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchGray.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchGray.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchGray.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchGray.addLine(to: CGPoint(x: 60, y: 13))
            swatchGray.addLine(to: CGPoint(x: 60, y: 47))
            swatchGray.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchGray.close()
            swatchGray.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 450, y: 167)
            swatchGray.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            swatchGray.fill()
            context.restoreGState()
            
            /// Swatch - Mid Gray
            let swatchMidGray = UIBezierPath()
            swatchMidGray.move(to: CGPoint(x: 60, y: 50.96))
            swatchMidGray.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchMidGray.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchMidGray.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchMidGray.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchMidGray.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchMidGray.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchMidGray.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchMidGray.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchMidGray.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchMidGray.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchMidGray.addLine(to: CGPoint(x: 13, y: 60))
            swatchMidGray.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchMidGray.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchMidGray.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchMidGray.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchMidGray.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchMidGray.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchMidGray.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchMidGray.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchMidGray.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchMidGray.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchMidGray.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchMidGray.addLine(to: CGPoint(x: 0, y: 47))
            swatchMidGray.addLine(to: CGPoint(x: 0, y: 13))
            swatchMidGray.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchMidGray.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchMidGray.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchMidGray.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchMidGray.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchMidGray.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchMidGray.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchMidGray.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchMidGray.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchMidGray.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchMidGray.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchMidGray.addLine(to: CGPoint(x: 13, y: 0))
            swatchMidGray.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchMidGray.addLine(to: CGPoint(x: 47, y: 0))
            swatchMidGray.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchMidGray.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchMidGray.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchMidGray.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchMidGray.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchMidGray.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchMidGray.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchMidGray.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchMidGray.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchMidGray.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchMidGray.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchMidGray.addLine(to: CGPoint(x: 60, y: 13))
            swatchMidGray.addLine(to: CGPoint(x: 60, y: 47))
            swatchMidGray.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchMidGray.close()
            swatchMidGray.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 360, y: 167)
            swatchMidGray.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            swatchMidGray.fill()
            context.restoreGState()
            
            /// Swatch - Light Gray 2
            let swatchLightGray2 = UIBezierPath()
            swatchLightGray2.move(to: CGPoint(x: 60, y: 50.96))
            swatchLightGray2.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchLightGray2.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchLightGray2.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchLightGray2.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchLightGray2.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchLightGray2.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchLightGray2.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchLightGray2.addLine(to: CGPoint(x: 13, y: 60))
            swatchLightGray2.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchLightGray2.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchLightGray2.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchLightGray2.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchLightGray2.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchLightGray2.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchLightGray2.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchLightGray2.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchLightGray2.addLine(to: CGPoint(x: 0, y: 47))
            swatchLightGray2.addLine(to: CGPoint(x: 0, y: 13))
            swatchLightGray2.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchLightGray2.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchLightGray2.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchLightGray2.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchLightGray2.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchLightGray2.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchLightGray2.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchLightGray2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchLightGray2.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchLightGray2.addLine(to: CGPoint(x: 13, y: 0))
            swatchLightGray2.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchLightGray2.addLine(to: CGPoint(x: 47, y: 0))
            swatchLightGray2.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchLightGray2.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchLightGray2.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchLightGray2.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchLightGray2.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchLightGray2.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchLightGray2.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchLightGray2.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchLightGray2.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchLightGray2.addLine(to: CGPoint(x: 60, y: 13))
            swatchLightGray2.addLine(to: CGPoint(x: 60, y: 47))
            swatchLightGray2.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchLightGray2.close()
            swatchLightGray2.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 270, y: 167)
            swatchLightGray2.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            swatchLightGray2.fill()
            context.restoreGState()
            
            /// Swatch - Light Gray
            let swatchLightGray = UIBezierPath()
            swatchLightGray.move(to: CGPoint(x: 60, y: 50.96))
            swatchLightGray.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchLightGray.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchLightGray.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchLightGray.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchLightGray.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchLightGray.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchLightGray.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchLightGray.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchLightGray.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchLightGray.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchLightGray.addLine(to: CGPoint(x: 13, y: 60))
            swatchLightGray.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchLightGray.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchLightGray.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchLightGray.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchLightGray.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchLightGray.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchLightGray.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchLightGray.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchLightGray.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchLightGray.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchLightGray.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchLightGray.addLine(to: CGPoint(x: 0, y: 47))
            swatchLightGray.addLine(to: CGPoint(x: 0, y: 13))
            swatchLightGray.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchLightGray.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchLightGray.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchLightGray.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchLightGray.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchLightGray.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchLightGray.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchLightGray.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchLightGray.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchLightGray.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchLightGray.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchLightGray.addLine(to: CGPoint(x: 13, y: 0))
            swatchLightGray.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchLightGray.addLine(to: CGPoint(x: 47, y: 0))
            swatchLightGray.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchLightGray.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchLightGray.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchLightGray.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchLightGray.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchLightGray.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchLightGray.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchLightGray.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchLightGray.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchLightGray.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchLightGray.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchLightGray.addLine(to: CGPoint(x: 60, y: 13))
            swatchLightGray.addLine(to: CGPoint(x: 60, y: 47))
            swatchLightGray.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchLightGray.close()
            swatchLightGray.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 180, y: 167)
            swatchLightGray.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setFill()
            swatchLightGray.fill()
            context.restoreGState()
            
            /// Swatch - Custom Gray
            let swatchCustomGray = UIBezierPath()
            swatchCustomGray.move(to: CGPoint(x: 60, y: 50.96))
            swatchCustomGray.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchCustomGray.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchCustomGray.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchCustomGray.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchCustomGray.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchCustomGray.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchCustomGray.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchCustomGray.addLine(to: CGPoint(x: 13, y: 60))
            swatchCustomGray.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchCustomGray.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchCustomGray.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchCustomGray.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchCustomGray.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchCustomGray.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchCustomGray.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchCustomGray.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchCustomGray.addLine(to: CGPoint(x: 0, y: 47))
            swatchCustomGray.addLine(to: CGPoint(x: 0, y: 13))
            swatchCustomGray.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchCustomGray.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchCustomGray.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchCustomGray.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchCustomGray.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchCustomGray.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchCustomGray.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchCustomGray.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchCustomGray.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchCustomGray.addLine(to: CGPoint(x: 13, y: 0))
            swatchCustomGray.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchCustomGray.addLine(to: CGPoint(x: 47, y: 0))
            swatchCustomGray.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchCustomGray.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchCustomGray.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchCustomGray.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchCustomGray.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchCustomGray.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchCustomGray.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchCustomGray.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchCustomGray.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchCustomGray.addLine(to: CGPoint(x: 60, y: 13))
            swatchCustomGray.addLine(to: CGPoint(x: 60, y: 47))
            swatchCustomGray.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchCustomGray.close()
            swatchCustomGray.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 90, y: 167)
            swatchCustomGray.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
            swatchCustomGray.fill()
            context.restoreGState()
            
            /// Swatch - White
            let swatchWhite = UIBezierPath()
            swatchWhite.move(to: CGPoint(x: 60, y: 50.96))
            swatchWhite.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchWhite.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchWhite.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchWhite.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchWhite.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchWhite.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchWhite.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchWhite.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchWhite.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchWhite.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchWhite.addLine(to: CGPoint(x: 13, y: 60))
            swatchWhite.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchWhite.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchWhite.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchWhite.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchWhite.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchWhite.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchWhite.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchWhite.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchWhite.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchWhite.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchWhite.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchWhite.addLine(to: CGPoint(x: 0, y: 47))
            swatchWhite.addLine(to: CGPoint(x: 0, y: 13))
            swatchWhite.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchWhite.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchWhite.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchWhite.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchWhite.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchWhite.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchWhite.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchWhite.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchWhite.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchWhite.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchWhite.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchWhite.addLine(to: CGPoint(x: 13, y: 0))
            swatchWhite.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchWhite.addLine(to: CGPoint(x: 47, y: 0))
            swatchWhite.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchWhite.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchWhite.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchWhite.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchWhite.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchWhite.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchWhite.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchWhite.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchWhite.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchWhite.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchWhite.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchWhite.addLine(to: CGPoint(x: 60, y: 13))
            swatchWhite.addLine(to: CGPoint(x: 60, y: 47))
            swatchWhite.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchWhite.close()
            swatchWhite.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 0, y: 167)
            swatchWhite.usesEvenOddFillRule = true
            UIColor.white.setFill()
            swatchWhite.fill()
            context.restoreGState()
            
            /// Swatch - Pink
            let swatchPink = UIBezierPath()
            swatchPink.move(to: CGPoint(x: 60, y: 50.96))
            swatchPink.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchPink.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchPink.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchPink.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchPink.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchPink.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchPink.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchPink.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchPink.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchPink.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchPink.addLine(to: CGPoint(x: 13, y: 60))
            swatchPink.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchPink.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchPink.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchPink.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchPink.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchPink.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchPink.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchPink.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchPink.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchPink.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchPink.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchPink.addLine(to: CGPoint(x: 0, y: 47))
            swatchPink.addLine(to: CGPoint(x: 0, y: 13))
            swatchPink.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchPink.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchPink.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchPink.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchPink.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchPink.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchPink.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchPink.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchPink.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchPink.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchPink.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchPink.addLine(to: CGPoint(x: 13, y: 0))
            swatchPink.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchPink.addLine(to: CGPoint(x: 47, y: 0))
            swatchPink.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchPink.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchPink.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchPink.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchPink.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchPink.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchPink.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchPink.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchPink.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchPink.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchPink.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchPink.addLine(to: CGPoint(x: 60, y: 13))
            swatchPink.addLine(to: CGPoint(x: 60, y: 47))
            swatchPink.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchPink.close()
            swatchPink.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 630, y: 0)
            swatchPink.usesEvenOddFillRule = true
            UIColor(hue: 0.968, saturation: 0.824, brightness: 1, alpha: 1).setFill()
            swatchPink.fill()
            context.restoreGState()
            
            /// Swatch - Purple
            let swatchPurple = UIBezierPath()
            swatchPurple.move(to: CGPoint(x: 60, y: 50.96))
            swatchPurple.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchPurple.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchPurple.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchPurple.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchPurple.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchPurple.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchPurple.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchPurple.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchPurple.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchPurple.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchPurple.addLine(to: CGPoint(x: 13, y: 60))
            swatchPurple.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchPurple.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchPurple.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchPurple.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchPurple.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchPurple.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchPurple.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchPurple.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchPurple.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchPurple.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchPurple.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchPurple.addLine(to: CGPoint(x: 0, y: 47))
            swatchPurple.addLine(to: CGPoint(x: 0, y: 13))
            swatchPurple.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchPurple.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchPurple.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchPurple.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchPurple.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchPurple.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchPurple.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchPurple.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchPurple.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchPurple.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchPurple.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchPurple.addLine(to: CGPoint(x: 13, y: 0))
            swatchPurple.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchPurple.addLine(to: CGPoint(x: 47, y: 0))
            swatchPurple.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchPurple.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchPurple.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchPurple.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchPurple.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchPurple.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchPurple.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchPurple.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchPurple.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchPurple.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchPurple.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchPurple.addLine(to: CGPoint(x: 60, y: 13))
            swatchPurple.addLine(to: CGPoint(x: 60, y: 47))
            swatchPurple.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchPurple.close()
            swatchPurple.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 540, y: 0)
            swatchPurple.usesEvenOddFillRule = true
            UIColor(hue: 0.669, saturation: 0.598, brightness: 0.839, alpha: 1).setFill()
            swatchPurple.fill()
            context.restoreGState()
            
            /// Swatch - Blue
            let swatchBlue = UIBezierPath()
            swatchBlue.move(to: CGPoint(x: 60, y: 50.96))
            swatchBlue.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchBlue.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchBlue.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchBlue.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchBlue.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchBlue.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchBlue.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchBlue.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchBlue.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchBlue.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchBlue.addLine(to: CGPoint(x: 13, y: 60))
            swatchBlue.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchBlue.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchBlue.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchBlue.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchBlue.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchBlue.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchBlue.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchBlue.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchBlue.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchBlue.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchBlue.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchBlue.addLine(to: CGPoint(x: 0, y: 47))
            swatchBlue.addLine(to: CGPoint(x: 0, y: 13))
            swatchBlue.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchBlue.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchBlue.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchBlue.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchBlue.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchBlue.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchBlue.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchBlue.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchBlue.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchBlue.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchBlue.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchBlue.addLine(to: CGPoint(x: 13, y: 0))
            swatchBlue.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchBlue.addLine(to: CGPoint(x: 47, y: 0))
            swatchBlue.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchBlue.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchBlue.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchBlue.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchBlue.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchBlue.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchBlue.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchBlue.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchBlue.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchBlue.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchBlue.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchBlue.addLine(to: CGPoint(x: 60, y: 13))
            swatchBlue.addLine(to: CGPoint(x: 60, y: 47))
            swatchBlue.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchBlue.close()
            swatchBlue.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 450, y: 0)
            swatchBlue.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            swatchBlue.fill()
            context.restoreGState()
            
            /// Swatch - Teal Blue
            let swatchTealBlue = UIBezierPath()
            swatchTealBlue.move(to: CGPoint(x: 60, y: 50.96))
            swatchTealBlue.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchTealBlue.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchTealBlue.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchTealBlue.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchTealBlue.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchTealBlue.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchTealBlue.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchTealBlue.addLine(to: CGPoint(x: 13, y: 60))
            swatchTealBlue.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchTealBlue.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchTealBlue.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchTealBlue.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchTealBlue.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchTealBlue.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchTealBlue.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchTealBlue.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchTealBlue.addLine(to: CGPoint(x: 0, y: 47))
            swatchTealBlue.addLine(to: CGPoint(x: 0, y: 13))
            swatchTealBlue.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchTealBlue.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchTealBlue.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchTealBlue.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchTealBlue.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchTealBlue.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchTealBlue.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchTealBlue.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchTealBlue.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchTealBlue.addLine(to: CGPoint(x: 13, y: 0))
            swatchTealBlue.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchTealBlue.addLine(to: CGPoint(x: 47, y: 0))
            swatchTealBlue.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchTealBlue.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchTealBlue.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchTealBlue.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchTealBlue.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchTealBlue.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchTealBlue.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchTealBlue.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchTealBlue.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchTealBlue.addLine(to: CGPoint(x: 60, y: 13))
            swatchTealBlue.addLine(to: CGPoint(x: 60, y: 47))
            swatchTealBlue.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchTealBlue.close()
            swatchTealBlue.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 360, y: 0)
            swatchTealBlue.usesEvenOddFillRule = true
            UIColor(hue: 0.552, saturation: 0.64, brightness: 0.98, alpha: 1).setFill()
            swatchTealBlue.fill()
            context.restoreGState()
            
            /// Swatch - Green
            let swatchGreen = UIBezierPath()
            swatchGreen.move(to: CGPoint(x: 60, y: 50.96))
            swatchGreen.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchGreen.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchGreen.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchGreen.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchGreen.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchGreen.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchGreen.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchGreen.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchGreen.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchGreen.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchGreen.addLine(to: CGPoint(x: 13, y: 60))
            swatchGreen.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchGreen.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchGreen.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchGreen.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchGreen.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchGreen.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchGreen.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchGreen.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchGreen.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchGreen.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchGreen.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchGreen.addLine(to: CGPoint(x: 0, y: 47))
            swatchGreen.addLine(to: CGPoint(x: 0, y: 13))
            swatchGreen.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchGreen.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchGreen.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchGreen.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchGreen.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchGreen.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchGreen.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchGreen.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchGreen.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchGreen.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchGreen.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchGreen.addLine(to: CGPoint(x: 13, y: 0))
            swatchGreen.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchGreen.addLine(to: CGPoint(x: 47, y: 0))
            swatchGreen.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchGreen.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchGreen.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchGreen.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchGreen.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchGreen.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchGreen.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchGreen.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchGreen.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchGreen.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchGreen.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchGreen.addLine(to: CGPoint(x: 60, y: 13))
            swatchGreen.addLine(to: CGPoint(x: 60, y: 47))
            swatchGreen.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchGreen.close()
            swatchGreen.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 270, y: 0)
            swatchGreen.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            swatchGreen.fill()
            context.restoreGState()
            
            /// Swatch - Yellow
            let swatchYellow = UIBezierPath()
            swatchYellow.move(to: CGPoint(x: 60, y: 50.96))
            swatchYellow.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchYellow.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchYellow.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchYellow.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchYellow.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchYellow.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchYellow.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchYellow.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchYellow.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchYellow.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchYellow.addLine(to: CGPoint(x: 13, y: 60))
            swatchYellow.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchYellow.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchYellow.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchYellow.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchYellow.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchYellow.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchYellow.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchYellow.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchYellow.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchYellow.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchYellow.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchYellow.addLine(to: CGPoint(x: 0, y: 47))
            swatchYellow.addLine(to: CGPoint(x: 0, y: 13))
            swatchYellow.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchYellow.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchYellow.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchYellow.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchYellow.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchYellow.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchYellow.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchYellow.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchYellow.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchYellow.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchYellow.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchYellow.addLine(to: CGPoint(x: 13, y: 0))
            swatchYellow.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchYellow.addLine(to: CGPoint(x: 47, y: 0))
            swatchYellow.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchYellow.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchYellow.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchYellow.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchYellow.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchYellow.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchYellow.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchYellow.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchYellow.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchYellow.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchYellow.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchYellow.addLine(to: CGPoint(x: 60, y: 13))
            swatchYellow.addLine(to: CGPoint(x: 60, y: 47))
            swatchYellow.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchYellow.close()
            swatchYellow.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 180, y: 0)
            swatchYellow.usesEvenOddFillRule = true
            UIColor(hue: 0.133, saturation: 1, brightness: 1, alpha: 1).setFill()
            swatchYellow.fill()
            context.restoreGState()
            
            /// Swatch - Orange
            let swatchOrange = UIBezierPath()
            swatchOrange.move(to: CGPoint(x: 60, y: 50.96))
            swatchOrange.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchOrange.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchOrange.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchOrange.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchOrange.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchOrange.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchOrange.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchOrange.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchOrange.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchOrange.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchOrange.addLine(to: CGPoint(x: 13, y: 60))
            swatchOrange.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchOrange.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchOrange.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchOrange.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchOrange.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchOrange.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchOrange.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchOrange.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchOrange.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchOrange.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchOrange.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchOrange.addLine(to: CGPoint(x: 0, y: 47))
            swatchOrange.addLine(to: CGPoint(x: 0, y: 13))
            swatchOrange.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchOrange.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchOrange.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchOrange.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchOrange.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchOrange.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchOrange.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchOrange.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchOrange.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchOrange.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchOrange.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchOrange.addLine(to: CGPoint(x: 13, y: 0))
            swatchOrange.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchOrange.addLine(to: CGPoint(x: 47, y: 0))
            swatchOrange.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchOrange.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchOrange.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchOrange.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchOrange.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchOrange.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchOrange.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchOrange.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchOrange.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchOrange.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchOrange.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchOrange.addLine(to: CGPoint(x: 60, y: 13))
            swatchOrange.addLine(to: CGPoint(x: 60, y: 47))
            swatchOrange.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchOrange.close()
            swatchOrange.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            context.translateBy(x: 90, y: 0)
            swatchOrange.usesEvenOddFillRule = true
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            swatchOrange.fill()
            context.restoreGState()
            
            /// Swatch - Red
            let swatchRed = UIBezierPath()
            swatchRed.move(to: CGPoint(x: 60, y: 50.96))
            swatchRed.addCurve(to: CGPoint(x: 60, y: 52), controlPoint1: CGPoint(x: 60, y: 51.31), controlPoint2: CGPoint(x: 60, y: 51.65))
            swatchRed.addCurve(to: CGPoint(x: 59.99, y: 52.87), controlPoint1: CGPoint(x: 60, y: 52.29), controlPoint2: CGPoint(x: 59.99, y: 52.58))
            swatchRed.addCurve(to: CGPoint(x: 59.82, y: 54.77), controlPoint1: CGPoint(x: 59.97, y: 53.5), controlPoint2: CGPoint(x: 59.93, y: 54.14))
            swatchRed.addCurve(to: CGPoint(x: 59.22, y: 56.57), controlPoint1: CGPoint(x: 59.7, y: 55.4), controlPoint2: CGPoint(x: 59.52, y: 55.99))
            swatchRed.addCurve(to: CGPoint(x: 58.11, y: 58.11), controlPoint1: CGPoint(x: 58.94, y: 57.14), controlPoint2: CGPoint(x: 58.56, y: 57.66))
            swatchRed.addCurve(to: CGPoint(x: 56.57, y: 59.22), controlPoint1: CGPoint(x: 57.66, y: 58.56), controlPoint2: CGPoint(x: 57.14, y: 58.94))
            swatchRed.addCurve(to: CGPoint(x: 54.77, y: 59.82), controlPoint1: CGPoint(x: 55.99, y: 59.52), controlPoint2: CGPoint(x: 55.4, y: 59.7))
            swatchRed.addCurve(to: CGPoint(x: 52.87, y: 59.99), controlPoint1: CGPoint(x: 54.14, y: 59.93), controlPoint2: CGPoint(x: 53.5, y: 59.97))
            swatchRed.addCurve(to: CGPoint(x: 52, y: 60), controlPoint1: CGPoint(x: 52.58, y: 59.99), controlPoint2: CGPoint(x: 52.29, y: 60))
            swatchRed.addCurve(to: CGPoint(x: 50.96, y: 60), controlPoint1: CGPoint(x: 51.65, y: 60), controlPoint2: CGPoint(x: 51.31, y: 60))
            swatchRed.addLine(to: CGPoint(x: 13, y: 60))
            swatchRed.addLine(to: CGPoint(x: 9.04, y: 60))
            swatchRed.addCurve(to: CGPoint(x: 8, y: 60), controlPoint1: CGPoint(x: 8.69, y: 60), controlPoint2: CGPoint(x: 8.35, y: 60))
            swatchRed.addCurve(to: CGPoint(x: 7.13, y: 59.99), controlPoint1: CGPoint(x: 7.71, y: 60), controlPoint2: CGPoint(x: 7.42, y: 59.99))
            swatchRed.addCurve(to: CGPoint(x: 5.23, y: 59.82), controlPoint1: CGPoint(x: 6.5, y: 59.97), controlPoint2: CGPoint(x: 5.86, y: 59.93))
            swatchRed.addCurve(to: CGPoint(x: 3.43, y: 59.22), controlPoint1: CGPoint(x: 4.6, y: 59.7), controlPoint2: CGPoint(x: 4.01, y: 59.52))
            swatchRed.addCurve(to: CGPoint(x: 1.89, y: 58.11), controlPoint1: CGPoint(x: 2.86, y: 58.94), controlPoint2: CGPoint(x: 2.34, y: 58.56))
            swatchRed.addCurve(to: CGPoint(x: 0.78, y: 56.57), controlPoint1: CGPoint(x: 1.44, y: 57.66), controlPoint2: CGPoint(x: 1.07, y: 57.14))
            swatchRed.addCurve(to: CGPoint(x: 0.18, y: 54.77), controlPoint1: CGPoint(x: 0.48, y: 55.99), controlPoint2: CGPoint(x: 0.3, y: 55.4))
            swatchRed.addCurve(to: CGPoint(x: 0.02, y: 52.87), controlPoint1: CGPoint(x: 0.07, y: 54.14), controlPoint2: CGPoint(x: 0.03, y: 53.5))
            swatchRed.addCurve(to: CGPoint(x: 0, y: 52), controlPoint1: CGPoint(x: 0.01, y: 52.58), controlPoint2: CGPoint(x: 0, y: 52.29))
            swatchRed.addCurve(to: CGPoint(x: 0, y: 50.96), controlPoint1: CGPoint(x: 0, y: 51.65), controlPoint2: CGPoint(x: 0, y: 51.31))
            swatchRed.addLine(to: CGPoint(x: 0, y: 47))
            swatchRed.addLine(to: CGPoint(x: 0, y: 13))
            swatchRed.addLine(to: CGPoint(x: 0, y: 9.04))
            swatchRed.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0, y: 8.69), controlPoint2: CGPoint(x: 0, y: 8.35))
            swatchRed.addCurve(to: CGPoint(x: 0.02, y: 7.13), controlPoint1: CGPoint(x: 0, y: 7.71), controlPoint2: CGPoint(x: 0.01, y: 7.42))
            swatchRed.addCurve(to: CGPoint(x: 0.18, y: 5.23), controlPoint1: CGPoint(x: 0.03, y: 6.5), controlPoint2: CGPoint(x: 0.07, y: 5.86))
            swatchRed.addCurve(to: CGPoint(x: 0.78, y: 3.43), controlPoint1: CGPoint(x: 0.3, y: 4.6), controlPoint2: CGPoint(x: 0.48, y: 4.01))
            swatchRed.addCurve(to: CGPoint(x: 1.89, y: 1.89), controlPoint1: CGPoint(x: 1.07, y: 2.86), controlPoint2: CGPoint(x: 1.44, y: 2.34))
            swatchRed.addCurve(to: CGPoint(x: 3.43, y: 0.78), controlPoint1: CGPoint(x: 2.34, y: 1.44), controlPoint2: CGPoint(x: 2.86, y: 1.06))
            swatchRed.addCurve(to: CGPoint(x: 5.23, y: 0.18), controlPoint1: CGPoint(x: 4.01, y: 0.48), controlPoint2: CGPoint(x: 4.6, y: 0.3))
            swatchRed.addCurve(to: CGPoint(x: 7.13, y: 0.02), controlPoint1: CGPoint(x: 5.86, y: 0.07), controlPoint2: CGPoint(x: 6.5, y: 0.03))
            swatchRed.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 7.42, y: 0.01), controlPoint2: CGPoint(x: 7.71, y: 0))
            swatchRed.addCurve(to: CGPoint(x: 9.04, y: 0), controlPoint1: CGPoint(x: 8.35, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0))
            swatchRed.addLine(to: CGPoint(x: 13, y: 0))
            swatchRed.addLine(to: CGPoint(x: 50.68, y: 0))
            swatchRed.addLine(to: CGPoint(x: 47, y: 0))
            swatchRed.addLine(to: CGPoint(x: 50.96, y: 0))
            swatchRed.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 51.31, y: 0), controlPoint2: CGPoint(x: 51.65, y: 0))
            swatchRed.addCurve(to: CGPoint(x: 52.87, y: 0.02), controlPoint1: CGPoint(x: 52.29, y: 0), controlPoint2: CGPoint(x: 52.58, y: 0.01))
            swatchRed.addCurve(to: CGPoint(x: 54.77, y: 0.18), controlPoint1: CGPoint(x: 53.5, y: 0.03), controlPoint2: CGPoint(x: 54.14, y: 0.07))
            swatchRed.addCurve(to: CGPoint(x: 56.57, y: 0.78), controlPoint1: CGPoint(x: 55.4, y: 0.3), controlPoint2: CGPoint(x: 55.99, y: 0.48))
            swatchRed.addCurve(to: CGPoint(x: 58.11, y: 1.89), controlPoint1: CGPoint(x: 57.14, y: 1.06), controlPoint2: CGPoint(x: 57.66, y: 1.44))
            swatchRed.addCurve(to: CGPoint(x: 59.22, y: 3.43), controlPoint1: CGPoint(x: 58.56, y: 2.34), controlPoint2: CGPoint(x: 58.94, y: 2.86))
            swatchRed.addCurve(to: CGPoint(x: 59.82, y: 5.23), controlPoint1: CGPoint(x: 59.52, y: 4.01), controlPoint2: CGPoint(x: 59.7, y: 4.6))
            swatchRed.addCurve(to: CGPoint(x: 59.99, y: 7.13), controlPoint1: CGPoint(x: 59.93, y: 5.86), controlPoint2: CGPoint(x: 59.97, y: 6.5))
            swatchRed.addCurve(to: CGPoint(x: 60, y: 8), controlPoint1: CGPoint(x: 59.99, y: 7.42), controlPoint2: CGPoint(x: 60, y: 7.71))
            swatchRed.addCurve(to: CGPoint(x: 60, y: 9.04), controlPoint1: CGPoint(x: 60, y: 8.35), controlPoint2: CGPoint(x: 60, y: 8.69))
            swatchRed.addLine(to: CGPoint(x: 60, y: 13))
            swatchRed.addLine(to: CGPoint(x: 60, y: 47))
            swatchRed.addLine(to: CGPoint(x: 60, y: 50.96))
            swatchRed.close()
            swatchRed.move(to: CGPoint(x: 60, y: 50.96))
            context.saveGState()
            swatchRed.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            swatchRed.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
    }
    
    /// Guide - Fonts
    
    class func drawGuideFonts() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Labels + Background
        do {
            context.saveGState()
            context.translateBy(x: 0, y: -100)
            
            /// _Template Resources / Header and Footer
            // Warning: New symbols are not supported.
            
            /// _Template Resources / Header and Footer
            // Warning: New symbols are not supported.
            
            /// R41, 48L R34, 41L R3
            let r4148LR3441LR3 = NSMutableAttributedString(string: "R41, 48L\nR34, 41L\nR31, 38L\nSB28, 34L\nR28, 34L\nR26, 32L\nR25, 31L\nR23, 28L\nR22, 27L\nR20, 24L")
            r4148LR3441LR3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r4148LR3441LR3.length))
            r4148LR3441LR3.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r4148LR3441LR3.length))
            r4148LR3441LR3.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r4148LR3441LR3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r4148LR3441LR3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r4148LR3441LR3.length))
            }
            context.saveGState()
            r4148LR3441LR3.draw(in: CGRect(x: 1020, y: 141, width: 55, height: 880))
            context.restoreGState()
            
            /// R49, 58L R40, 48L R3
            let r4958LR4048LR3 = NSMutableAttributedString(string: "R49, 58L\nR40, 48L\nR37, 44L\nSB33, 40L\nR33, 40L\nR32, 39L\nR30, 36L\nR27, 33L\nR26, 32L\nR24, 29L")
            r4958LR4048LR3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r4958LR4048LR3.length))
            r4958LR4048LR3.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r4958LR4048LR3.length))
            r4958LR4048LR3.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r4958LR4048LR3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r4958LR4048LR3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r4958LR4048LR3.length))
            }
            context.saveGState()
            r4958LR4048LR3.draw(in: CGRect(x: 1170, y: 141, width: 55, height: 880))
            context.restoreGState()
            
            /// R59, 68L R48, 58L R4
            let r5968LR4858LR4 = NSMutableAttributedString(string: "R59, 68L\nR48, 58L\nR45, 54L\nSB40, 48L\nR40, 48L\nR38, 46L\nR36, 42L\nR33, 40L\nR32, 39L\nR29, 35L")
            r5968LR4858LR4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r5968LR4858LR4.length))
            r5968LR4858LR4.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r5968LR4858LR4.length))
            r5968LR4858LR4.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r5968LR4858LR4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r5968LR4858LR4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r5968LR4858LR4.length))
            }
            context.saveGState()
            r5968LR4858LR4.draw(in: CGRect(x: 1330, y: 141, width: 56, height: 880))
            context.restoreGState()
            
            /// R69, 80L R57, 66L R5
            let r6980LR5766LR5 = NSMutableAttributedString(string: "R69, 80L\nR57, 66L\nR53, 62L\nSB47, 56L\nR47, 56L,\nR44, 54L\nR42, 50L\nR38, 46L\nR37, 44L\nR34, 41L")
            r6980LR5766LR5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r6980LR5766LR5.length))
            r6980LR5766LR5.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r6980LR5766LR5.length))
            r6980LR5766LR5.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r6980LR5766LR5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r6980LR5766LR5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r6980LR5766LR5.length))
            }
            context.saveGState()
            r6980LR5766LR5.draw(in: CGRect(x: 1530, y: 141, width: 54, height: 880))
            context.restoreGState()
            
            /// R79, 90L R65, 76L R6
            let r7990LR6576LR6 = NSMutableAttributedString(string: "R79, 90L\nR65, 76L\nR60, 70L\nSB53, 62L\nR53, 62L\nR51, 60L\nR49, 58L\nR44, 54L\nR43, 50L\nR40, 48L")
            r7990LR6576LR6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r7990LR6576LR6.length))
            r7990LR6576LR6.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r7990LR6576LR6.length))
            r7990LR6576LR6.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: r7990LR6576LR6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r7990LR6576LR6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r7990LR6576LR6.length))
            }
            context.saveGState()
            r7990LR6576LR6.draw(in: CGRect(x: 1750, y: 140, width: 55, height: 880))
            context.restoreGState()
            
            /// AX1
            let aX1 = NSMutableAttributedString(string: "AX1")
            aX1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: aX1.length))
            aX1.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: aX1.length))
            aX1.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: aX1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                aX1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aX1.length))
            }
            context.saveGState()
            aX1.draw(at: CGPoint(x: 1020, y: 96))
            context.restoreGState()
            
            /// AX2
            let aX2 = NSMutableAttributedString(string: "AX2")
            aX2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: aX2.length))
            aX2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: aX2.length))
            aX2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: aX2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                aX2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aX2.length))
            }
            context.saveGState()
            aX2.draw(at: CGPoint(x: 1170, y: 96))
            context.restoreGState()
            
            /// AX3
            let aX3 = NSMutableAttributedString(string: "AX3")
            aX3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: aX3.length))
            aX3.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: aX3.length))
            aX3.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: aX3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                aX3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aX3.length))
            }
            context.saveGState()
            aX3.draw(at: CGPoint(x: 1330, y: 96))
            context.restoreGState()
            
            /// AX4
            let aX4 = NSMutableAttributedString(string: "AX4")
            aX4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: aX4.length))
            aX4.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: aX4.length))
            aX4.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: aX4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                aX4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aX4.length))
            }
            context.saveGState()
            aX4.draw(at: CGPoint(x: 1530, y: 96))
            context.restoreGState()
            
            /// AX5
            let aX5 = NSMutableAttributedString(string: "AX5")
            aX5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: aX5.length))
            aX5.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: aX5.length))
            aX5.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: aX5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                aX5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aX5.length))
            }
            context.saveGState()
            aX5.draw(at: CGPoint(x: 1750, y: 96))
            context.restoreGState()
            
            /// R25, 31L R19, 23L R1
            let r2531LR1923LR1 = NSMutableAttributedString(string: "R25, 31L\nR19, 23L\nR17, 21L\nSB14, 19L\nR14, 19L\nR13, 18L\nR12, 16L\nR12, 16L\nR11, 13L\nR11, 13L")
            r2531LR1923LR1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r2531LR1923LR1.length))
            r2531LR1923LR1.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r2531LR1923LR1.length))
            r2531LR1923LR1.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r2531LR1923LR1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r2531LR1923LR1.length))
            }
            context.saveGState()
            r2531LR1923LR1.draw(at: CGPoint(x: 20, y: 141))
            context.restoreGState()
            
            /// R26, 32L R20, 24L R1
            let r2632LR2024LR1 = NSMutableAttributedString(string: "R26, 32L\nR20, 24L\nR18, 22L\nSB15, 20L\nR15, 20L\nR14, 19L\nR13, 18L\nR12, 16L\nR11, 13L\nR11, 13L")
            r2632LR2024LR1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r2632LR2024LR1.length))
            r2632LR2024LR1.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r2632LR2024LR1.length))
            r2632LR2024LR1.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r2632LR2024LR1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r2632LR2024LR1.length))
            }
            context.saveGState()
            r2632LR2024LR1.draw(at: CGPoint(x: 160, y: 141))
            context.restoreGState()
            
            /// R27, 33L R21, 28L R1
            let r2733LR2128LR1 = NSMutableAttributedString(string: "R27, 33L\nR21, 28L\nR19, 23L\nSB16, 21L\nR16, 21L\nR15, 20L\nR14, 19L\nR12, 16L\nR11, 13L\nR11, 13L")
            r2733LR2128LR1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r2733LR2128LR1.length))
            r2733LR2128LR1.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r2733LR2128LR1.length))
            r2733LR2128LR1.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r2733LR2128LR1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r2733LR2128LR1.length))
            }
            context.saveGState()
            r2733LR2128LR1.draw(at: CGPoint(x: 300, y: 141))
            context.restoreGState()
            
            /// R28, 34L, 32B R22, 2
            let r2834L32BR222 = NSMutableAttributedString(string: "R28, 34L, 32B\nR22, 28L, 28B\nR20, 24L, 28B\nSB17, 22L, 20B\nR17, 22L,  20B\nR16, 21L, 20B\nR15, 20L, 20B\nR13, 18L, 20B\nR12, 16L, 20B\nR11, 13L, 20B")
            r2834L32BR222.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r2834L32BR222.length))
            r2834L32BR222.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r2834L32BR222.length))
            r2834L32BR222.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 140))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r2834L32BR222.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r2834L32BR222.length))
            }
            context.saveGState()
            r2834L32BR222.draw(at: CGPoint(x: 440, y: 141))
            context.restoreGState()
            
            /// R30, 36L R24, 30L R2
            let r3036LR2430LR2 = NSMutableAttributedString(string: "R30, 36L\nR24, 30L\nR22, 27L\nSB19, 24L\nR19, 24L\nR18, 23L\nR17, 22L\nR15, 20L\nR14, 19L\nR13, 18L")
            r3036LR2430LR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r3036LR2430LR2.length))
            r3036LR2430LR2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r3036LR2430LR2.length))
            r3036LR2430LR2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r3036LR2430LR2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r3036LR2430LR2.length))
            }
            context.saveGState()
            r3036LR2430LR2.draw(at: CGPoint(x: 580, y: 141))
            context.restoreGState()
            
            /// R32, 39L R26, 32L R2
            let r3239LR2632LR2 = NSMutableAttributedString(string: "R32, 39L\nR26, 32L\nR24, 29L\nSB21, 26L\nR21, 26L\nR20, 24L\nR19, 24L\nR17, 22L\nR16, 21L\nR15, 20L")
            r3239LR2632LR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r3239LR2632LR2.length))
            r3239LR2632LR2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r3239LR2632LR2.length))
            r3239LR2632LR2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r3239LR2632LR2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r3239LR2632LR2.length))
            }
            context.saveGState()
            r3239LR2632LR2.draw(at: CGPoint(x: 720, y: 141))
            context.restoreGState()
            
            /// R34, 41L R28, 34L R2
            let r3441LR2834LR2 = NSMutableAttributedString(string: "R34, 41L\nR28, 34L\nR26, 32L\nSB23, 28L\nR23, 28L\nR22, 27L\nR21, 26L\nR19, 24L\nR18, 23L\nR17, 22L")
            r3441LR2834LR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: r3441LR2834LR2.length))
            r3441LR2834LR2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: r3441LR2834LR2.length))
            r3441LR2834LR2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: 89))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                r3441LR2834LR2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: r3441LR2834LR2.length))
            }
            context.saveGState()
            r3441LR2834LR2.draw(at: CGPoint(x: 860, y: 140))
            context.restoreGState()
            
            /// xSmall
            let xSmall = NSMutableAttributedString(string: "xSmall")
            xSmall.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: xSmall.length))
            xSmall.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: xSmall.length))
            xSmall.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: xSmall.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                xSmall.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: xSmall.length))
            }
            context.saveGState()
            xSmall.draw(at: CGPoint(x: 20, y: 96))
            context.restoreGState()
            
            /// Small
            let small = NSMutableAttributedString(string: "Small")
            small.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: small.length))
            small.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: small.length))
            small.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: small.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                small.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: small.length))
            }
            context.saveGState()
            small.draw(at: CGPoint(x: 160, y: 96))
            context.restoreGState()
            
            /// Medium
            let medium = NSMutableAttributedString(string: "Medium")
            medium.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: medium.length))
            medium.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: medium.length))
            medium.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: medium.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                medium.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: medium.length))
            }
            context.saveGState()
            medium.draw(at: CGPoint(x: 300, y: 96))
            context.restoreGState()
            
            /// Large (Default)
            let largeDefault = NSMutableAttributedString(string: "Large (Default)")
            largeDefault.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: largeDefault.length))
            largeDefault.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: largeDefault.length))
            largeDefault.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: largeDefault.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                largeDefault.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: largeDefault.length))
            }
            context.saveGState()
            largeDefault.draw(at: CGPoint(x: 440, y: 96))
            context.restoreGState()
            
            /// xLarge
            let xLarge = NSMutableAttributedString(string: "xLarge")
            xLarge.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: xLarge.length))
            xLarge.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: xLarge.length))
            xLarge.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: xLarge.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                xLarge.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: xLarge.length))
            }
            context.saveGState()
            xLarge.draw(at: CGPoint(x: 580, y: 96))
            context.restoreGState()
            
            /// xxLarge
            let xxLarge = NSMutableAttributedString(string: "xxLarge")
            xxLarge.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: xxLarge.length))
            xxLarge.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: xxLarge.length))
            xxLarge.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: xxLarge.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                xxLarge.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: xxLarge.length))
            }
            context.saveGState()
            xxLarge.draw(at: CGPoint(x: 720, y: 96))
            context.restoreGState()
            
            /// xxxLarge
            let xxxLarge = NSMutableAttributedString(string: "xxxLarge")
            xxxLarge.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: xxxLarge.length))
            xxxLarge.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: xxxLarge.length))
            xxxLarge.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: xxxLarge.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                xxxLarge.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: xxxLarge.length))
            }
            context.saveGState()
            xxxLarge.draw(at: CGPoint(x: 860, y: 96))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// AX1
        do {
            context.saveGState()
            context.translateBy(x: 1019, y: 30)
            
            /// Caption 2
            let caption2 = NSMutableAttributedString(string: "Caption 2")
            caption2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: caption2.length))
            caption2.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                caption2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption2.length))
            }
            context.saveGState()
            caption2.draw(at: CGPoint(x: 1, y: 740))
            context.restoreGState()
            
            /// Caption 1
            let caption1 = NSMutableAttributedString(string: "Caption 1")
            caption1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: caption1.length))
            caption1.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 27
                paragraphStyle.minimumLineHeight = 27
                caption1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption1.length))
            }
            context.saveGState()
            caption1.draw(at: CGPoint(x: 1, y: 658))
            context.restoreGState()
            
            /// Footnote
            let footnote = NSMutableAttributedString(string: "Footnote")
            footnote.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: footnote.length))
            footnote.addAttribute(NSKernAttributeName, value: 0.4, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 28
                paragraphStyle.minimumLineHeight = 28
                footnote.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote.length))
            }
            context.saveGState()
            footnote.draw(at: CGPoint(x: 0, y: 577))
            context.restoreGState()
            
            /// Subhead
            let subhead = NSMutableAttributedString(string: "Subhead")
            subhead.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: subhead.length))
            subhead.addAttribute(NSKernAttributeName, value: 0.55, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 31
                paragraphStyle.minimumLineHeight = 31
                subhead.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead.length))
            }
            context.saveGState()
            subhead.draw(at: CGPoint(x: 0, y: 495))
            context.restoreGState()
            
            /// Callout
            let callout = NSMutableAttributedString(string: "Callout")
            callout.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 26)!, range: NSRange(location: 0, length: callout.length))
            callout.addAttribute(NSKernAttributeName, value: 0.46, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 32
                paragraphStyle.minimumLineHeight = 32
                callout.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout.length))
            }
            context.saveGState()
            callout.draw(at: CGPoint(x: 0, y: 414))
            context.restoreGState()
            
            /// Body
            let body = NSMutableAttributedString(string: "Body")
            body.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 28)!, range: NSRange(location: 0, length: body.length))
            body.addAttribute(NSKernAttributeName, value: 0.42, range: NSRange(location: 0, length: 3))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                body.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body.length))
            }
            context.saveGState()
            body.draw(at: CGPoint(x: 0, y: 332))
            context.restoreGState()
            
            /// Headline
            let headline = NSMutableAttributedString(string: "Headline")
            headline.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 28)!, range: NSRange(location: 0, length: headline.length))
            headline.addAttribute(NSKernAttributeName, value: 0.34, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                headline.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline.length))
            }
            context.saveGState()
            headline.draw(at: CGPoint(x: 0, y: 252))
            context.restoreGState()
            
            /// Title 3
            let title3 = NSMutableAttributedString(string: "Title 3")
            title3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 31)!, range: NSRange(location: 0, length: title3.length))
            title3.addAttribute(NSKernAttributeName, value: 0.49, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 38
                paragraphStyle.minimumLineHeight = 38
                title3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title3.length))
            }
            context.saveGState()
            title3.draw(at: CGPoint(x: 0, y: 169))
            context.restoreGState()
            
            /// Title 2
            let title2 = NSMutableAttributedString(string: "Title 2")
            title2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 34)!, range: NSRange(location: 0, length: title2.length))
            title2.addAttribute(NSKernAttributeName, value: 0.31, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                title2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title2.length))
            }
            context.saveGState()
            title2.draw(at: CGPoint(x: 1, y: 86))
            context.restoreGState()
            
            /// Title 1
            let title1 = NSMutableAttributedString(string: "Title 1")
            title1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 41)!, range: NSRange(location: 0, length: title1.length))
            title1.addAttribute(NSKernAttributeName, value: 0.45, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 48
                paragraphStyle.minimumLineHeight = 48
                title1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title1.length))
            }
            context.saveGState()
            title1.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// AX2
        do {
            context.saveGState()
            context.translateBy(x: 1164, y: 23)
            
            /// Caption 2
            let caption3 = NSMutableAttributedString(string: "Caption 2")
            caption3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 24)!, range: NSRange(location: 0, length: caption3.length))
            caption3.addAttribute(NSKernAttributeName, value: 0.47, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 29
                paragraphStyle.minimumLineHeight = 29
                caption3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption3.length))
            }
            context.saveGState()
            caption3.draw(at: CGPoint(x: 0, y: 743))
            context.restoreGState()
            
            /// Caption 1
            let caption4 = NSMutableAttributedString(string: "Caption 1")
            caption4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 26)!, range: NSRange(location: 0, length: caption4.length))
            caption4.addAttribute(NSKernAttributeName, value: 0.5, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 32
                paragraphStyle.minimumLineHeight = 32
                caption4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption4.length))
            }
            context.saveGState()
            caption4.draw(at: CGPoint(x: 0, y: 661))
            context.restoreGState()
            
            /// Footnote
            let footnote2 = NSMutableAttributedString(string: "Footnote")
            footnote2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 27)!, range: NSRange(location: 0, length: footnote2.length))
            footnote2.addAttribute(NSKernAttributeName, value: 0.32, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 33
                paragraphStyle.minimumLineHeight = 33
                footnote2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote2.length))
            }
            context.saveGState()
            footnote2.draw(at: CGPoint(x: 0, y: 580))
            context.restoreGState()
            
            /// Subhead
            let subhead2 = NSMutableAttributedString(string: "Subhead")
            subhead2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 30)!, range: NSRange(location: 0, length: subhead2.length))
            subhead2.addAttribute(NSKernAttributeName, value: 0.46, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 36
                paragraphStyle.minimumLineHeight = 36
                subhead2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead2.length))
            }
            context.saveGState()
            subhead2.draw(at: CGPoint(x: 0, y: 497))
            context.restoreGState()
            
            /// Callout
            let callout2 = NSMutableAttributedString(string: "Callout")
            callout2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 32)!, range: NSRange(location: 0, length: callout2.length))
            callout2.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 39
                paragraphStyle.minimumLineHeight = 39
                callout2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout2.length))
            }
            context.saveGState()
            callout2.draw(at: CGPoint(x: 0, y: 415))
            context.restoreGState()
            
            /// Body
            let body2 = NSMutableAttributedString(string: "Body")
            body2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 33)!, range: NSRange(location: 0, length: body2.length))
            body2.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: 3))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 40
                paragraphStyle.minimumLineHeight = 40
                body2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body2.length))
            }
            context.saveGState()
            body2.draw(at: CGPoint(x: 0, y: 334))
            context.restoreGState()
            
            /// Headline
            let headline2 = NSMutableAttributedString(string: "Headline")
            headline2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 33)!, range: NSRange(location: 0, length: headline2.length))
            headline2.addAttribute(NSKernAttributeName, value: 0.39, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 40
                paragraphStyle.minimumLineHeight = 40
                headline2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline2.length))
            }
            context.saveGState()
            headline2.draw(at: CGPoint(x: 0, y: 254))
            context.restoreGState()
            
            /// Title 3
            let title4 = NSMutableAttributedString(string: "Title 3")
            title4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 37)!, range: NSRange(location: 0, length: title4.length))
            title4.addAttribute(NSKernAttributeName, value: 0.48, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 44
                paragraphStyle.minimumLineHeight = 44
                title4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title4.length))
            }
            context.saveGState()
            title4.draw(at: CGPoint(x: 0, y: 171))
            context.restoreGState()
            
            /// Title 2
            let title5 = NSMutableAttributedString(string: "Title 2")
            title5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 40)!, range: NSRange(location: 0, length: title5.length))
            title5.addAttribute(NSKernAttributeName, value: 0.55, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 48
                paragraphStyle.minimumLineHeight = 48
                title5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title5.length))
            }
            context.saveGState()
            title5.draw(at: CGPoint(x: 0, y: 88))
            context.restoreGState()
            
            /// Title 1
            let title6 = NSMutableAttributedString(string: "Title 1")
            title6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 49)!, range: NSRange(location: 0, length: title6.length))
            title6.addAttribute(NSKernAttributeName, value: 0.56, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 58
                paragraphStyle.minimumLineHeight = 58
                title6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title6.length))
            }
            context.saveGState()
            title6.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// AX3
        do {
            context.saveGState()
            context.translateBy(x: 1334, y: 14)
            
            /// Caption 2
            let caption5 = NSMutableAttributedString(string: "Caption 2")
            caption5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 29)!, range: NSRange(location: 0, length: caption5.length))
            caption5.addAttribute(NSKernAttributeName, value: 0.32, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 35
                paragraphStyle.minimumLineHeight = 35
                caption5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption5.length))
            }
            context.saveGState()
            caption5.draw(at: CGPoint(x: 1, y: 747))
            context.restoreGState()
            
            /// Caption 1
            let caption6 = NSMutableAttributedString(string: "Caption 1")
            caption6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 32)!, range: NSRange(location: 0, length: caption6.length))
            caption6.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 39
                paragraphStyle.minimumLineHeight = 39
                caption6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption6.length))
            }
            context.saveGState()
            caption6.draw(at: CGPoint(x: 1, y: 664))
            context.restoreGState()
            
            /// Footnote
            let footnote3 = NSMutableAttributedString(string: "Footnote")
            footnote3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 33)!, range: NSRange(location: 0, length: footnote3.length))
            footnote3.addAttribute(NSKernAttributeName, value: 0.26, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 40
                paragraphStyle.minimumLineHeight = 40
                footnote3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote3.length))
            }
            context.saveGState()
            footnote3.draw(at: CGPoint(x: 1, y: 583))
            context.restoreGState()
            
            /// Subhead
            let subhead3 = NSMutableAttributedString(string: "Subhead")
            subhead3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 36)!, range: NSRange(location: 0, length: subhead3.length))
            subhead3.addAttribute(NSKernAttributeName, value: 0.39, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 42
                paragraphStyle.minimumLineHeight = 42
                subhead3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead3.length))
            }
            context.saveGState()
            subhead3.draw(at: CGPoint(x: 1, y: 501))
            context.restoreGState()
            
            /// Callout
            let callout3 = NSMutableAttributedString(string: "Callout")
            callout3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 38)!, range: NSRange(location: 0, length: callout3.length))
            callout3.addAttribute(NSKernAttributeName, value: 0.25, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 45
                paragraphStyle.minimumLineHeight = 45
                callout3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout3.length))
            }
            context.saveGState()
            callout3.draw(at: CGPoint(x: 1, y: 419))
            context.restoreGState()
            
            /// Body
            let body3 = NSMutableAttributedString(string: "Body")
            body3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 40)!, range: NSRange(location: 0, length: body3.length))
            body3.addAttribute(NSKernAttributeName, value: 0.21, range: NSRange(location: 0, length: 3))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 48
                paragraphStyle.minimumLineHeight = 48
                body3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body3.length))
            }
            context.saveGState()
            body3.draw(at: CGPoint(x: 0, y: 337))
            context.restoreGState()
            
            /// Headline
            let headline3 = NSMutableAttributedString(string: "Headline")
            headline3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 40)!, range: NSRange(location: 0, length: headline3.length))
            headline3.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 48
                paragraphStyle.minimumLineHeight = 48
                headline3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline3.length))
            }
            context.saveGState()
            headline3.draw(at: CGPoint(x: 0, y: 257))
            context.restoreGState()
            
            /// Title 3
            let title7 = NSMutableAttributedString(string: "Title 3")
            title7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 45)!, range: NSRange(location: 0, length: title7.length))
            title7.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 54
                paragraphStyle.minimumLineHeight = 54
                title7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title7.length))
            }
            context.saveGState()
            title7.draw(at: CGPoint(x: 1, y: 172))
            context.restoreGState()
            
            /// Title 2
            let title8 = NSMutableAttributedString(string: "Title 2")
            title8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 48)!, range: NSRange(location: 0, length: title8.length))
            title8.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 58
                paragraphStyle.minimumLineHeight = 58
                title8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title8.length))
            }
            context.saveGState()
            title8.draw(at: CGPoint(x: 1, y: 89))
            context.restoreGState()
            
            /// Title 1
            let title9 = NSMutableAttributedString(string: "Title 1")
            title9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 59)!, range: NSRange(location: 0, length: title9.length))
            title9.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 68
                paragraphStyle.minimumLineHeight = 68
                title9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title9.length))
            }
            context.saveGState()
            title9.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// AX4
        do {
            context.saveGState()
            context.translateBy(x: 1529, y: 4)
            
            /// Caption 2
            let caption7 = NSMutableAttributedString(string: "Caption 2")
            caption7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 34)!, range: NSRange(location: 0, length: caption7.length))
            caption7.addAttribute(NSKernAttributeName, value: 0.5, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                caption7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption7.length))
            }
            context.saveGState()
            caption7.draw(at: CGPoint(x: 0, y: 752))
            context.restoreGState()
            
            /// Caption 1
            let caption8 = NSMutableAttributedString(string: "Caption 1")
            caption8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 37)!, range: NSRange(location: 0, length: caption8.length))
            caption8.addAttribute(NSKernAttributeName, value: 0.48, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 44
                paragraphStyle.minimumLineHeight = 44
                caption8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption8.length))
            }
            context.saveGState()
            caption8.draw(at: CGPoint(x: 0, y: 670))
            context.restoreGState()
            
            /// Footnote
            let footnote4 = NSMutableAttributedString(string: "Footnote")
            footnote4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 38)!, range: NSRange(location: 0, length: footnote4.length))
            footnote4.addAttribute(NSKernAttributeName, value: 0.39, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 46
                paragraphStyle.minimumLineHeight = 46
                footnote4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote4.length))
            }
            context.saveGState()
            footnote4.draw(at: CGPoint(x: 0, y: 588))
            context.restoreGState()
            
            /// Subhead
            let subhead4 = NSMutableAttributedString(string: "Subhead")
            subhead4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 42)!, range: NSRange(location: 0, length: subhead4.length))
            subhead4.addAttribute(NSKernAttributeName, value: 0.52, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 50
                paragraphStyle.minimumLineHeight = 50
                subhead4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead4.length))
            }
            context.saveGState()
            subhead4.draw(at: CGPoint(x: 0, y: 505))
            context.restoreGState()
            
            /// Callout
            let callout4 = NSMutableAttributedString(string: "Callout")
            callout4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 44)!, range: NSRange(location: 0, length: callout4.length))
            callout4.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 54
                paragraphStyle.minimumLineHeight = 54
                callout4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout4.length))
            }
            context.saveGState()
            callout4.draw(at: CGPoint(x: 0, y: 422))
            context.restoreGState()
            
            /// Body
            let body4 = NSMutableAttributedString(string: "Body")
            body4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 47)!, range: NSRange(location: 0, length: body4.length))
            body4.addAttribute(NSKernAttributeName, value: 1.06, range: NSRange(location: 0, length: 3))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 56
                paragraphStyle.minimumLineHeight = 56
                body4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body4.length))
            }
            context.saveGState()
            body4.draw(at: CGPoint(x: 0, y: 340))
            context.restoreGState()
            
            /// Headline
            let headline4 = NSMutableAttributedString(string: "Headline")
            headline4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 47)!, range: NSRange(location: 0, length: headline4.length))
            headline4.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 56
                paragraphStyle.minimumLineHeight = 56
                headline4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline4.length))
            }
            context.saveGState()
            headline4.draw(at: CGPoint(x: 0, y: 260))
            context.restoreGState()
            
            /// Title 3
            let title10 = NSMutableAttributedString(string: "Title 3")
            title10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 53)!, range: NSRange(location: 0, length: title10.length))
            title10.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 62
                paragraphStyle.minimumLineHeight = 62
                title10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title10.length))
            }
            context.saveGState()
            title10.draw(at: CGPoint(x: 1, y: 175))
            context.restoreGState()
            
            /// Title 2
            let title11 = NSMutableAttributedString(string: "Title 2")
            title11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 57)!, range: NSRange(location: 0, length: title11.length))
            title11.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 66
                paragraphStyle.minimumLineHeight = 66
                title11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title11.length))
            }
            context.saveGState()
            title11.draw(at: CGPoint(x: 1, y: 92))
            context.restoreGState()
            
            /// Title 1
            let title12 = NSMutableAttributedString(string: "Title 1")
            title12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 69)!, range: NSRange(location: 0, length: title12.length))
            title12.addAttribute(NSKernAttributeName, value: 0.18, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 80
                paragraphStyle.minimumLineHeight = 80
                title12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title12.length))
            }
            context.saveGState()
            title12.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// AX5
        do {
            context.saveGState()
            context.translateBy(x: 1749, y: -4)
            
            /// Caption 2
            let caption9 = NSMutableAttributedString(string: "Caption 2")
            caption9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 40)!, range: NSRange(location: 0, length: caption9.length))
            caption9.addAttribute(NSKernAttributeName, value: 0.49, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 48
                paragraphStyle.minimumLineHeight = 48
                caption9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption9.length))
            }
            context.saveGState()
            caption9.draw(at: CGPoint(x: 0, y: 755))
            context.restoreGState()
            
            /// Caption 1
            let caption10 = NSMutableAttributedString(string: "Caption 1")
            caption10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 43)!, range: NSRange(location: 0, length: caption10.length))
            caption10.addAttribute(NSKernAttributeName, value: 0.45, range: NSRange(location: 0, length: 8))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 50
                paragraphStyle.minimumLineHeight = 50
                caption10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption10.length))
            }
            context.saveGState()
            caption10.draw(at: CGPoint(x: 0, y: 673))
            context.restoreGState()
            
            /// Footnote
            let footnote5 = NSMutableAttributedString(string: "Footnote")
            footnote5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 44)!, range: NSRange(location: 0, length: footnote5.length))
            footnote5.addAttribute(NSKernAttributeName, value: 0.31, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 54
                paragraphStyle.minimumLineHeight = 54
                footnote5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote5.length))
            }
            context.saveGState()
            footnote5.draw(at: CGPoint(x: 0, y: 590))
            context.restoreGState()
            
            /// Subhead
            let subhead5 = NSMutableAttributedString(string: "Subhead")
            subhead5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 49)!, range: NSRange(location: 0, length: subhead5.length))
            subhead5.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: subhead5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 58
                paragraphStyle.minimumLineHeight = 58
                subhead5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead5.length))
            }
            context.saveGState()
            subhead5.draw(at: CGPoint(x: 0, y: 507))
            context.restoreGState()
            
            /// Callout
            let callout5 = NSMutableAttributedString(string: "Callout")
            callout5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 51)!, range: NSRange(location: 0, length: callout5.length))
            callout5.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: callout5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 60
                paragraphStyle.minimumLineHeight = 60
                callout5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout5.length))
            }
            context.saveGState()
            callout5.draw(at: CGPoint(x: 0, y: 425))
            context.restoreGState()
            
            /// Body
            let body5 = NSMutableAttributedString(string: "Body")
            body5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 53)!, range: NSRange(location: 0, length: body5.length))
            body5.addAttribute(NSKernAttributeName, value: 0.37, range: NSRange(location: 0, length: body5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 62
                paragraphStyle.minimumLineHeight = 62
                body5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body5.length))
            }
            context.saveGState()
            body5.draw(at: CGPoint(x: 0, y: 343))
            context.restoreGState()
            
            /// Headline
            let headline5 = NSMutableAttributedString(string: "Headline")
            headline5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 53)!, range: NSRange(location: 0, length: headline5.length))
            headline5.addAttribute(NSKernAttributeName, value: 0.25, range: NSRange(location: 0, length: 7))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 62
                paragraphStyle.minimumLineHeight = 62
                headline5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline5.length))
            }
            context.saveGState()
            headline5.draw(at: CGPoint(x: 0, y: 263))
            context.restoreGState()
            
            /// Title 3
            let title13 = NSMutableAttributedString(string: "Title 3")
            title13.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 60)!, range: NSRange(location: 0, length: title13.length))
            title13.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title13.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 70
                paragraphStyle.minimumLineHeight = 70
                title13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title13.length))
            }
            context.saveGState()
            title13.draw(at: CGPoint(x: 1, y: 177))
            context.restoreGState()
            
            /// Title 2
            let title14 = NSMutableAttributedString(string: "Title 2")
            title14.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 65)!, range: NSRange(location: 0, length: title14.length))
            title14.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title14.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 76
                paragraphStyle.minimumLineHeight = 76
                title14.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title14.length))
            }
            context.saveGState()
            title14.draw(at: CGPoint(x: 0, y: 92))
            context.restoreGState()
            
            /// Title 1
            let title15 = NSMutableAttributedString(string: "Title 1")
            title15.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 79)!, range: NSRange(location: 0, length: title15.length))
            title15.addAttribute(NSKernAttributeName, value: -0.03, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 90
                paragraphStyle.minimumLineHeight = 90
                title15.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title15.length))
            }
            context.saveGState()
            title15.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// xSmall
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 45)
            
            /// Caption 2
            let caption11 = NSMutableAttributedString(string: "Caption 2")
            caption11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption11.length))
            caption11.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption11.length))
            }
            context.saveGState()
            caption11.draw(at: CGPoint(x: 1, y: 734))
            context.restoreGState()
            
            /// Caption 1
            let caption12 = NSMutableAttributedString(string: "Caption 1")
            caption12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption12.length))
            caption12.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption12.length))
            }
            context.saveGState()
            caption12.draw(at: CGPoint(x: 1, y: 654))
            context.restoreGState()
            
            /// Footnote
            let footnote6 = NSMutableAttributedString(string: "Footnote")
            footnote6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: footnote6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                footnote6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote6.length))
            }
            context.saveGState()
            footnote6.draw(at: CGPoint(x: 1, y: 572))
            context.restoreGState()
            
            /// Subhead
            let subhead6 = NSMutableAttributedString(string: "Subhead")
            subhead6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: subhead6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                subhead6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead6.length))
            }
            context.saveGState()
            subhead6.draw(at: CGPoint(x: 1, y: 492))
            context.restoreGState()
            
            /// Callout
            let callout6 = NSMutableAttributedString(string: "Callout")
            callout6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: callout6.length))
            callout6.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: callout6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                callout6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout6.length))
            }
            context.saveGState()
            callout6.draw(at: CGPoint(x: 0, y: 410))
            context.restoreGState()
            
            /// Body
            let body6 = NSMutableAttributedString(string: "Body")
            body6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: body6.length))
            body6.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: body6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 19
                paragraphStyle.minimumLineHeight = 19
                body6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body6.length))
            }
            context.saveGState()
            body6.draw(at: CGPoint(x: 0, y: 330))
            context.restoreGState()
            
            /// Headline
            let headline6 = NSMutableAttributedString(string: "Headline")
            headline6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 14)!, range: NSRange(location: 0, length: headline6.length))
            headline6.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: headline6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 19
                paragraphStyle.minimumLineHeight = 19
                headline6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline6.length))
            }
            context.saveGState()
            headline6.draw(at: CGPoint(x: 0, y: 250))
            context.restoreGState()
            
            /// Title 3
            let title16 = NSMutableAttributedString(string: "Title 3")
            title16.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title16.length))
            title16.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title16.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                title16.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title16.length))
            }
            context.saveGState()
            title16.draw(at: CGPoint(x: 0, y: 167))
            context.restoreGState()
            
            /// Title 2
            let title17 = NSMutableAttributedString(string: "Title 2")
            title17.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 19)!, range: NSRange(location: 0, length: title17.length))
            title17.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: title17.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 23
                paragraphStyle.minimumLineHeight = 23
                title17.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title17.length))
            }
            context.saveGState()
            title17.draw(at: CGPoint(x: 0, y: 86))
            context.restoreGState()
            
            /// Title 1
            let title18 = NSMutableAttributedString(string: "Title 1")
            title18.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: title18.length))
            title18.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: title18.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 31
                paragraphStyle.minimumLineHeight = 31
                title18.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title18.length))
            }
            context.saveGState()
            title18.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Small
        do {
            context.saveGState()
            context.translateBy(x: 159, y: 44)
            
            /// Caption 2
            let caption13 = NSMutableAttributedString(string: "Caption 2")
            caption13.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption13.length))
            caption13.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption13.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption13.length))
            }
            context.saveGState()
            caption13.draw(at: CGPoint(x: 0, y: 735))
            context.restoreGState()
            
            /// Caption 1
            let caption14 = NSMutableAttributedString(string: "Caption 1")
            caption14.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption14.length))
            caption14.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption14.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption14.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption14.length))
            }
            context.saveGState()
            caption14.draw(at: CGPoint(x: 0, y: 655))
            context.restoreGState()
            
            /// Footnote
            let footnote7 = NSMutableAttributedString(string: "Footnote")
            footnote7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: footnote7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                footnote7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote7.length))
            }
            context.saveGState()
            footnote7.draw(at: CGPoint(x: 0, y: 573))
            context.restoreGState()
            
            /// Subhead
            let subhead7 = NSMutableAttributedString(string: "Subhead")
            subhead7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: subhead7.length))
            subhead7.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: subhead7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                subhead7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead7.length))
            }
            context.saveGState()
            subhead7.draw(at: CGPoint(x: 0, y: 491))
            context.restoreGState()
            
            /// Callout
            let callout7 = NSMutableAttributedString(string: "Callout")
            callout7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: callout7.length))
            callout7.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: callout7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 19
                paragraphStyle.minimumLineHeight = 19
                callout7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout7.length))
            }
            context.saveGState()
            callout7.draw(at: CGPoint(x: 0, y: 411))
            context.restoreGState()
            
            /// Body
            let body7 = NSMutableAttributedString(string: "Body")
            body7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: body7.length))
            body7.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: body7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                body7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body7.length))
            }
            context.saveGState()
            body7.draw(at: CGPoint(x: 0, y: 330))
            context.restoreGState()
            
            /// Headline
            let headline7 = NSMutableAttributedString(string: "Headline")
            headline7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: headline7.length))
            headline7.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: headline7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                headline7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline7.length))
            }
            context.saveGState()
            headline7.draw(at: CGPoint(x: 0, y: 250))
            context.restoreGState()
            
            /// Title 3
            let title19 = NSMutableAttributedString(string: "Title 3")
            title19.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 18)!, range: NSRange(location: 0, length: title19.length))
            title19.addAttribute(NSKernAttributeName, value: -0.45, range: NSRange(location: 0, length: title19.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title19.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title19.length))
            }
            context.saveGState()
            title19.draw(at: CGPoint(x: 0, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title20 = NSMutableAttributedString(string: "Title 2")
            title20.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: title20.length))
            title20.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: title20.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                title20.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title20.length))
            }
            context.saveGState()
            title20.draw(at: CGPoint(x: 1, y: 86))
            context.restoreGState()
            
            /// Title 1
            let title21 = NSMutableAttributedString(string: "Title 1")
            title21.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 26)!, range: NSRange(location: 0, length: title21.length))
            title21.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title21.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 32
                paragraphStyle.minimumLineHeight = 32
                title21.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title21.length))
            }
            context.saveGState()
            title21.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Medium
        do {
            context.saveGState()
            context.translateBy(x: 299, y: 43)
            
            /// Caption 2
            let caption15 = NSMutableAttributedString(string: "Caption 2")
            caption15.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption15.length))
            caption15.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption15.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption15.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption15.length))
            }
            context.saveGState()
            caption15.draw(at: CGPoint(x: 1, y: 736))
            context.restoreGState()
            
            /// Caption 1
            let caption16 = NSMutableAttributedString(string: "Caption 1")
            caption16.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption16.length))
            caption16.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption16.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption16.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption16.length))
            }
            context.saveGState()
            caption16.draw(at: CGPoint(x: 1, y: 656))
            context.restoreGState()
            
            /// Footnote
            let footnote8 = NSMutableAttributedString(string: "Footnote")
            footnote8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: footnote8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                footnote8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote8.length))
            }
            context.saveGState()
            footnote8.draw(at: CGPoint(x: 0, y: 574))
            context.restoreGState()
            
            /// Subhead
            let subhead8 = NSMutableAttributedString(string: "Subhead")
            subhead8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: subhead8.length))
            subhead8.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: subhead8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 19
                paragraphStyle.minimumLineHeight = 19
                subhead8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead8.length))
            }
            context.saveGState()
            subhead8.draw(at: CGPoint(x: 0, y: 492))
            context.restoreGState()
            
            /// Callout
            let callout8 = NSMutableAttributedString(string: "Callout")
            callout8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: callout8.length))
            callout8.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: callout8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                callout8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout8.length))
            }
            context.saveGState()
            callout8.draw(at: CGPoint(x: 0, y: 411))
            context.restoreGState()
            
            /// Body
            let body8 = NSMutableAttributedString(string: "Body")
            body8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: body8.length))
            body8.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: body8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                body8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body8.length))
            }
            context.saveGState()
            body8.draw(at: CGPoint(x: 0, y: 330))
            context.restoreGState()
            
            /// Headline
            let headline8 = NSMutableAttributedString(string: "Headline")
            headline8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 16)!, range: NSRange(location: 0, length: headline8.length))
            headline8.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: headline8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                headline8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline8.length))
            }
            context.saveGState()
            headline8.draw(at: CGPoint(x: 0, y: 250))
            context.restoreGState()
            
            /// Title 3
            let title22 = NSMutableAttributedString(string: "Title 3")
            title22.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 19)!, range: NSRange(location: 0, length: title22.length))
            title22.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: title22.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 23
                paragraphStyle.minimumLineHeight = 23
                title22.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title22.length))
            }
            context.saveGState()
            title22.draw(at: CGPoint(x: 0, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title23 = NSMutableAttributedString(string: "Title 2")
            title23.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: title23.length))
            title23.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title23.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 28
                paragraphStyle.minimumLineHeight = 28
                title23.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title23.length))
            }
            context.saveGState()
            title23.draw(at: CGPoint(x: 1, y: 85))
            context.restoreGState()
            
            /// Title 1
            let title24 = NSMutableAttributedString(string: "Title 1")
            title24.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 27)!, range: NSRange(location: 0, length: title24.length))
            title24.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: title24.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 33
                paragraphStyle.minimumLineHeight = 33
                title24.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title24.length))
            }
            context.saveGState()
            title24.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Large (Default)
        do {
            context.saveGState()
            context.translateBy(x: 439, y: 42)
            
            /// Caption 2
            let caption17 = NSMutableAttributedString(string: "Caption 2")
            caption17.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: caption17.length))
            caption17.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: caption17.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                caption17.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption17.length))
            }
            context.saveGState()
            caption17.draw(at: CGPoint(x: 0, y: 737))
            context.restoreGState()
            
            /// Caption 1
            let caption18 = NSMutableAttributedString(string: "Caption 1")
            caption18.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: caption18.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                caption18.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption18.length))
            }
            context.saveGState()
            caption18.draw(at: CGPoint(x: 0, y: 655))
            context.restoreGState()
            
            /// Footnote
            let footnote9 = NSMutableAttributedString(string: "Footnote")
            footnote9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: footnote9.length))
            footnote9.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: footnote9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                footnote9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote9.length))
            }
            context.saveGState()
            footnote9.draw(at: CGPoint(x: 0, y: 573))
            context.restoreGState()
            
            /// Subhead
            let subhead9 = NSMutableAttributedString(string: "Subhead")
            subhead9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subhead9.length))
            subhead9.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subhead9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subhead9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead9.length))
            }
            context.saveGState()
            subhead9.draw(at: CGPoint(x: 0, y: 492))
            context.restoreGState()
            
            /// Callout
            let callout9 = NSMutableAttributedString(string: "Callout")
            callout9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: callout9.length))
            callout9.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: callout9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                callout9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout9.length))
            }
            context.saveGState()
            callout9.draw(at: CGPoint(x: 0, y: 411))
            context.restoreGState()
            
            /// Body
            let body9 = NSMutableAttributedString(string: "Body")
            body9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: body9.length))
            body9.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: body9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                body9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body9.length))
            }
            context.saveGState()
            body9.draw(at: CGPoint(x: 0, y: 330))
            context.restoreGState()
            
            /// Headline
            let headline9 = NSMutableAttributedString(string: "Headline")
            headline9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: headline9.length))
            headline9.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: headline9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                headline9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline9.length))
            }
            context.saveGState()
            headline9.draw(at: CGPoint(x: 0, y: 250))
            context.restoreGState()
            
            /// Title 3
            let title25 = NSMutableAttributedString(string: "Title 3")
            title25.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: title25.length))
            title25.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: title25.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                title25.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title25.length))
            }
            context.saveGState()
            title25.draw(at: CGPoint(x: 1, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title26 = NSMutableAttributedString(string: "Title 2")
            title26.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: title26.length))
            title26.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: title26.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 28
                paragraphStyle.minimumLineHeight = 28
                title26.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title26.length))
            }
            context.saveGState()
            title26.draw(at: CGPoint(x: 1, y: 85))
            context.restoreGState()
            
            /// Title 1
            let title27 = NSMutableAttributedString(string: "Title 1")
            title27.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 28)!, range: NSRange(location: 0, length: title27.length))
            title27.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title27.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                title27.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title27.length))
            }
            context.saveGState()
            title27.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// xLarge
        do {
            context.saveGState()
            context.translateBy(x: 578, y: 40)
            
            /// Caption 2
            let caption19 = NSMutableAttributedString(string: "Caption 2")
            caption19.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: caption19.length))
            caption19.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: caption19.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                caption19.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption19.length))
            }
            context.saveGState()
            caption19.draw(at: CGPoint(x: 1, y: 735))
            context.restoreGState()
            
            /// Caption 1
            let caption20 = NSMutableAttributedString(string: "Caption 1")
            caption20.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: caption20.length))
            caption20.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: caption20.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 19
                paragraphStyle.minimumLineHeight = 19
                caption20.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption20.length))
            }
            context.saveGState()
            caption20.draw(at: CGPoint(x: 1, y: 655))
            context.restoreGState()
            
            /// Footnote
            let footnote10 = NSMutableAttributedString(string: "Footnote")
            footnote10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: footnote10.length))
            footnote10.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: footnote10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                footnote10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote10.length))
            }
            context.saveGState()
            footnote10.draw(at: CGPoint(x: 1, y: 574))
            context.restoreGState()
            
            /// Subhead
            let subhead10 = NSMutableAttributedString(string: "Subhead")
            subhead10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: subhead10.length))
            subhead10.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: subhead10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                subhead10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead10.length))
            }
            context.saveGState()
            subhead10.draw(at: CGPoint(x: 1, y: 492))
            context.restoreGState()
            
            /// Callout
            let callout10 = NSMutableAttributedString(string: "Callout")
            callout10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 18)!, range: NSRange(location: 0, length: callout10.length))
            callout10.addAttribute(NSKernAttributeName, value: -0.45, range: NSRange(location: 0, length: callout10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 23
                paragraphStyle.minimumLineHeight = 23
                callout10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout10.length))
            }
            context.saveGState()
            callout10.draw(at: CGPoint(x: 1, y: 411))
            context.restoreGState()
            
            /// Body
            let body10 = NSMutableAttributedString(string: "Body")
            body10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 19)!, range: NSRange(location: 0, length: body10.length))
            body10.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: body10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                body10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body10.length))
            }
            context.saveGState()
            body10.draw(at: CGPoint(x: 1, y: 330))
            context.restoreGState()
            
            /// Headline
            let headline10 = NSMutableAttributedString(string: "Headline")
            headline10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 19)!, range: NSRange(location: 0, length: headline10.length))
            headline10.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: headline10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                headline10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline10.length))
            }
            context.saveGState()
            headline10.draw(at: CGPoint(x: 0, y: 250))
            context.restoreGState()
            
            /// Title 3
            let title28 = NSMutableAttributedString(string: "Title 3")
            title28.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: title28.length))
            title28.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: title28.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 27
                paragraphStyle.minimumLineHeight = 27
                title28.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title28.length))
            }
            context.saveGState()
            title28.draw(at: CGPoint(x: 2, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title29 = NSMutableAttributedString(string: "Title 2")
            title29.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 24)!, range: NSRange(location: 0, length: title29.length))
            title29.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title29.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 30
                paragraphStyle.minimumLineHeight = 30
                title29.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title29.length))
            }
            context.saveGState()
            title29.draw(at: CGPoint(x: 1, y: 85))
            context.restoreGState()
            
            /// Title 1
            let title30 = NSMutableAttributedString(string: "Title 1")
            title30.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 30)!, range: NSRange(location: 0, length: title30.length))
            title30.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title30.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 36
                paragraphStyle.minimumLineHeight = 36
                title30.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title30.length))
            }
            context.saveGState()
            title30.draw(at: CGPoint(x: 2, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// xxLarge
        do {
            context.saveGState()
            context.translateBy(x: 719, y: 38)
            
            /// Caption 2
            let caption21 = NSMutableAttributedString(string: "Caption 2")
            caption21.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: caption21.length))
            caption21.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: caption21.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                caption21.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption21.length))
            }
            context.saveGState()
            caption21.draw(at: CGPoint(x: 0, y: 736))
            context.restoreGState()
            
            /// Caption 1
            let caption22 = NSMutableAttributedString(string: "Caption 1")
            caption22.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: caption22.length))
            caption22.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: caption22.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                caption22.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption22.length))
            }
            context.saveGState()
            caption22.draw(at: CGPoint(x: 0, y: 655))
            context.restoreGState()
            
            /// Footnote
            let footnote11 = NSMutableAttributedString(string: "Footnote")
            footnote11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: footnote11.length))
            footnote11.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: footnote11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                footnote11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote11.length))
            }
            context.saveGState()
            footnote11.draw(at: CGPoint(x: 0, y: 574))
            context.restoreGState()
            
            /// Subhead
            let subhead11 = NSMutableAttributedString(string: "Subhead")
            subhead11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 19)!, range: NSRange(location: 0, length: subhead11.length))
            subhead11.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: subhead11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                subhead11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead11.length))
            }
            context.saveGState()
            subhead11.draw(at: CGPoint(x: 0, y: 492))
            context.restoreGState()
            
            /// Callout
            let callout11 = NSMutableAttributedString(string: "Callout")
            callout11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: callout11.length))
            callout11.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: callout11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                callout11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout11.length))
            }
            context.saveGState()
            callout11.draw(at: CGPoint(x: 0, y: 412))
            context.restoreGState()
            
            /// Body
            let body11 = NSMutableAttributedString(string: "Body")
            body11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: body11.length))
            body11.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: body11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 26
                paragraphStyle.minimumLineHeight = 26
                body11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body11.length))
            }
            context.saveGState()
            body11.draw(at: CGPoint(x: 0, y: 331))
            context.restoreGState()
            
            /// Headline
            let headline11 = NSMutableAttributedString(string: "Headline")
            headline11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 21)!, range: NSRange(location: 0, length: headline11.length))
            headline11.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: headline11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 26
                paragraphStyle.minimumLineHeight = 26
                headline11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline11.length))
            }
            context.saveGState()
            headline11.draw(at: CGPoint(x: 0, y: 251))
            context.restoreGState()
            
            /// Title 3
            let title31 = NSMutableAttributedString(string: "Title 3")
            title31.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 24)!, range: NSRange(location: 0, length: title31.length))
            title31.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title31.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 29
                paragraphStyle.minimumLineHeight = 29
                title31.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title31.length))
            }
            context.saveGState()
            title31.draw(at: CGPoint(x: 1, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title32 = NSMutableAttributedString(string: "Title 2")
            title32.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 26)!, range: NSRange(location: 0, length: title32.length))
            title32.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title32.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 32
                paragraphStyle.minimumLineHeight = 32
                title32.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title32.length))
            }
            context.saveGState()
            title32.draw(at: CGPoint(x: 1, y: 86))
            context.restoreGState()
            
            /// Title 1
            let title33 = NSMutableAttributedString(string: "Title 1")
            title33.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 32)!, range: NSRange(location: 0, length: title33.length))
            title33.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: title33.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 39
                paragraphStyle.minimumLineHeight = 39
                title33.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title33.length))
            }
            context.saveGState()
            title33.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// xxxLarge
        do {
            context.saveGState()
            context.translateBy(x: 859, y: 36)
            
            /// Caption 2
            let caption23 = NSMutableAttributedString(string: "Caption 2")
            caption23.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: caption23.length))
            caption23.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: caption23.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                caption23.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption23.length))
            }
            context.saveGState()
            caption23.draw(at: CGPoint(x: 0, y: 736))
            context.restoreGState()
            
            /// Caption 1
            let caption24 = NSMutableAttributedString(string: "Caption 1")
            caption24.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 18)!, range: NSRange(location: 0, length: caption24.length))
            caption24.addAttribute(NSKernAttributeName, value: -0.45, range: NSRange(location: 0, length: caption24.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 23
                paragraphStyle.minimumLineHeight = 23
                caption24.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: caption24.length))
            }
            context.saveGState()
            caption24.draw(at: CGPoint(x: 0, y: 655))
            context.restoreGState()
            
            /// Footnote
            let footnote12 = NSMutableAttributedString(string: "Footnote")
            footnote12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 19)!, range: NSRange(location: 0, length: footnote12.length))
            footnote12.addAttribute(NSKernAttributeName, value: -0.49, range: NSRange(location: 0, length: footnote12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 24
                paragraphStyle.minimumLineHeight = 24
                footnote12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: footnote12.length))
            }
            context.saveGState()
            footnote12.draw(at: CGPoint(x: 0, y: 574))
            context.restoreGState()
            
            /// Subhead
            let subhead12 = NSMutableAttributedString(string: "Subhead")
            subhead12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 21)!, range: NSRange(location: 0, length: subhead12.length))
            subhead12.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: subhead12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 26
                paragraphStyle.minimumLineHeight = 26
                subhead12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subhead12.length))
            }
            context.saveGState()
            subhead12.draw(at: CGPoint(x: 0, y: 493))
            context.restoreGState()
            
            /// Callout
            let callout12 = NSMutableAttributedString(string: "Callout")
            callout12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: callout12.length))
            callout12.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: callout12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 27
                paragraphStyle.minimumLineHeight = 27
                callout12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: callout12.length))
            }
            context.saveGState()
            callout12.draw(at: CGPoint(x: 0, y: 412))
            context.restoreGState()
            
            /// Body
            let body12 = NSMutableAttributedString(string: "Body")
            body12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 23)!, range: NSRange(location: 0, length: body12.length))
            body12.addAttribute(NSKernAttributeName, value: 0.37, range: NSRange(location: 0, length: body12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 28
                paragraphStyle.minimumLineHeight = 28
                body12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body12.length))
            }
            context.saveGState()
            body12.draw(at: CGPoint(x: 0, y: 331))
            context.restoreGState()
            
            /// Headline
            let headline12 = NSMutableAttributedString(string: "Headline")
            headline12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 23)!, range: NSRange(location: 0, length: headline12.length))
            headline12.addAttribute(NSKernAttributeName, value: 0.37, range: NSRange(location: 0, length: headline12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 28
                paragraphStyle.minimumLineHeight = 28
                headline12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: headline12.length))
            }
            context.saveGState()
            headline12.draw(at: CGPoint(x: 0, y: 251))
            context.restoreGState()
            
            /// Title 3
            let title34 = NSMutableAttributedString(string: "Title 3")
            title34.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 26)!, range: NSRange(location: 0, length: title34.length))
            title34.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title34.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 32
                paragraphStyle.minimumLineHeight = 32
                title34.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title34.length))
            }
            context.saveGState()
            title34.draw(at: CGPoint(x: 1, y: 168))
            context.restoreGState()
            
            /// Title 2
            let title35 = NSMutableAttributedString(string: "Title 2")
            title35.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 28)!, range: NSRange(location: 0, length: title35.length))
            title35.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: title35.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                title35.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title35.length))
            }
            context.saveGState()
            title35.draw(at: CGPoint(x: 0, y: 86))
            context.restoreGState()
            
            /// Title 1
            let title36 = NSMutableAttributedString(string: "Title 1")
            title36.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 34)!, range: NSRange(location: 0, length: title36.length))
            title36.addAttribute(NSKernAttributeName, value: 0.37, range: NSRange(location: 0, length: title36.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                title36.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title36.length))
            }
            context.saveGState()
            title36.draw(at: CGPoint(x: 1, y: 0))
            context.restoreGState()
            
            context.restoreGState()
        }
    }
    
    /// Template - Tabbed App
    
    class func drawTab1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Tab Bar / 5 Tab
        // Warning: New symbols are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawTab2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Tab Bar / 5 Tab
        // Warning: New symbols are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawTab3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Tab Bar / 5 Tab
        // Warning: New symbols are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawTab4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Tab Bar / 5 Tab
        // Warning: New symbols are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawTab5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Tab Bar / 5 Tab
        // Warning: New symbols are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    /// Template - Parent and Child with Toolbar
    
    class func drawParentView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Navigation Bar
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawChildView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Navigation Bar
        // Warning: New symbols are not supported.
        /// Toolbar / Action Glyphs 5 on Light
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    /// Template - Modal Sheet
    
    class func drawModalSheet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Navigation Bar 3
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    /// Template - Sticker Pack or iMessage App
    
    class func drawIMessageAppCollapsed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Screen Content
        // Warning: Image layers are not supported.
        /// Guide: Layout Grid
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 409.5)
            
            /// 4 Across
            // Warning: New symbols are not supported.
            
            /// 3 Across
            // Warning: New symbols are not supported.
            
            /// 2 Across
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        /// Dock
        // Warning: Image layers are not supported.
        /// iMessage App Icon
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawIMessageAppExpanded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Screen Content
        // Warning: Image layers are not supported.
        /// Guide: Layout Grid
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 86.5)
            
            /// 4 Across
            // Warning: New symbols are not supported.
            
            /// 3 Across
            // Warning: New symbols are not supported.
            
            /// 2 Across
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        /// Dock
        // Warning: Image layers are not supported.
        /// iMessage App Icon
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    /// UI Elements
    
    class func drawUIElements() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// UI Elements - System
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 5150)
            
            /// Labels + Background
            do {
                context.saveGState()
                
                /// Template Header and Footer
                // Warning: New symbols are not supported.
                
                /// Activity View
                let activityView = NSMutableAttributedString(string: "Activity View")
                activityView.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: activityView.length))
                activityView.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: activityView.length))
                activityView.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: activityView.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    activityView.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: activityView.length))
                }
                context.saveGState()
                activityView.draw(in: CGRect(x: 20, y: 1571, width: 300, height: 15))
                context.restoreGState()
                
                /// Tab Bars
                let tabBars = NSMutableAttributedString(string: "Tab Bars")
                tabBars.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tabBars.length))
                tabBars.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tabBars.length))
                tabBars.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tabBars.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    tabBars.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabBars.length))
                }
                context.saveGState()
                tabBars.draw(in: CGRect(x: 20, y: 685.58, width: 300, height: 15))
                context.restoreGState()
                
                /// Keyboards
                let keyboards = NSMutableAttributedString(string: "Keyboards")
                keyboards.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: keyboards.length))
                keyboards.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: keyboards.length))
                keyboards.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: keyboards.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    keyboards.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyboards.length))
                }
                context.saveGState()
                keyboards.draw(in: CGRect(x: 20, y: 101.44, width: 300, height: 15))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Social Compose View Picture
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 1590)
                
                /// Screen Background
                let screenBackground = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground.fill()
                context.restoreGState()
                
                /// _Resources / Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic
                // Warning: New symbols are not supported.
                
                /// Alert Shape
                let alertShape = UIBezierPath()
                alertShape.move(to: CGPoint(x: 345, y: 216.38))
                alertShape.addCurve(to: CGPoint(x: 345, y: 217.48), controlPoint1: CGPoint(x: 345, y: 216.75), controlPoint2: CGPoint(x: 345, y: 217.11))
                alertShape.addCurve(to: CGPoint(x: 344.98, y: 218.41), controlPoint1: CGPoint(x: 345, y: 217.79), controlPoint2: CGPoint(x: 344.99, y: 218.1))
                alertShape.addCurve(to: CGPoint(x: 344.81, y: 220.43), controlPoint1: CGPoint(x: 344.97, y: 219.08), controlPoint2: CGPoint(x: 344.93, y: 219.76))
                alertShape.addCurve(to: CGPoint(x: 344.17, y: 222.35), controlPoint1: CGPoint(x: 344.68, y: 221.11), controlPoint2: CGPoint(x: 344.49, y: 221.74))
                alertShape.addCurve(to: CGPoint(x: 342.99, y: 223.99), controlPoint1: CGPoint(x: 343.87, y: 222.95), controlPoint2: CGPoint(x: 343.46, y: 223.51))
                alertShape.addCurve(to: CGPoint(x: 341.35, y: 225.17), controlPoint1: CGPoint(x: 342.51, y: 224.46), controlPoint2: CGPoint(x: 341.95, y: 224.87))
                alertShape.addCurve(to: CGPoint(x: 339.43, y: 225.81), controlPoint1: CGPoint(x: 340.74, y: 225.49), controlPoint2: CGPoint(x: 340.11, y: 225.68))
                alertShape.addCurve(to: CGPoint(x: 337.41, y: 225.98), controlPoint1: CGPoint(x: 338.76, y: 225.93), controlPoint2: CGPoint(x: 338.08, y: 225.97))
                alertShape.addCurve(to: CGPoint(x: 335.38, y: 226), controlPoint1: CGPoint(x: 336.11, y: 226), controlPoint2: CGPoint(x: 335.75, y: 226))
                alertShape.addLine(to: CGPoint(x: 13.84, y: 226))
                alertShape.addLine(to: CGPoint(x: 9.62, y: 226))
                alertShape.addCurve(to: CGPoint(x: 8.52, y: 226), controlPoint1: CGPoint(x: 9.25, y: 226), controlPoint2: CGPoint(x: 8.89, y: 226))
                alertShape.addCurve(to: CGPoint(x: 5.57, y: 225.81), controlPoint1: CGPoint(x: 6.92, y: 225.97), controlPoint2: CGPoint(x: 6.24, y: 225.93))
                alertShape.addCurve(to: CGPoint(x: 3.65, y: 225.17), controlPoint1: CGPoint(x: 4.89, y: 225.68), controlPoint2: CGPoint(x: 4.26, y: 225.49))
                alertShape.addCurve(to: CGPoint(x: 2.01, y: 223.99), controlPoint1: CGPoint(x: 3.05, y: 224.87), controlPoint2: CGPoint(x: 2.49, y: 224.46))
                alertShape.addCurve(to: CGPoint(x: 0.83, y: 222.35), controlPoint1: CGPoint(x: 1.54, y: 223.51), controlPoint2: CGPoint(x: 1.13, y: 222.95))
                alertShape.addCurve(to: CGPoint(x: 0.19, y: 220.43), controlPoint1: CGPoint(x: 0.51, y: 221.74), controlPoint2: CGPoint(x: 0.32, y: 221.11))
                alertShape.addCurve(to: CGPoint(x: 0.02, y: 218.41), controlPoint1: CGPoint(x: 0.07, y: 219.76), controlPoint2: CGPoint(x: 0.03, y: 219.08))
                alertShape.addCurve(to: CGPoint(x: 0, y: 217.48), controlPoint1: CGPoint(x: 0.01, y: 218.1), controlPoint2: CGPoint(x: 0, y: 217.79))
                alertShape.addCurve(to: CGPoint(x: 0, y: 216.38), controlPoint1: CGPoint(x: 0, y: 217.11), controlPoint2: CGPoint(x: 0, y: 216.75))
                alertShape.addLine(to: CGPoint(x: 0, y: 212.16))
                alertShape.addLine(to: CGPoint(x: 0, y: 13.84))
                alertShape.addLine(to: CGPoint(x: 0, y: 9.62))
                alertShape.addCurve(to: CGPoint(x: 0, y: 8.52), controlPoint1: CGPoint(x: 0, y: 9.25), controlPoint2: CGPoint(x: 0, y: 8.89))
                alertShape.addCurve(to: CGPoint(x: 0.02, y: 7.59), controlPoint1: CGPoint(x: 0, y: 8.21), controlPoint2: CGPoint(x: 0.01, y: 7.9))
                alertShape.addCurve(to: CGPoint(x: 0.19, y: 5.57), controlPoint1: CGPoint(x: 0.03, y: 6.92), controlPoint2: CGPoint(x: 0.07, y: 6.24))
                alertShape.addCurve(to: CGPoint(x: 0.83, y: 3.65), controlPoint1: CGPoint(x: 0.32, y: 4.89), controlPoint2: CGPoint(x: 0.51, y: 4.26))
                alertShape.addCurve(to: CGPoint(x: 2.01, y: 2.01), controlPoint1: CGPoint(x: 1.13, y: 3.05), controlPoint2: CGPoint(x: 1.54, y: 2.49))
                alertShape.addCurve(to: CGPoint(x: 3.65, y: 0.83), controlPoint1: CGPoint(x: 2.49, y: 1.54), controlPoint2: CGPoint(x: 3.05, y: 1.13))
                alertShape.addCurve(to: CGPoint(x: 5.57, y: 0.19), controlPoint1: CGPoint(x: 4.26, y: 0.51), controlPoint2: CGPoint(x: 4.89, y: 0.32))
                alertShape.addCurve(to: CGPoint(x: 7.59, y: 0.02), controlPoint1: CGPoint(x: 6.24, y: 0.07), controlPoint2: CGPoint(x: 6.92, y: 0.03))
                alertShape.addCurve(to: CGPoint(x: 9.62, y: 0), controlPoint1: CGPoint(x: 8.89, y: 0), controlPoint2: CGPoint(x: 9.25, y: 0))
                alertShape.addLine(to: CGPoint(x: 13.84, y: 0))
                alertShape.addLine(to: CGPoint(x: 335.08, y: 0))
                alertShape.addLine(to: CGPoint(x: 331.16, y: 0))
                alertShape.addLine(to: CGPoint(x: 335.38, y: 0))
                alertShape.addCurve(to: CGPoint(x: 336.48, y: 0), controlPoint1: CGPoint(x: 335.75, y: 0), controlPoint2: CGPoint(x: 336.11, y: 0))
                alertShape.addCurve(to: CGPoint(x: 339.43, y: 0.19), controlPoint1: CGPoint(x: 338.08, y: 0.03), controlPoint2: CGPoint(x: 338.76, y: 0.07))
                alertShape.addCurve(to: CGPoint(x: 341.35, y: 0.83), controlPoint1: CGPoint(x: 340.11, y: 0.32), controlPoint2: CGPoint(x: 340.74, y: 0.51))
                alertShape.addCurve(to: CGPoint(x: 342.99, y: 2.01), controlPoint1: CGPoint(x: 341.95, y: 1.13), controlPoint2: CGPoint(x: 342.51, y: 1.54))
                alertShape.addCurve(to: CGPoint(x: 344.17, y: 3.65), controlPoint1: CGPoint(x: 343.46, y: 2.49), controlPoint2: CGPoint(x: 343.87, y: 3.05))
                alertShape.addCurve(to: CGPoint(x: 344.81, y: 5.57), controlPoint1: CGPoint(x: 344.49, y: 4.26), controlPoint2: CGPoint(x: 344.68, y: 4.89))
                alertShape.addCurve(to: CGPoint(x: 344.98, y: 7.59), controlPoint1: CGPoint(x: 344.93, y: 6.24), controlPoint2: CGPoint(x: 344.97, y: 6.92))
                alertShape.addCurve(to: CGPoint(x: 345, y: 8.52), controlPoint1: CGPoint(x: 344.99, y: 7.9), controlPoint2: CGPoint(x: 345, y: 8.21))
                alertShape.addCurve(to: CGPoint(x: 345, y: 9.62), controlPoint1: CGPoint(x: 345, y: 8.89), controlPoint2: CGPoint(x: 345, y: 9.25))
                alertShape.addLine(to: CGPoint(x: 345, y: 13.84))
                alertShape.addLine(to: CGPoint(x: 345, y: 212.16))
                alertShape.addLine(to: CGPoint(x: 345, y: 216.38))
                alertShape.close()
                alertShape.move(to: CGPoint(x: 345, y: 216.38))
                context.saveGState()
                context.setAlpha(0.96)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 15, y: 91.5)
                    alertShape.usesEvenOddFillRule = true
                    UIColor(white: 0.969, alpha: 1).setFill()
                    alertShape.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Seperator
                let seperator = UIBezierPath()
                seperator.move(to: CGPoint(x: 0, y: 0.5))
                seperator.addLine(to: CGPoint(x: 344.5, y: 0.5))
                context.saveGState()
                context.translateBy(x: 15.25, y: 272.75)
                seperator.lineCapStyle = .square
                seperator.lineWidth = 0.5
                UIColor(hue: 0.574, saturation: 0.054, brightness: 0.651, alpha: 1).setStroke()
                seperator.stroke()
                context.restoreGState()
                
                /// Seperator
                let seperator2 = UIBezierPath()
                seperator2.move(to: CGPoint(x: 0, y: 0.5))
                seperator2.addLine(to: CGPoint(x: 344.5, y: 0.5))
                context.saveGState()
                context.translateBy(x: 15.25, y: 135.25)
                seperator2.lineCapStyle = .square
                seperator2.lineWidth = 0.5
                UIColor(hue: 0.574, saturation: 0.054, brightness: 0.651, alpha: 1).setStroke()
                seperator2.stroke()
                context.restoreGState()
                
                /// Location
                do {
                    context.saveGState()
                    context.translateBy(x: 30, y: 284.5)
                    
                    /// Disclosure
                    // Warning: Image layers are not supported.
                    
                    /// None
                    let none2 = NSMutableAttributedString(string: "None")
                    none2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: none2.length))
                    none2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: none2.length))
                    none2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: none2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        none2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: none2.length))
                    }
                    context.saveGState()
                    none2.draw(at: CGPoint(x: 254, y: 0))
                    context.restoreGState()
                    
                    /// Location
                    let location = NSMutableAttributedString(string: "Location")
                    location.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: location.length))
                    location.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: location.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        location.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: location.length))
                    }
                    context.saveGState()
                    location.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Content
                do {
                    context.saveGState()
                    context.translateBy(x: 29, y: 146.5)
                    
                    /// 117
                    let _117 = NSMutableAttributedString(string: "117")
                    _117.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: _117.length))
                    _117.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: _117.length))
                    _117.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: _117.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 13
                        paragraphStyle.minimumLineHeight = 13
                        _117.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _117.length))
                    }
                    context.saveGState()
                    _117.draw(at: CGPoint(x: 1, y: 107.5))
                    context.restoreGState()
                    
                    /// Image Placehoder
                    let imagePlacehoder = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 70, height: 70))
                    context.saveGState()
                    context.setAlpha(0.3)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 246, y: 4)
                        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
                        imagePlacehoder.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Text
                    let text = NSMutableAttributedString(string: "Text")
                    text.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text.length))
                    text.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        text.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
                    }
                    context.saveGState()
                    text.draw(in: CGRect(x: 0, y: 0.5, width: 317, height: 25))
                    context.restoreGState()
                    
                    /// Cursor
                    // Warning: New symbols are not supported.
                    
                    context.restoreGState()
                }
                
                /// Navigation Bar - Modal Sheet
                do {
                    context.saveGState()
                    context.translateBy(x: 14.5, y: 91)
                    
                    /// Action Text
                    // Warning: New symbols are not supported.
                    
                    /// Action Text Emphasized
                    // Warning: New symbols are not supported.
                    
                    /// Title
                    let title = NSMutableAttributedString(string: "Twitter")
                    title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
                    title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                    }
                    context.saveGState()
                    title.draw(at: CGPoint(x: 146, y: 10))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Social Compose View
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 1590)
                
                /// Screen Background
                let screenBackground2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground2.fill()
                context.restoreGState()
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic
                // Warning: New symbols are not supported.
                
                /// Alert Shape
                let alertShape2 = UIBezierPath()
                alertShape2.move(to: CGPoint(x: 345, y: 216.38))
                alertShape2.addCurve(to: CGPoint(x: 345, y: 217.48), controlPoint1: CGPoint(x: 345, y: 216.75), controlPoint2: CGPoint(x: 345, y: 217.11))
                alertShape2.addCurve(to: CGPoint(x: 344.98, y: 218.41), controlPoint1: CGPoint(x: 345, y: 217.79), controlPoint2: CGPoint(x: 344.99, y: 218.1))
                alertShape2.addCurve(to: CGPoint(x: 344.81, y: 220.43), controlPoint1: CGPoint(x: 344.97, y: 219.08), controlPoint2: CGPoint(x: 344.93, y: 219.76))
                alertShape2.addCurve(to: CGPoint(x: 344.17, y: 222.35), controlPoint1: CGPoint(x: 344.68, y: 221.11), controlPoint2: CGPoint(x: 344.49, y: 221.74))
                alertShape2.addCurve(to: CGPoint(x: 342.99, y: 223.99), controlPoint1: CGPoint(x: 343.87, y: 222.95), controlPoint2: CGPoint(x: 343.46, y: 223.51))
                alertShape2.addCurve(to: CGPoint(x: 341.35, y: 225.17), controlPoint1: CGPoint(x: 342.51, y: 224.46), controlPoint2: CGPoint(x: 341.95, y: 224.87))
                alertShape2.addCurve(to: CGPoint(x: 339.43, y: 225.81), controlPoint1: CGPoint(x: 340.74, y: 225.49), controlPoint2: CGPoint(x: 340.11, y: 225.68))
                alertShape2.addCurve(to: CGPoint(x: 337.41, y: 225.98), controlPoint1: CGPoint(x: 338.76, y: 225.93), controlPoint2: CGPoint(x: 338.08, y: 225.97))
                alertShape2.addCurve(to: CGPoint(x: 335.38, y: 226), controlPoint1: CGPoint(x: 336.11, y: 226), controlPoint2: CGPoint(x: 335.75, y: 226))
                alertShape2.addLine(to: CGPoint(x: 13.84, y: 226))
                alertShape2.addLine(to: CGPoint(x: 9.62, y: 226))
                alertShape2.addCurve(to: CGPoint(x: 8.52, y: 226), controlPoint1: CGPoint(x: 9.25, y: 226), controlPoint2: CGPoint(x: 8.89, y: 226))
                alertShape2.addCurve(to: CGPoint(x: 5.57, y: 225.81), controlPoint1: CGPoint(x: 6.92, y: 225.97), controlPoint2: CGPoint(x: 6.24, y: 225.93))
                alertShape2.addCurve(to: CGPoint(x: 3.65, y: 225.17), controlPoint1: CGPoint(x: 4.89, y: 225.68), controlPoint2: CGPoint(x: 4.26, y: 225.49))
                alertShape2.addCurve(to: CGPoint(x: 2.01, y: 223.99), controlPoint1: CGPoint(x: 3.05, y: 224.87), controlPoint2: CGPoint(x: 2.49, y: 224.46))
                alertShape2.addCurve(to: CGPoint(x: 0.83, y: 222.35), controlPoint1: CGPoint(x: 1.54, y: 223.51), controlPoint2: CGPoint(x: 1.13, y: 222.95))
                alertShape2.addCurve(to: CGPoint(x: 0.19, y: 220.43), controlPoint1: CGPoint(x: 0.51, y: 221.74), controlPoint2: CGPoint(x: 0.32, y: 221.11))
                alertShape2.addCurve(to: CGPoint(x: 0.02, y: 218.41), controlPoint1: CGPoint(x: 0.07, y: 219.76), controlPoint2: CGPoint(x: 0.03, y: 219.08))
                alertShape2.addCurve(to: CGPoint(x: 0, y: 217.48), controlPoint1: CGPoint(x: 0.01, y: 218.1), controlPoint2: CGPoint(x: 0, y: 217.79))
                alertShape2.addCurve(to: CGPoint(x: 0, y: 216.38), controlPoint1: CGPoint(x: 0, y: 217.11), controlPoint2: CGPoint(x: 0, y: 216.75))
                alertShape2.addLine(to: CGPoint(x: 0, y: 212.16))
                alertShape2.addLine(to: CGPoint(x: 0, y: 13.84))
                alertShape2.addLine(to: CGPoint(x: 0, y: 9.62))
                alertShape2.addCurve(to: CGPoint(x: 0, y: 8.52), controlPoint1: CGPoint(x: 0, y: 9.25), controlPoint2: CGPoint(x: 0, y: 8.89))
                alertShape2.addCurve(to: CGPoint(x: 0.02, y: 7.59), controlPoint1: CGPoint(x: 0, y: 8.21), controlPoint2: CGPoint(x: 0.01, y: 7.9))
                alertShape2.addCurve(to: CGPoint(x: 0.19, y: 5.57), controlPoint1: CGPoint(x: 0.03, y: 6.92), controlPoint2: CGPoint(x: 0.07, y: 6.24))
                alertShape2.addCurve(to: CGPoint(x: 0.83, y: 3.65), controlPoint1: CGPoint(x: 0.32, y: 4.89), controlPoint2: CGPoint(x: 0.51, y: 4.26))
                alertShape2.addCurve(to: CGPoint(x: 2.01, y: 2.01), controlPoint1: CGPoint(x: 1.13, y: 3.05), controlPoint2: CGPoint(x: 1.54, y: 2.49))
                alertShape2.addCurve(to: CGPoint(x: 3.65, y: 0.83), controlPoint1: CGPoint(x: 2.49, y: 1.54), controlPoint2: CGPoint(x: 3.05, y: 1.13))
                alertShape2.addCurve(to: CGPoint(x: 5.57, y: 0.19), controlPoint1: CGPoint(x: 4.26, y: 0.51), controlPoint2: CGPoint(x: 4.89, y: 0.32))
                alertShape2.addCurve(to: CGPoint(x: 7.59, y: 0.02), controlPoint1: CGPoint(x: 6.24, y: 0.07), controlPoint2: CGPoint(x: 6.92, y: 0.03))
                alertShape2.addCurve(to: CGPoint(x: 9.62, y: 0), controlPoint1: CGPoint(x: 8.89, y: 0), controlPoint2: CGPoint(x: 9.25, y: 0))
                alertShape2.addLine(to: CGPoint(x: 13.84, y: 0))
                alertShape2.addLine(to: CGPoint(x: 335.08, y: 0))
                alertShape2.addLine(to: CGPoint(x: 331.16, y: 0))
                alertShape2.addLine(to: CGPoint(x: 335.38, y: 0))
                alertShape2.addCurve(to: CGPoint(x: 336.48, y: 0), controlPoint1: CGPoint(x: 335.75, y: 0), controlPoint2: CGPoint(x: 336.11, y: 0))
                alertShape2.addCurve(to: CGPoint(x: 339.43, y: 0.19), controlPoint1: CGPoint(x: 338.08, y: 0.03), controlPoint2: CGPoint(x: 338.76, y: 0.07))
                alertShape2.addCurve(to: CGPoint(x: 341.35, y: 0.83), controlPoint1: CGPoint(x: 340.11, y: 0.32), controlPoint2: CGPoint(x: 340.74, y: 0.51))
                alertShape2.addCurve(to: CGPoint(x: 342.99, y: 2.01), controlPoint1: CGPoint(x: 341.95, y: 1.13), controlPoint2: CGPoint(x: 342.51, y: 1.54))
                alertShape2.addCurve(to: CGPoint(x: 344.17, y: 3.65), controlPoint1: CGPoint(x: 343.46, y: 2.49), controlPoint2: CGPoint(x: 343.87, y: 3.05))
                alertShape2.addCurve(to: CGPoint(x: 344.81, y: 5.57), controlPoint1: CGPoint(x: 344.49, y: 4.26), controlPoint2: CGPoint(x: 344.68, y: 4.89))
                alertShape2.addCurve(to: CGPoint(x: 344.98, y: 7.59), controlPoint1: CGPoint(x: 344.93, y: 6.24), controlPoint2: CGPoint(x: 344.97, y: 6.92))
                alertShape2.addCurve(to: CGPoint(x: 345, y: 8.52), controlPoint1: CGPoint(x: 344.99, y: 7.9), controlPoint2: CGPoint(x: 345, y: 8.21))
                alertShape2.addCurve(to: CGPoint(x: 345, y: 9.62), controlPoint1: CGPoint(x: 345, y: 8.89), controlPoint2: CGPoint(x: 345, y: 9.25))
                alertShape2.addLine(to: CGPoint(x: 345, y: 13.84))
                alertShape2.addLine(to: CGPoint(x: 345, y: 212.16))
                alertShape2.addLine(to: CGPoint(x: 345, y: 216.38))
                alertShape2.close()
                alertShape2.move(to: CGPoint(x: 345, y: 216.38))
                context.saveGState()
                context.setAlpha(0.96)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 15, y: 92)
                    alertShape2.usesEvenOddFillRule = true
                    UIColor(white: 0.969, alpha: 1).setFill()
                    alertShape2.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Seperator
                let seperator3 = UIBezierPath()
                seperator3.move(to: CGPoint(x: 0, y: 0.5))
                seperator3.addLine(to: CGPoint(x: 344.5, y: 0.5))
                context.saveGState()
                context.translateBy(x: 15.25, y: 272.75)
                seperator3.lineCapStyle = .square
                seperator3.lineWidth = 0.5
                UIColor(hue: 0.574, saturation: 0.054, brightness: 0.651, alpha: 1).setStroke()
                seperator3.stroke()
                context.restoreGState()
                
                /// Seperator
                let seperator4 = UIBezierPath()
                seperator4.move(to: CGPoint(x: 0, y: 0.5))
                seperator4.addLine(to: CGPoint(x: 344.5, y: 0.5))
                context.saveGState()
                context.translateBy(x: 15.25, y: 135.25)
                seperator4.lineCapStyle = .square
                seperator4.lineWidth = 0.5
                UIColor(hue: 0.574, saturation: 0.054, brightness: 0.651, alpha: 1).setStroke()
                seperator4.stroke()
                context.restoreGState()
                
                /// Location
                do {
                    context.saveGState()
                    context.translateBy(x: 30, y: 284.5)
                    
                    /// Disclosure
                    // Warning: Image layers are not supported.
                    
                    /// None
                    let none3 = NSMutableAttributedString(string: "None")
                    none3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: none3.length))
                    none3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: none3.length))
                    none3.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: none3.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        none3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: none3.length))
                    }
                    context.saveGState()
                    none3.draw(at: CGPoint(x: 254, y: 0))
                    context.restoreGState()
                    
                    /// Location
                    let location3 = NSMutableAttributedString(string: "Location")
                    location3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: location3.length))
                    location3.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: location3.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        location3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: location3.length))
                    }
                    context.saveGState()
                    location3.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// Content
                do {
                    context.saveGState()
                    context.translateBy(x: 29, y: 146.5)
                    
                    /// 134
                    let _134 = NSMutableAttributedString(string: "134")
                    _134.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: _134.length))
                    _134.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: _134.length))
                    _134.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: _134.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 13
                        paragraphStyle.minimumLineHeight = 13
                        _134.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _134.length))
                    }
                    context.saveGState()
                    _134.draw(at: CGPoint(x: 1, y: 107.5))
                    context.restoreGState()
                    
                    /// Text
                    let text2 = NSMutableAttributedString(string: "Text")
                    text2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text2.length))
                    text2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text2.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        text2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text2.length))
                    }
                    context.saveGState()
                    text2.draw(in: CGRect(x: 0, y: 0.5, width: 317, height: 25))
                    context.restoreGState()
                    
                    /// Cursor
                    // Warning: New symbols are not supported.
                    
                    context.restoreGState()
                }
                
                /// Navigation Bar - Modal Sheet
                do {
                    context.saveGState()
                    context.translateBy(x: 14.5, y: 91)
                    
                    /// Action Text
                    // Warning: New symbols are not supported.
                    
                    /// Action Text Emphasized
                    // Warning: New symbols are not supported.
                    
                    /// Title
                    let title4 = NSMutableAttributedString(string: "Twitter")
                    title4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title4.length))
                    title4.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title4.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 22
                        paragraphStyle.minimumLineHeight = 22
                        title4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title4.length))
                    }
                    context.saveGState()
                    title4.draw(at: CGPoint(x: 146, y: 10))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Dictation Dark
            do {
                context.saveGState()
                context.translateBy(x: 1205, y: 840)
                
                /// Screen Background
                let screenBackground3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.black.setFill()
                screenBackground3.fill()
                context.restoreGState()
                
                /// Dictation
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Numberic Dark
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 840)
                
                /// Screen Background
                let screenBackground4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.black.setFill()
                screenBackground4.fill()
                context.restoreGState()
                
                /// Keyboard Numberic
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Emoji Dark
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 840)
                
                /// Screen Background
                let screenBackground5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.black.setFill()
                screenBackground5.fill()
                context.restoreGState()
                
                /// Keyboard Emoji
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Dark
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 840)
                
                /// Screen Background
                let screenBackground6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.black.setFill()
                screenBackground6.fill()
                context.restoreGState()
                
                /// Keyboard Alphabetic - Suggestions Collapsed
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic - Suggestions Expanded
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Dictation Light
            do {
                context.saveGState()
                context.translateBy(x: 1205, y: 120)
                
                /// Screen Background
                let screenBackground7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground7.fill()
                context.restoreGState()
                
                /// Dictation
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Numeric Light
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 120)
                
                /// Screen Background
                let screenBackground8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground8.fill()
                context.restoreGState()
                
                /// Keyboard Numberic
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Emoji Light
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 120)
                
                /// Screen Background
                let screenBackground9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground9.fill()
                context.restoreGState()
                
                /// Keyboard Emoji
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Keyboard Light
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 120)
                
                /// Screen Background
                let screenBackground10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor.white.setFill()
                screenBackground10.fill()
                context.restoreGState()
                
                /// Keyboard Alphabetic - Suggestions Collapsed Light
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic
                // Warning: New symbols are not supported.
                
                /// Keyboard Alphabetic - Suggestions Expanded
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// UI Elements - Views
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 2880)
            
            /// Labels + Background
            do {
                context.saveGState()
                
                /// Template Header and Footer
                // Warning: New symbols are not supported.
                
                /// Alerts
                let alerts = NSMutableAttributedString(string: "Alerts")
                alerts.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: alerts.length))
                alerts.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: alerts.length))
                alerts.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: alerts.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    alerts.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: alerts.length))
                }
                context.saveGState()
                alerts.draw(in: CGRect(x: 20, y: 831, width: 300, height: 15))
                context.restoreGState()
                
                /// Activity View Contro
                let activityViewContro = NSMutableAttributedString(string: "Activity View Control")
                activityViewContro.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: activityViewContro.length))
                activityViewContro.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: activityViewContro.length))
                activityViewContro.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: activityViewContro.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    activityViewContro.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: activityViewContro.length))
                }
                context.saveGState()
                activityViewContro.draw(in: CGRect(x: 1205, y: 101, width: 300, height: 15))
                context.restoreGState()
                
                /// Action Sheets
                let actionSheets = NSMutableAttributedString(string: "Action Sheets")
                actionSheets.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: actionSheets.length))
                actionSheets.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: actionSheets.length))
                actionSheets.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: actionSheets.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    actionSheets.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: actionSheets.length))
                }
                context.saveGState()
                actionSheets.draw(in: CGRect(x: 20, y: 101, width: 300, height: 15))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Views / Alerts / Text Field
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 1530)
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Views / _Resources / Keyboard
                // Warning: New symbols are not supported.
                
                /// Alerts - Text Field
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Views / Alerts / Default 3 Options
            do {
                context.saveGState()
                context.translateBy(x: 1205, y: 850)
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Alerts - 3 Buttons
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Views / Alerts / Default 2 Line Title
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 850)
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Alerts - 2 Line Title - 2 Buttons
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Views / Alerts / Default 1 Line Title
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 850)
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Alerts - 1 Line Title - 2 Buttons
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Views / Alerts / Default 1 Line Title
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 850)
                
                /// Screen Dimming Overlay
                // Warning: New symbols are not supported.
                
                /// Alerts - 1 Line Title
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Activity View
            // Warning: New symbols are not supported.
            
            /// Action Sheet Long with Description
            // Warning: New symbols are not supported.
            
            /// Action Sheet with Description
            // Warning: New symbols are not supported.
            
            /// Action Sheet
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        /// UI Elements - Controls
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1040)
            
            /// Labels + Background
            do {
                context.saveGState()
                
                /// Template Header and Footer
                // Warning: New symbols are not supported.
                
                /// Table View Section Index
                let tableViewSectionIndex = NSMutableAttributedString(string: "Table View Section Index")
                tableViewSectionIndex.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tableViewSectionIndex.length))
                tableViewSectionIndex.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tableViewSectionIndex.length))
                tableViewSectionIndex.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tableViewSectionIndex.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    tableViewSectionIndex.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tableViewSectionIndex.length))
                }
                context.saveGState()
                tableViewSectionIndex.draw(in: CGRect(x: 1205, y: 1081, width: 300, height: 15))
                context.restoreGState()
                
                /// Table View with Stic
                let tableViewWithStic = NSMutableAttributedString(string: "Table View with Sticky Header")
                tableViewWithStic.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tableViewWithStic.length))
                tableViewWithStic.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tableViewWithStic.length))
                tableViewWithStic.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tableViewWithStic.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    tableViewWithStic.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tableViewWithStic.length))
                }
                context.saveGState()
                tableViewWithStic.draw(in: CGRect(x: 810, y: 1081, width: 300, height: 15))
                context.restoreGState()
                
                /// Grouped Table View S
                let groupedTableViewS = NSMutableAttributedString(string: "Grouped Table View Section Header and Footer")
                groupedTableViewS.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: groupedTableViewS.length))
                groupedTableViewS.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: groupedTableViewS.length))
                groupedTableViewS.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: groupedTableViewS.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    groupedTableViewS.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: groupedTableViewS.length))
                }
                context.saveGState()
                groupedTableViewS.draw(in: CGRect(x: 415, y: 1081, width: 300, height: 15))
                context.restoreGState()
                
                /// Table View Cells
                let tableViewCells = NSMutableAttributedString(string: "Table View Cells")
                tableViewCells.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tableViewCells.length))
                tableViewCells.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tableViewCells.length))
                tableViewCells.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tableViewCells.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    tableViewCells.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tableViewCells.length))
                }
                context.saveGState()
                tableViewCells.draw(in: CGRect(x: 20, y: 531, width: 300, height: 15))
                context.restoreGState()
                
                /// Edit Menu
                let editMenu = NSMutableAttributedString(string: "Edit Menu")
                editMenu.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: editMenu.length))
                editMenu.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: editMenu.length))
                editMenu.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: editMenu.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    editMenu.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: editMenu.length))
                }
                context.saveGState()
                editMenu.draw(in: CGRect(x: 810, y: 371, width: 300, height: 15))
                context.restoreGState()
                
                /// Switch
                let switch2 = NSMutableAttributedString(string: "Switch")
                switch2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: switch2.length))
                switch2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: switch2.length))
                switch2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: switch2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    switch2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: switch2.length))
                }
                context.saveGState()
                switch2.draw(in: CGRect(x: 415, y: 371, width: 300, height: 15))
                context.restoreGState()
                
                /// Stepper
                let stepper = NSMutableAttributedString(string: "Stepper")
                stepper.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: stepper.length))
                stepper.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: stepper.length))
                stepper.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: stepper.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    stepper.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: stepper.length))
                }
                context.saveGState()
                stepper.draw(in: CGRect(x: 415, y: 261, width: 300, height: 15))
                context.restoreGState()
                
                /// Segmented Control
                let segmentedControl = NSMutableAttributedString(string: "Segmented Control")
                segmentedControl.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: segmentedControl.length))
                segmentedControl.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: segmentedControl.length))
                segmentedControl.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: segmentedControl.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    segmentedControl.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: segmentedControl.length))
                }
                context.saveGState()
                segmentedControl.draw(in: CGRect(x: 20, y: 261, width: 300, height: 15))
                context.restoreGState()
                
                /// Edit Menu
                let editMenu2 = NSMutableAttributedString(string: "Edit Menu")
                editMenu2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: editMenu2.length))
                editMenu2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: editMenu2.length))
                editMenu2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: editMenu2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    editMenu2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: editMenu2.length))
                }
                context.saveGState()
                editMenu2.draw(in: CGRect(x: 810, y: 211, width: 300, height: 15))
                context.restoreGState()
                
                /// Progress Indicators
                let progressIndicators = NSMutableAttributedString(string: "Progress Indicators")
                progressIndicators.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: progressIndicators.length))
                progressIndicators.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: progressIndicators.length))
                progressIndicators.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: progressIndicators.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    progressIndicators.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: progressIndicators.length))
                }
                context.saveGState()
                progressIndicators.draw(in: CGRect(x: 1205, y: 91, width: 300, height: 15))
                context.restoreGState()
                
                /// Page Controls
                let pageControls = NSMutableAttributedString(string: "Page Controls")
                pageControls.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: pageControls.length))
                pageControls.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: pageControls.length))
                pageControls.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: pageControls.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    pageControls.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: pageControls.length))
                }
                context.saveGState()
                pageControls.draw(in: CGRect(x: 810, y: 91, width: 300, height: 15))
                context.restoreGState()
                
                /// Sliders
                let sliders = NSMutableAttributedString(string: "Sliders")
                sliders.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: sliders.length))
                sliders.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: sliders.length))
                sliders.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: sliders.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    sliders.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: sliders.length))
                }
                context.saveGState()
                sliders.draw(in: CGRect(x: 415, y: 91, width: 300, height: 15))
                context.restoreGState()
                
                /// Buttons
                let buttons = NSMutableAttributedString(string: "Buttons")
                buttons.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: buttons.length))
                buttons.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: buttons.length))
                buttons.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: buttons.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    buttons.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: buttons.length))
                }
                context.saveGState()
                buttons.draw(in: CGRect(x: 20, y: 91, width: 300, height: 15))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Table View Section Index
            do {
                context.saveGState()
                context.translateBy(x: 1205, y: 1110)
                
                /// Background
                let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor(white: 0.933, alpha: 1).setFill()
                background.fill()
                context.restoreGState()
                
                /// Controls/Section Headers/Light Section Index
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Table View with Sticky Header
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 1110)
                
                /// Background
                let background2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 629))
                context.saveGState()
                context.translateBy(x: 395, y: 38)
                UIColor.white.setFill()
                background2.fill()
                context.restoreGState()
                
                /// Background
                let background3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
                context.saveGState()
                UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
                background3.fill()
                context.restoreGState()
                
                /// Controls/Section Headers/Light Default Header
                // Warning: New symbols are not supported.
                
                /// Controls/Section Headers/Light Default Header
                // Warning: New symbols are not supported.
                
                /// Controls/Section Headers/Light Default Header
                // Warning: New symbols are not supported.
                
                /// Controls/Section Headers/Light Default Header
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/Section Headers/Light Default Header
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Grouped Table View Section Header and Footer
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 1129)
                
                /// Controls/Section Headers/Light Grouped Footer
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/Section Headers/Light Grouped Header
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Table View Cells
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 560)
                
                /// Controls/TableViewCell/Light Large + Action + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default + Action + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large + Action + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Large
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default + Action + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default + Delete
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Text Field
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 400)
                
                /// Controls/Text Field/Light
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Switches
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 400)
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Edit Menu
            do {
                context.saveGState()
                context.translateBy(x: 852, y: 240)
                
                /// Controls/Edit Menu/Light Text Selection
                // Warning: New symbols are not supported.
                
                /// Controls/Edit Menu/Multi Action
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Stepper
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 290)
                
                /// Controls/TableViewCell/Light Default
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Segmented Controls
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 300)
                
                /// Controls / Segmented Control / 3 Buttons on Light
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Progress Indicator
            do {
                context.saveGState()
                context.translateBy(x: 1205, y: 132)
                
                /// Controls/Progress Indicator/Light Indetermined Spinner with Label
                // Warning: New symbols are not supported.
                
                /// Controls/Progress Indicator/Light Progress Bar
                // Warning: New symbols are not supported.
                
                /// Controls/Progress Indicator/Light Toolbar Progress Indicator
                // Warning: New symbols are not supported.
                
                /// Controls/Progress Indicator/Light Indetermined Spinner
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Page Controls
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 120)
                
                /// Controls / Pagination Dots / 2 Dots On Dark
                // Warning: New symbols are not supported.
                
                /// Controls / Pagination Dots / 2 Dots On Dark
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Sliders
            do {
                context.saveGState()
                context.translateBy(x: 415, y: 120)
                
                /// Controls/Slider/Light Volume
                // Warning: New symbols are not supported.
                
                /// Controls/Slider/Light Default
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Buttons
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 120)
                
                /// Controls/Buttons/Light Default
                // Warning: New symbols are not supported.
                
                /// Controls/Buttons/Light Info
                // Warning: New symbols are not supported.
                
                /// Controls/Buttons/Light Add
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// UI Elements - Bars
        do {
            context.saveGState()
            
            /// Labels + Background
            do {
                context.saveGState()
                
                /// Template Header and Footer
                // Warning: New symbols are not supported.
                
                /// Toolbars
                let toolbars = NSMutableAttributedString(string: "Toolbars")
                toolbars.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: toolbars.length))
                toolbars.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: toolbars.length))
                toolbars.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: toolbars.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    toolbars.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: toolbars.length))
                }
                context.saveGState()
                toolbars.draw(in: CGRect(x: 20, y: 601, width: 200, height: 15))
                context.restoreGState()
                
                /// Search Bars
                let searchBars = NSMutableAttributedString(string: "Search Bars")
                searchBars.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: searchBars.length))
                searchBars.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: searchBars.length))
                searchBars.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: searchBars.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    searchBars.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: searchBars.length))
                }
                context.saveGState()
                searchBars.draw(in: CGRect(x: 810, y: 381, width: 200, height: 15))
                context.restoreGState()
                
                /// Tab Bars
                let tabBars2 = NSMutableAttributedString(string: "Tab Bars")
                tabBars2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tabBars2.length))
                tabBars2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: tabBars2.length))
                tabBars2.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tabBars2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    tabBars2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabBars2.length))
                }
                context.saveGState()
                tabBars2.draw(in: CGRect(x: 20, y: 381, width: 200, height: 15))
                context.restoreGState()
                
                /// Navigation Bars
                let navigationBars = NSMutableAttributedString(string: "Navigation Bars")
                navigationBars.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: navigationBars.length))
                navigationBars.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: navigationBars.length))
                navigationBars.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: navigationBars.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    navigationBars.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: navigationBars.length))
                }
                context.saveGState()
                navigationBars.draw(in: CGRect(x: 810, y: 101, width: 200, height: 15))
                context.restoreGState()
                
                /// Status Bars
                let statusBars = NSMutableAttributedString(string: "Status Bars")
                statusBars.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: statusBars.length))
                statusBars.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: statusBars.length))
                statusBars.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: statusBars.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 13
                    paragraphStyle.minimumLineHeight = 13
                    statusBars.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: statusBars.length))
                }
                context.saveGState()
                statusBars.draw(in: CGRect(x: 20, y: 101, width: 200, height: 15))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Search Bars
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 400)
                
                /// Navigation Bar - With Search - Active 1
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - With Search - Inactive
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - With Search - Active 1
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - With Search - Inactive
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Toolbars
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 620)
                
                /// Toolbar - 3 Text Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 2 Text Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 5 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 4 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 3 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 2 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 3 Text Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 2 Text Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 5 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 4 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 3 Actions
                // Warning: New symbols are not supported.
                
                /// Toolbar - 2 Actions
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Tab Bars
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 400)
                
                /// Tab Bar - 5 Tabs
                // Warning: New symbols are not supported.
                
                /// Tab Bar - 4 Tabs
                // Warning: New symbols are not supported.
                
                /// Tab Bar - 3 Tabs
                // Warning: New symbols are not supported.
                
                /// Tab Bar - 5 Tabs
                // Warning: New symbols are not supported.
                
                /// Tab Bar - 4 Tabs
                // Warning: New symbols are not supported.
                
                /// Tab Bar - 3 Tabs
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Navigation Bars
            do {
                context.saveGState()
                context.translateBy(x: 810, y: 120)
                
                /// Navigation Bar - Modal Sheet
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - Actions
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - Hierarchical
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - Modal Sheet
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - Actions
                // Warning: New symbols are not supported.
                
                /// Navigation Bar - Hierarchical
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Status Bars
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 120)
                
                /// Status Bar - Location
                // Warning: New symbols are not supported.
                
                /// Status Bar - Recording
                // Warning: New symbols are not supported.
                
                /// Status Bar - In Call
                // Warning: New symbols are not supported.
                
                /// Status Bar - Back
                // Warning: New symbols are not supported.
                
                /// Status Bar
                // Warning: New symbols are not supported.
                
                /// Status Bar - Back
                // Warning: New symbols are not supported.
                
                /// Status Bar
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
    }
    
    /// Symbols
    
    class func drawTAKEATOURPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.851, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.851, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.852, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// TAKE A TOUR
            let tAKEATOUR2 = NSMutableAttributedString(string: "TAKE A TOUR")
            tAKEATOUR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: tAKEATOUR2.length))
            tAKEATOUR2.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: tAKEATOUR2.length))
            context.saveGState()
            tAKEATOUR2.draw(at: CGPoint(x: 82, y: 14))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLOGINPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.149, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.149, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.148, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// LOGIN
            let lOGIN3 = NSMutableAttributedString(string: "LOGIN")
            lOGIN3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: lOGIN3.length))
            lOGIN3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 1, saturation: 0.004, brightness: 0.633, alpha: 1), range: NSRange(location: 0, length: lOGIN3.length))
            lOGIN3.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: lOGIN3.length))
            context.saveGState()
            lOGIN3.draw(at: CGPoint(x: 116, y: 13))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTAKEATOUR(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor.white.setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor.white.setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor.white.setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// TAKE A TOUR
            let tAKEATOUR2 = NSMutableAttributedString(string: "TAKE A TOUR")
            tAKEATOUR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: tAKEATOUR2.length))
            tAKEATOUR2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.238, alpha: 1), range: NSRange(location: 0, length: tAKEATOUR2.length))
            tAKEATOUR2.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: tAKEATOUR2.length))
            context.saveGState()
            tAKEATOUR2.draw(at: CGPoint(x: 82, y: 14))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLOGIN2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 292, height: 54), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 292, height: 54), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 292, y: resizedFrame.height / 54)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 292, resizedFrame.height / 54)
        
        /// Group 8
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(
                        offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                        blur: 9 * resizedShadowScale,
                        color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval3.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval5.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                rectangle2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// LOGIN
            let lOGIN3 = NSMutableAttributedString(string: "LOGIN")
            lOGIN3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: lOGIN3.length))
            lOGIN3.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: lOGIN3.length))
            lOGIN3.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: lOGIN3.length))
            context.saveGState()
            lOGIN3.draw(at: CGPoint(x: 116, y: 13))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 577), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 577)
        
        /// Group 5
        do {
            context.saveGState()
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.725, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.933, alpha: 1), range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 30, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.964, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 164, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 201, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 577), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 577), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 577)
        
        /// Group 5
        do {
            context.saveGState()
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.422, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 31, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 164, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 201, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCancelPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 51.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -128.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 67.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0.012, brightness: 0.398, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// CANCEL
            let cANCEL = NSMutableAttributedString(string: "CANCEL")
            cANCEL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cANCEL.length))
            cANCEL.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.835, alpha: 1), range: NSRange(location: 0, length: cANCEL.length))
            cANCEL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cANCEL.length))
            context.saveGState()
            cANCEL.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRegisterPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 21)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 59.48, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.56)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -96, dy: -96))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -236.48, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 236.48, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 16
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 74.65, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: 0.56)
                    UIColor(hue: 0.59, saturation: 0.68, brightness: 0.725, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: 0.56))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// REGISTER
            let rEGISTER = NSMutableAttributedString(string: "REGISTER")
            rEGISTER.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: rEGISTER.length))
            rEGISTER.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.835, alpha: 1), range: NSRange(location: 0, length: rEGISTER.length))
            rEGISTER.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: rEGISTER.length))
            context.saveGState()
            rEGISTER.draw(in: CGRect(x: 0, y: 3.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 344, height: 113), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 344, y: resizedFrame.height / 113)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY = NSMutableAttributedString(string: " CATAGORY \n")
            cATAGORY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.906, saturation: 0, brightness: 0.485, alpha: 1), range: NSRange(location: 0, length: 9))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 9, length: 2))
            cATAGORY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY.length))
            }
            context.saveGState()
            cATAGORY.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE = NSMutableAttributedString(string: "TITLE")
            tITLE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE.length))
            }
            context.saveGState()
            tITLE.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL = NSMutableAttributedString(string: " DETAIL ")
            dETAIL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL.length))
            }
            context.saveGState()
            dETAIL.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 352, height: 583), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 352, height: 583), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 352, y: resizedFrame.height / 583)
        
        /// Group 5
        do {
            context.saveGState()
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 587.57), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(in: CGRect(x: 7, y: 0, width: 36, height: 46))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 31, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 165, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 202, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTAKETHETOUR(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 211, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 211, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 211, y: resizedFrame.height / 36)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 209.93, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -486.93, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 486.93, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 225.09, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// TAKE THE TOUR
        let tAKETHETOUR2 = NSMutableAttributedString(string: "TAKE THE TOUR")
        tAKETHETOUR2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: tAKETHETOUR2.length))
        tAKETHETOUR2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tAKETHETOUR2.length))
        tAKETHETOUR2.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: tAKETHETOUR2.length))
        context.saveGState()
        tAKETHETOUR2.draw(at: CGPoint(x: 53, y: 0))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawLOGIN(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 211, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 211, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 211, y: resizedFrame.height / 36)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 209.93, height: 25.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -486.93, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 486.93, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 225.09, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// LOG IN
        let lOGIN2 = NSMutableAttributedString(string: "LOG IN")
        lOGIN2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: lOGIN2.length))
        lOGIN2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: lOGIN2.length))
        lOGIN2.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: lOGIN2.length))
        context.saveGState()
        lOGIN2.draw(at: CGPoint(x: 83, y: 0))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawFilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 36.71, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -113.71, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113.71, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 54.83, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor.white.setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// FILTER
            let fILTER = NSMutableAttributedString(string: "FILTER")
            fILTER.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: fILTER.length))
            fILTER.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.226, alpha: 1), range: NSRange(location: 0, length: fILTER.length))
            fILTER.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: fILTER.length))
            context.saveGState()
            fILTER.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCancel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 51.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -128.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 67.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// CANCEL
            let cANCEL = NSMutableAttributedString(string: "CANCEL")
            cANCEL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cANCEL.length))
            cANCEL.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: cANCEL.length))
            cANCEL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cANCEL.length))
            context.saveGState()
            cANCEL.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRegister2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 62, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 62, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 62, y: resizedFrame.height / 18)
        
        /// Group
        do {
            context.saveGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 59.48, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape.cgPath)
                    context.addRect(combinedShape.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -136.48, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 136.48, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape.fill()
                        context.saveGState()
                        combinedShape.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 74.65, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
                    combinedShape2.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape2.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// REGISTER
            let rEGISTER = NSMutableAttributedString(string: "REGISTER")
            rEGISTER.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: rEGISTER.length))
            rEGISTER.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: rEGISTER.length))
            rEGISTER.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: rEGISTER.length))
            context.saveGState()
            rEGISTER.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWindowLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 344, height: 113), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 344, height: 113), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 344, y: resizedFrame.height / 113)
        
        /// Group 4
        do {
            context.saveGState()
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(white: 0.727, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY = NSMutableAttributedString(string: "CATAGORY\n")
            cATAGORY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.887, alpha: 1), range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY.length))
            }
            context.saveGState()
            cATAGORY.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE = NSMutableAttributedString(string: "TITLE")
            tITLE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE.length))
            }
            context.saveGState()
            tITLE.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL = NSMutableAttributedString(string: "DETAIL")
            dETAIL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.949, alpha: 1), range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL.length))
            }
            context.saveGState()
            dETAIL.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonWhitePressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 6
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.662, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.13, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonWhite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 6
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor.white.setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonBlackPressed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 7
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.064, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.508, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonBlack2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 7
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.8, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawButtonBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// Group 7
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.8, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawShapesTouchID(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 61, height: 62), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 61, height: 62), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 61, y: resizedFrame.height / 62)
        
        /// Glyph: Touch ID
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSliderLightDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 345, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 21)
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 172, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 21)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        /// knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.translateBy(x: 174, y: 8)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSliderLightVolume(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// louder icon
        let louderIcon = UIBezierPath()
        louderIcon.move(to: CGPoint(x: 21.81, y: 0.3))
        louderIcon.addCurve(to: CGPoint(x: 20.83, y: 0.11), controlPoint1: CGPoint(x: 21.59, y: 0.02), controlPoint2: CGPoint(x: 21.11, y: -0.11))
        louderIcon.addCurve(to: CGPoint(x: 20.63, y: 1.1), controlPoint1: CGPoint(x: 20.56, y: 0.33), controlPoint2: CGPoint(x: 20.41, y: 0.82))
        louderIcon.addCurve(to: CGPoint(x: 24.03, y: 11.02), controlPoint1: CGPoint(x: 22.85, y: 3.95), controlPoint2: CGPoint(x: 24.03, y: 7.38))
        louderIcon.addCurve(to: CGPoint(x: 20.63, y: 20.95), controlPoint1: CGPoint(x: 24.03, y: 14.67), controlPoint2: CGPoint(x: 22.85, y: 18.1))
        louderIcon.addCurve(to: CGPoint(x: 20.83, y: 21.94), controlPoint1: CGPoint(x: 20.41, y: 21.23), controlPoint2: CGPoint(x: 20.56, y: 21.72))
        louderIcon.addCurve(to: CGPoint(x: 21.31, y: 21.99), controlPoint1: CGPoint(x: 20.95, y: 22.03), controlPoint2: CGPoint(x: 21.17, y: 21.99))
        louderIcon.addCurve(to: CGPoint(x: 21.81, y: 21.75), controlPoint1: CGPoint(x: 21.5, y: 21.99), controlPoint2: CGPoint(x: 21.68, y: 21.91))
        louderIcon.addCurve(to: CGPoint(x: 25.49, y: 11.02), controlPoint1: CGPoint(x: 24.22, y: 18.67), controlPoint2: CGPoint(x: 25.49, y: 14.96))
        louderIcon.addCurve(to: CGPoint(x: 21.81, y: 0.3), controlPoint1: CGPoint(x: 25.49, y: 7.09), controlPoint2: CGPoint(x: 24.22, y: 3.38))
        louderIcon.move(to: CGPoint(x: 18.32, y: 3.27))
        louderIcon.addCurve(to: CGPoint(x: 17.37, y: 3.13), controlPoint1: CGPoint(x: 18.1, y: 3), controlPoint2: CGPoint(x: 17.64, y: 2.91))
        louderIcon.addCurve(to: CGPoint(x: 17.12, y: 4.08), controlPoint1: CGPoint(x: 17.11, y: 3.35), controlPoint2: CGPoint(x: 16.9, y: 3.81))
        louderIcon.addCurve(to: CGPoint(x: 19.51, y: 11.01), controlPoint1: CGPoint(x: 18.66, y: 6.03), controlPoint2: CGPoint(x: 19.51, y: 8.49))
        louderIcon.addCurve(to: CGPoint(x: 17.12, y: 17.94), controlPoint1: CGPoint(x: 19.51, y: 13.53), controlPoint2: CGPoint(x: 18.66, y: 15.99))
        louderIcon.addCurve(to: CGPoint(x: 17.36, y: 18.89), controlPoint1: CGPoint(x: 16.9, y: 18.21), controlPoint2: CGPoint(x: 17.09, y: 18.67))
        louderIcon.addCurve(to: CGPoint(x: 17.83, y: 18.98), controlPoint1: CGPoint(x: 17.47, y: 18.99), controlPoint2: CGPoint(x: 17.7, y: 18.98))
        louderIcon.addCurve(to: CGPoint(x: 18.32, y: 18.74), controlPoint1: CGPoint(x: 18.02, y: 18.98), controlPoint2: CGPoint(x: 18.2, y: 18.9))
        louderIcon.addCurve(to: CGPoint(x: 21, y: 11.01), controlPoint1: CGPoint(x: 20.05, y: 16.57), controlPoint2: CGPoint(x: 21, y: 13.82))
        louderIcon.addCurve(to: CGPoint(x: 18.32, y: 3.27), controlPoint1: CGPoint(x: 21, y: 8.2), controlPoint2: CGPoint(x: 20.05, y: 5.45))
        louderIcon.move(to: CGPoint(x: 13.75, y: 6.13))
        louderIcon.addCurve(to: CGPoint(x: 13.51, y: 7.01), controlPoint1: CGPoint(x: 13.48, y: 6.35), controlPoint2: CGPoint(x: 13.28, y: 6.75))
        louderIcon.addCurve(to: CGPoint(x: 15.04, y: 11.01), controlPoint1: CGPoint(x: 14.5, y: 8.12), controlPoint2: CGPoint(x: 15.04, y: 9.54))
        louderIcon.addCurve(to: CGPoint(x: 13.51, y: 15.01), controlPoint1: CGPoint(x: 15.04, y: 12.47), controlPoint2: CGPoint(x: 14.5, y: 13.89))
        louderIcon.addCurve(to: CGPoint(x: 13.75, y: 15.89), controlPoint1: CGPoint(x: 13.28, y: 15.27), controlPoint2: CGPoint(x: 13.48, y: 15.67))
        louderIcon.addCurve(to: CGPoint(x: 14.17, y: 16.04), controlPoint1: CGPoint(x: 13.88, y: 15.99), controlPoint2: CGPoint(x: 14.03, y: 16.04))
        louderIcon.addCurve(to: CGPoint(x: 14.67, y: 15.82), controlPoint1: CGPoint(x: 14.36, y: 16.04), controlPoint2: CGPoint(x: 14.54, y: 15.96))
        louderIcon.addCurve(to: CGPoint(x: 16.51, y: 11.01), controlPoint1: CGPoint(x: 15.85, y: 14.48), controlPoint2: CGPoint(x: 16.51, y: 12.77))
        louderIcon.addCurve(to: CGPoint(x: 14.67, y: 6.2), controlPoint1: CGPoint(x: 16.51, y: 9.25), controlPoint2: CGPoint(x: 15.85, y: 7.54))
        louderIcon.addCurve(to: CGPoint(x: 13.75, y: 6.13), controlPoint1: CGPoint(x: 14.44, y: 5.93), controlPoint2: CGPoint(x: 14.03, y: 5.9))
        louderIcon.move(to: CGPoint(x: 10.08, y: 3.68))
        louderIcon.addLine(to: CGPoint(x: 4.31, y: 8.01))
        louderIcon.addLine(to: CGPoint(x: 0, y: 8.01))
        louderIcon.addLine(to: CGPoint(x: 0, y: 14.51))
        louderIcon.addLine(to: CGPoint(x: 4.11, y: 14.51))
        louderIcon.addLine(to: CGPoint(x: 10.08, y: 18.99))
        louderIcon.addCurve(to: CGPoint(x: 10.48, y: 18.79), controlPoint1: CGPoint(x: 10.3, y: 19.16), controlPoint2: CGPoint(x: 10.48, y: 19.07))
        louderIcon.addLine(to: CGPoint(x: 10.48, y: 3.88))
        louderIcon.addCurve(to: CGPoint(x: 10.08, y: 3.68), controlPoint1: CGPoint(x: 10.48, y: 3.61), controlPoint2: CGPoint(x: 10.3, y: 3.52))
        context.saveGState()
        context.translateBy(x: 343, y: 11)
        louderIcon.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        louderIcon.fill()
        context.restoreGState()
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 40, y: 21)
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 40, y: 21)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        /// knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.translateBy(x: 174, y: 8)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        /// quieter icon
        let quieterIcon = UIBezierPath()
        quieterIcon.move(to: CGPoint(x: 10.5, y: 0))
        quieterIcon.addLine(to: CGPoint(x: 4.5, y: 4.5))
        quieterIcon.addLine(to: CGPoint(x: 0, y: 4.5))
        quieterIcon.addLine(to: CGPoint(x: 0, y: 11))
        quieterIcon.addLine(to: CGPoint(x: 4, y: 11))
        quieterIcon.addLine(to: CGPoint(x: 10.5, y: 15.5))
        quieterIcon.addLine(to: CGPoint(x: 10.5, y: 0))
        quieterIcon.close()
        quieterIcon.move(to: CGPoint(x: 10.5, y: 0))
        context.saveGState()
        context.translateBy(x: 15, y: 14)
        quieterIcon.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        quieterIcon.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSliderDarkDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 345, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 21)
        UIColor(hue: 0.667, saturation: 0.019, brightness: 0.204, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 172, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 21)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        /// knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.translateBy(x: 174, y: 8)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSliderDarkVolume(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// louder icon
        let louderIcon = UIBezierPath()
        louderIcon.move(to: CGPoint(x: 21.81, y: 0.3))
        louderIcon.addCurve(to: CGPoint(x: 20.83, y: 0.11), controlPoint1: CGPoint(x: 21.59, y: 0.02), controlPoint2: CGPoint(x: 21.11, y: -0.11))
        louderIcon.addCurve(to: CGPoint(x: 20.63, y: 1.1), controlPoint1: CGPoint(x: 20.56, y: 0.33), controlPoint2: CGPoint(x: 20.41, y: 0.82))
        louderIcon.addCurve(to: CGPoint(x: 24.03, y: 11.02), controlPoint1: CGPoint(x: 22.85, y: 3.95), controlPoint2: CGPoint(x: 24.03, y: 7.38))
        louderIcon.addCurve(to: CGPoint(x: 20.63, y: 20.95), controlPoint1: CGPoint(x: 24.03, y: 14.67), controlPoint2: CGPoint(x: 22.85, y: 18.1))
        louderIcon.addCurve(to: CGPoint(x: 20.83, y: 21.94), controlPoint1: CGPoint(x: 20.41, y: 21.23), controlPoint2: CGPoint(x: 20.56, y: 21.72))
        louderIcon.addCurve(to: CGPoint(x: 21.31, y: 21.99), controlPoint1: CGPoint(x: 20.95, y: 22.03), controlPoint2: CGPoint(x: 21.17, y: 21.99))
        louderIcon.addCurve(to: CGPoint(x: 21.81, y: 21.75), controlPoint1: CGPoint(x: 21.5, y: 21.99), controlPoint2: CGPoint(x: 21.68, y: 21.91))
        louderIcon.addCurve(to: CGPoint(x: 25.49, y: 11.02), controlPoint1: CGPoint(x: 24.22, y: 18.67), controlPoint2: CGPoint(x: 25.49, y: 14.96))
        louderIcon.addCurve(to: CGPoint(x: 21.81, y: 0.3), controlPoint1: CGPoint(x: 25.49, y: 7.09), controlPoint2: CGPoint(x: 24.22, y: 3.38))
        louderIcon.move(to: CGPoint(x: 18.32, y: 3.27))
        louderIcon.addCurve(to: CGPoint(x: 17.37, y: 3.13), controlPoint1: CGPoint(x: 18.1, y: 3), controlPoint2: CGPoint(x: 17.64, y: 2.91))
        louderIcon.addCurve(to: CGPoint(x: 17.12, y: 4.08), controlPoint1: CGPoint(x: 17.11, y: 3.35), controlPoint2: CGPoint(x: 16.9, y: 3.81))
        louderIcon.addCurve(to: CGPoint(x: 19.51, y: 11.01), controlPoint1: CGPoint(x: 18.66, y: 6.03), controlPoint2: CGPoint(x: 19.51, y: 8.49))
        louderIcon.addCurve(to: CGPoint(x: 17.12, y: 17.94), controlPoint1: CGPoint(x: 19.51, y: 13.53), controlPoint2: CGPoint(x: 18.66, y: 15.99))
        louderIcon.addCurve(to: CGPoint(x: 17.36, y: 18.89), controlPoint1: CGPoint(x: 16.9, y: 18.21), controlPoint2: CGPoint(x: 17.09, y: 18.67))
        louderIcon.addCurve(to: CGPoint(x: 17.83, y: 18.98), controlPoint1: CGPoint(x: 17.47, y: 18.99), controlPoint2: CGPoint(x: 17.7, y: 18.98))
        louderIcon.addCurve(to: CGPoint(x: 18.32, y: 18.74), controlPoint1: CGPoint(x: 18.02, y: 18.98), controlPoint2: CGPoint(x: 18.2, y: 18.9))
        louderIcon.addCurve(to: CGPoint(x: 21, y: 11.01), controlPoint1: CGPoint(x: 20.05, y: 16.57), controlPoint2: CGPoint(x: 21, y: 13.82))
        louderIcon.addCurve(to: CGPoint(x: 18.32, y: 3.27), controlPoint1: CGPoint(x: 21, y: 8.2), controlPoint2: CGPoint(x: 20.05, y: 5.45))
        louderIcon.move(to: CGPoint(x: 13.75, y: 6.13))
        louderIcon.addCurve(to: CGPoint(x: 13.51, y: 7.01), controlPoint1: CGPoint(x: 13.48, y: 6.35), controlPoint2: CGPoint(x: 13.28, y: 6.75))
        louderIcon.addCurve(to: CGPoint(x: 15.04, y: 11.01), controlPoint1: CGPoint(x: 14.5, y: 8.12), controlPoint2: CGPoint(x: 15.04, y: 9.54))
        louderIcon.addCurve(to: CGPoint(x: 13.51, y: 15.01), controlPoint1: CGPoint(x: 15.04, y: 12.47), controlPoint2: CGPoint(x: 14.5, y: 13.89))
        louderIcon.addCurve(to: CGPoint(x: 13.75, y: 15.89), controlPoint1: CGPoint(x: 13.28, y: 15.27), controlPoint2: CGPoint(x: 13.48, y: 15.67))
        louderIcon.addCurve(to: CGPoint(x: 14.17, y: 16.04), controlPoint1: CGPoint(x: 13.88, y: 15.99), controlPoint2: CGPoint(x: 14.03, y: 16.04))
        louderIcon.addCurve(to: CGPoint(x: 14.67, y: 15.82), controlPoint1: CGPoint(x: 14.36, y: 16.04), controlPoint2: CGPoint(x: 14.54, y: 15.96))
        louderIcon.addCurve(to: CGPoint(x: 16.51, y: 11.01), controlPoint1: CGPoint(x: 15.85, y: 14.48), controlPoint2: CGPoint(x: 16.51, y: 12.77))
        louderIcon.addCurve(to: CGPoint(x: 14.67, y: 6.2), controlPoint1: CGPoint(x: 16.51, y: 9.25), controlPoint2: CGPoint(x: 15.85, y: 7.54))
        louderIcon.addCurve(to: CGPoint(x: 13.75, y: 6.13), controlPoint1: CGPoint(x: 14.44, y: 5.93), controlPoint2: CGPoint(x: 14.03, y: 5.9))
        louderIcon.move(to: CGPoint(x: 10.08, y: 3.68))
        louderIcon.addLine(to: CGPoint(x: 4.31, y: 8.01))
        louderIcon.addLine(to: CGPoint(x: 0, y: 8.01))
        louderIcon.addLine(to: CGPoint(x: 0, y: 14.51))
        louderIcon.addLine(to: CGPoint(x: 4.11, y: 14.51))
        louderIcon.addLine(to: CGPoint(x: 10.08, y: 18.99))
        louderIcon.addCurve(to: CGPoint(x: 10.48, y: 18.79), controlPoint1: CGPoint(x: 10.3, y: 19.16), controlPoint2: CGPoint(x: 10.48, y: 19.07))
        louderIcon.addLine(to: CGPoint(x: 10.48, y: 3.88))
        louderIcon.addCurve(to: CGPoint(x: 10.08, y: 3.68), controlPoint1: CGPoint(x: 10.48, y: 3.61), controlPoint2: CGPoint(x: 10.3, y: 3.52))
        context.saveGState()
        context.translateBy(x: 343, y: 11)
        louderIcon.usesEvenOddFillRule = true
        UIColor.white.setFill()
        louderIcon.fill()
        context.restoreGState()
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 40, y: 21)
        UIColor(hue: 0.667, saturation: 0.019, brightness: 0.204, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.5, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 40, y: 21)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        /// knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.translateBy(x: 174, y: 8)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -50, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
        context.clip(using: .evenOdd)
        context.translateBy(x: -57, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.04).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        /// quieter icon
        let quieterIcon = UIBezierPath()
        quieterIcon.move(to: CGPoint(x: 10.5, y: 0))
        quieterIcon.addLine(to: CGPoint(x: 4.5, y: 4.5))
        quieterIcon.addLine(to: CGPoint(x: 0, y: 4.5))
        quieterIcon.addLine(to: CGPoint(x: 0, y: 11))
        quieterIcon.addLine(to: CGPoint(x: 4, y: 11))
        quieterIcon.addLine(to: CGPoint(x: 10.5, y: 15.5))
        quieterIcon.addLine(to: CGPoint(x: 10.5, y: 0))
        quieterIcon.close()
        quieterIcon.move(to: CGPoint(x: 10.5, y: 0))
        context.saveGState()
        context.translateBy(x: 15, y: 14)
        quieterIcon.usesEvenOddFillRule = true
        UIColor.white.setFill()
        quieterIcon.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTextFieldLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// clear
        let clear = UIBezierPath()
        clear.move(to: CGPoint(x: 7.18, y: 6.47))
        clear.addLine(to: CGPoint(x: 4.71, y: 4))
        clear.addLine(to: CGPoint(x: 4, y: 4.71))
        clear.addLine(to: CGPoint(x: 6.47, y: 7.18))
        clear.addLine(to: CGPoint(x: 4, y: 9.66))
        clear.addLine(to: CGPoint(x: 4.71, y: 10.36))
        clear.addLine(to: CGPoint(x: 7.18, y: 7.89))
        clear.addLine(to: CGPoint(x: 9.66, y: 10.36))
        clear.addLine(to: CGPoint(x: 10.36, y: 9.66))
        clear.addLine(to: CGPoint(x: 7.89, y: 7.18))
        clear.addLine(to: CGPoint(x: 10.36, y: 4.71))
        clear.addLine(to: CGPoint(x: 9.66, y: 4))
        clear.addLine(to: CGPoint(x: 7.18, y: 6.47))
        clear.close()
        clear.move(to: CGPoint(x: 7, y: 14))
        clear.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 14), controlPoint2: CGPoint(x: 0, y: 10.87))
        clear.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 0, y: 3.13), controlPoint2: CGPoint(x: 3.13, y: 0))
        clear.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 10.87, y: 0), controlPoint2: CGPoint(x: 14, y: 3.13))
        clear.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 14, y: 10.87), controlPoint2: CGPoint(x: 10.87, y: 14))
        clear.close()
        clear.move(to: CGPoint(x: 7, y: 14))
        context.saveGState()
        context.translateBy(x: 339, y: 17)
        clear.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        clear.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 12)
            
            /// cursor
            let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 34, y: 1)
            UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
            cursor.fill()
            context.restoreGState()
            
            /// Text
            let text = NSMutableAttributedString(string: "Text")
            text.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
            }
            context.saveGState()
            text.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTextFieldDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// clear
        let clear = UIBezierPath()
        clear.move(to: CGPoint(x: 7.18, y: 6.47))
        clear.addLine(to: CGPoint(x: 4.71, y: 4))
        clear.addLine(to: CGPoint(x: 4, y: 4.71))
        clear.addLine(to: CGPoint(x: 6.47, y: 7.18))
        clear.addLine(to: CGPoint(x: 4, y: 9.66))
        clear.addLine(to: CGPoint(x: 4.71, y: 10.36))
        clear.addLine(to: CGPoint(x: 7.18, y: 7.89))
        clear.addLine(to: CGPoint(x: 9.66, y: 10.36))
        clear.addLine(to: CGPoint(x: 10.36, y: 9.66))
        clear.addLine(to: CGPoint(x: 7.89, y: 7.18))
        clear.addLine(to: CGPoint(x: 10.36, y: 4.71))
        clear.addLine(to: CGPoint(x: 9.66, y: 4))
        clear.addLine(to: CGPoint(x: 7.18, y: 6.47))
        clear.close()
        clear.move(to: CGPoint(x: 7, y: 14))
        clear.addCurve(to: CGPoint(x: 0, y: 7), controlPoint1: CGPoint(x: 3.13, y: 14), controlPoint2: CGPoint(x: 0, y: 10.87))
        clear.addCurve(to: CGPoint(x: 7, y: 0), controlPoint1: CGPoint(x: 0, y: 3.13), controlPoint2: CGPoint(x: 3.13, y: 0))
        clear.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 10.87, y: 0), controlPoint2: CGPoint(x: 14, y: 3.13))
        clear.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 14, y: 10.87), controlPoint2: CGPoint(x: 10.87, y: 14))
        clear.close()
        clear.move(to: CGPoint(x: 7, y: 14))
        context.saveGState()
        context.translateBy(x: 339, y: 16)
        clear.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        clear.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 17, y: 11)
            
            /// cursor
            let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 34, y: 1)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            cursor.fill()
            context.restoreGState()
            
            /// Text
            let text = NSMutableAttributedString(string: "Text")
            text.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
            }
            context.saveGState()
            text.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenuLightTextSelection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 115, height: 46), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 115, height: 46), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 115, y: resizedFrame.height / 46)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 7, y: 11)
            
            /// Text
            let text = NSMutableAttributedString(string: "appropriately")
            text.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
            }
            context.saveGState()
            text.draw(in: CGRect(x: 0, y: 2, width: 101, height: 25))
            context.restoreGState()
            
            /// selection
            let selection = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 101, height: 23))
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 0.2).setFill()
            selection.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// handle
        let handle = UIBezierPath()
        handle.move(to: CGPoint(x: 7, y: 11.92))
        handle.addLine(to: CGPoint(x: 7, y: 34))
        handle.addLine(to: CGPoint(x: 5, y: 34))
        handle.addLine(to: CGPoint(x: 5, y: 11.92))
        handle.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.16, y: 11.44), controlPoint2: CGPoint(x: 0, y: 8.97))
        handle.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        handle.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        handle.addCurve(to: CGPoint(x: 7, y: 11.92), controlPoint1: CGPoint(x: 12, y: 8.97), controlPoint2: CGPoint(x: 9.84, y: 11.44))
        handle.close()
        handle.move(to: CGPoint(x: 7, y: 11.92))
        context.saveGState()
        handle.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        handle.fill()
        context.restoreGState()
        /// handle
        let handle2 = UIBezierPath()
        handle2.move(to: CGPoint(x: 7, y: 11.92))
        handle2.addLine(to: CGPoint(x: 7, y: 35))
        handle2.addLine(to: CGPoint(x: 5, y: 35))
        handle2.addLine(to: CGPoint(x: 5, y: 11.92))
        handle2.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.16, y: 11.44), controlPoint2: CGPoint(x: 0, y: 8.97))
        handle2.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        handle2.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        handle2.addCurve(to: CGPoint(x: 7, y: 11.92), controlPoint1: CGPoint(x: 12, y: 8.97), controlPoint2: CGPoint(x: 9.84, y: 11.44))
        handle2.close()
        handle2.move(to: CGPoint(x: 7, y: 11.92))
        context.saveGState()
        context.translateBy(x: 109, y: 28.5)
        context.scaleBy(x: 1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -6, y: -17.5)
        handle2.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        handle2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenuDarkTextSelection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 115, height: 46), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 115, height: 46), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 115, y: resizedFrame.height / 46)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 7, y: 11)
            
            /// Text
            let text = NSMutableAttributedString(string: "appropriately")
            text.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: text.length))
            text.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: text.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                text.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: text.length))
            }
            context.saveGState()
            text.draw(in: CGRect(x: 0, y: 2, width: 101, height: 25))
            context.restoreGState()
            
            /// selection
            let selection = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 101, height: 23))
            context.saveGState()
            UIColor(hue: 0.104, saturation: 0.857, brightness: 0.961, alpha: 0.2).setFill()
            selection.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// handle
        let handle = UIBezierPath()
        handle.move(to: CGPoint(x: 7, y: 11.92))
        handle.addLine(to: CGPoint(x: 7, y: 34))
        handle.addLine(to: CGPoint(x: 5, y: 34))
        handle.addLine(to: CGPoint(x: 5, y: 11.92))
        handle.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.16, y: 11.44), controlPoint2: CGPoint(x: 0, y: 8.97))
        handle.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        handle.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        handle.addCurve(to: CGPoint(x: 7, y: 11.92), controlPoint1: CGPoint(x: 12, y: 8.97), controlPoint2: CGPoint(x: 9.84, y: 11.44))
        handle.close()
        handle.move(to: CGPoint(x: 7, y: 11.92))
        context.saveGState()
        handle.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        handle.fill()
        context.restoreGState()
        /// handle
        let handle2 = UIBezierPath()
        handle2.move(to: CGPoint(x: 7, y: 11.92))
        handle2.addLine(to: CGPoint(x: 7, y: 35))
        handle2.addLine(to: CGPoint(x: 5, y: 35))
        handle2.addLine(to: CGPoint(x: 5, y: 11.92))
        handle2.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 2.16, y: 11.44), controlPoint2: CGPoint(x: 0, y: 8.97))
        handle2.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        handle2.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 9.31, y: 0), controlPoint2: CGPoint(x: 12, y: 2.69))
        handle2.addCurve(to: CGPoint(x: 7, y: 11.92), controlPoint1: CGPoint(x: 12, y: 8.97), controlPoint2: CGPoint(x: 9.84, y: 11.44))
        handle2.close()
        handle2.move(to: CGPoint(x: 7, y: 11.92))
        context.saveGState()
        context.translateBy(x: 109, y: 28.5)
        context.scaleBy(x: 1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -6, y: -17.5)
        handle2.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        handle2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenuMultiAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 317, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 317, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 317, y: resizedFrame.height / 110)
        
        /// Shape
        let shape = UIBezierPath()
        shape.move(to: CGPoint(x: 139.07, y: 36))
        shape.addLine(to: CGPoint(x: 152.93, y: 36))
        shape.addLine(to: CGPoint(x: 153, y: 36.07))
        shape.addLine(to: CGPoint(x: 146, y: 43))
        shape.addLine(to: CGPoint(x: 139, y: 36.07))
        shape.addLine(to: CGPoint(x: 139.07, y: 36))
        shape.close()
        shape.move(to: CGPoint(x: 0, y: 8))
        shape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
        shape.addLine(to: CGPoint(x: 289, y: 0))
        shape.addCurve(to: CGPoint(x: 297, y: 8), controlPoint1: CGPoint(x: 293.42, y: 0), controlPoint2: CGPoint(x: 297, y: 3.58))
        shape.addLine(to: CGPoint(x: 297, y: 28))
        shape.addCurve(to: CGPoint(x: 289, y: 36), controlPoint1: CGPoint(x: 297, y: 32.42), controlPoint2: CGPoint(x: 293.42, y: 36))
        shape.addLine(to: CGPoint(x: 8, y: 36))
        shape.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 3.58, y: 36), controlPoint2: CGPoint(x: 0, y: 32.42))
        shape.addLine(to: CGPoint(x: 0, y: 8))
        shape.close()
        shape.move(to: CGPoint(x: 0, y: 8))
        context.saveGState()
        // Warning: Blur effects are not supported.
        shape.usesEvenOddFillRule = true
        UIColor(white: 0.11, alpha: 0.72).setFill()
        shape.fill()
        context.restoreGState()
        /// action 4
        do {
            context.saveGState()
            context.translateBy(x: 213, y: 0)
            
            /// cell
            let cell = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 84, height: 36))
            context.saveGState()
            UIColor(white: 0.11, alpha: 0).setFill()
            cell.fill()
            context.restoreGState()
            
            /// Action 4
            let action4 = NSMutableAttributedString(string: "Share…")
            action4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: action4.length))
            action4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action4.length))
            action4.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: action4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                action4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action4.length))
            }
            context.saveGState()
            action4.draw(in: CGRect(x: 0, y: 10, width: 84, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// action 3
        do {
            context.saveGState()
            context.translateBy(x: 125, y: 0)
            
            /// cell
            let cell2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 88, height: 36))
            context.saveGState()
            UIColor(white: 0.11, alpha: 0).setFill()
            cell2.fill()
            context.restoreGState()
            
            /// separator
            let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 0.5, height: 36))
            context.saveGState()
            context.translateBy(x: 87.5, y: 0)
            context.saveGState()
            context.setBlendMode(.colorDodge)
            context.beginTransparencyLayer(in: separator.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.503, alpha: 1).setFill()
                separator.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Action 3
            let action3 = NSMutableAttributedString(string: "Look Up")
            action3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: action3.length))
            action3.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action3.length))
            action3.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: action3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                action3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action3.length))
            }
            context.saveGState()
            action3.draw(in: CGRect(x: 0, y: 10, width: 88, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// action 2
        do {
            context.saveGState()
            context.translateBy(x: 57, y: 0)
            
            /// cell
            let cell3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 68, height: 36))
            context.saveGState()
            UIColor(white: 0.11, alpha: 0).setFill()
            cell3.fill()
            context.restoreGState()
            
            /// separator
            let separator2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 0.5, height: 36))
            context.saveGState()
            context.translateBy(x: 67.5, y: 0)
            context.saveGState()
            context.setBlendMode(.colorDodge)
            context.beginTransparencyLayer(in: separator2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.503, alpha: 1).setFill()
                separator2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Action 2
            let action2 = NSMutableAttributedString(string: "Copy")
            action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: action2.length))
            action2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action2.length))
            action2.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: action2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
            }
            context.saveGState()
            action2.draw(in: CGRect(x: 10, y: 10, width: 48, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// action 1
        do {
            context.saveGState()
            
            /// cell
            let cell4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 57, height: 36))
            context.saveGState()
            UIColor(white: 0.11, alpha: 0).setFill()
            cell4.fill()
            context.restoreGState()
            
            /// separator
            let separator3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 0.5, height: 36))
            context.saveGState()
            context.translateBy(x: 56.5, y: 0)
            context.saveGState()
            context.setBlendMode(.colorDodge)
            context.beginTransparencyLayer(in: separator3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.503, alpha: 1).setFill()
                separator3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Action 1
            let action1 = NSMutableAttributedString(string: "Cut")
            action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: action1.length))
            action1.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action1.length))
            action1.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: action1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
            }
            context.saveGState()
            action1.draw(in: CGRect(x: 4, y: 10, width: 48, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsEditMenuSingleAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 64, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 64, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 64, y: resizedFrame.height / 44)
        
        /// base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 25.07, y: 36))
        base2.addLine(to: CGPoint(x: 38.93, y: 36))
        base2.addLine(to: CGPoint(x: 39, y: 36.07))
        base2.addLine(to: CGPoint(x: 32, y: 43))
        base2.addLine(to: CGPoint(x: 25, y: 36.07))
        base2.addLine(to: CGPoint(x: 25.07, y: 36))
        base2.close()
        base2.move(to: CGPoint(x: 0, y: 8))
        base2.addCurve(to: CGPoint(x: 8.01, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
        base2.addLine(to: CGPoint(x: 55.99, y: 0))
        base2.addCurve(to: CGPoint(x: 64, y: 8), controlPoint1: CGPoint(x: 60.41, y: 0), controlPoint2: CGPoint(x: 64, y: 3.58))
        base2.addLine(to: CGPoint(x: 64, y: 28))
        base2.addCurve(to: CGPoint(x: 55.99, y: 36), controlPoint1: CGPoint(x: 64, y: 32.42), controlPoint2: CGPoint(x: 60.42, y: 36))
        base2.addLine(to: CGPoint(x: 8.01, y: 36))
        base2.addCurve(to: CGPoint(x: 0, y: 28), controlPoint1: CGPoint(x: 3.59, y: 36), controlPoint2: CGPoint(x: 0, y: 32.42))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.close()
        base2.move(to: CGPoint(x: 0, y: 8))
        context.saveGState()
        // Warning: Blur effects are not supported.
        base2.usesEvenOddFillRule = true
        UIColor(white: 0.11, alpha: 0.72).setFill()
        base2.fill()
        context.restoreGState()
        /// Action
        let action = NSMutableAttributedString(string: "Copy")
        action.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 14)!, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSKernAttributeName, value: -0.15, range: NSRange(location: 0, length: action.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            action.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action.length))
        }
        context.saveGState()
        action.draw(at: CGPoint(x: 15, y: 9))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 85, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 85, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 85, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Label
        let label = NSMutableAttributedString(string: "Button")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.27, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 11, width: 85, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 11, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShape.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 11, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShape.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 12, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 11, y: 11)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Add
        let add = UIBezierPath()
        add.move(to: CGPoint(x: 11, y: 0))
        add.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        add.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        add.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        add.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        add.addLine(to: CGPoint(x: 11, y: 0))
        add.close()
        add.move(to: CGPoint(x: 11, y: 1))
        add.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 1), controlPoint2: CGPoint(x: 21, y: 5.48))
        add.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 21, y: 16.52), controlPoint2: CGPoint(x: 16.52, y: 21))
        add.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 21), controlPoint2: CGPoint(x: 1, y: 16.52))
        add.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 1, y: 5.48), controlPoint2: CGPoint(x: 5.48, y: 1))
        add.addLine(to: CGPoint(x: 11, y: 1))
        add.close()
        add.move(to: CGPoint(x: 16.5, y: 11.5))
        add.addLine(to: CGPoint(x: 11.5, y: 11.5))
        add.addLine(to: CGPoint(x: 11.5, y: 16.5))
        add.addLine(to: CGPoint(x: 10.5, y: 16.5))
        add.addLine(to: CGPoint(x: 10.5, y: 11.5))
        add.addLine(to: CGPoint(x: 5.5, y: 11.5))
        add.addLine(to: CGPoint(x: 5.5, y: 10.5))
        add.addLine(to: CGPoint(x: 10.5, y: 10.5))
        add.addLine(to: CGPoint(x: 10.5, y: 5.5))
        add.addLine(to: CGPoint(x: 11.5, y: 5.5))
        add.addLine(to: CGPoint(x: 11.5, y: 10.5))
        add.addLine(to: CGPoint(x: 16.5, y: 10.5))
        add.addLine(to: CGPoint(x: 16.5, y: 11.5))
        add.close()
        add.move(to: CGPoint(x: 16.5, y: 11.5))
        context.saveGState()
        context.translateBy(x: 11, y: 11)
        add.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        add.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightTableViewCellDefaultCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 163, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightTableViewCellDefaultLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 17, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightTableViewCellDestructiveCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Destructive Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 117, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsLightTableViewCellDestructiveLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Destructive Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 17, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 85, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 85, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 85, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Label
        let label = NSMutableAttributedString(string: "Button")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.27, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 20
            paragraphStyle.minimumLineHeight = 20
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 11, width: 85, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 11, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShape.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 11, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShape.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 12, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 11, y: 11)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Add
        let add = UIBezierPath()
        add.move(to: CGPoint(x: 11, y: 0))
        add.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        add.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        add.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        add.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        add.addLine(to: CGPoint(x: 11, y: 0))
        add.close()
        add.move(to: CGPoint(x: 11, y: 1))
        add.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 1), controlPoint2: CGPoint(x: 21, y: 5.48))
        add.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 21, y: 16.52), controlPoint2: CGPoint(x: 16.52, y: 21))
        add.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 21), controlPoint2: CGPoint(x: 1, y: 16.52))
        add.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 1, y: 5.48), controlPoint2: CGPoint(x: 5.48, y: 1))
        add.addLine(to: CGPoint(x: 11, y: 1))
        add.close()
        add.move(to: CGPoint(x: 16.5, y: 11.5))
        add.addLine(to: CGPoint(x: 11.5, y: 11.5))
        add.addLine(to: CGPoint(x: 11.5, y: 16.5))
        add.addLine(to: CGPoint(x: 10.5, y: 16.5))
        add.addLine(to: CGPoint(x: 10.5, y: 11.5))
        add.addLine(to: CGPoint(x: 5.5, y: 11.5))
        add.addLine(to: CGPoint(x: 5.5, y: 10.5))
        add.addLine(to: CGPoint(x: 10.5, y: 10.5))
        add.addLine(to: CGPoint(x: 10.5, y: 5.5))
        add.addLine(to: CGPoint(x: 11.5, y: 5.5))
        add.addLine(to: CGPoint(x: 11.5, y: 10.5))
        add.addLine(to: CGPoint(x: 16.5, y: 10.5))
        add.addLine(to: CGPoint(x: 16.5, y: 11.5))
        add.close()
        add.move(to: CGPoint(x: 16.5, y: 11.5))
        context.saveGState()
        context.translateBy(x: 11, y: 11)
        add.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        add.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkTableViewCellDefaultCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 163, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkTableViewCellDefaultLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 17, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkTableViewCellDestructiveCenter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Destructive Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 117, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsButtonsDarkTableViewCellDestructiveLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Destructive Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 17, y: 12))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftActionsRemoveLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 12, y: 11)
            
            /// circle
            let circle = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 22, height: 22))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -1, dy: -4))
            context.clip(using: .evenOdd)
            context.translateBy(x: -24, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 24, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.05).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -1, dy: -2))
            context.clip(using: .evenOdd)
            context.translateBy(x: -24, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 24, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -8, dy: -11))
            context.clip(using: .evenOdd)
            context.translateBy(x: -31, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 31, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            circle.fill()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 10, height: 1))
            context.saveGState()
            context.translateBy(x: 6, y: 10.5)
            UIColor.white.setFill()
            layer.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftActionsAddLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 12, y: 11)
            
            /// circle
            let circle = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 22, height: 22))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -1, dy: -4))
            context.clip(using: .evenOdd)
            context.translateBy(x: -24, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 24, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.05).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -1, dy: -2))
            context.clip(using: .evenOdd)
            context.translateBy(x: -24, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 24, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(circle.cgPath)
            context.addRect(circle.bounds.insetBy(dx: -8, dy: -11))
            context.clip(using: .evenOdd)
            context.translateBy(x: -31, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 31, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.08).cgColor)
            }
            UIColor.black.setFill()
            circle.fill()
            context.restoreGState()
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            circle.fill()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath()
            layer.move(to: CGPoint(x: 5.5, y: 4.5))
            layer.addLine(to: CGPoint(x: 5.5, y: 0))
            layer.addLine(to: CGPoint(x: 4.5, y: 0))
            layer.addLine(to: CGPoint(x: 4.5, y: 4.5))
            layer.addLine(to: CGPoint(x: 0, y: 4.5))
            layer.addLine(to: CGPoint(x: 0, y: 5.5))
            layer.addLine(to: CGPoint(x: 4.5, y: 5.5))
            layer.addLine(to: CGPoint(x: 4.5, y: 10))
            layer.addLine(to: CGPoint(x: 5.5, y: 10))
            layer.addLine(to: CGPoint(x: 5.5, y: 5.5))
            layer.addLine(to: CGPoint(x: 10, y: 5.5))
            layer.addLine(to: CGPoint(x: 10, y: 4.5))
            layer.addLine(to: CGPoint(x: 5.5, y: 4.5))
            layer.close()
            layer.move(to: CGPoint(x: 5.5, y: 4.5))
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            layer.usesEvenOddFillRule = true
            UIColor.white.setFill()
            layer.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftActionsUncheckedLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// circle
        let circle = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 22, height: 22))
        context.saveGState()
        context.translateBy(x: 12, y: 11)
        context.saveGState()
        circle.lineWidth = 2
        context.beginPath()
        context.addPath(circle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setStroke()
        circle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftActionsChecked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 7
        do {
            context.saveGState()
            context.translateBy(x: 12, y: 11)
            
            /// circle
            let circle = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 22, height: 22))
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            circle.fill()
            context.restoreGState()
            
            /// checkmark
            let checkmark = UIBezierPath()
            checkmark.move(to: CGPoint(x: 10.08, y: 0))
            checkmark.addLine(to: CGPoint(x: 3.67, y: 6.42))
            checkmark.addLine(to: CGPoint(x: 0.92, y: 3.67))
            checkmark.addLine(to: CGPoint(x: 0, y: 4.58))
            checkmark.addLine(to: CGPoint(x: 2.75, y: 7.33))
            checkmark.addLine(to: CGPoint(x: 3.67, y: 8.25))
            checkmark.addLine(to: CGPoint(x: 4.58, y: 7.33))
            checkmark.addLine(to: CGPoint(x: 11, y: 0.92))
            checkmark.addLine(to: CGPoint(x: 10.08, y: 0))
            checkmark.close()
            checkmark.move(to: CGPoint(x: 10.08, y: 0))
            context.saveGState()
            context.translateBy(x: 6, y: 7)
            checkmark.usesEvenOddFillRule = true
            UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
            checkmark.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesPlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 5, height: 5), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 5, height: 5), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 5, y: resizedFrame.height / 5)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle 15
        let rectangle15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 5, height: 5))
        context.saveGState()
        UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0.3).setFill()
        rectangle15.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesSlideActionAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 44)
        
        /// backing
        let backing = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 72, height: 44))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        backing.fill()
        context.restoreGState()
        /// ↳ Action
        let action = NSMutableAttributedString(string: "Action")
        action.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            action.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action.length))
        }
        context.saveGState()
        action.draw(in: CGRect(x: 0, y: 12, width: 72, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesSlideActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 72, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 72, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 72, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// backing
        let backing = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 72, height: 44))
        context.saveGState()
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        backing.fill()
        context.restoreGState()
        /// Delete Action
        let deleteAction = NSMutableAttributedString(string: "Delete")
        deleteAction.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: deleteAction.length))
        deleteAction.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: deleteAction.length))
        deleteAction.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: deleteAction.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            deleteAction.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: deleteAction.length))
        }
        context.saveGState()
        deleteAction.draw(in: CGRect(x: 0, y: 12, width: 72, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1Line(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 11))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 44, y: 11))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 75, y: 11))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 103, y: 11))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmallAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 45, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 103, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesCheckmark2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// checkmark
        let checkmark = UIBezierPath()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
        checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
        checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
        checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
        checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
        checkmark.close()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        context.saveGState()
        context.translateBy(x: 161, y: 17)
        checkmark.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        checkmark.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 106, y: 11)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// checkmark
            let checkmark = UIBezierPath()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
            checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
            checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
            checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
            checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
            checkmark.close()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            context.saveGState()
            context.translateBy(x: 55, y: 7)
            checkmark.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            checkmark.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Detail
        let detail = NSMutableAttributedString(string: "Detail")
        detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
        detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
        detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
        }
        context.saveGState()
        detail.draw(at: CGPoint(x: 130, y: 11))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosure2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 167.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 112, y: 11)
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 55.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 77, y: 11)
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 55, y: 0)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 90.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 167.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        /// Combined Shape Copy
        let combinedShapeCopy = UIBezierPath()
        combinedShapeCopy.move(to: CGPoint(x: 11, y: 21))
        combinedShapeCopy.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShapeCopy.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 11, y: 22))
        combinedShapeCopy.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShapeCopy.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShapeCopy.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShapeCopy.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShapeCopy.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShapeCopy.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 13, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 132, y: 11)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShapeCopy.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesInfo2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 11, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShape.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 11, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShape.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 12, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 152, y: 11)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesInfoDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 97, y: 11)
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 55, y: 0)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMove2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// grabber
        let grabber = UIBezierPath()
        grabber.move(to: CGPoint(x: 0, y: 1.5))
        grabber.addLine(to: CGPoint.zero)
        grabber.addLine(to: CGPoint(x: 22, y: 0))
        grabber.addLine(to: CGPoint(x: 22, y: 1.5))
        grabber.addLine(to: CGPoint(x: 0, y: 1.5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 5))
        grabber.addLine(to: CGPoint(x: 0, y: 3.5))
        grabber.addLine(to: CGPoint(x: 22, y: 3.5))
        grabber.addLine(to: CGPoint(x: 22, y: 5))
        grabber.addLine(to: CGPoint(x: 0, y: 5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 8.5))
        grabber.addLine(to: CGPoint(x: 0, y: 7))
        grabber.addLine(to: CGPoint(x: 22, y: 7))
        grabber.addLine(to: CGPoint(x: 22, y: 8.5))
        grabber.addLine(to: CGPoint(x: 0, y: 8.5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 8.5))
        context.saveGState()
        context.translateBy(x: 153, y: 18)
        grabber.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        grabber.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// checkmark
        let checkmark = UIBezierPath()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
        checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
        checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
        checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
        checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
        checkmark.close()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        context.saveGState()
        context.translateBy(x: 108, y: 17)
        checkmark.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        checkmark.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// checkmark
            let checkmark = UIBezierPath()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
            checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
            checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
            checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
            checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
            checkmark.close()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            context.saveGState()
            context.translateBy(x: 87, y: 17)
            checkmark.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            checkmark.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 32, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 58, y: 0)
            
            /// Rectangle 11
            let rectangle11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 132, height: 44))
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 11)
                
                /// grabber
                let grabber = UIBezierPath()
                grabber.move(to: CGPoint(x: 0, y: 1.5))
                grabber.addLine(to: CGPoint.zero)
                grabber.addLine(to: CGPoint(x: 22, y: 0))
                grabber.addLine(to: CGPoint(x: 22, y: 1.5))
                grabber.addLine(to: CGPoint(x: 0, y: 1.5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 5))
                grabber.addLine(to: CGPoint(x: 0, y: 3.5))
                grabber.addLine(to: CGPoint(x: 22, y: 3.5))
                grabber.addLine(to: CGPoint(x: 22, y: 5))
                grabber.addLine(to: CGPoint(x: 0, y: 5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 8.5))
                grabber.addLine(to: CGPoint(x: 0, y: 7))
                grabber.addLine(to: CGPoint(x: 22, y: 7))
                grabber.addLine(to: CGPoint(x: 22, y: 8.5))
                grabber.addLine(to: CGPoint(x: 0, y: 8.5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 8.5))
                context.saveGState()
                context.translateBy(x: 59, y: 8)
                grabber.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
                grabber.fill()
                context.restoreGState()
                
                /// ↳ Detail
                let detail = NSMutableAttributedString(string: "Detail")
                detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
                detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
                detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
                }
                context.saveGState()
                detail.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 114.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 49, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 141, height: 44))
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 10, y: 11))
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 65.07, y: 22.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 79, y: 11)
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 35.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 58, y: 11)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 93.07, y: 22.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.023, brightness: 0.839, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 3, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfo2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Combined Shape Copy 2
        let combinedShapeCopy2 = UIBezierPath()
        combinedShapeCopy2.move(to: CGPoint(x: 11, y: 21))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 11, y: 22))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 13, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 99, y: 11)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShapeCopy2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 21, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 78, y: 11)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 23, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 137, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesStepper2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 8)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 101, height: 28), cornerRadius: 4)
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 0).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// separator
            let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
            context.saveGState()
            context.translateBy(x: 50, y: 0)
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            separator.fill()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath()
            layer.move(to: CGPoint(x: 7, y: 0))
            layer.addLine(to: CGPoint(x: 7, y: 7))
            layer.addLine(to: CGPoint(x: 0, y: 7))
            layer.addLine(to: CGPoint(x: 0, y: 9))
            layer.addLine(to: CGPoint(x: 7, y: 9))
            layer.addLine(to: CGPoint(x: 7, y: 16))
            layer.addLine(to: CGPoint(x: 9, y: 16))
            layer.addLine(to: CGPoint(x: 9, y: 9))
            layer.addLine(to: CGPoint(x: 16, y: 9))
            layer.addLine(to: CGPoint(x: 16, y: 7))
            layer.addLine(to: CGPoint(x: 9, y: 7))
            layer.addLine(to: CGPoint(x: 9, y: 0))
            layer.addLine(to: CGPoint(x: 7, y: 0))
            layer.close()
            layer.move(to: CGPoint(x: 7, y: 0))
            context.saveGState()
            context.translateBy(x: 68, y: 6)
            layer.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            layer.fill()
            context.restoreGState()
            
            /// -
            let layer2 = UIBezierPath()
            layer2.move(to: CGPoint(x: 0, y: 2))
            layer2.addLine(to: CGPoint(x: 16, y: 2))
            layer2.addLine(to: CGPoint(x: 16, y: 0))
            layer2.addLine(to: CGPoint.zero)
            layer2.addLine(to: CGPoint(x: 0, y: 2))
            layer2.close()
            layer2.move(to: CGPoint(x: 0, y: 2))
            context.saveGState()
            context.translateBy(x: 17, y: 13)
            layer2.usesEvenOddFillRule = true
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
            layer2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 123, y: 7)
            
            /// base
            let base2 = UIBezierPath()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            base2.addCurve(to: CGPoint(x: 21.08, y: 0), controlPoint1: CGPoint(x: 17.6, y: -0.01), controlPoint2: CGPoint(x: 19.34, y: 0))
            base2.addLine(to: CGPoint(x: 29.89, y: 0))
            base2.addCurve(to: CGPoint(x: 35.14, y: 0.09), controlPoint1: CGPoint(x: 31.67, y: 0), controlPoint2: CGPoint(x: 33.4, y: -0.01))
            base2.addCurve(to: CGPoint(x: 39.8, y: 0.8), controlPoint1: CGPoint(x: 36.72, y: 0.18), controlPoint2: CGPoint(x: 38.26, y: 0.37))
            base2.addCurve(to: CGPoint(x: 47.88, y: 6.26), controlPoint1: CGPoint(x: 43.02, y: 1.71), controlPoint2: CGPoint(x: 45.84, y: 3.59))
            base2.addCurve(to: CGPoint(x: 51, y: 15.5), controlPoint1: CGPoint(x: 49.9, y: 8.91), controlPoint2: CGPoint(x: 51, y: 12.16))
            base2.addCurve(to: CGPoint(x: 47.88, y: 24.74), controlPoint1: CGPoint(x: 51, y: 18.84), controlPoint2: CGPoint(x: 49.9, y: 22.09))
            base2.addCurve(to: CGPoint(x: 39.8, y: 30.2), controlPoint1: CGPoint(x: 45.84, y: 27.41), controlPoint2: CGPoint(x: 43.02, y: 29.3))
            base2.addCurve(to: CGPoint(x: 35.14, y: 30.91), controlPoint1: CGPoint(x: 38.26, y: 30.63), controlPoint2: CGPoint(x: 36.72, y: 30.82))
            base2.addCurve(to: CGPoint(x: 29.93, y: 31), controlPoint1: CGPoint(x: 33.4, y: 31.01), controlPoint2: CGPoint(x: 31.67, y: 31))
            base2.addCurve(to: CGPoint(x: 21.11, y: 31), controlPoint1: CGPoint(x: 29.91, y: 31), controlPoint2: CGPoint(x: 21.11, y: 31))
            base2.addCurve(to: CGPoint(x: 15.86, y: 30.91), controlPoint1: CGPoint(x: 19.34, y: 31), controlPoint2: CGPoint(x: 17.6, y: 31.01))
            base2.addCurve(to: CGPoint(x: 11.2, y: 30.2), controlPoint1: CGPoint(x: 14.28, y: 30.82), controlPoint2: CGPoint(x: 12.74, y: 30.63))
            base2.addCurve(to: CGPoint(x: 3.12, y: 24.74), controlPoint1: CGPoint(x: 7.98, y: 29.3), controlPoint2: CGPoint(x: 5.16, y: 27.41))
            base2.addCurve(to: CGPoint(x: 0, y: 15.5), controlPoint1: CGPoint(x: 1.1, y: 22.09), controlPoint2: CGPoint(x: 0, y: 18.84))
            base2.addCurve(to: CGPoint(x: 3.12, y: 6.26), controlPoint1: CGPoint(x: 0, y: 12.16), controlPoint2: CGPoint(x: 1.1, y: 8.91))
            base2.addCurve(to: CGPoint(x: 11.2, y: 0.8), controlPoint1: CGPoint(x: 5.16, y: 3.59), controlPoint2: CGPoint(x: 7.98, y: 1.71))
            base2.addCurve(to: CGPoint(x: 15.86, y: 0.09), controlPoint1: CGPoint(x: 12.74, y: 0.37), controlPoint2: CGPoint(x: 14.28, y: 0.18))
            base2.close()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            context.saveGState()
            base2.lineJoinStyle = .round
            base2.lineCapStyle = .round
            context.saveGState()
            base2.lineWidth = 3
            context.beginPath()
            context.addPath(base2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setStroke()
            base2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// knob
            let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
            context.saveGState()
            context.translateBy(x: 1.5, y: 1.5)
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesSwitchON2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 190, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 190, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 190, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 123, y: 7)
            
            /// base
            let base2 = UIBezierPath()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            base2.addCurve(to: CGPoint(x: 21.08, y: 0), controlPoint1: CGPoint(x: 17.6, y: -0.01), controlPoint2: CGPoint(x: 19.34, y: 0))
            base2.addLine(to: CGPoint(x: 29.89, y: 0))
            base2.addCurve(to: CGPoint(x: 35.14, y: 0.09), controlPoint1: CGPoint(x: 31.67, y: 0), controlPoint2: CGPoint(x: 33.4, y: -0.01))
            base2.addCurve(to: CGPoint(x: 39.8, y: 0.8), controlPoint1: CGPoint(x: 36.72, y: 0.18), controlPoint2: CGPoint(x: 38.26, y: 0.37))
            base2.addCurve(to: CGPoint(x: 47.88, y: 6.26), controlPoint1: CGPoint(x: 43.02, y: 1.71), controlPoint2: CGPoint(x: 45.84, y: 3.59))
            base2.addCurve(to: CGPoint(x: 51, y: 15.5), controlPoint1: CGPoint(x: 49.9, y: 8.91), controlPoint2: CGPoint(x: 51, y: 12.16))
            base2.addCurve(to: CGPoint(x: 47.88, y: 24.74), controlPoint1: CGPoint(x: 51, y: 18.84), controlPoint2: CGPoint(x: 49.9, y: 22.09))
            base2.addCurve(to: CGPoint(x: 39.8, y: 30.2), controlPoint1: CGPoint(x: 45.84, y: 27.41), controlPoint2: CGPoint(x: 43.02, y: 29.3))
            base2.addCurve(to: CGPoint(x: 35.14, y: 30.91), controlPoint1: CGPoint(x: 38.26, y: 30.63), controlPoint2: CGPoint(x: 36.72, y: 30.82))
            base2.addCurve(to: CGPoint(x: 29.93, y: 31), controlPoint1: CGPoint(x: 33.4, y: 31.01), controlPoint2: CGPoint(x: 31.67, y: 31))
            base2.addCurve(to: CGPoint(x: 21.11, y: 31), controlPoint1: CGPoint(x: 29.91, y: 31), controlPoint2: CGPoint(x: 21.11, y: 31))
            base2.addCurve(to: CGPoint(x: 15.86, y: 30.91), controlPoint1: CGPoint(x: 19.34, y: 31), controlPoint2: CGPoint(x: 17.6, y: 31.01))
            base2.addCurve(to: CGPoint(x: 11.2, y: 30.2), controlPoint1: CGPoint(x: 14.28, y: 30.82), controlPoint2: CGPoint(x: 12.74, y: 30.63))
            base2.addCurve(to: CGPoint(x: 3.12, y: 24.74), controlPoint1: CGPoint(x: 7.98, y: 29.3), controlPoint2: CGPoint(x: 5.16, y: 27.41))
            base2.addCurve(to: CGPoint(x: 0, y: 15.5), controlPoint1: CGPoint(x: 1.1, y: 22.09), controlPoint2: CGPoint(x: 0, y: 18.84))
            base2.addCurve(to: CGPoint(x: 3.12, y: 6.26), controlPoint1: CGPoint(x: 0, y: 12.16), controlPoint2: CGPoint(x: 1.1, y: 8.91))
            base2.addCurve(to: CGPoint(x: 11.2, y: 0.8), controlPoint1: CGPoint(x: 5.16, y: 3.59), controlPoint2: CGPoint(x: 7.98, y: 1.71))
            base2.addCurve(to: CGPoint(x: 15.86, y: 0.09), controlPoint1: CGPoint(x: 12.74, y: 0.37), controlPoint2: CGPoint(x: 14.28, y: 0.18))
            base2.close()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            context.saveGState()
            base2.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            base2.fill()
            context.restoreGState()
            
            /// knob
            let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
            context.saveGState()
            context.translateBy(x: 21.5, y: 1.5)
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 19))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargeAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 44, y: 19))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 90, y: 19))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 119, y: 19))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargeAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 44, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 119, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesBordersIntent16ptLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint.zero)
        combinedShape.addLine(to: CGPoint(x: 375, y: 0))
        combinedShape.addLine(to: CGPoint(x: 375, y: 0.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 0.5))
        combinedShape.addLine(to: CGPoint.zero)
        combinedShape.close()
        combinedShape.move(to: CGPoint.zero)
        combinedShape.addLine(to: CGPoint(x: 16, y: 0))
        combinedShape.addLine(to: CGPoint(x: 16, y: 0.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 0.5))
        combinedShape.addLine(to: CGPoint.zero)
        combinedShape.close()
        combinedShape.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 0, y: 0.5)
        combinedShape.usesEvenOddFillRule = true
        UIColor(hue: 0.694, saturation: 0.031, brightness: 0.757, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesBordersEdgeToEdgeLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1)
        
        /// Rectangle 13
        let rectangle13 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 0.5))
        context.saveGState()
        context.translateBy(x: 0, y: 0.5)
        UIColor(hue: 0.694, saturation: 0.031, brightness: 0.757, alpha: 1).setFill()
        rectangle13.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Separator
        // Warning: New symbols are not supported.
        /// Right Detail
        // Warning: New symbols are not supported.
        /// Left Detail
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightDefaultDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 303, height: 44))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightDefaultActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Action
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 231, height: 44))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 60))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        /// Separator
        // Warning: New symbols are not supported.
        /// Right Detail
        // Warning: New symbols are not supported.
        /// Left Detail
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightLargeDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 303, height: 60))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellLightLargeActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Action
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 231, height: 60))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1Line(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 11))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 44, y: 11))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 75, y: 11))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 103, y: 11))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmallAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 45, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 159, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 159, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 159, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 103, y: 3)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 0, y: 20))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesCheckmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// checkmark
        let checkmark = UIBezierPath()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
        checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
        checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
        checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
        checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
        checkmark.close()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        context.saveGState()
        context.translateBy(x: 159, y: 17)
        checkmark.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        checkmark.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 104, y: 11)
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// checkmark
            let checkmark = UIBezierPath()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
            checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
            checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
            checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
            checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
            checkmark.close()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            context.saveGState()
            context.translateBy(x: 55, y: 7)
            checkmark.usesEvenOddFillRule = true
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            checkmark.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Detail
        let detail = NSMutableAttributedString(string: "Detail")
        detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
        detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
        detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
        }
        context.saveGState()
        detail.draw(at: CGPoint(x: 128, y: 11))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 165.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 110, y: 11)
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 55.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 11)
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 55, y: 0)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 90.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 165.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        /// Combined Shape Copy
        let combinedShapeCopy = UIBezierPath()
        combinedShapeCopy.move(to: CGPoint(x: 11, y: 21))
        combinedShapeCopy.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShapeCopy.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 11, y: 22))
        combinedShapeCopy.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShapeCopy.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShapeCopy.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShapeCopy.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShapeCopy.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShapeCopy.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShapeCopy.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 10, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 9))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 12, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 13, y: 17))
        combinedShapeCopy.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShapeCopy.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy.close()
        combinedShapeCopy.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 130, y: 11)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShapeCopy.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 11, y: 21))
        combinedShape.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShape.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 11, y: 22))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShape.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShape.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShape.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShape.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 17))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 9))
        combinedShape.addLine(to: CGPoint(x: 10, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9))
        combinedShape.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShape.addLine(to: CGPoint(x: 12, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17))
        combinedShape.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShape.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 150, y: 11)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesInfoDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 95, y: 11)
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 55, y: 0)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMove(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// grabber
        let grabber = UIBezierPath()
        grabber.move(to: CGPoint(x: 0, y: 1.5))
        grabber.addLine(to: CGPoint.zero)
        grabber.addLine(to: CGPoint(x: 22, y: 0))
        grabber.addLine(to: CGPoint(x: 22, y: 1.5))
        grabber.addLine(to: CGPoint(x: 0, y: 1.5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 5))
        grabber.addLine(to: CGPoint(x: 0, y: 3.5))
        grabber.addLine(to: CGPoint(x: 22, y: 3.5))
        grabber.addLine(to: CGPoint(x: 22, y: 5))
        grabber.addLine(to: CGPoint(x: 0, y: 5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 8.5))
        grabber.addLine(to: CGPoint(x: 0, y: 7))
        grabber.addLine(to: CGPoint(x: 22, y: 7))
        grabber.addLine(to: CGPoint(x: 22, y: 8.5))
        grabber.addLine(to: CGPoint(x: 0, y: 8.5))
        grabber.close()
        grabber.move(to: CGPoint(x: 0, y: 8.5))
        context.saveGState()
        context.translateBy(x: 152, y: 18)
        grabber.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        grabber.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// checkmark
        let checkmark = UIBezierPath()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
        checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
        checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
        checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
        checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
        checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
        checkmark.close()
        checkmark.move(to: CGPoint(x: 11.52, y: 0))
        context.saveGState()
        context.translateBy(x: 106, y: 17)
        checkmark.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        checkmark.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// checkmark
            let checkmark = UIBezierPath()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            checkmark.addLine(to: CGPoint(x: 4.23, y: 7.1))
            checkmark.addLine(to: CGPoint(x: 1.44, y: 4.43))
            checkmark.addLine(to: CGPoint(x: 0, y: 5.9))
            checkmark.addLine(to: CGPoint(x: 4.19, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 4.21, y: 10.01))
            checkmark.addLine(to: CGPoint(x: 12.98, y: 1.44))
            checkmark.addLine(to: CGPoint(x: 11.52, y: 0))
            checkmark.close()
            checkmark.move(to: CGPoint(x: 11.52, y: 0))
            context.saveGState()
            context.translateBy(x: 87, y: 17)
            checkmark.usesEvenOddFillRule = true
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            checkmark.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 32, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 56, y: 0)
            
            /// Rectangle 11
            let rectangle11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 132, height: 44))
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 11)
                
                /// grabber
                let grabber = UIBezierPath()
                grabber.move(to: CGPoint(x: 0, y: 1.5))
                grabber.addLine(to: CGPoint.zero)
                grabber.addLine(to: CGPoint(x: 22, y: 0))
                grabber.addLine(to: CGPoint(x: 22, y: 1.5))
                grabber.addLine(to: CGPoint(x: 0, y: 1.5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 5))
                grabber.addLine(to: CGPoint(x: 0, y: 3.5))
                grabber.addLine(to: CGPoint(x: 22, y: 3.5))
                grabber.addLine(to: CGPoint(x: 22, y: 5))
                grabber.addLine(to: CGPoint(x: 0, y: 5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 8.5))
                grabber.addLine(to: CGPoint(x: 0, y: 7))
                grabber.addLine(to: CGPoint(x: 22, y: 7))
                grabber.addLine(to: CGPoint(x: 22, y: 8.5))
                grabber.addLine(to: CGPoint(x: 0, y: 8.5))
                grabber.close()
                grabber.move(to: CGPoint(x: 0, y: 8.5))
                context.saveGState()
                context.translateBy(x: 59, y: 8)
                grabber.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
                grabber.fill()
                context.restoreGState()
                
                /// ↳ Detail
                let detail = NSMutableAttributedString(string: "Detail")
                detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
                detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
                detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
                }
                context.saveGState()
                detail.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// chevron
        let chevron = UIBezierPath()
        chevron.move(to: CGPoint(x: 10, y: 1))
        chevron.addLine(to: CGPoint(x: 10, y: 0))
        chevron.addLine(to: CGPoint.zero)
        chevron.addLine(to: CGPoint(x: 0, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 2))
        chevron.addLine(to: CGPoint(x: 8, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 10))
        chevron.addLine(to: CGPoint(x: 10, y: 1))
        chevron.close()
        chevron.move(to: CGPoint(x: 10, y: 1))
        context.saveGState()
        context.translateBy(x: 112.07, y: 22.07)
        context.rotate(by: 45 * CGFloat.pi/180)
        context.translateBy(x: -5, y: -5)
        chevron.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        chevron.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 47, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 141, height: 44))
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 10, y: 11))
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 65.07, y: 22.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 77, y: 11)
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 35.07, y: 11.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 58, y: 11)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// chevron
            let chevron = UIBezierPath()
            chevron.move(to: CGPoint(x: 10, y: 1))
            chevron.addLine(to: CGPoint(x: 10, y: 0))
            chevron.addLine(to: CGPoint.zero)
            chevron.addLine(to: CGPoint(x: 0, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 2))
            chevron.addLine(to: CGPoint(x: 8, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 10))
            chevron.addLine(to: CGPoint(x: 10, y: 1))
            chevron.close()
            chevron.move(to: CGPoint(x: 10, y: 1))
            context.saveGState()
            context.translateBy(x: 93.07, y: 22.07)
            context.rotate(by: 45 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -5)
            chevron.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            chevron.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 3, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Combined Shape Copy 2
        let combinedShapeCopy2 = UIBezierPath()
        combinedShapeCopy2.move(to: CGPoint(x: 11, y: 21))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 11, y: 22))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 10.75, y: 7.5))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
        combinedShapeCopy2.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 10, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 9))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 9.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 12, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 13, y: 17))
        combinedShapeCopy2.addLine(to: CGPoint(x: 13, y: 17.5))
        combinedShapeCopy2.addLine(to: CGPoint(x: 9, y: 17.5))
        combinedShapeCopy2.close()
        combinedShapeCopy2.move(to: CGPoint(x: 9, y: 17.5))
        context.saveGState()
        context.translateBy(x: 97, y: 11)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        combinedShapeCopy2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 19, y: 0)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// Combined Shape Copy 3
            let combinedShapeCopy3 = UIBezierPath()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 21))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 11, y: 22))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 10.75, y: 7.5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 9.5, y: 6.25), controlPoint1: CGPoint(x: 10.06, y: 7.5), controlPoint2: CGPoint(x: 9.5, y: 6.94))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 5), controlPoint1: CGPoint(x: 9.5, y: 5.56), controlPoint2: CGPoint(x: 10.06, y: 5))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 12, y: 6.25), controlPoint1: CGPoint(x: 11.44, y: 5), controlPoint2: CGPoint(x: 12, y: 5.56))
            combinedShapeCopy3.addCurve(to: CGPoint(x: 10.75, y: 7.5), controlPoint1: CGPoint(x: 12, y: 6.94), controlPoint2: CGPoint(x: 11.44, y: 7.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 10, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 9.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 12, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17))
            combinedShapeCopy3.addLine(to: CGPoint(x: 13, y: 17.5))
            combinedShapeCopy3.addLine(to: CGPoint(x: 9, y: 17.5))
            combinedShapeCopy3.close()
            combinedShapeCopy3.move(to: CGPoint(x: 9, y: 17.5))
            context.saveGState()
            context.translateBy(x: 78, y: 11)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            combinedShapeCopy3.fill()
            context.restoreGState()
            
            /// ↳ Detail
            let detail = NSMutableAttributedString(string: "Detail")
            detail.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: detail.length))
            detail.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: detail.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                detail.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: detail.length))
            }
            context.saveGState()
            detail.draw(at: CGPoint(x: 23, y: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 53, height: 44))
            
            /// grabber
            let grabber = UIBezierPath()
            grabber.move(to: CGPoint(x: 0, y: 1.5))
            grabber.addLine(to: CGPoint.zero)
            grabber.addLine(to: CGPoint(x: 22, y: 0))
            grabber.addLine(to: CGPoint(x: 22, y: 1.5))
            grabber.addLine(to: CGPoint(x: 0, y: 1.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 3.5))
            grabber.addLine(to: CGPoint(x: 22, y: 5))
            grabber.addLine(to: CGPoint(x: 0, y: 5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 7))
            grabber.addLine(to: CGPoint(x: 22, y: 8.5))
            grabber.addLine(to: CGPoint(x: 0, y: 8.5))
            grabber.close()
            grabber.move(to: CGPoint(x: 0, y: 8.5))
            context.saveGState()
            context.translateBy(x: 16, y: 18)
            grabber.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            grabber.fill()
            context.restoreGState()
            
            /// Rectangle 12
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 44))
            context.saveGState()
            UIColor(white: 0.149, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesStepper(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 73, y: 8)
            
            /// separator
            let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
            context.saveGState()
            context.translateBy(x: 50, y: 0)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            separator.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 101, height: 28), cornerRadius: 4)
            context.saveGState()
            UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 0).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath()
            layer.move(to: CGPoint(x: 7, y: 0))
            layer.addLine(to: CGPoint(x: 7, y: 7))
            layer.addLine(to: CGPoint(x: 0, y: 7))
            layer.addLine(to: CGPoint(x: 0, y: 9))
            layer.addLine(to: CGPoint(x: 7, y: 9))
            layer.addLine(to: CGPoint(x: 7, y: 16))
            layer.addLine(to: CGPoint(x: 9, y: 16))
            layer.addLine(to: CGPoint(x: 9, y: 9))
            layer.addLine(to: CGPoint(x: 16, y: 9))
            layer.addLine(to: CGPoint(x: 16, y: 7))
            layer.addLine(to: CGPoint(x: 9, y: 7))
            layer.addLine(to: CGPoint(x: 9, y: 0))
            layer.addLine(to: CGPoint(x: 7, y: 0))
            layer.close()
            layer.move(to: CGPoint(x: 7, y: 0))
            context.saveGState()
            context.translateBy(x: 68, y: 6)
            layer.usesEvenOddFillRule = true
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            layer.fill()
            context.restoreGState()
            
            /// -
            let layer2 = UIBezierPath()
            layer2.move(to: CGPoint(x: 0, y: 2))
            layer2.addLine(to: CGPoint(x: 16, y: 2))
            layer2.addLine(to: CGPoint(x: 16, y: 0))
            layer2.addLine(to: CGPoint.zero)
            layer2.addLine(to: CGPoint(x: 0, y: 2))
            layer2.close()
            layer2.move(to: CGPoint(x: 0, y: 2))
            context.saveGState()
            context.translateBy(x: 17, y: 13)
            layer2.usesEvenOddFillRule = true
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            layer2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 121, y: 7)
            
            /// base
            let base2 = UIBezierPath()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            base2.addCurve(to: CGPoint(x: 21.08, y: 0), controlPoint1: CGPoint(x: 17.6, y: -0.01), controlPoint2: CGPoint(x: 19.34, y: 0))
            base2.addLine(to: CGPoint(x: 29.89, y: 0))
            base2.addCurve(to: CGPoint(x: 35.14, y: 0.09), controlPoint1: CGPoint(x: 31.67, y: 0), controlPoint2: CGPoint(x: 33.4, y: -0.01))
            base2.addCurve(to: CGPoint(x: 39.8, y: 0.8), controlPoint1: CGPoint(x: 36.72, y: 0.18), controlPoint2: CGPoint(x: 38.26, y: 0.37))
            base2.addCurve(to: CGPoint(x: 47.88, y: 6.26), controlPoint1: CGPoint(x: 43.02, y: 1.71), controlPoint2: CGPoint(x: 45.84, y: 3.59))
            base2.addCurve(to: CGPoint(x: 51, y: 15.5), controlPoint1: CGPoint(x: 49.9, y: 8.91), controlPoint2: CGPoint(x: 51, y: 12.16))
            base2.addCurve(to: CGPoint(x: 47.88, y: 24.74), controlPoint1: CGPoint(x: 51, y: 18.84), controlPoint2: CGPoint(x: 49.9, y: 22.09))
            base2.addCurve(to: CGPoint(x: 39.8, y: 30.2), controlPoint1: CGPoint(x: 45.84, y: 27.41), controlPoint2: CGPoint(x: 43.02, y: 29.3))
            base2.addCurve(to: CGPoint(x: 35.14, y: 30.91), controlPoint1: CGPoint(x: 38.26, y: 30.63), controlPoint2: CGPoint(x: 36.72, y: 30.82))
            base2.addCurve(to: CGPoint(x: 29.93, y: 31), controlPoint1: CGPoint(x: 33.4, y: 31.01), controlPoint2: CGPoint(x: 31.67, y: 31))
            base2.addCurve(to: CGPoint(x: 21.11, y: 31), controlPoint1: CGPoint(x: 29.91, y: 31), controlPoint2: CGPoint(x: 21.11, y: 31))
            base2.addCurve(to: CGPoint(x: 15.86, y: 30.91), controlPoint1: CGPoint(x: 19.34, y: 31), controlPoint2: CGPoint(x: 17.6, y: 31.01))
            base2.addCurve(to: CGPoint(x: 11.2, y: 30.2), controlPoint1: CGPoint(x: 14.28, y: 30.82), controlPoint2: CGPoint(x: 12.74, y: 30.63))
            base2.addCurve(to: CGPoint(x: 3.12, y: 24.74), controlPoint1: CGPoint(x: 7.98, y: 29.3), controlPoint2: CGPoint(x: 5.16, y: 27.41))
            base2.addCurve(to: CGPoint(x: 0, y: 15.5), controlPoint1: CGPoint(x: 1.1, y: 22.09), controlPoint2: CGPoint(x: 0, y: 18.84))
            base2.addCurve(to: CGPoint(x: 3.12, y: 6.26), controlPoint1: CGPoint(x: 0, y: 12.16), controlPoint2: CGPoint(x: 1.1, y: 8.91))
            base2.addCurve(to: CGPoint(x: 11.2, y: 0.8), controlPoint1: CGPoint(x: 5.16, y: 3.59), controlPoint2: CGPoint(x: 7.98, y: 1.71))
            base2.addCurve(to: CGPoint(x: 15.86, y: 0.09), controlPoint1: CGPoint(x: 12.74, y: 0.37), controlPoint2: CGPoint(x: 14.28, y: 0.18))
            base2.close()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            context.saveGState()
            base2.lineJoinStyle = .round
            base2.lineCapStyle = .round
            context.saveGState()
            base2.lineWidth = 3
            context.beginPath()
            context.addPath(base2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.918, alpha: 1).setStroke()
            base2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// knob
            let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
            context.saveGState()
            context.translateBy(x: 1.5, y: 1.5)
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesRightAccessoriesSwitchON(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 189, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 189, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 189, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 121, y: 7)
            
            /// base
            let base2 = UIBezierPath()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            base2.addCurve(to: CGPoint(x: 21.08, y: 0), controlPoint1: CGPoint(x: 17.6, y: -0.01), controlPoint2: CGPoint(x: 19.34, y: 0))
            base2.addLine(to: CGPoint(x: 29.89, y: 0))
            base2.addCurve(to: CGPoint(x: 35.14, y: 0.09), controlPoint1: CGPoint(x: 31.67, y: 0), controlPoint2: CGPoint(x: 33.4, y: -0.01))
            base2.addCurve(to: CGPoint(x: 39.8, y: 0.8), controlPoint1: CGPoint(x: 36.72, y: 0.18), controlPoint2: CGPoint(x: 38.26, y: 0.37))
            base2.addCurve(to: CGPoint(x: 47.88, y: 6.26), controlPoint1: CGPoint(x: 43.02, y: 1.71), controlPoint2: CGPoint(x: 45.84, y: 3.59))
            base2.addCurve(to: CGPoint(x: 51, y: 15.5), controlPoint1: CGPoint(x: 49.9, y: 8.91), controlPoint2: CGPoint(x: 51, y: 12.16))
            base2.addCurve(to: CGPoint(x: 47.88, y: 24.74), controlPoint1: CGPoint(x: 51, y: 18.84), controlPoint2: CGPoint(x: 49.9, y: 22.09))
            base2.addCurve(to: CGPoint(x: 39.8, y: 30.2), controlPoint1: CGPoint(x: 45.84, y: 27.41), controlPoint2: CGPoint(x: 43.02, y: 29.3))
            base2.addCurve(to: CGPoint(x: 35.14, y: 30.91), controlPoint1: CGPoint(x: 38.26, y: 30.63), controlPoint2: CGPoint(x: 36.72, y: 30.82))
            base2.addCurve(to: CGPoint(x: 29.93, y: 31), controlPoint1: CGPoint(x: 33.4, y: 31.01), controlPoint2: CGPoint(x: 31.67, y: 31))
            base2.addCurve(to: CGPoint(x: 21.11, y: 31), controlPoint1: CGPoint(x: 29.91, y: 31), controlPoint2: CGPoint(x: 21.11, y: 31))
            base2.addCurve(to: CGPoint(x: 15.86, y: 30.91), controlPoint1: CGPoint(x: 19.34, y: 31), controlPoint2: CGPoint(x: 17.6, y: 31.01))
            base2.addCurve(to: CGPoint(x: 11.2, y: 30.2), controlPoint1: CGPoint(x: 14.28, y: 30.82), controlPoint2: CGPoint(x: 12.74, y: 30.63))
            base2.addCurve(to: CGPoint(x: 3.12, y: 24.74), controlPoint1: CGPoint(x: 7.98, y: 29.3), controlPoint2: CGPoint(x: 5.16, y: 27.41))
            base2.addCurve(to: CGPoint(x: 0, y: 15.5), controlPoint1: CGPoint(x: 1.1, y: 22.09), controlPoint2: CGPoint(x: 0, y: 18.84))
            base2.addCurve(to: CGPoint(x: 3.12, y: 6.26), controlPoint1: CGPoint(x: 0, y: 12.16), controlPoint2: CGPoint(x: 1.1, y: 8.91))
            base2.addCurve(to: CGPoint(x: 11.2, y: 0.8), controlPoint1: CGPoint(x: 5.16, y: 3.59), controlPoint2: CGPoint(x: 7.98, y: 1.71))
            base2.addCurve(to: CGPoint(x: 15.86, y: 0.09), controlPoint1: CGPoint(x: 12.74, y: 0.37), controlPoint2: CGPoint(x: 14.28, y: 0.18))
            base2.close()
            base2.move(to: CGPoint(x: 15.86, y: 0.09))
            context.saveGState()
            base2.usesEvenOddFillRule = true
            UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
            base2.fill()
            context.restoreGState()
            
            /// knob
            let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
            context.saveGState()
            context.translateBy(x: 21.5, y: 1.5)
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -14))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -50, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 50, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.16).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -18, dy: -21))
            context.clip(using: .evenOdd)
            context.translateBy(x: -57, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 57, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                knob.fill()
                context.saveGState()
                knob.lineWidth = 1
                context.beginPath()
                context.addPath(knob.cgPath)
                context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                knob.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            UIColor.white.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor(white: 0, alpha: 0.04).setStroke()
            knob.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 16, y: 19))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargeAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 44, y: 19))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 90, y: 19))
        context.restoreGState()
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 119, y: 19))
        context.restoreGState()
        /// ↳ Action
        // Warning: New symbols are not supported.
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargeAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 44, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholderAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 199, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 199, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 199, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor(white: 0.067, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 119, y: 9)
            
            /// ↳ Subtitle
            let subtitle = NSMutableAttributedString(string: "Subtitle")
            subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
            subtitle.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: subtitle.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
            }
            context.saveGState()
            subtitle.draw(at: CGPoint(x: 0, y: 23))
            context.restoreGState()
            
            /// ↳ Title
            let title = NSMutableAttributedString(string: "Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        /// ↳ Action
        // Warning: New symbols are not supported.
        /// ↳ Placeholder
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesBordersEdgeToEdgeDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 2), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 2), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 2)
        
        /// Rectangle 13
        let rectangle13 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 1))
        context.saveGState()
        context.translateBy(x: 0, y: 1.5)
        UIColor(white: 0.149, alpha: 1).setFill()
        rectangle13.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCell_ResourcesBordersIntent16ptDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 2), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 2), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 2)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint.zero)
        combinedShape.addLine(to: CGPoint(x: 375, y: 0))
        combinedShape.addLine(to: CGPoint(x: 375, y: 0.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 0.5))
        combinedShape.addLine(to: CGPoint.zero)
        combinedShape.close()
        combinedShape.move(to: CGPoint.zero)
        combinedShape.addLine(to: CGPoint(x: 16, y: 0))
        combinedShape.addLine(to: CGPoint(x: 16, y: 0.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 0.5))
        combinedShape.addLine(to: CGPoint.zero)
        combinedShape.close()
        combinedShape.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 0, y: 1.5)
        combinedShape.usesEvenOddFillRule = true
        UIColor(white: 0.149, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkDefaultDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 303, height: 44))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkDefaultActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Action
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 231, height: 44))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// TableViewCell
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 60))
        context.saveGState()
        UIColor(white: 0.067, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Seperator
        // Warning: New symbols are not supported.
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkLargeDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 303, height: 60))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// iOS UIKit/Components - Controls/TableViewCell/Dark Large
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsTableViewCellDarkLargeActionDelete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iOS UIKit/Components - Controls/TableViewCell/_Resources/Slide Action/Delete
        // Warning: New symbols are not supported.
        /// Action
        // Warning: New symbols are not supported.
        /// Mask
        let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 231, height: 60))
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.addClip()
        
        /// iOS UIKit/Components - Controls/TableViewCell/Dark Large
        // Warning: New symbols are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersLightGroupedHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 38)
        
        /// Background Color
        UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// header
        let header = NSMutableAttributedString(string: "Section Heading")
        header.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: header.length))
        header.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.044, brightness: 0.447, alpha: 1), range: NSRange(location: 0, length: header.length))
        header.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: header.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            header.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: header.length))
        }
        context.saveGState()
        header.draw(in: CGRect(x: 16, y: 14, width: 343, height: 20))
        context.restoreGState()
        /// Separator
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersDarkGroupedHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 38)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// header
        let header = NSMutableAttributedString(string: "Section Heading")
        header.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: header.length))
        header.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.047, brightness: 0.506, alpha: 1), range: NSRange(location: 0, length: header.length))
        header.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: header.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            header.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: header.length))
        }
        context.saveGState()
        header.draw(in: CGRect(x: 16, y: 14, width: 343, height: 20))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersLightGroupedFooter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 38)
        
        /// Background Color
        UIColor(hue: 0.667, saturation: 0.02, brightness: 0.957, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// description
        let description = NSMutableAttributedString(string: "This is a sample description that sits below a group.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.044, brightness: 0.447, alpha: 1), range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 6, width: 343, height: 20))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersDarkGroupedFooter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 38), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 38)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// description
        let description = NSMutableAttributedString(string: "This is a sample description that sits below a group.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.047, brightness: 0.506, alpha: 1), range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 6, width: 343, height: 20))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersLightDefaultHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 28)
        
        /// base
        let base2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 28))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        base2.fill()
        context.restoreGState()
        /// title
        let title = NSMutableAttributedString(string: "A")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 3, width: 343, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersDarkDefaultHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 28)
        
        /// base
        let base2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 28))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.11, alpha: 0.72).setFill()
        base2.fill()
        context.restoreGState()
        /// title
        let title = NSMutableAttributedString(string: "A")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 3, width: 343, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorLightIndeterminedSpinner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)
        
        /// Indeterminate_Spinner_
        let indeterminate_Spinner_ = UIBezierPath()
        indeterminate_Spinner_.move(to: CGPoint(x: 4.12, y: 8.28))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 10.29, y: 11.84))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.96, y: 12.97), controlPoint1: CGPoint(x: 10.7, y: 12.07), controlPoint2: CGPoint(x: 10.96, y: 12.5))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.3, y: 14.1), controlPoint1: CGPoint(x: 10.96, y: 13.44), controlPoint2: CGPoint(x: 10.71, y: 13.87))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.99, y: 14.09), controlPoint1: CGPoint(x: 9.9, y: 14.34), controlPoint2: CGPoint(x: 9.4, y: 14.33))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 2.82, y: 10.52))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.35, y: 8.76), controlPoint1: CGPoint(x: 2.21, y: 10.16), controlPoint2: CGPoint(x: 2, y: 9.37))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 4.12, y: 8.28), controlPoint1: CGPoint(x: 2.71, y: 8.14), controlPoint2: CGPoint(x: 3.5, y: 7.92))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.25, y: 2.34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.72, y: 4.12), controlPoint1: CGPoint(x: 26.87, y: 2.7), controlPoint2: CGPoint(x: 27.08, y: 3.5))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 23.16, y: 10.29))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 22.03, y: 10.96), controlPoint1: CGPoint(x: 22.93, y: 10.7), controlPoint2: CGPoint(x: 22.5, y: 10.96))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.9, y: 10.3), controlPoint1: CGPoint(x: 21.56, y: 10.96), controlPoint2: CGPoint(x: 21.13, y: 10.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.91, y: 8.99), controlPoint1: CGPoint(x: 20.66, y: 9.9), controlPoint2: CGPoint(x: 20.67, y: 9.4))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 24.48, y: 2.82))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.25, y: 2.34), controlPoint1: CGPoint(x: 24.84, y: 2.2), controlPoint2: CGPoint(x: 25.63, y: 1.99))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.25, y: 2.34))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.01, y: 20.91))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 32.18, y: 24.48))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.85, y: 25.61), controlPoint1: CGPoint(x: 32.59, y: 24.71), controlPoint2: CGPoint(x: 32.85, y: 25.14))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.2, y: 26.74), controlPoint1: CGPoint(x: 32.85, y: 26.08), controlPoint2: CGPoint(x: 32.6, y: 26.51))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 30.88, y: 26.72), controlPoint1: CGPoint(x: 31.79, y: 26.97), controlPoint2: CGPoint(x: 31.29, y: 26.97))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 24.71, y: 23.16))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.04, y: 22.03), controlPoint1: CGPoint(x: 24.3, y: 22.93), controlPoint2: CGPoint(x: 24.04, y: 22.5))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.7, y: 20.9), controlPoint1: CGPoint(x: 24.04, y: 21.56), controlPoint2: CGPoint(x: 24.29, y: 21.13))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.01, y: 20.91), controlPoint1: CGPoint(x: 25.1, y: 20.66), controlPoint2: CGPoint(x: 25.6, y: 20.67))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.01, y: 20.91))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 13.61, y: 24.24))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 14.09, y: 26.01), controlPoint1: CGPoint(x: 14.23, y: 24.59), controlPoint2: CGPoint(x: 14.44, y: 25.39))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 10.52, y: 32.18))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 9.4, y: 32.84), controlPoint1: CGPoint(x: 10.29, y: 32.59), controlPoint2: CGPoint(x: 9.86, y: 32.84))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.27, y: 32.19), controlPoint1: CGPoint(x: 8.93, y: 32.84), controlPoint2: CGPoint(x: 8.5, y: 32.59))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.27, y: 30.88), controlPoint1: CGPoint(x: 8.04, y: 31.78), controlPoint2: CGPoint(x: 8.04, y: 31.29))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 11.84, y: 24.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 12.63, y: 24.11), controlPoint1: CGPoint(x: 12.01, y: 24.41), controlPoint2: CGPoint(x: 12.3, y: 24.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 13.61, y: 24.24), controlPoint1: CGPoint(x: 12.96, y: 24.02), controlPoint2: CGPoint(x: 13.31, y: 24.06))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 10.52, y: 2.82))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 14.09, y: 8.99))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 14.1, y: 10.3), controlPoint1: CGPoint(x: 14.33, y: 9.4), controlPoint2: CGPoint(x: 14.34, y: 9.9))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 12.97, y: 10.96), controlPoint1: CGPoint(x: 13.87, y: 10.71), controlPoint2: CGPoint(x: 13.44, y: 10.96))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 11.84, y: 10.29), controlPoint1: CGPoint(x: 12.5, y: 10.96), controlPoint2: CGPoint(x: 12.07, y: 10.7))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.28, y: 4.12))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.76, y: 2.35), controlPoint1: CGPoint(x: 7.92, y: 3.5), controlPoint2: CGPoint(x: 8.14, y: 2.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.52, y: 2.82), controlPoint1: CGPoint(x: 9.37, y: 2), controlPoint2: CGPoint(x: 10.16, y: 2.21))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 32.66, y: 8.75))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.78, y: 9.73), controlPoint1: CGPoint(x: 32.83, y: 9.05), controlPoint2: CGPoint(x: 32.87, y: 9.4))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.18, y: 10.52), controlPoint1: CGPoint(x: 32.7, y: 10.07), controlPoint2: CGPoint(x: 32.48, y: 10.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.01, y: 14.09))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.7, y: 14.1), controlPoint1: CGPoint(x: 25.6, y: 14.33), controlPoint2: CGPoint(x: 25.1, y: 14.34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.04, y: 12.97), controlPoint1: CGPoint(x: 24.29, y: 13.87), controlPoint2: CGPoint(x: 24.04, y: 13.44))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.71, y: 11.84), controlPoint1: CGPoint(x: 24.04, y: 12.5), controlPoint2: CGPoint(x: 24.3, y: 12.07))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 30.88, y: 8.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.66, y: 8.75), controlPoint1: CGPoint(x: 31.5, y: 7.92), controlPoint2: CGPoint(x: 32.3, y: 8.13))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 32.66, y: 8.75))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 23.16, y: 24.71))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.72, y: 30.88))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.74, y: 32.2), controlPoint1: CGPoint(x: 26.97, y: 31.29), controlPoint2: CGPoint(x: 26.97, y: 31.79))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 25.61, y: 32.85), controlPoint1: CGPoint(x: 26.51, y: 32.6), controlPoint2: CGPoint(x: 26.08, y: 32.86))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.48, y: 32.18), controlPoint1: CGPoint(x: 25.14, y: 32.85), controlPoint2: CGPoint(x: 24.71, y: 32.59))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 20.91, y: 26.01))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.9, y: 24.7), controlPoint1: CGPoint(x: 20.67, y: 25.61), controlPoint2: CGPoint(x: 20.66, y: 25.1))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 22.03, y: 24.04), controlPoint1: CGPoint(x: 21.13, y: 24.29), controlPoint2: CGPoint(x: 21.56, y: 24.04))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 23.16, y: 24.71), controlPoint1: CGPoint(x: 22.5, y: 24.04), controlPoint2: CGPoint(x: 22.93, y: 24.3))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 23.16, y: 24.71))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 10.76, y: 21.39))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.89, y: 22.37), controlPoint1: CGPoint(x: 10.94, y: 21.69), controlPoint2: CGPoint(x: 10.98, y: 22.04))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.29, y: 23.16), controlPoint1: CGPoint(x: 10.8, y: 22.7), controlPoint2: CGPoint(x: 10.59, y: 22.99))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 4.12, y: 26.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.37, y: 26.24), controlPoint1: CGPoint(x: 3.5, y: 27.07), controlPoint2: CGPoint(x: 2.72, y: 26.85))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.82, y: 24.48), controlPoint1: CGPoint(x: 2.01, y: 25.63), controlPoint2: CGPoint(x: 2.21, y: 24.84))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.99, y: 20.91))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.76, y: 21.39), controlPoint1: CGPoint(x: 9.61, y: 20.56), controlPoint2: CGPoint(x: 10.41, y: 20.77))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 1, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.72, y: 16.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 9.72, y: 17.2), controlPoint1: CGPoint(x: 9.27, y: 16.2), controlPoint2: CGPoint(x: 9.72, y: 16.65))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 9.72, y: 17.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.72, y: 18.8), controlPoint1: CGPoint(x: 9.72, y: 18.35), controlPoint2: CGPoint(x: 9.27, y: 18.8))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 1, y: 18.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 0, y: 17.8), controlPoint1: CGPoint(x: 0.45, y: 18.8), controlPoint2: CGPoint(x: 0, y: 18.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 0, y: 17.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 1, y: 16.2), controlPoint1: CGPoint(x: 0, y: 16.65), controlPoint2: CGPoint(x: 0.45, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 1, y: 16.2))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 0))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.8, y: 0))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 18.8, y: 1), controlPoint1: CGPoint(x: 18.35, y: 0), controlPoint2: CGPoint(x: 18.8, y: 0.45))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 18.8, y: 8.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.8, y: 9.72), controlPoint1: CGPoint(x: 18.8, y: 9.27), controlPoint2: CGPoint(x: 18.35, y: 9.72))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.2, y: 9.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 16.2, y: 8.72), controlPoint1: CGPoint(x: 16.65, y: 9.72), controlPoint2: CGPoint(x: 16.2, y: 9.27))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 16.2, y: 1))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.2, y: 0), controlPoint1: CGPoint(x: 16.2, y: 0.45), controlPoint2: CGPoint(x: 16.65, y: 0))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.28, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 34, y: 16.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 35, y: 17.2), controlPoint1: CGPoint(x: 34.55, y: 16.2), controlPoint2: CGPoint(x: 35, y: 16.65))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 35, y: 17.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 34, y: 18.8), controlPoint1: CGPoint(x: 35, y: 18.35), controlPoint2: CGPoint(x: 34.55, y: 18.8))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.28, y: 18.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 25.28, y: 17.8), controlPoint1: CGPoint(x: 25.73, y: 18.8), controlPoint2: CGPoint(x: 25.28, y: 18.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 25.28, y: 17.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.28, y: 16.2), controlPoint1: CGPoint(x: 25.28, y: 16.65), controlPoint2: CGPoint(x: 25.73, y: 16.2))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 25.28))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.8, y: 25.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 18.8, y: 26.28), controlPoint1: CGPoint(x: 18.35, y: 25.28), controlPoint2: CGPoint(x: 18.8, y: 25.73))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 18.8, y: 34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.8, y: 35), controlPoint1: CGPoint(x: 18.8, y: 34.55), controlPoint2: CGPoint(x: 18.35, y: 35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.2, y: 35))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 16.2, y: 34), controlPoint1: CGPoint(x: 16.65, y: 35), controlPoint2: CGPoint(x: 16.2, y: 34.55))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 16.2, y: 26.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.2, y: 25.28), controlPoint1: CGPoint(x: 16.2, y: 25.73), controlPoint2: CGPoint(x: 16.65, y: 25.28))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 25.28))
        context.saveGState()
        indeterminate_Spinner_.usesEvenOddFillRule = true
        context.saveGState()
        indeterminate_Spinner_.addClip()
        // Warning: Angular gradients are not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorDarkIndeterminedSpinner(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)
        
        /// Indeterminate_Spinner_
        let indeterminate_Spinner_ = UIBezierPath()
        indeterminate_Spinner_.move(to: CGPoint(x: 4.12, y: 8.28))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 10.29, y: 11.84))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.96, y: 12.97), controlPoint1: CGPoint(x: 10.7, y: 12.07), controlPoint2: CGPoint(x: 10.96, y: 12.5))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.3, y: 14.1), controlPoint1: CGPoint(x: 10.96, y: 13.44), controlPoint2: CGPoint(x: 10.71, y: 13.87))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.99, y: 14.09), controlPoint1: CGPoint(x: 9.9, y: 14.34), controlPoint2: CGPoint(x: 9.4, y: 14.33))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 2.82, y: 10.52))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.35, y: 8.76), controlPoint1: CGPoint(x: 2.21, y: 10.16), controlPoint2: CGPoint(x: 2, y: 9.37))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 4.12, y: 8.28), controlPoint1: CGPoint(x: 2.71, y: 8.14), controlPoint2: CGPoint(x: 3.5, y: 7.92))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.25, y: 2.34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.72, y: 4.12), controlPoint1: CGPoint(x: 26.87, y: 2.7), controlPoint2: CGPoint(x: 27.08, y: 3.5))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 23.16, y: 10.29))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 22.03, y: 10.96), controlPoint1: CGPoint(x: 22.93, y: 10.7), controlPoint2: CGPoint(x: 22.5, y: 10.96))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.9, y: 10.3), controlPoint1: CGPoint(x: 21.56, y: 10.96), controlPoint2: CGPoint(x: 21.13, y: 10.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.91, y: 8.99), controlPoint1: CGPoint(x: 20.66, y: 9.9), controlPoint2: CGPoint(x: 20.67, y: 9.4))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 24.48, y: 2.82))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.25, y: 2.34), controlPoint1: CGPoint(x: 24.84, y: 2.2), controlPoint2: CGPoint(x: 25.63, y: 1.99))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.25, y: 2.34))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.01, y: 20.91))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 32.18, y: 24.48))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.85, y: 25.61), controlPoint1: CGPoint(x: 32.59, y: 24.71), controlPoint2: CGPoint(x: 32.85, y: 25.14))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.2, y: 26.74), controlPoint1: CGPoint(x: 32.85, y: 26.08), controlPoint2: CGPoint(x: 32.6, y: 26.51))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 30.88, y: 26.72), controlPoint1: CGPoint(x: 31.79, y: 26.97), controlPoint2: CGPoint(x: 31.29, y: 26.97))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 24.71, y: 23.16))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.04, y: 22.03), controlPoint1: CGPoint(x: 24.3, y: 22.93), controlPoint2: CGPoint(x: 24.04, y: 22.5))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.7, y: 20.9), controlPoint1: CGPoint(x: 24.04, y: 21.56), controlPoint2: CGPoint(x: 24.29, y: 21.13))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.01, y: 20.91), controlPoint1: CGPoint(x: 25.1, y: 20.66), controlPoint2: CGPoint(x: 25.6, y: 20.67))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.01, y: 20.91))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 13.61, y: 24.24))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 14.09, y: 26.01), controlPoint1: CGPoint(x: 14.23, y: 24.59), controlPoint2: CGPoint(x: 14.44, y: 25.39))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 10.52, y: 32.18))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 9.4, y: 32.84), controlPoint1: CGPoint(x: 10.29, y: 32.59), controlPoint2: CGPoint(x: 9.86, y: 32.84))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.27, y: 32.19), controlPoint1: CGPoint(x: 8.93, y: 32.84), controlPoint2: CGPoint(x: 8.5, y: 32.59))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.27, y: 30.88), controlPoint1: CGPoint(x: 8.04, y: 31.78), controlPoint2: CGPoint(x: 8.04, y: 31.29))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 11.84, y: 24.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 12.63, y: 24.11), controlPoint1: CGPoint(x: 12.01, y: 24.41), controlPoint2: CGPoint(x: 12.3, y: 24.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 13.61, y: 24.24), controlPoint1: CGPoint(x: 12.96, y: 24.02), controlPoint2: CGPoint(x: 13.31, y: 24.06))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 10.52, y: 2.82))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 14.09, y: 8.99))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 14.1, y: 10.3), controlPoint1: CGPoint(x: 14.33, y: 9.4), controlPoint2: CGPoint(x: 14.34, y: 9.9))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 12.97, y: 10.96), controlPoint1: CGPoint(x: 13.87, y: 10.71), controlPoint2: CGPoint(x: 13.44, y: 10.96))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 11.84, y: 10.29), controlPoint1: CGPoint(x: 12.5, y: 10.96), controlPoint2: CGPoint(x: 12.07, y: 10.7))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.28, y: 4.12))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.76, y: 2.35), controlPoint1: CGPoint(x: 7.92, y: 3.5), controlPoint2: CGPoint(x: 8.14, y: 2.71))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.52, y: 2.82), controlPoint1: CGPoint(x: 9.37, y: 2), controlPoint2: CGPoint(x: 10.16, y: 2.21))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 32.66, y: 8.75))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.78, y: 9.73), controlPoint1: CGPoint(x: 32.83, y: 9.05), controlPoint2: CGPoint(x: 32.87, y: 9.4))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.18, y: 10.52), controlPoint1: CGPoint(x: 32.7, y: 10.07), controlPoint2: CGPoint(x: 32.48, y: 10.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.01, y: 14.09))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.7, y: 14.1), controlPoint1: CGPoint(x: 25.6, y: 14.33), controlPoint2: CGPoint(x: 25.1, y: 14.34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.04, y: 12.97), controlPoint1: CGPoint(x: 24.29, y: 13.87), controlPoint2: CGPoint(x: 24.04, y: 13.44))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.71, y: 11.84), controlPoint1: CGPoint(x: 24.04, y: 12.5), controlPoint2: CGPoint(x: 24.3, y: 12.07))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 30.88, y: 8.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 32.66, y: 8.75), controlPoint1: CGPoint(x: 31.5, y: 7.92), controlPoint2: CGPoint(x: 32.3, y: 8.13))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 32.66, y: 8.75))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 23.16, y: 24.71))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.72, y: 30.88))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.74, y: 32.2), controlPoint1: CGPoint(x: 26.97, y: 31.29), controlPoint2: CGPoint(x: 26.97, y: 31.79))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 25.61, y: 32.85), controlPoint1: CGPoint(x: 26.51, y: 32.6), controlPoint2: CGPoint(x: 26.08, y: 32.86))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 24.48, y: 32.18), controlPoint1: CGPoint(x: 25.14, y: 32.85), controlPoint2: CGPoint(x: 24.71, y: 32.59))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 20.91, y: 26.01))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 20.9, y: 24.7), controlPoint1: CGPoint(x: 20.67, y: 25.61), controlPoint2: CGPoint(x: 20.66, y: 25.1))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 22.03, y: 24.04), controlPoint1: CGPoint(x: 21.13, y: 24.29), controlPoint2: CGPoint(x: 21.56, y: 24.04))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 23.16, y: 24.71), controlPoint1: CGPoint(x: 22.5, y: 24.04), controlPoint2: CGPoint(x: 22.93, y: 24.3))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 23.16, y: 24.71))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 10.76, y: 21.39))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.89, y: 22.37), controlPoint1: CGPoint(x: 10.94, y: 21.69), controlPoint2: CGPoint(x: 10.98, y: 22.04))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.29, y: 23.16), controlPoint1: CGPoint(x: 10.8, y: 22.7), controlPoint2: CGPoint(x: 10.59, y: 22.99))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 4.12, y: 26.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.37, y: 26.24), controlPoint1: CGPoint(x: 3.5, y: 27.07), controlPoint2: CGPoint(x: 2.72, y: 26.85))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 2.82, y: 24.48), controlPoint1: CGPoint(x: 2.01, y: 25.63), controlPoint2: CGPoint(x: 2.21, y: 24.84))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.99, y: 20.91))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 10.76, y: 21.39), controlPoint1: CGPoint(x: 9.61, y: 20.56), controlPoint2: CGPoint(x: 10.41, y: 20.77))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 1, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 8.72, y: 16.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 9.72, y: 17.2), controlPoint1: CGPoint(x: 9.27, y: 16.2), controlPoint2: CGPoint(x: 9.72, y: 16.65))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 9.72, y: 17.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 8.72, y: 18.8), controlPoint1: CGPoint(x: 9.72, y: 18.35), controlPoint2: CGPoint(x: 9.27, y: 18.8))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 1, y: 18.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 0, y: 17.8), controlPoint1: CGPoint(x: 0.45, y: 18.8), controlPoint2: CGPoint(x: 0, y: 18.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 0, y: 17.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 1, y: 16.2), controlPoint1: CGPoint(x: 0, y: 16.65), controlPoint2: CGPoint(x: 0.45, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 1, y: 16.2))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 0))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.8, y: 0))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 18.8, y: 1), controlPoint1: CGPoint(x: 18.35, y: 0), controlPoint2: CGPoint(x: 18.8, y: 0.45))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 18.8, y: 8.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.8, y: 9.72), controlPoint1: CGPoint(x: 18.8, y: 9.27), controlPoint2: CGPoint(x: 18.35, y: 9.72))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.2, y: 9.72))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 16.2, y: 8.72), controlPoint1: CGPoint(x: 16.65, y: 9.72), controlPoint2: CGPoint(x: 16.2, y: 9.27))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 16.2, y: 1))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.2, y: 0), controlPoint1: CGPoint(x: 16.2, y: 0.45), controlPoint2: CGPoint(x: 16.65, y: 0))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 26.28, y: 16.2))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 34, y: 16.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 35, y: 17.2), controlPoint1: CGPoint(x: 34.55, y: 16.2), controlPoint2: CGPoint(x: 35, y: 16.65))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 35, y: 17.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 34, y: 18.8), controlPoint1: CGPoint(x: 35, y: 18.35), controlPoint2: CGPoint(x: 34.55, y: 18.8))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 26.28, y: 18.8))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 25.28, y: 17.8), controlPoint1: CGPoint(x: 25.73, y: 18.8), controlPoint2: CGPoint(x: 25.28, y: 18.35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 25.28, y: 17.2))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 26.28, y: 16.2), controlPoint1: CGPoint(x: 25.28, y: 16.65), controlPoint2: CGPoint(x: 25.73, y: 16.2))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 25.28))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.8, y: 25.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 18.8, y: 26.28), controlPoint1: CGPoint(x: 18.35, y: 25.28), controlPoint2: CGPoint(x: 18.8, y: 25.73))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 18.8, y: 34))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.8, y: 35), controlPoint1: CGPoint(x: 18.8, y: 34.55), controlPoint2: CGPoint(x: 18.35, y: 35))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 17.2, y: 35))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 16.2, y: 34), controlPoint1: CGPoint(x: 16.65, y: 35), controlPoint2: CGPoint(x: 16.2, y: 34.55))
        indeterminate_Spinner_.addLine(to: CGPoint(x: 16.2, y: 26.28))
        indeterminate_Spinner_.addCurve(to: CGPoint(x: 17.2, y: 25.28), controlPoint1: CGPoint(x: 16.2, y: 25.73), controlPoint2: CGPoint(x: 16.65, y: 25.28))
        indeterminate_Spinner_.close()
        indeterminate_Spinner_.move(to: CGPoint(x: 17.2, y: 25.28))
        context.saveGState()
        indeterminate_Spinner_.usesEvenOddFillRule = true
        context.saveGState()
        indeterminate_Spinner_.addClip()
        // Warning: Angular gradients are not supported.
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorLightIndeterminedSpinnerWithLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 62), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 62), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 62)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 94, y: 21)
            
            /// indicator
            let indicator = UIBezierPath()
            indicator.move(to: CGPoint(x: 5, y: 10))
            indicator.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 5, y: 9.45), controlPoint2: CGPoint(x: 4.55, y: 9))
            indicator.addLine(to: CGPoint(x: 1, y: 9))
            indicator.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 9.45))
            indicator.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 0, y: 10.55), controlPoint2: CGPoint(x: 0.45, y: 11))
            indicator.addLine(to: CGPoint(x: 4, y: 11))
            indicator.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 4.55, y: 11), controlPoint2: CGPoint(x: 5, y: 10.55))
            indicator.addLine(to: CGPoint(x: 5, y: 10))
            indicator.close()
            indicator.move(to: CGPoint(x: 19, y: 9))
            indicator.addLine(to: CGPoint(x: 16, y: 9))
            indicator.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 15.45, y: 9), controlPoint2: CGPoint(x: 15, y: 9.45))
            indicator.addCurve(to: CGPoint(x: 16, y: 11), controlPoint1: CGPoint(x: 15, y: 10.55), controlPoint2: CGPoint(x: 15.45, y: 11))
            indicator.addLine(to: CGPoint(x: 19, y: 11))
            indicator.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.55, y: 11), controlPoint2: CGPoint(x: 20, y: 10.55))
            indicator.addCurve(to: CGPoint(x: 19, y: 9), controlPoint1: CGPoint(x: 20, y: 9.45), controlPoint2: CGPoint(x: 19.55, y: 9))
            indicator.addLine(to: CGPoint(x: 19, y: 9))
            indicator.close()
            indicator.move(to: CGPoint(x: 10, y: 15))
            indicator.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 9.45, y: 15), controlPoint2: CGPoint(x: 9, y: 15.45))
            indicator.addLine(to: CGPoint(x: 9, y: 19))
            indicator.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 9, y: 19.55), controlPoint2: CGPoint(x: 9.45, y: 20))
            indicator.addCurve(to: CGPoint(x: 11, y: 19), controlPoint1: CGPoint(x: 10.55, y: 20), controlPoint2: CGPoint(x: 11, y: 19.55))
            indicator.addLine(to: CGPoint(x: 11, y: 16))
            indicator.addCurve(to: CGPoint(x: 10, y: 15), controlPoint1: CGPoint(x: 11, y: 15.45), controlPoint2: CGPoint(x: 10.55, y: 15))
            indicator.addLine(to: CGPoint(x: 10, y: 15))
            indicator.close()
            indicator.move(to: CGPoint(x: 10, y: 0))
            indicator.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 9.45, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
            indicator.addLine(to: CGPoint(x: 9, y: 4))
            indicator.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 9, y: 4.55), controlPoint2: CGPoint(x: 9.45, y: 5))
            indicator.addCurve(to: CGPoint(x: 11, y: 4), controlPoint1: CGPoint(x: 10.55, y: 5), controlPoint2: CGPoint(x: 11, y: 4.55))
            indicator.addLine(to: CGPoint(x: 11, y: 1))
            indicator.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 11, y: 0.45), controlPoint2: CGPoint(x: 10.55, y: 0))
            indicator.addLine(to: CGPoint(x: 10, y: 0))
            indicator.close()
            indicator.move(to: CGPoint(x: 6.37, y: 1.71))
            indicator.addCurve(to: CGPoint(x: 5, y: 1.34), controlPoint1: CGPoint(x: 6.09, y: 1.23), controlPoint2: CGPoint(x: 5.48, y: 1.06))
            indicator.addCurve(to: CGPoint(x: 4.63, y: 2.71), controlPoint1: CGPoint(x: 4.52, y: 1.62), controlPoint2: CGPoint(x: 4.36, y: 2.23))
            indicator.addLine(to: CGPoint(x: 6.13, y: 5.3))
            indicator.addCurve(to: CGPoint(x: 7.5, y: 5.67), controlPoint1: CGPoint(x: 6.41, y: 5.78), controlPoint2: CGPoint(x: 7.02, y: 5.95))
            indicator.addCurve(to: CGPoint(x: 7.87, y: 4.3), controlPoint1: CGPoint(x: 7.98, y: 5.39), controlPoint2: CGPoint(x: 8.14, y: 4.78))
            indicator.addLine(to: CGPoint(x: 6.37, y: 1.71))
            indicator.close()
            indicator.move(to: CGPoint(x: 13.87, y: 14.7))
            indicator.addCurve(to: CGPoint(x: 12.5, y: 14.33), controlPoint1: CGPoint(x: 13.59, y: 14.22), controlPoint2: CGPoint(x: 12.98, y: 14.05))
            indicator.addCurve(to: CGPoint(x: 12.13, y: 15.7), controlPoint1: CGPoint(x: 12.02, y: 14.61), controlPoint2: CGPoint(x: 11.86, y: 15.22))
            indicator.addLine(to: CGPoint(x: 13.63, y: 18.29))
            indicator.addCurve(to: CGPoint(x: 15, y: 18.66), controlPoint1: CGPoint(x: 13.91, y: 18.77), controlPoint2: CGPoint(x: 14.52, y: 18.94))
            indicator.addCurve(to: CGPoint(x: 15.37, y: 17.29), controlPoint1: CGPoint(x: 15.48, y: 18.38), controlPoint2: CGPoint(x: 15.64, y: 17.77))
            indicator.addLine(to: CGPoint(x: 13.87, y: 14.7))
            indicator.close()
            indicator.move(to: CGPoint(x: 5.67, y: 12.5))
            indicator.addCurve(to: CGPoint(x: 4.3, y: 12.13), controlPoint1: CGPoint(x: 5.39, y: 12.02), controlPoint2: CGPoint(x: 4.78, y: 11.86))
            indicator.addLine(to: CGPoint(x: 1.71, y: 13.63))
            indicator.addCurve(to: CGPoint(x: 1.34, y: 15), controlPoint1: CGPoint(x: 1.23, y: 13.91), controlPoint2: CGPoint(x: 1.06, y: 14.52))
            indicator.addCurve(to: CGPoint(x: 2.71, y: 15.37), controlPoint1: CGPoint(x: 1.62, y: 15.48), controlPoint2: CGPoint(x: 2.23, y: 15.64))
            indicator.addLine(to: CGPoint(x: 5.3, y: 13.87))
            indicator.addCurve(to: CGPoint(x: 5.67, y: 12.5), controlPoint1: CGPoint(x: 5.78, y: 13.59), controlPoint2: CGPoint(x: 5.95, y: 12.98))
            indicator.addLine(to: CGPoint(x: 5.67, y: 12.5))
            indicator.close()
            indicator.move(to: CGPoint(x: 14.33, y: 7.5))
            indicator.addCurve(to: CGPoint(x: 15.7, y: 7.87), controlPoint1: CGPoint(x: 14.61, y: 7.98), controlPoint2: CGPoint(x: 15.22, y: 8.14))
            indicator.addLine(to: CGPoint(x: 18.29, y: 6.37))
            indicator.addCurve(to: CGPoint(x: 18.66, y: 5), controlPoint1: CGPoint(x: 18.77, y: 6.09), controlPoint2: CGPoint(x: 18.94, y: 5.48))
            indicator.addCurve(to: CGPoint(x: 17.29, y: 4.63), controlPoint1: CGPoint(x: 18.38, y: 4.52), controlPoint2: CGPoint(x: 17.77, y: 4.36))
            indicator.addLine(to: CGPoint(x: 14.7, y: 6.13))
            indicator.addCurve(to: CGPoint(x: 14.33, y: 7.5), controlPoint1: CGPoint(x: 14.22, y: 6.41), controlPoint2: CGPoint(x: 14.05, y: 7.02))
            indicator.addLine(to: CGPoint(x: 14.33, y: 7.5))
            indicator.close()
            indicator.move(to: CGPoint(x: 1.71, y: 6.37))
            indicator.addLine(to: CGPoint(x: 4.3, y: 7.87))
            indicator.addCurve(to: CGPoint(x: 5.67, y: 7.5), controlPoint1: CGPoint(x: 4.78, y: 8.14), controlPoint2: CGPoint(x: 5.39, y: 7.98))
            indicator.addCurve(to: CGPoint(x: 5.3, y: 6.13), controlPoint1: CGPoint(x: 5.95, y: 7.02), controlPoint2: CGPoint(x: 5.78, y: 6.41))
            indicator.addLine(to: CGPoint(x: 2.71, y: 4.63))
            indicator.addCurve(to: CGPoint(x: 1.34, y: 5), controlPoint1: CGPoint(x: 2.23, y: 4.36), controlPoint2: CGPoint(x: 1.62, y: 4.52))
            indicator.addCurve(to: CGPoint(x: 1.71, y: 6.37), controlPoint1: CGPoint(x: 1.06, y: 5.48), controlPoint2: CGPoint(x: 1.23, y: 6.09))
            indicator.addLine(to: CGPoint(x: 1.71, y: 6.37))
            indicator.close()
            indicator.move(to: CGPoint(x: 18.29, y: 13.63))
            indicator.addLine(to: CGPoint(x: 15.7, y: 12.13))
            indicator.addCurve(to: CGPoint(x: 14.33, y: 12.5), controlPoint1: CGPoint(x: 15.22, y: 11.86), controlPoint2: CGPoint(x: 14.61, y: 12.02))
            indicator.addCurve(to: CGPoint(x: 14.7, y: 13.87), controlPoint1: CGPoint(x: 14.05, y: 12.98), controlPoint2: CGPoint(x: 14.22, y: 13.59))
            indicator.addLine(to: CGPoint(x: 17.29, y: 15.37))
            indicator.addCurve(to: CGPoint(x: 18.66, y: 15), controlPoint1: CGPoint(x: 17.77, y: 15.64), controlPoint2: CGPoint(x: 18.38, y: 15.48))
            indicator.addCurve(to: CGPoint(x: 18.29, y: 13.63), controlPoint1: CGPoint(x: 18.94, y: 14.52), controlPoint2: CGPoint(x: 18.77, y: 13.91))
            indicator.addLine(to: CGPoint(x: 18.29, y: 13.63))
            indicator.close()
            indicator.move(to: CGPoint(x: 7.5, y: 14.33))
            indicator.addCurve(to: CGPoint(x: 6.13, y: 14.7), controlPoint1: CGPoint(x: 7.02, y: 14.05), controlPoint2: CGPoint(x: 6.41, y: 14.22))
            indicator.addLine(to: CGPoint(x: 4.63, y: 17.29))
            indicator.addCurve(to: CGPoint(x: 5, y: 18.66), controlPoint1: CGPoint(x: 4.36, y: 17.77), controlPoint2: CGPoint(x: 4.52, y: 18.38))
            indicator.addCurve(to: CGPoint(x: 6.37, y: 18.29), controlPoint1: CGPoint(x: 5.48, y: 18.94), controlPoint2: CGPoint(x: 6.09, y: 18.77))
            indicator.addLine(to: CGPoint(x: 7.87, y: 15.7))
            indicator.addCurve(to: CGPoint(x: 7.5, y: 14.33), controlPoint1: CGPoint(x: 8.14, y: 15.22), controlPoint2: CGPoint(x: 7.98, y: 14.61))
            indicator.addLine(to: CGPoint(x: 7.5, y: 14.33))
            indicator.close()
            indicator.move(to: CGPoint(x: 12.5, y: 5.67))
            indicator.addCurve(to: CGPoint(x: 13.87, y: 5.3), controlPoint1: CGPoint(x: 12.98, y: 5.95), controlPoint2: CGPoint(x: 13.59, y: 5.78))
            indicator.addLine(to: CGPoint(x: 15.37, y: 2.71))
            indicator.addCurve(to: CGPoint(x: 15, y: 1.34), controlPoint1: CGPoint(x: 15.64, y: 2.23), controlPoint2: CGPoint(x: 15.48, y: 1.62))
            indicator.addCurve(to: CGPoint(x: 13.63, y: 1.71), controlPoint1: CGPoint(x: 14.52, y: 1.06), controlPoint2: CGPoint(x: 13.91, y: 1.23))
            indicator.addLine(to: CGPoint(x: 12.13, y: 4.3))
            indicator.addCurve(to: CGPoint(x: 12.5, y: 5.67), controlPoint1: CGPoint(x: 11.86, y: 4.78), controlPoint2: CGPoint(x: 12.02, y: 5.39))
            indicator.addLine(to: CGPoint(x: 12.5, y: 5.67))
            indicator.close()
            indicator.move(to: CGPoint(x: 12.5, y: 5.67))
            context.saveGState()
            context.translateBy(x: 168, y: 1)
            indicator.usesEvenOddFillRule = true
            context.saveGState()
            indicator.addClip()
            // Warning: Angular gradients are not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Label
            let label = NSMutableAttributedString(string: "Checking for Update…")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorDarkIndeterminedSpinnerWithLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 62), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 62), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 62)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 94, y: 21)
            
            /// indicator
            let indicator = UIBezierPath()
            indicator.move(to: CGPoint(x: 5, y: 10))
            indicator.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 5, y: 9.45), controlPoint2: CGPoint(x: 4.55, y: 9))
            indicator.addLine(to: CGPoint(x: 1, y: 9))
            indicator.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 0.45, y: 9), controlPoint2: CGPoint(x: 0, y: 9.45))
            indicator.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 0, y: 10.55), controlPoint2: CGPoint(x: 0.45, y: 11))
            indicator.addLine(to: CGPoint(x: 4, y: 11))
            indicator.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 4.55, y: 11), controlPoint2: CGPoint(x: 5, y: 10.55))
            indicator.addLine(to: CGPoint(x: 5, y: 10))
            indicator.close()
            indicator.move(to: CGPoint(x: 19, y: 9))
            indicator.addLine(to: CGPoint(x: 16, y: 9))
            indicator.addCurve(to: CGPoint(x: 15, y: 10), controlPoint1: CGPoint(x: 15.45, y: 9), controlPoint2: CGPoint(x: 15, y: 9.45))
            indicator.addCurve(to: CGPoint(x: 16, y: 11), controlPoint1: CGPoint(x: 15, y: 10.55), controlPoint2: CGPoint(x: 15.45, y: 11))
            indicator.addLine(to: CGPoint(x: 19, y: 11))
            indicator.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 19.55, y: 11), controlPoint2: CGPoint(x: 20, y: 10.55))
            indicator.addCurve(to: CGPoint(x: 19, y: 9), controlPoint1: CGPoint(x: 20, y: 9.45), controlPoint2: CGPoint(x: 19.55, y: 9))
            indicator.addLine(to: CGPoint(x: 19, y: 9))
            indicator.close()
            indicator.move(to: CGPoint(x: 10, y: 15))
            indicator.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 9.45, y: 15), controlPoint2: CGPoint(x: 9, y: 15.45))
            indicator.addLine(to: CGPoint(x: 9, y: 19))
            indicator.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 9, y: 19.55), controlPoint2: CGPoint(x: 9.45, y: 20))
            indicator.addCurve(to: CGPoint(x: 11, y: 19), controlPoint1: CGPoint(x: 10.55, y: 20), controlPoint2: CGPoint(x: 11, y: 19.55))
            indicator.addLine(to: CGPoint(x: 11, y: 16))
            indicator.addCurve(to: CGPoint(x: 10, y: 15), controlPoint1: CGPoint(x: 11, y: 15.45), controlPoint2: CGPoint(x: 10.55, y: 15))
            indicator.addLine(to: CGPoint(x: 10, y: 15))
            indicator.close()
            indicator.move(to: CGPoint(x: 10, y: 0))
            indicator.addCurve(to: CGPoint(x: 9, y: 1), controlPoint1: CGPoint(x: 9.45, y: 0), controlPoint2: CGPoint(x: 9, y: 0.45))
            indicator.addLine(to: CGPoint(x: 9, y: 4))
            indicator.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 9, y: 4.55), controlPoint2: CGPoint(x: 9.45, y: 5))
            indicator.addCurve(to: CGPoint(x: 11, y: 4), controlPoint1: CGPoint(x: 10.55, y: 5), controlPoint2: CGPoint(x: 11, y: 4.55))
            indicator.addLine(to: CGPoint(x: 11, y: 1))
            indicator.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 11, y: 0.45), controlPoint2: CGPoint(x: 10.55, y: 0))
            indicator.addLine(to: CGPoint(x: 10, y: 0))
            indicator.close()
            indicator.move(to: CGPoint(x: 6.37, y: 1.71))
            indicator.addCurve(to: CGPoint(x: 5, y: 1.34), controlPoint1: CGPoint(x: 6.09, y: 1.23), controlPoint2: CGPoint(x: 5.48, y: 1.06))
            indicator.addCurve(to: CGPoint(x: 4.63, y: 2.71), controlPoint1: CGPoint(x: 4.52, y: 1.62), controlPoint2: CGPoint(x: 4.36, y: 2.23))
            indicator.addLine(to: CGPoint(x: 6.13, y: 5.3))
            indicator.addCurve(to: CGPoint(x: 7.5, y: 5.67), controlPoint1: CGPoint(x: 6.41, y: 5.78), controlPoint2: CGPoint(x: 7.02, y: 5.95))
            indicator.addCurve(to: CGPoint(x: 7.87, y: 4.3), controlPoint1: CGPoint(x: 7.98, y: 5.39), controlPoint2: CGPoint(x: 8.14, y: 4.78))
            indicator.addLine(to: CGPoint(x: 6.37, y: 1.71))
            indicator.close()
            indicator.move(to: CGPoint(x: 13.87, y: 14.7))
            indicator.addCurve(to: CGPoint(x: 12.5, y: 14.33), controlPoint1: CGPoint(x: 13.59, y: 14.22), controlPoint2: CGPoint(x: 12.98, y: 14.05))
            indicator.addCurve(to: CGPoint(x: 12.13, y: 15.7), controlPoint1: CGPoint(x: 12.02, y: 14.61), controlPoint2: CGPoint(x: 11.86, y: 15.22))
            indicator.addLine(to: CGPoint(x: 13.63, y: 18.29))
            indicator.addCurve(to: CGPoint(x: 15, y: 18.66), controlPoint1: CGPoint(x: 13.91, y: 18.77), controlPoint2: CGPoint(x: 14.52, y: 18.94))
            indicator.addCurve(to: CGPoint(x: 15.37, y: 17.29), controlPoint1: CGPoint(x: 15.48, y: 18.38), controlPoint2: CGPoint(x: 15.64, y: 17.77))
            indicator.addLine(to: CGPoint(x: 13.87, y: 14.7))
            indicator.close()
            indicator.move(to: CGPoint(x: 5.67, y: 12.5))
            indicator.addCurve(to: CGPoint(x: 4.3, y: 12.13), controlPoint1: CGPoint(x: 5.39, y: 12.02), controlPoint2: CGPoint(x: 4.78, y: 11.86))
            indicator.addLine(to: CGPoint(x: 1.71, y: 13.63))
            indicator.addCurve(to: CGPoint(x: 1.34, y: 15), controlPoint1: CGPoint(x: 1.23, y: 13.91), controlPoint2: CGPoint(x: 1.06, y: 14.52))
            indicator.addCurve(to: CGPoint(x: 2.71, y: 15.37), controlPoint1: CGPoint(x: 1.62, y: 15.48), controlPoint2: CGPoint(x: 2.23, y: 15.64))
            indicator.addLine(to: CGPoint(x: 5.3, y: 13.87))
            indicator.addCurve(to: CGPoint(x: 5.67, y: 12.5), controlPoint1: CGPoint(x: 5.78, y: 13.59), controlPoint2: CGPoint(x: 5.95, y: 12.98))
            indicator.addLine(to: CGPoint(x: 5.67, y: 12.5))
            indicator.close()
            indicator.move(to: CGPoint(x: 14.33, y: 7.5))
            indicator.addCurve(to: CGPoint(x: 15.7, y: 7.87), controlPoint1: CGPoint(x: 14.61, y: 7.98), controlPoint2: CGPoint(x: 15.22, y: 8.14))
            indicator.addLine(to: CGPoint(x: 18.29, y: 6.37))
            indicator.addCurve(to: CGPoint(x: 18.66, y: 5), controlPoint1: CGPoint(x: 18.77, y: 6.09), controlPoint2: CGPoint(x: 18.94, y: 5.48))
            indicator.addCurve(to: CGPoint(x: 17.29, y: 4.63), controlPoint1: CGPoint(x: 18.38, y: 4.52), controlPoint2: CGPoint(x: 17.77, y: 4.36))
            indicator.addLine(to: CGPoint(x: 14.7, y: 6.13))
            indicator.addCurve(to: CGPoint(x: 14.33, y: 7.5), controlPoint1: CGPoint(x: 14.22, y: 6.41), controlPoint2: CGPoint(x: 14.05, y: 7.02))
            indicator.addLine(to: CGPoint(x: 14.33, y: 7.5))
            indicator.close()
            indicator.move(to: CGPoint(x: 1.71, y: 6.37))
            indicator.addLine(to: CGPoint(x: 4.3, y: 7.87))
            indicator.addCurve(to: CGPoint(x: 5.67, y: 7.5), controlPoint1: CGPoint(x: 4.78, y: 8.14), controlPoint2: CGPoint(x: 5.39, y: 7.98))
            indicator.addCurve(to: CGPoint(x: 5.3, y: 6.13), controlPoint1: CGPoint(x: 5.95, y: 7.02), controlPoint2: CGPoint(x: 5.78, y: 6.41))
            indicator.addLine(to: CGPoint(x: 2.71, y: 4.63))
            indicator.addCurve(to: CGPoint(x: 1.34, y: 5), controlPoint1: CGPoint(x: 2.23, y: 4.36), controlPoint2: CGPoint(x: 1.62, y: 4.52))
            indicator.addCurve(to: CGPoint(x: 1.71, y: 6.37), controlPoint1: CGPoint(x: 1.06, y: 5.48), controlPoint2: CGPoint(x: 1.23, y: 6.09))
            indicator.addLine(to: CGPoint(x: 1.71, y: 6.37))
            indicator.close()
            indicator.move(to: CGPoint(x: 18.29, y: 13.63))
            indicator.addLine(to: CGPoint(x: 15.7, y: 12.13))
            indicator.addCurve(to: CGPoint(x: 14.33, y: 12.5), controlPoint1: CGPoint(x: 15.22, y: 11.86), controlPoint2: CGPoint(x: 14.61, y: 12.02))
            indicator.addCurve(to: CGPoint(x: 14.7, y: 13.87), controlPoint1: CGPoint(x: 14.05, y: 12.98), controlPoint2: CGPoint(x: 14.22, y: 13.59))
            indicator.addLine(to: CGPoint(x: 17.29, y: 15.37))
            indicator.addCurve(to: CGPoint(x: 18.66, y: 15), controlPoint1: CGPoint(x: 17.77, y: 15.64), controlPoint2: CGPoint(x: 18.38, y: 15.48))
            indicator.addCurve(to: CGPoint(x: 18.29, y: 13.63), controlPoint1: CGPoint(x: 18.94, y: 14.52), controlPoint2: CGPoint(x: 18.77, y: 13.91))
            indicator.addLine(to: CGPoint(x: 18.29, y: 13.63))
            indicator.close()
            indicator.move(to: CGPoint(x: 7.5, y: 14.33))
            indicator.addCurve(to: CGPoint(x: 6.13, y: 14.7), controlPoint1: CGPoint(x: 7.02, y: 14.05), controlPoint2: CGPoint(x: 6.41, y: 14.22))
            indicator.addLine(to: CGPoint(x: 4.63, y: 17.29))
            indicator.addCurve(to: CGPoint(x: 5, y: 18.66), controlPoint1: CGPoint(x: 4.36, y: 17.77), controlPoint2: CGPoint(x: 4.52, y: 18.38))
            indicator.addCurve(to: CGPoint(x: 6.37, y: 18.29), controlPoint1: CGPoint(x: 5.48, y: 18.94), controlPoint2: CGPoint(x: 6.09, y: 18.77))
            indicator.addLine(to: CGPoint(x: 7.87, y: 15.7))
            indicator.addCurve(to: CGPoint(x: 7.5, y: 14.33), controlPoint1: CGPoint(x: 8.14, y: 15.22), controlPoint2: CGPoint(x: 7.98, y: 14.61))
            indicator.addLine(to: CGPoint(x: 7.5, y: 14.33))
            indicator.close()
            indicator.move(to: CGPoint(x: 12.5, y: 5.67))
            indicator.addCurve(to: CGPoint(x: 13.87, y: 5.3), controlPoint1: CGPoint(x: 12.98, y: 5.95), controlPoint2: CGPoint(x: 13.59, y: 5.78))
            indicator.addLine(to: CGPoint(x: 15.37, y: 2.71))
            indicator.addCurve(to: CGPoint(x: 15, y: 1.34), controlPoint1: CGPoint(x: 15.64, y: 2.23), controlPoint2: CGPoint(x: 15.48, y: 1.62))
            indicator.addCurve(to: CGPoint(x: 13.63, y: 1.71), controlPoint1: CGPoint(x: 14.52, y: 1.06), controlPoint2: CGPoint(x: 13.91, y: 1.23))
            indicator.addLine(to: CGPoint(x: 12.13, y: 4.3))
            indicator.addCurve(to: CGPoint(x: 12.5, y: 5.67), controlPoint1: CGPoint(x: 11.86, y: 4.78), controlPoint2: CGPoint(x: 12.02, y: 5.39))
            indicator.addLine(to: CGPoint(x: 12.5, y: 5.67))
            indicator.close()
            indicator.move(to: CGPoint(x: 12.5, y: 5.67))
            context.saveGState()
            context.translateBy(x: 168, y: 1)
            indicator.usesEvenOddFillRule = true
            context.saveGState()
            indicator.addClip()
            // Warning: Angular gradients are not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// Label
            let label = NSMutableAttributedString(string: "Checking for Update…")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 21
                paragraphStyle.minimumLineHeight = 21
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint.zero)
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorLightProgressBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 345, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 22)
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 172, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 22)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorDarkProgressBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 345, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 22)
        UIColor(hue: 0.667, saturation: 0.019, brightness: 0.204, alpha: 1).setFill()
        track.fill()
        context.restoreGState()
        /// fill
        let fill = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 172, height: 2), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 15, y: 22)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        fill.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorLightToolbarProgressIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Rectangle 16
        let rectangle16 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 42))
        context.saveGState()
        context.translateBy(x: 0, y: 2)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        rectangle16.fill()
        context.restoreGState()
        /// Rectangle 17
        let rectangle17 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 2))
        context.saveGState()
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        rectangle17.fill()
        context.restoreGState()
        /// Sending…
        let sending = NSMutableAttributedString(string: "Sending…")
        sending.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: sending.length))
        sending.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: sending.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            sending.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: sending.length))
        }
        context.saveGState()
        sending.draw(at: CGPoint(x: 161.43, y: 16))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsProgressIndicatorDarkToolbarProgressIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Rectangle 16
        let rectangle16 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 42))
        context.saveGState()
        context.translateBy(x: 0, y: 2)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.11, alpha: 0.72).setFill()
        rectangle16.fill()
        context.restoreGState()
        /// Rectangle 17
        let rectangle17 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 2))
        context.saveGState()
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        rectangle17.fill()
        context.restoreGState()
        /// Sending…
        let sending = NSMutableAttributedString(string: "Sending…")
        sending.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: sending.length))
        sending.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: sending.length))
        sending.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: sending.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            sending.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: sending.length))
        }
        context.saveGState()
        sending.draw(at: CGPoint(x: 161.43, y: 16))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersLightSectionIndex(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// # A B C D E F G H I
        let aBCDEFGHI = NSMutableAttributedString(string: "#\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ")
        aBCDEFGHI.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 11)!, range: NSRange(location: 0, length: aBCDEFGHI.length))
        aBCDEFGHI.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: aBCDEFGHI.length))
        aBCDEFGHI.addAttribute(NSKernAttributeName, value: 0.06, range: NSRange(location: 0, length: aBCDEFGHI.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            aBCDEFGHI.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBCDEFGHI.length))
        }
        context.saveGState()
        aBCDEFGHI.draw(at: CGPoint(x: 2, y: 181))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSectionHeadersDarkSectionIndex(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// # A B C D E F G H I
        let aBCDEFGHI = NSMutableAttributedString(string: "#\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ")
        aBCDEFGHI.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 11)!, range: NSRange(location: 0, length: aBCDEFGHI.length))
        aBCDEFGHI.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: aBCDEFGHI.length))
        aBCDEFGHI.addAttribute(NSKernAttributeName, value: 0.06, range: NSRange(location: 0, length: aBCDEFGHI.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            aBCDEFGHI.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBCDEFGHI.length))
        }
        context.saveGState()
        aBCDEFGHI.draw(at: CGPoint(x: 2, y: 181))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesBorder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 1), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 1), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 1)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// keyline
        let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
        context.saveGState()
        context.translateBy(x: 0, y: 0.5)
        UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
        keyline.fill()
        context.saveGState()
        context.setBlendMode(.colorBurn)
        context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.247, alpha: 1).setFill()
            keyline.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 50)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Action
        let action = NSMutableAttributedString(string: "Action")
        action.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: action.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            action.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action.length))
        }
        context.saveGState()
        action.draw(in: CGRect(x: 10, y: 13, width: 335, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesDestructive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 50)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Destructive Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 13, width: 335, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesDisabled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 50)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Disabled Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: 0.38, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 13, width: 335, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesTop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 56), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 56)
        
        /// Platter
        let platter = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 56), cornerRadius: 14)
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Border
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 55)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesMiddle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 56), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 56)
        
        /// Platter
        let platter = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 56))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Border
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 55)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesBottom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 355, height: 56), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 355, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 355, y: resizedFrame.height / 56)
        
        /// Platter
        let platter = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 56), cornerRadius: 14)
        context.saveGState()
        context.translateBy(x: 177.5, y: 28)
        context.scaleBy(x: 1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -177.5, y: -28)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetOption(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 56), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 56)
        
        /// Position
        // Warning: New symbols are not supported.
        /// Action Type
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 45), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 45)
        
        /// Platter
        let platter = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 45), cornerRadius: 14)
        context.saveGState()
        context.translateBy(x: 10, y: 0)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Border
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 44)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Description
        let description = NSMutableAttributedString(string: "A short description of the actions goes here.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.561, alpha: 1), range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 47, y: 14, width: 281, height: 20))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheet_ResourcesCancelButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 75), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 75), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 75)
        
        /// Platter
        let platter = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 56), cornerRadius: 14)
        context.saveGState()
        context.translateBy(x: 10, y: 8)
        UIColor.white.setFill()
        platter.fill()
        context.restoreGState()
        /// label
        let label = NSMutableAttributedString(string: "Cancel")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Semibold", size: 20)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: 0.75, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 10, y: 24, width: 355, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetBaseSheet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Overlay Copy
        let overlayCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.4).setFill()
        overlayCopy.fill()
        context.restoreGState()
        /// iOS UIKit/Components - Views/Action Sheet/_Resources/Cancel Button
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsActivityViewActivityView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Overlay
        let overlay = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.4).setFill()
        overlay.fill()
        context.restoreGState()
        /// iOS UIKit/Components/Action Sheet/_Resources/Cancel Button
        // Warning: New symbols are not supported.
        /// Combined Shape
        let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 355, height: 386), cornerRadius: 14)
        context.saveGState()
        context.translateBy(x: 10, y: 205)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.apply(CGAffineTransform(translationX: 10, y: 205))
        combinedShape.addClip()
        
        /// iOS UIKit/Components/Action Sheet/_Resources/Border
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 341)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// iOS UIKit/Components/Action Sheet/_Resources/Border
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 461)
            
            /// keyline
            let keyline2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 355, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline2.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Actions
        do {
            context.saveGState()
            context.translateBy(x: 25, y: 485)
            
            /// Actions Flattened
            // Warning: Image layers are not supported.
            
            /// Action Label
            let actionLabel = NSMutableAttributedString(string: "Action")
            actionLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: actionLabel.length))
            actionLabel.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: actionLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                actionLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: actionLabel.length))
            }
            context.saveGState()
            actionLabel.draw(in: CGRect(x: 240, y: 67, width: 60, height: 15))
            context.restoreGState()
            
            /// app icon
            let appIcon = UIBezierPath()
            appIcon.move(to: CGPoint(x: 60, y: 18.77))
            appIcon.addCurve(to: CGPoint(x: 60, y: 16.62), controlPoint1: CGPoint(x: 60, y: 18.05), controlPoint2: CGPoint(x: 60, y: 17.34))
            appIcon.addCurve(to: CGPoint(x: 59.97, y: 14.81), controlPoint1: CGPoint(x: 59.99, y: 16.02), controlPoint2: CGPoint(x: 59.99, y: 15.41))
            appIcon.addCurve(to: CGPoint(x: 59.62, y: 10.87), controlPoint1: CGPoint(x: 59.93, y: 13.49), controlPoint2: CGPoint(x: 59.86, y: 12.17))
            appIcon.addCurve(to: CGPoint(x: 58.39, y: 7.12), controlPoint1: CGPoint(x: 59.39, y: 9.55), controlPoint2: CGPoint(x: 59, y: 8.32))
            appIcon.addCurve(to: CGPoint(x: 56.07, y: 3.93), controlPoint1: CGPoint(x: 57.79, y: 5.94), controlPoint2: CGPoint(x: 57, y: 4.87))
            appIcon.addCurve(to: CGPoint(x: 52.88, y: 1.61), controlPoint1: CGPoint(x: 55.14, y: 3), controlPoint2: CGPoint(x: 54.06, y: 2.21))
            appIcon.addCurve(to: CGPoint(x: 49.13, y: 0.38), controlPoint1: CGPoint(x: 51.68, y: 1), controlPoint2: CGPoint(x: 50.45, y: 0.62))
            appIcon.addCurve(to: CGPoint(x: 45.19, y: 0.03), controlPoint1: CGPoint(x: 47.83, y: 0.14), controlPoint2: CGPoint(x: 46.51, y: 0.07))
            appIcon.addCurve(to: CGPoint(x: 43.38, y: 0), controlPoint1: CGPoint(x: 44.59, y: 0.02), controlPoint2: CGPoint(x: 43.99, y: 0.01))
            appIcon.addCurve(to: CGPoint(x: 41.23, y: 0), controlPoint1: CGPoint(x: 42.67, y: 0), controlPoint2: CGPoint(x: 41.95, y: 0))
            appIcon.addLine(to: CGPoint(x: 18.77, y: 0))
            appIcon.addCurve(to: CGPoint(x: 16.62, y: 0), controlPoint1: CGPoint(x: 18.05, y: 0), controlPoint2: CGPoint(x: 17.34, y: 0))
            appIcon.addCurve(to: CGPoint(x: 14.81, y: 0.03), controlPoint1: CGPoint(x: 16.02, y: 0.01), controlPoint2: CGPoint(x: 15.41, y: 0.02))
            appIcon.addCurve(to: CGPoint(x: 10.87, y: 0.38), controlPoint1: CGPoint(x: 13.49, y: 0.07), controlPoint2: CGPoint(x: 12.17, y: 0.14))
            appIcon.addCurve(to: CGPoint(x: 7.12, y: 1.61), controlPoint1: CGPoint(x: 9.55, y: 0.62), controlPoint2: CGPoint(x: 8.32, y: 1))
            appIcon.addCurve(to: CGPoint(x: 3.93, y: 3.93), controlPoint1: CGPoint(x: 5.94, y: 2.21), controlPoint2: CGPoint(x: 4.87, y: 3))
            appIcon.addCurve(to: CGPoint(x: 1.61, y: 7.12), controlPoint1: CGPoint(x: 3, y: 4.87), controlPoint2: CGPoint(x: 2.21, y: 5.94))
            appIcon.addCurve(to: CGPoint(x: 0.38, y: 10.87), controlPoint1: CGPoint(x: 1, y: 8.32), controlPoint2: CGPoint(x: 0.62, y: 9.55))
            appIcon.addCurve(to: CGPoint(x: 0.03, y: 14.81), controlPoint1: CGPoint(x: 0.14, y: 12.17), controlPoint2: CGPoint(x: 0.07, y: 13.49))
            appIcon.addCurve(to: CGPoint(x: 0.01, y: 16.62), controlPoint1: CGPoint(x: 0.02, y: 15.41), controlPoint2: CGPoint(x: 0.01, y: 16.02))
            appIcon.addCurve(to: CGPoint(x: 0, y: 18.77), controlPoint1: CGPoint(x: 0, y: 17.34), controlPoint2: CGPoint(x: 0, y: 18.05))
            appIcon.addLine(to: CGPoint(x: 0, y: 41.23))
            appIcon.addCurve(to: CGPoint(x: 0.01, y: 43.38), controlPoint1: CGPoint(x: 0, y: 41.95), controlPoint2: CGPoint(x: 0, y: 42.66))
            appIcon.addCurve(to: CGPoint(x: 0.03, y: 45.19), controlPoint1: CGPoint(x: 0.01, y: 43.98), controlPoint2: CGPoint(x: 0.02, y: 44.59))
            appIcon.addCurve(to: CGPoint(x: 0.38, y: 49.13), controlPoint1: CGPoint(x: 0.07, y: 46.51), controlPoint2: CGPoint(x: 0.14, y: 47.83))
            appIcon.addCurve(to: CGPoint(x: 1.61, y: 52.88), controlPoint1: CGPoint(x: 0.62, y: 50.45), controlPoint2: CGPoint(x: 1, y: 51.68))
            appIcon.addCurve(to: CGPoint(x: 3.93, y: 56.07), controlPoint1: CGPoint(x: 2.21, y: 54.06), controlPoint2: CGPoint(x: 3, y: 55.14))
            appIcon.addCurve(to: CGPoint(x: 7.12, y: 58.39), controlPoint1: CGPoint(x: 4.87, y: 57), controlPoint2: CGPoint(x: 5.94, y: 57.79))
            appIcon.addCurve(to: CGPoint(x: 10.87, y: 59.62), controlPoint1: CGPoint(x: 8.32, y: 59), controlPoint2: CGPoint(x: 9.55, y: 59.39))
            appIcon.addCurve(to: CGPoint(x: 14.81, y: 59.97), controlPoint1: CGPoint(x: 12.17, y: 59.86), controlPoint2: CGPoint(x: 13.49, y: 59.93))
            appIcon.addCurve(to: CGPoint(x: 16.62, y: 60), controlPoint1: CGPoint(x: 15.41, y: 59.99), controlPoint2: CGPoint(x: 16.02, y: 59.99))
            appIcon.addCurve(to: CGPoint(x: 18.77, y: 60), controlPoint1: CGPoint(x: 17.34, y: 60), controlPoint2: CGPoint(x: 18.05, y: 60))
            appIcon.addLine(to: CGPoint(x: 41.23, y: 60))
            appIcon.addCurve(to: CGPoint(x: 43.38, y: 60), controlPoint1: CGPoint(x: 41.95, y: 60), controlPoint2: CGPoint(x: 42.67, y: 60))
            appIcon.addCurve(to: CGPoint(x: 45.19, y: 59.97), controlPoint1: CGPoint(x: 43.99, y: 59.99), controlPoint2: CGPoint(x: 44.59, y: 59.99))
            appIcon.addCurve(to: CGPoint(x: 49.13, y: 59.62), controlPoint1: CGPoint(x: 46.51, y: 59.93), controlPoint2: CGPoint(x: 47.83, y: 59.86))
            appIcon.addCurve(to: CGPoint(x: 52.88, y: 58.39), controlPoint1: CGPoint(x: 50.45, y: 59.39), controlPoint2: CGPoint(x: 51.68, y: 59))
            appIcon.addCurve(to: CGPoint(x: 56.07, y: 56.07), controlPoint1: CGPoint(x: 54.06, y: 57.79), controlPoint2: CGPoint(x: 55.14, y: 57))
            appIcon.addCurve(to: CGPoint(x: 58.39, y: 52.88), controlPoint1: CGPoint(x: 57, y: 55.14), controlPoint2: CGPoint(x: 57.79, y: 54.06))
            appIcon.addCurve(to: CGPoint(x: 59.62, y: 49.13), controlPoint1: CGPoint(x: 59, y: 51.68), controlPoint2: CGPoint(x: 59.39, y: 50.45))
            appIcon.addCurve(to: CGPoint(x: 59.97, y: 45.19), controlPoint1: CGPoint(x: 59.86, y: 47.83), controlPoint2: CGPoint(x: 59.93, y: 46.51))
            appIcon.addCurve(to: CGPoint(x: 60, y: 43.38), controlPoint1: CGPoint(x: 59.99, y: 44.59), controlPoint2: CGPoint(x: 59.99, y: 43.98))
            appIcon.addCurve(to: CGPoint(x: 60, y: 41.23), controlPoint1: CGPoint(x: 60, y: 42.66), controlPoint2: CGPoint(x: 60, y: 41.95))
            appIcon.addLine(to: CGPoint(x: 60, y: 18.77))
            appIcon.close()
            appIcon.move(to: CGPoint(x: 60, y: 18.77))
            context.saveGState()
            context.translateBy(x: 240, y: 0)
            appIcon.usesEvenOddFillRule = true
            UIColor.white.setFill()
            appIcon.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Actions Flattened
        // Warning: Image layers are not supported.
        
        /// Apps
        do {
            context.saveGState()
            context.translateBy(x: 265, y: 354)
            
            /// App Label
            let appLabel = NSMutableAttributedString(string: "Application")
            appLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: appLabel.length))
            appLabel.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: appLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 13
                paragraphStyle.minimumLineHeight = 13
                appLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appLabel.length))
            }
            context.saveGState()
            appLabel.draw(in: CGRect(x: 0, y: 67, width: 60, height: 15))
            context.restoreGState()
            
            /// app icon
            let appIcon2 = UIBezierPath()
            appIcon2.move(to: CGPoint(x: 60, y: 18.77))
            appIcon2.addCurve(to: CGPoint(x: 60, y: 16.62), controlPoint1: CGPoint(x: 60, y: 18.05), controlPoint2: CGPoint(x: 60, y: 17.34))
            appIcon2.addCurve(to: CGPoint(x: 59.97, y: 14.81), controlPoint1: CGPoint(x: 59.99, y: 16.02), controlPoint2: CGPoint(x: 59.99, y: 15.41))
            appIcon2.addCurve(to: CGPoint(x: 59.62, y: 10.87), controlPoint1: CGPoint(x: 59.93, y: 13.49), controlPoint2: CGPoint(x: 59.86, y: 12.17))
            appIcon2.addCurve(to: CGPoint(x: 58.39, y: 7.12), controlPoint1: CGPoint(x: 59.39, y: 9.55), controlPoint2: CGPoint(x: 59, y: 8.32))
            appIcon2.addCurve(to: CGPoint(x: 56.07, y: 3.93), controlPoint1: CGPoint(x: 57.79, y: 5.94), controlPoint2: CGPoint(x: 57, y: 4.87))
            appIcon2.addCurve(to: CGPoint(x: 52.88, y: 1.61), controlPoint1: CGPoint(x: 55.14, y: 3), controlPoint2: CGPoint(x: 54.06, y: 2.21))
            appIcon2.addCurve(to: CGPoint(x: 49.13, y: 0.38), controlPoint1: CGPoint(x: 51.68, y: 1), controlPoint2: CGPoint(x: 50.45, y: 0.62))
            appIcon2.addCurve(to: CGPoint(x: 45.19, y: 0.03), controlPoint1: CGPoint(x: 47.83, y: 0.14), controlPoint2: CGPoint(x: 46.51, y: 0.07))
            appIcon2.addCurve(to: CGPoint(x: 43.38, y: 0), controlPoint1: CGPoint(x: 44.59, y: 0.02), controlPoint2: CGPoint(x: 43.99, y: 0.01))
            appIcon2.addCurve(to: CGPoint(x: 41.23, y: 0), controlPoint1: CGPoint(x: 42.67, y: 0), controlPoint2: CGPoint(x: 41.95, y: 0))
            appIcon2.addLine(to: CGPoint(x: 18.77, y: 0))
            appIcon2.addCurve(to: CGPoint(x: 16.62, y: 0), controlPoint1: CGPoint(x: 18.05, y: 0), controlPoint2: CGPoint(x: 17.34, y: 0))
            appIcon2.addCurve(to: CGPoint(x: 14.81, y: 0.03), controlPoint1: CGPoint(x: 16.02, y: 0.01), controlPoint2: CGPoint(x: 15.41, y: 0.02))
            appIcon2.addCurve(to: CGPoint(x: 10.87, y: 0.38), controlPoint1: CGPoint(x: 13.49, y: 0.07), controlPoint2: CGPoint(x: 12.17, y: 0.14))
            appIcon2.addCurve(to: CGPoint(x: 7.12, y: 1.61), controlPoint1: CGPoint(x: 9.55, y: 0.62), controlPoint2: CGPoint(x: 8.32, y: 1))
            appIcon2.addCurve(to: CGPoint(x: 3.93, y: 3.93), controlPoint1: CGPoint(x: 5.94, y: 2.21), controlPoint2: CGPoint(x: 4.87, y: 3))
            appIcon2.addCurve(to: CGPoint(x: 1.61, y: 7.12), controlPoint1: CGPoint(x: 3, y: 4.87), controlPoint2: CGPoint(x: 2.21, y: 5.94))
            appIcon2.addCurve(to: CGPoint(x: 0.38, y: 10.87), controlPoint1: CGPoint(x: 1, y: 8.32), controlPoint2: CGPoint(x: 0.62, y: 9.55))
            appIcon2.addCurve(to: CGPoint(x: 0.03, y: 14.81), controlPoint1: CGPoint(x: 0.14, y: 12.17), controlPoint2: CGPoint(x: 0.07, y: 13.49))
            appIcon2.addCurve(to: CGPoint(x: 0.01, y: 16.62), controlPoint1: CGPoint(x: 0.02, y: 15.41), controlPoint2: CGPoint(x: 0.01, y: 16.02))
            appIcon2.addCurve(to: CGPoint(x: 0, y: 18.77), controlPoint1: CGPoint(x: 0, y: 17.34), controlPoint2: CGPoint(x: 0, y: 18.05))
            appIcon2.addLine(to: CGPoint(x: 0, y: 41.23))
            appIcon2.addCurve(to: CGPoint(x: 0.01, y: 43.38), controlPoint1: CGPoint(x: 0, y: 41.95), controlPoint2: CGPoint(x: 0, y: 42.66))
            appIcon2.addCurve(to: CGPoint(x: 0.03, y: 45.19), controlPoint1: CGPoint(x: 0.01, y: 43.98), controlPoint2: CGPoint(x: 0.02, y: 44.59))
            appIcon2.addCurve(to: CGPoint(x: 0.38, y: 49.13), controlPoint1: CGPoint(x: 0.07, y: 46.51), controlPoint2: CGPoint(x: 0.14, y: 47.83))
            appIcon2.addCurve(to: CGPoint(x: 1.61, y: 52.88), controlPoint1: CGPoint(x: 0.62, y: 50.45), controlPoint2: CGPoint(x: 1, y: 51.68))
            appIcon2.addCurve(to: CGPoint(x: 3.93, y: 56.07), controlPoint1: CGPoint(x: 2.21, y: 54.06), controlPoint2: CGPoint(x: 3, y: 55.14))
            appIcon2.addCurve(to: CGPoint(x: 7.12, y: 58.39), controlPoint1: CGPoint(x: 4.87, y: 57), controlPoint2: CGPoint(x: 5.94, y: 57.79))
            appIcon2.addCurve(to: CGPoint(x: 10.87, y: 59.62), controlPoint1: CGPoint(x: 8.32, y: 59), controlPoint2: CGPoint(x: 9.55, y: 59.39))
            appIcon2.addCurve(to: CGPoint(x: 14.81, y: 59.97), controlPoint1: CGPoint(x: 12.17, y: 59.86), controlPoint2: CGPoint(x: 13.49, y: 59.93))
            appIcon2.addCurve(to: CGPoint(x: 16.62, y: 60), controlPoint1: CGPoint(x: 15.41, y: 59.99), controlPoint2: CGPoint(x: 16.02, y: 59.99))
            appIcon2.addCurve(to: CGPoint(x: 18.77, y: 60), controlPoint1: CGPoint(x: 17.34, y: 60), controlPoint2: CGPoint(x: 18.05, y: 60))
            appIcon2.addLine(to: CGPoint(x: 41.23, y: 60))
            appIcon2.addCurve(to: CGPoint(x: 43.38, y: 60), controlPoint1: CGPoint(x: 41.95, y: 60), controlPoint2: CGPoint(x: 42.67, y: 60))
            appIcon2.addCurve(to: CGPoint(x: 45.19, y: 59.97), controlPoint1: CGPoint(x: 43.99, y: 59.99), controlPoint2: CGPoint(x: 44.59, y: 59.99))
            appIcon2.addCurve(to: CGPoint(x: 49.13, y: 59.62), controlPoint1: CGPoint(x: 46.51, y: 59.93), controlPoint2: CGPoint(x: 47.83, y: 59.86))
            appIcon2.addCurve(to: CGPoint(x: 52.88, y: 58.39), controlPoint1: CGPoint(x: 50.45, y: 59.39), controlPoint2: CGPoint(x: 51.68, y: 59))
            appIcon2.addCurve(to: CGPoint(x: 56.07, y: 56.07), controlPoint1: CGPoint(x: 54.06, y: 57.79), controlPoint2: CGPoint(x: 55.14, y: 57))
            appIcon2.addCurve(to: CGPoint(x: 58.39, y: 52.88), controlPoint1: CGPoint(x: 57, y: 55.14), controlPoint2: CGPoint(x: 57.79, y: 54.06))
            appIcon2.addCurve(to: CGPoint(x: 59.62, y: 49.13), controlPoint1: CGPoint(x: 59, y: 51.68), controlPoint2: CGPoint(x: 59.39, y: 50.45))
            appIcon2.addCurve(to: CGPoint(x: 59.97, y: 45.19), controlPoint1: CGPoint(x: 59.86, y: 47.83), controlPoint2: CGPoint(x: 59.93, y: 46.51))
            appIcon2.addCurve(to: CGPoint(x: 60, y: 43.38), controlPoint1: CGPoint(x: 59.99, y: 44.59), controlPoint2: CGPoint(x: 59.99, y: 43.98))
            appIcon2.addCurve(to: CGPoint(x: 60, y: 41.23), controlPoint1: CGPoint(x: 60, y: 42.66), controlPoint2: CGPoint(x: 60, y: 41.95))
            appIcon2.addLine(to: CGPoint(x: 60, y: 18.77))
            appIcon2.close()
            appIcon2.move(to: CGPoint(x: 60, y: 18.77))
            context.saveGState()
            context.translateBy(x: 0, y: -0)
            appIcon2.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 1, brightness: 1, alpha: 0.5).setFill()
            appIcon2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Airdrop
        do {
            context.saveGState()
            context.translateBy(x: 8, y: 231)
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// tap to share with airdrop
        let tapToShareWithAirdrop = NSMutableAttributedString(string: "Tap to share with AirDrop")
        tapToShareWithAirdrop.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: tapToShareWithAirdrop.length))
        tapToShareWithAirdrop.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: tapToShareWithAirdrop.length))
        tapToShareWithAirdrop.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: tapToShareWithAirdrop.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            tapToShareWithAirdrop.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tapToShareWithAirdrop.length))
        }
        context.saveGState()
        tapToShareWithAirdrop.draw(in: CGRect(x: 20, y: 211, width: 335, height: 15))
        context.restoreGState()
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawViewsAlerts_ResourcesPrimaryAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// keyline
        let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
        keyline.fill()
        context.saveGState()
        context.setBlendMode(.colorBurn)
        context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.247, alpha: 1).setFill()
            keyline.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// ↳ Action
        let action = NSMutableAttributedString(string: "Default Button")
        action.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action.length))
        }
        context.saveGState()
        action.draw(in: CGRect(x: 16, y: 12, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlerts_ResourcesSecondaryAction(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// keyline
        let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
        keyline.fill()
        context.saveGState()
        context.setBlendMode(.colorBurn)
        context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.247, alpha: 1).setFill()
            keyline.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// ↳ Action
        let action = NSMutableAttributedString(string: "Default Button")
        action.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action.length))
        action.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action.length))
        }
        context.saveGState()
        action.draw(in: CGRect(x: 16, y: 12, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlerts_Resources2Buttons(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// keyline
        let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
        keyline.fill()
        context.saveGState()
        context.setBlendMode(.colorBurn)
        context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.247, alpha: 1).setFill()
            keyline.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// ↳ Action 2
        let action2 = NSMutableAttributedString(string: "Button")
        action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
        }
        context.saveGState()
        action2.draw(in: CGRect(x: 135, y: 11, width: 135, height: 25))
        context.restoreGState()
        /// ↳ Action 1
        let action1 = NSMutableAttributedString(string: "Cancel")
        action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
        }
        context.saveGState()
        action1.draw(in: CGRect(x: 0, y: 11, width: 135, height: 25))
        context.restoreGState()
        /// vertical keyline
        let verticalKeyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 0.5, height: 43.5))
        context.saveGState()
        context.translateBy(x: 134.5, y: 0.5)
        UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
        verticalKeyline.fill()
        context.saveGState()
        context.setBlendMode(.colorBurn)
        context.beginTransparencyLayer(in: verticalKeyline.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.247, alpha: 1).setFill()
            verticalKeyline.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsDefault1LineTitle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 140), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 140), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 140)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 14))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 14), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.26))
        platter.addLine(to: CGPoint(x: 270, y: 126))
        platter.addCurve(to: CGPoint(x: 256.01, y: 140), controlPoint1: CGPoint(x: 270, y: 133.73), controlPoint2: CGPoint(x: 263.72, y: 140))
        platter.addLine(to: CGPoint(x: 13.99, y: 140))
        platter.addCurve(to: CGPoint(x: 0, y: 126), controlPoint1: CGPoint(x: 6.27, y: 140), controlPoint2: CGPoint(x: 0, y: 133.74))
        platter.addLine(to: CGPoint(x: 0, y: 14))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 14))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Bottom Actions
        // Warning: New symbols are not supported.
        /// Description
        let description = NSMutableAttributedString(string: "A message should be a short,\ncomplete sentence.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 16
            paragraphStyle.minimumLineHeight = 16
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 42, width: 238, height: 36))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "A Short Title is Best")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 19, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsDefault2LineTitle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 163), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 163), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 163)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 14))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 14), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.27))
        platter.addLine(to: CGPoint(x: 270, y: 149))
        platter.addCurve(to: CGPoint(x: 256.01, y: 163), controlPoint1: CGPoint(x: 270, y: 156.73), controlPoint2: CGPoint(x: 263.72, y: 163))
        platter.addLine(to: CGPoint(x: 13.99, y: 163))
        platter.addCurve(to: CGPoint(x: 0, y: 149), controlPoint1: CGPoint(x: 6.27, y: 163), controlPoint2: CGPoint(x: 0, y: 156.73))
        platter.addLine(to: CGPoint(x: 0, y: 14))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 14))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Bottom Actions
        // Warning: New symbols are not supported.
        /// Description
        let description = NSMutableAttributedString(string: "A message should be a short,\ncomplete sentence.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 16
            paragraphStyle.minimumLineHeight = 16
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 65, width: 238, height: 36))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "A Longer Title can extend\nover Multiple Lines")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 19, width: 238, height: 49))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsDefault3Options(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 230), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 230), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 230)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 14))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 14), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.27))
        platter.addLine(to: CGPoint(x: 270, y: 216))
        platter.addCurve(to: CGPoint(x: 256.01, y: 230), controlPoint1: CGPoint(x: 270, y: 223.73), controlPoint2: CGPoint(x: 263.72, y: 230))
        platter.addLine(to: CGPoint(x: 13.99, y: 230))
        platter.addCurve(to: CGPoint(x: 0, y: 216), controlPoint1: CGPoint(x: 6.27, y: 230), controlPoint2: CGPoint(x: 0, y: 223.73))
        platter.addLine(to: CGPoint(x: 0, y: 14))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 14))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// iOS UIKit/Components/Alerts/_Resources/1 Button Copy 2
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 185)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Option 3
            let option3 = NSMutableAttributedString(string: "Default Button")
            option3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: option3.length))
            option3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: option3.length))
            option3.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: option3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                option3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: option3.length))
            }
            context.saveGState()
            option3.draw(in: CGRect(x: 16, y: 12, width: 238, height: 25))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// iOS UIKit/Components/Alerts/_Resources/1 Button Copy
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 141)
            
            /// keyline
            let keyline2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline2.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Option 2
            let option2 = NSMutableAttributedString(string: "Default Button")
            option2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: option2.length))
            option2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: option2.length))
            option2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: option2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                option2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: option2.length))
            }
            context.saveGState()
            option2.draw(in: CGRect(x: 16, y: 12, width: 238, height: 25))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// iOS UIKit/Components/Alerts/_Resources/1 Button
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 97)
            
            /// keyline
            let keyline3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 270, height: 1))
            context.saveGState()
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline3.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline3.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            /// Option 1
            let option1 = NSMutableAttributedString(string: "Default Button")
            option1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: option1.length))
            option1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: option1.length))
            option1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: option1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                option1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: option1.length))
            }
            context.saveGState()
            option1.draw(in: CGRect(x: 16, y: 12, width: 238, height: 25))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Description
        let description = NSMutableAttributedString(string: "A message should be a short,\ncomplete sentence.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 16
            paragraphStyle.minimumLineHeight = 16
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 42, width: 238, height: 36))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "A Short Title is Best")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 19, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsTextField(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 178), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 178), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 178)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 14))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 14), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.27))
        platter.addLine(to: CGPoint(x: 270, y: 164))
        platter.addCurve(to: CGPoint(x: 256.01, y: 178), controlPoint1: CGPoint(x: 270, y: 171.73), controlPoint2: CGPoint(x: 263.72, y: 178))
        platter.addLine(to: CGPoint(x: 13.99, y: 178))
        platter.addCurve(to: CGPoint(x: 0, y: 164), controlPoint1: CGPoint(x: 6.27, y: 178), controlPoint2: CGPoint(x: 0, y: 171.73))
        platter.addLine(to: CGPoint(x: 0, y: 14))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 14))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Bottom Actions
        // Warning: New symbols are not supported.
        /// Field
        let field = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238, height: 25))
        context.saveGState()
        context.translateBy(x: 16, y: 97)
        UIColor.white.setFill()
        field.fill()
        context.saveGState()
        field.lineWidth = 1
        context.beginPath()
        context.addPath(field.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setStroke()
        field.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Placeholder
        let placeholder = NSMutableAttributedString(string: "Placeholder")
        placeholder.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: placeholder.length))
        placeholder.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1), range: NSRange(location: 0, length: placeholder.length))
        placeholder.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: placeholder.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            placeholder.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholder.length))
        }
        context.saveGState()
        placeholder.draw(at: CGPoint(x: 21, y: 100))
        context.restoreGState()
        /// cursor
        let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 16), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 20.5, y: 101)
        UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
        cursor.fill()
        context.restoreGState()
        /// Description
        let description = NSMutableAttributedString(string: "A message should be a short,\ncomplete sentence.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 16
            paragraphStyle.minimumLineHeight = 16
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 42, width: 238, height: 36))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "A Short Title is Best")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 19, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsUsernamePassword(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 208), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 208), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 208)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 13.99))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.26), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 13.99), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.27))
        platter.addLine(to: CGPoint(x: 270, y: 194.01))
        platter.addCurve(to: CGPoint(x: 256.01, y: 208), controlPoint1: CGPoint(x: 270, y: 201.74), controlPoint2: CGPoint(x: 263.72, y: 208))
        platter.addLine(to: CGPoint(x: 13.99, y: 208))
        platter.addCurve(to: CGPoint(x: 0, y: 194.01), controlPoint1: CGPoint(x: 6.27, y: 208), controlPoint2: CGPoint(x: 0, y: 201.73))
        platter.addLine(to: CGPoint(x: 0, y: 13.99))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 13.99))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Bottom Actions
        // Warning: New symbols are not supported.
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 16, y: 91)
            
            /// Field
            let field = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238, height: 56))
            context.saveGState()
            UIColor.white.setFill()
            field.fill()
            context.saveGState()
            field.lineWidth = 1
            context.beginPath()
            context.addPath(field.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setStroke()
            field.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Divider
            let divider = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238, height: 0.5))
            context.saveGState()
            context.translateBy(x: 0, y: 28)
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            divider.fill()
            context.restoreGState()
            
            /// Placeholder
            let placeholder = NSMutableAttributedString(string: "Username")
            placeholder.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: placeholder.length))
            placeholder.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1), range: NSRange(location: 0, length: placeholder.length))
            placeholder.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: placeholder.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                placeholder.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholder.length))
            }
            context.saveGState()
            placeholder.draw(at: CGPoint(x: 5, y: 5))
            context.restoreGState()
            
            /// Placeholder Copy
            let placeholderCopy = NSMutableAttributedString(string: "Password")
            placeholderCopy.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: placeholderCopy.length))
            placeholderCopy.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1), range: NSRange(location: 0, length: placeholderCopy.length))
            placeholderCopy.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: placeholderCopy.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                placeholderCopy.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderCopy.length))
            }
            context.saveGState()
            placeholderCopy.draw(at: CGPoint(x: 5, y: 32))
            context.restoreGState()
            
            /// cursor
            let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 16), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 4.5, y: 6)
            UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
            cursor.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Description
        let description = NSMutableAttributedString(string: "A message should be a short,\ncomplete sentence.")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 16
            paragraphStyle.minimumLineHeight = 16
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 42, width: 238, height: 36))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "A Short Title is Best")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 19, width: 238, height: 25))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsAlertsTouchID(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 270, height: 161), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 270, height: 161), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 270, y: resizedFrame.height / 161)
        
        /// Platter
        let platter = UIBezierPath()
        platter.move(to: CGPoint(x: 0, y: 14.01))
        platter.addCurve(to: CGPoint(x: 13.99, y: 0), controlPoint1: CGPoint(x: 0, y: 6.27), controlPoint2: CGPoint(x: 6.28, y: 0))
        platter.addLine(to: CGPoint(x: 256.01, y: 0))
        platter.addCurve(to: CGPoint(x: 270, y: 14.01), controlPoint1: CGPoint(x: 263.73, y: 0), controlPoint2: CGPoint(x: 270, y: 6.26))
        platter.addLine(to: CGPoint(x: 270, y: 146.99))
        platter.addCurve(to: CGPoint(x: 256.01, y: 161), controlPoint1: CGPoint(x: 270, y: 154.73), controlPoint2: CGPoint(x: 263.72, y: 161))
        platter.addLine(to: CGPoint(x: 13.99, y: 161))
        platter.addCurve(to: CGPoint(x: 0, y: 146.99), controlPoint1: CGPoint(x: 6.27, y: 161), controlPoint2: CGPoint(x: 0, y: 154.74))
        platter.addLine(to: CGPoint(x: 0, y: 14.01))
        platter.close()
        platter.move(to: CGPoint(x: 0, y: 14.01))
        context.saveGState()
        // Warning: Blur effects are not supported.
        platter.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        platter.fill()
        context.restoreGState()
        /// Bottom Options
        // Warning: New symbols are not supported.
        /// Description
        let description = NSMutableAttributedString(string: "john.appleseed@icloud.com")
        description.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: description.length))
        description.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: description.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            description.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: description.length))
        }
        context.saveGState()
        description.draw(in: CGRect(x: 16, y: 81, width: 238, height: 20))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "Touch ID")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 16, y: 57, width: 238, height: 25))
        context.restoreGState()
        /// Touch ID
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsNotificationCompact(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 128), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 128), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 128)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 8, y: 8)
            
            /// Rectangle 18
            let rectangle18 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112), cornerRadius: 13)
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(white: 0.973, alpha: 0.82).setFill()
            rectangle18.fill()
            context.restoreGState()
            
            /// Rectangle 18 (Outline Mask)
            context.saveGState()
            rectangle18.addClip()
            
            /// Body
            let body = NSMutableAttributedString(string: "Sed posuere consectetur est at lobortis. Donec ullamcorper nulla non metus auctor fringilla.")
            body.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 15)!, range: NSRange(location: 0, length: body.length))
            body.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: body.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                body.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: body.length))
            }
            context.saveGState()
            body.draw(in: CGRect(x: 16, y: 66, width: 330, height: 40))
            context.restoreGState()
            
            /// Title
            let title = NSMutableAttributedString(string: "Notification Title")
            title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 15)!, range: NSRange(location: 0, length: title.length))
            title.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: title.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
            }
            context.saveGState()
            title.draw(at: CGPoint(x: 16, y: 45))
            context.restoreGState()
            
            /// header
            do {
                context.saveGState()
                
                /// sash
                let sash = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 36))
                context.saveGState()
                UIColor(white: 1, alpha: 0.35).setFill()
                sash.fill()
                context.restoreGState()
                
                /// Timestamp
                let timestamp = NSMutableAttributedString(string: "now")
                timestamp.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: timestamp.length))
                timestamp.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.6, alpha: 1), range: NSRange(location: 0, length: timestamp.length))
                timestamp.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: timestamp.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 18
                    paragraphStyle.minimumLineHeight = 18
                    timestamp.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: timestamp.length))
                }
                context.saveGState()
                timestamp.draw(at: CGPoint(x: 318, y: 11))
                context.restoreGState()
                
                /// App Name
                let appName = NSMutableAttributedString(string: "Messages")
                appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: appName.length))
                appName.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.6, alpha: 1), range: NSRange(location: 0, length: appName.length))
                appName.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: appName.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 18
                    paragraphStyle.minimumLineHeight = 18
                    appName.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appName.length))
                }
                context.saveGState()
                appName.draw(at: CGPoint(x: 35, y: 10))
                context.restoreGState()
                
                /// App Icon
                let appIcon = UIBezierPath()
                appIcon.move(to: CGPoint(x: 20, y: 6.26))
                appIcon.addCurve(to: CGPoint(x: 20, y: 5.54), controlPoint1: CGPoint(x: 20, y: 6.02), controlPoint2: CGPoint(x: 20, y: 5.78))
                appIcon.addCurve(to: CGPoint(x: 19.99, y: 4.94), controlPoint1: CGPoint(x: 20, y: 5.34), controlPoint2: CGPoint(x: 20, y: 5.14))
                appIcon.addCurve(to: CGPoint(x: 19.87, y: 3.62), controlPoint1: CGPoint(x: 19.98, y: 4.5), controlPoint2: CGPoint(x: 19.95, y: 4.06))
                appIcon.addCurve(to: CGPoint(x: 19.46, y: 2.37), controlPoint1: CGPoint(x: 19.8, y: 3.18), controlPoint2: CGPoint(x: 19.67, y: 2.77))
                appIcon.addCurve(to: CGPoint(x: 18.69, y: 1.31), controlPoint1: CGPoint(x: 19.26, y: 1.98), controlPoint2: CGPoint(x: 19, y: 1.62))
                appIcon.addCurve(to: CGPoint(x: 17.63, y: 0.54), controlPoint1: CGPoint(x: 18.38, y: 1), controlPoint2: CGPoint(x: 18.02, y: 0.74))
                appIcon.addCurve(to: CGPoint(x: 16.38, y: 0.13), controlPoint1: CGPoint(x: 17.23, y: 0.33), controlPoint2: CGPoint(x: 16.82, y: 0.21))
                appIcon.addCurve(to: CGPoint(x: 15.06, y: 0.01), controlPoint1: CGPoint(x: 15.94, y: 0.05), controlPoint2: CGPoint(x: 15.5, y: 0.02))
                appIcon.addCurve(to: CGPoint(x: 14.46, y: 0), controlPoint1: CGPoint(x: 14.86, y: 0.01), controlPoint2: CGPoint(x: 14.66, y: 0))
                appIcon.addCurve(to: CGPoint(x: 13.74, y: 0), controlPoint1: CGPoint(x: 14.22, y: 0), controlPoint2: CGPoint(x: 13.98, y: 0))
                appIcon.addLine(to: CGPoint(x: 6.26, y: 0))
                appIcon.addCurve(to: CGPoint(x: 5.54, y: 0), controlPoint1: CGPoint(x: 6.02, y: 0), controlPoint2: CGPoint(x: 5.78, y: 0))
                appIcon.addCurve(to: CGPoint(x: 4.94, y: 0.01), controlPoint1: CGPoint(x: 5.34, y: 0), controlPoint2: CGPoint(x: 5.14, y: 0.01))
                appIcon.addCurve(to: CGPoint(x: 3.62, y: 0.13), controlPoint1: CGPoint(x: 4.5, y: 0.02), controlPoint2: CGPoint(x: 4.06, y: 0.05))
                appIcon.addCurve(to: CGPoint(x: 2.37, y: 0.54), controlPoint1: CGPoint(x: 3.18, y: 0.21), controlPoint2: CGPoint(x: 2.77, y: 0.33))
                appIcon.addCurve(to: CGPoint(x: 1.31, y: 1.31), controlPoint1: CGPoint(x: 1.98, y: 0.74), controlPoint2: CGPoint(x: 1.62, y: 1))
                appIcon.addCurve(to: CGPoint(x: 0.54, y: 2.37), controlPoint1: CGPoint(x: 1, y: 1.62), controlPoint2: CGPoint(x: 0.74, y: 1.98))
                appIcon.addCurve(to: CGPoint(x: 0.13, y: 3.62), controlPoint1: CGPoint(x: 0.33, y: 2.77), controlPoint2: CGPoint(x: 0.21, y: 3.18))
                appIcon.addCurve(to: CGPoint(x: 0.01, y: 4.94), controlPoint1: CGPoint(x: 0.05, y: 4.06), controlPoint2: CGPoint(x: 0.02, y: 4.5))
                appIcon.addCurve(to: CGPoint(x: 0, y: 5.54), controlPoint1: CGPoint(x: 0.01, y: 5.14), controlPoint2: CGPoint(x: 0, y: 5.34))
                appIcon.addCurve(to: CGPoint(x: 0, y: 6.26), controlPoint1: CGPoint(x: 0, y: 5.78), controlPoint2: CGPoint(x: 0, y: 6.02))
                appIcon.addLine(to: CGPoint(x: 0, y: 13.74))
                appIcon.addCurve(to: CGPoint(x: 0, y: 14.46), controlPoint1: CGPoint(x: 0, y: 13.98), controlPoint2: CGPoint(x: 0, y: 14.22))
                appIcon.addCurve(to: CGPoint(x: 0.01, y: 15.06), controlPoint1: CGPoint(x: 0, y: 14.66), controlPoint2: CGPoint(x: 0.01, y: 14.86))
                appIcon.addCurve(to: CGPoint(x: 0.13, y: 16.38), controlPoint1: CGPoint(x: 0.02, y: 15.5), controlPoint2: CGPoint(x: 0.05, y: 15.94))
                appIcon.addCurve(to: CGPoint(x: 0.54, y: 17.63), controlPoint1: CGPoint(x: 0.21, y: 16.82), controlPoint2: CGPoint(x: 0.33, y: 17.23))
                appIcon.addCurve(to: CGPoint(x: 1.31, y: 18.69), controlPoint1: CGPoint(x: 0.74, y: 18.02), controlPoint2: CGPoint(x: 1, y: 18.38))
                appIcon.addCurve(to: CGPoint(x: 2.37, y: 19.46), controlPoint1: CGPoint(x: 1.62, y: 19), controlPoint2: CGPoint(x: 1.98, y: 19.26))
                appIcon.addCurve(to: CGPoint(x: 3.62, y: 19.87), controlPoint1: CGPoint(x: 2.77, y: 19.67), controlPoint2: CGPoint(x: 3.18, y: 19.79))
                appIcon.addCurve(to: CGPoint(x: 4.94, y: 19.99), controlPoint1: CGPoint(x: 4.06, y: 19.95), controlPoint2: CGPoint(x: 4.5, y: 19.98))
                appIcon.addCurve(to: CGPoint(x: 5.54, y: 20), controlPoint1: CGPoint(x: 5.14, y: 20), controlPoint2: CGPoint(x: 5.34, y: 20))
                appIcon.addCurve(to: CGPoint(x: 6.26, y: 20), controlPoint1: CGPoint(x: 5.78, y: 20), controlPoint2: CGPoint(x: 6.02, y: 20))
                appIcon.addLine(to: CGPoint(x: 13.74, y: 20))
                appIcon.addCurve(to: CGPoint(x: 14.46, y: 20), controlPoint1: CGPoint(x: 13.98, y: 20), controlPoint2: CGPoint(x: 14.22, y: 20))
                appIcon.addCurve(to: CGPoint(x: 15.06, y: 19.99), controlPoint1: CGPoint(x: 14.66, y: 20), controlPoint2: CGPoint(x: 14.86, y: 20))
                appIcon.addCurve(to: CGPoint(x: 16.38, y: 19.87), controlPoint1: CGPoint(x: 15.5, y: 19.98), controlPoint2: CGPoint(x: 15.94, y: 19.95))
                appIcon.addCurve(to: CGPoint(x: 17.63, y: 19.46), controlPoint1: CGPoint(x: 16.82, y: 19.79), controlPoint2: CGPoint(x: 17.23, y: 19.67))
                appIcon.addCurve(to: CGPoint(x: 18.69, y: 18.69), controlPoint1: CGPoint(x: 18.02, y: 19.26), controlPoint2: CGPoint(x: 18.38, y: 19))
                appIcon.addCurve(to: CGPoint(x: 19.46, y: 17.63), controlPoint1: CGPoint(x: 19, y: 18.38), controlPoint2: CGPoint(x: 19.26, y: 18.02))
                appIcon.addCurve(to: CGPoint(x: 19.87, y: 16.38), controlPoint1: CGPoint(x: 19.67, y: 17.23), controlPoint2: CGPoint(x: 19.8, y: 16.82))
                appIcon.addCurve(to: CGPoint(x: 19.99, y: 15.06), controlPoint1: CGPoint(x: 19.95, y: 15.94), controlPoint2: CGPoint(x: 19.98, y: 15.5))
                appIcon.addCurve(to: CGPoint(x: 20, y: 14.46), controlPoint1: CGPoint(x: 20, y: 14.86), controlPoint2: CGPoint(x: 20, y: 14.66))
                appIcon.addCurve(to: CGPoint(x: 20, y: 13.74), controlPoint1: CGPoint(x: 20, y: 14.22), controlPoint2: CGPoint(x: 20, y: 13.98))
                appIcon.addLine(to: CGPoint(x: 20, y: 6.26))
                appIcon.close()
                appIcon.move(to: CGPoint(x: 20, y: 6.26))
                context.saveGState()
                context.translateBy(x: 8, y: 8)
                appIcon.usesEvenOddFillRule = true
                context.saveGState()
                // Warning: Image fill is not supported.
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
            // End Rectangle 18 (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawViewsNotificationExpanded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 392), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 392), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 392)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 376), cornerRadius: 13)
        context.saveGState()
        context.translateBy(x: 8, y: 8)
        context.saveGState()
        context.beginPath()
        context.addPath(combinedShape.cgPath)
        context.addRect(combinedShape.bounds.insetBy(dx: -36, dy: -36))
        context.clip(using: .evenOdd)
        context.translateBy(x: -416, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 416, y: 0)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.25).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            combinedShape.fill()
            context.saveGState()
            combinedShape.lineWidth = 4
            UIColor.black.setStroke()
            combinedShape.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Combined Shape (Outline Mask)
        context.saveGState()
        combinedShape.apply(CGAffineTransform(translationX: 8, y: 8))
        combinedShape.addClip()
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 8, y: 8)
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 52))
            
            /// Seperator
            let seperator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 52)
            UIColor(white: 0.667, alpha: 1).setFill()
            seperator.fill()
            context.restoreGState()
            
            /// App Name
            let appName = NSMutableAttributedString(string: "Messages")
            appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: appName.length))
            appName.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.6, alpha: 1), range: NSRange(location: 0, length: appName.length))
            appName.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: appName.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 18
                paragraphStyle.minimumLineHeight = 18
                appName.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appName.length))
            }
            context.saveGState()
            appName.draw(at: CGPoint(x: 43, y: 17))
            context.restoreGState()
            
            /// App Icon
            let appIcon = UIBezierPath()
            appIcon.move(to: CGPoint(x: 20, y: 6.26))
            appIcon.addCurve(to: CGPoint(x: 20, y: 5.54), controlPoint1: CGPoint(x: 20, y: 6.02), controlPoint2: CGPoint(x: 20, y: 5.78))
            appIcon.addCurve(to: CGPoint(x: 19.99, y: 4.94), controlPoint1: CGPoint(x: 20, y: 5.34), controlPoint2: CGPoint(x: 20, y: 5.14))
            appIcon.addCurve(to: CGPoint(x: 19.87, y: 3.62), controlPoint1: CGPoint(x: 19.98, y: 4.5), controlPoint2: CGPoint(x: 19.95, y: 4.06))
            appIcon.addCurve(to: CGPoint(x: 19.46, y: 2.37), controlPoint1: CGPoint(x: 19.8, y: 3.18), controlPoint2: CGPoint(x: 19.67, y: 2.77))
            appIcon.addCurve(to: CGPoint(x: 18.69, y: 1.31), controlPoint1: CGPoint(x: 19.26, y: 1.98), controlPoint2: CGPoint(x: 19, y: 1.62))
            appIcon.addCurve(to: CGPoint(x: 17.63, y: 0.54), controlPoint1: CGPoint(x: 18.38, y: 1), controlPoint2: CGPoint(x: 18.02, y: 0.74))
            appIcon.addCurve(to: CGPoint(x: 16.38, y: 0.13), controlPoint1: CGPoint(x: 17.23, y: 0.33), controlPoint2: CGPoint(x: 16.82, y: 0.21))
            appIcon.addCurve(to: CGPoint(x: 15.06, y: 0.01), controlPoint1: CGPoint(x: 15.94, y: 0.05), controlPoint2: CGPoint(x: 15.5, y: 0.02))
            appIcon.addCurve(to: CGPoint(x: 14.46, y: 0), controlPoint1: CGPoint(x: 14.86, y: 0.01), controlPoint2: CGPoint(x: 14.66, y: 0))
            appIcon.addCurve(to: CGPoint(x: 13.74, y: 0), controlPoint1: CGPoint(x: 14.22, y: 0), controlPoint2: CGPoint(x: 13.98, y: 0))
            appIcon.addLine(to: CGPoint(x: 6.26, y: 0))
            appIcon.addCurve(to: CGPoint(x: 5.54, y: 0), controlPoint1: CGPoint(x: 6.02, y: 0), controlPoint2: CGPoint(x: 5.78, y: 0))
            appIcon.addCurve(to: CGPoint(x: 4.94, y: 0.01), controlPoint1: CGPoint(x: 5.34, y: 0), controlPoint2: CGPoint(x: 5.14, y: 0.01))
            appIcon.addCurve(to: CGPoint(x: 3.62, y: 0.13), controlPoint1: CGPoint(x: 4.5, y: 0.02), controlPoint2: CGPoint(x: 4.06, y: 0.05))
            appIcon.addCurve(to: CGPoint(x: 2.37, y: 0.54), controlPoint1: CGPoint(x: 3.18, y: 0.21), controlPoint2: CGPoint(x: 2.77, y: 0.33))
            appIcon.addCurve(to: CGPoint(x: 1.31, y: 1.31), controlPoint1: CGPoint(x: 1.98, y: 0.74), controlPoint2: CGPoint(x: 1.62, y: 1))
            appIcon.addCurve(to: CGPoint(x: 0.54, y: 2.37), controlPoint1: CGPoint(x: 1, y: 1.62), controlPoint2: CGPoint(x: 0.74, y: 1.98))
            appIcon.addCurve(to: CGPoint(x: 0.13, y: 3.62), controlPoint1: CGPoint(x: 0.33, y: 2.77), controlPoint2: CGPoint(x: 0.21, y: 3.18))
            appIcon.addCurve(to: CGPoint(x: 0.01, y: 4.94), controlPoint1: CGPoint(x: 0.05, y: 4.06), controlPoint2: CGPoint(x: 0.02, y: 4.5))
            appIcon.addCurve(to: CGPoint(x: 0, y: 5.54), controlPoint1: CGPoint(x: 0.01, y: 5.14), controlPoint2: CGPoint(x: 0, y: 5.34))
            appIcon.addCurve(to: CGPoint(x: 0, y: 6.26), controlPoint1: CGPoint(x: 0, y: 5.78), controlPoint2: CGPoint(x: 0, y: 6.02))
            appIcon.addLine(to: CGPoint(x: 0, y: 13.74))
            appIcon.addCurve(to: CGPoint(x: 0, y: 14.46), controlPoint1: CGPoint(x: 0, y: 13.98), controlPoint2: CGPoint(x: 0, y: 14.22))
            appIcon.addCurve(to: CGPoint(x: 0.01, y: 15.06), controlPoint1: CGPoint(x: 0, y: 14.66), controlPoint2: CGPoint(x: 0.01, y: 14.86))
            appIcon.addCurve(to: CGPoint(x: 0.13, y: 16.38), controlPoint1: CGPoint(x: 0.02, y: 15.5), controlPoint2: CGPoint(x: 0.05, y: 15.94))
            appIcon.addCurve(to: CGPoint(x: 0.54, y: 17.63), controlPoint1: CGPoint(x: 0.21, y: 16.82), controlPoint2: CGPoint(x: 0.33, y: 17.23))
            appIcon.addCurve(to: CGPoint(x: 1.31, y: 18.69), controlPoint1: CGPoint(x: 0.74, y: 18.02), controlPoint2: CGPoint(x: 1, y: 18.38))
            appIcon.addCurve(to: CGPoint(x: 2.37, y: 19.46), controlPoint1: CGPoint(x: 1.62, y: 19), controlPoint2: CGPoint(x: 1.98, y: 19.26))
            appIcon.addCurve(to: CGPoint(x: 3.62, y: 19.87), controlPoint1: CGPoint(x: 2.77, y: 19.67), controlPoint2: CGPoint(x: 3.18, y: 19.79))
            appIcon.addCurve(to: CGPoint(x: 4.94, y: 19.99), controlPoint1: CGPoint(x: 4.06, y: 19.95), controlPoint2: CGPoint(x: 4.5, y: 19.98))
            appIcon.addCurve(to: CGPoint(x: 5.54, y: 20), controlPoint1: CGPoint(x: 5.14, y: 20), controlPoint2: CGPoint(x: 5.34, y: 20))
            appIcon.addCurve(to: CGPoint(x: 6.26, y: 20), controlPoint1: CGPoint(x: 5.78, y: 20), controlPoint2: CGPoint(x: 6.02, y: 20))
            appIcon.addLine(to: CGPoint(x: 13.74, y: 20))
            appIcon.addCurve(to: CGPoint(x: 14.46, y: 20), controlPoint1: CGPoint(x: 13.98, y: 20), controlPoint2: CGPoint(x: 14.22, y: 20))
            appIcon.addCurve(to: CGPoint(x: 15.06, y: 19.99), controlPoint1: CGPoint(x: 14.66, y: 20), controlPoint2: CGPoint(x: 14.86, y: 20))
            appIcon.addCurve(to: CGPoint(x: 16.38, y: 19.87), controlPoint1: CGPoint(x: 15.5, y: 19.98), controlPoint2: CGPoint(x: 15.94, y: 19.95))
            appIcon.addCurve(to: CGPoint(x: 17.63, y: 19.46), controlPoint1: CGPoint(x: 16.82, y: 19.79), controlPoint2: CGPoint(x: 17.23, y: 19.67))
            appIcon.addCurve(to: CGPoint(x: 18.69, y: 18.69), controlPoint1: CGPoint(x: 18.02, y: 19.26), controlPoint2: CGPoint(x: 18.38, y: 19))
            appIcon.addCurve(to: CGPoint(x: 19.46, y: 17.63), controlPoint1: CGPoint(x: 19, y: 18.38), controlPoint2: CGPoint(x: 19.26, y: 18.02))
            appIcon.addCurve(to: CGPoint(x: 19.87, y: 16.38), controlPoint1: CGPoint(x: 19.67, y: 17.23), controlPoint2: CGPoint(x: 19.8, y: 16.82))
            appIcon.addCurve(to: CGPoint(x: 19.99, y: 15.06), controlPoint1: CGPoint(x: 19.95, y: 15.94), controlPoint2: CGPoint(x: 19.98, y: 15.5))
            appIcon.addCurve(to: CGPoint(x: 20, y: 14.46), controlPoint1: CGPoint(x: 20, y: 14.86), controlPoint2: CGPoint(x: 20, y: 14.66))
            appIcon.addCurve(to: CGPoint(x: 20, y: 13.74), controlPoint1: CGPoint(x: 20, y: 14.22), controlPoint2: CGPoint(x: 20, y: 13.98))
            appIcon.addLine(to: CGPoint(x: 20, y: 6.26))
            appIcon.close()
            appIcon.move(to: CGPoint(x: 20, y: 6.26))
            context.saveGState()
            context.translateBy(x: 16, y: 16)
            appIcon.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(appIcon.cgPath)
            context.addRect(appIcon.bounds.insetBy(dx: -1, dy: -1.5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -22, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 22, y: 0.5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
            }
            UIColor.black.setFill()
            appIcon.fill()
            context.restoreGState()
            appIcon.usesEvenOddFillRule = true
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 7, y: 7))
            close.addLine(to: CGPoint(x: 1, y: 7))
            close.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.44, y: 7), controlPoint2: CGPoint(x: 0, y: 7.45))
            close.addCurve(to: CGPoint(x: 1, y: 9), controlPoint1: CGPoint(x: 0, y: 8.56), controlPoint2: CGPoint(x: 0.45, y: 9))
            close.addLine(to: CGPoint(x: 7, y: 9))
            close.addLine(to: CGPoint(x: 7, y: 15))
            close.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 7, y: 15.56), controlPoint2: CGPoint(x: 7.45, y: 16))
            close.addCurve(to: CGPoint(x: 9, y: 15), controlPoint1: CGPoint(x: 8.56, y: 16), controlPoint2: CGPoint(x: 9, y: 15.55))
            close.addLine(to: CGPoint(x: 9, y: 9))
            close.addLine(to: CGPoint(x: 15, y: 9))
            close.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 15.56, y: 9), controlPoint2: CGPoint(x: 16, y: 8.55))
            close.addCurve(to: CGPoint(x: 15, y: 7), controlPoint1: CGPoint(x: 16, y: 7.44), controlPoint2: CGPoint(x: 15.55, y: 7))
            close.addLine(to: CGPoint(x: 9, y: 7))
            close.addLine(to: CGPoint(x: 9, y: 1))
            close.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 9, y: 0.44), controlPoint2: CGPoint(x: 8.55, y: 0))
            close.addCurve(to: CGPoint(x: 7, y: 1), controlPoint1: CGPoint(x: 7.44, y: 0), controlPoint2: CGPoint(x: 7, y: 0.45))
            close.addLine(to: CGPoint(x: 7, y: 7))
            close.close()
            close.move(to: CGPoint(x: 7, y: 7))
            context.saveGState()
            context.translateBy(x: 336.31, y: 26.31)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -8, y: -8)
            close.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
        // End Combined Shape (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawViewsNotification_ResourcesTop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 60)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 60), cornerRadius: 13)
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        combinedShape.fill()
        context.restoreGState()
        /// Border
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 59)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawViewsNotification_ResourcesMiddle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 60)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 60))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        combinedShape.fill()
        context.restoreGState()
        /// Border
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 59)
            
            /// keyline
            let keyline = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 0.5)
            UIColor(hue: 0.667, saturation: 1, brightness: 0.314, alpha: 0.05).setFill()
            keyline.fill()
            context.saveGState()
            context.setBlendMode(.colorBurn)
            context.beginTransparencyLayer(in: keyline.bounds, auxiliaryInfo: nil)
            do {
                UIColor(white: 0.247, alpha: 1).setFill()
                keyline.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawViewsNotification_ResourcesBottom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 60)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 60), cornerRadius: 13)
        context.saveGState()
        context.translateBy(x: 179.5, y: 30)
        context.scaleBy(x: 1, y: -1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -179.5, y: -30)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsNotification_ResourcesSingle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 60)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 60), cornerRadius: 13)
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.973, alpha: 0.82).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsNotificationExpandedOption(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// Rectangle 18
        let rectangle18 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 359, height: 60))
        context.saveGState()
        context.translateBy(x: 8, y: 0)
        context.restoreGState()
        /// Position
        // Warning: New symbols are not supported.
        /// Label
        let label = NSMutableAttributedString(string: "Action")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 20)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: 0.34, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 18, y: 18, width: 339, height: 27))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesSearchGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search
        let search = UIBezierPath()
        search.move(to: CGPoint(x: 13.74, y: 12.57))
        search.addLine(to: CGPoint(x: 9.91, y: 8.74))
        search.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
        search.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
        search.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
        search.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
        search.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
        search.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
        search.addLine(to: CGPoint(x: 8.75, y: 9.91))
        search.addLine(to: CGPoint(x: 12.58, y: 13.74))
        search.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
        search.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
        search.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
        search.addLine(to: CGPoint(x: 13.74, y: 12.57))
        search.close()
        search.move(to: CGPoint(x: 5.5, y: 9.88))
        search.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
        search.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
        search.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
        search.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
        search.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
        search.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
        search.close()
        search.move(to: CGPoint(x: 5.5, y: 9.88))
        context.saveGState()
        context.translateBy(x: -0, y: 0)
        search.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        search.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesDictationGlyph(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 19)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Dictation
        let dictation = UIBezierPath()
        dictation.move(to: CGPoint(x: 6, y: 0))
        dictation.addLine(to: CGPoint(x: 6, y: 0))
        dictation.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 7.66, y: 0), controlPoint2: CGPoint(x: 9, y: 1.34))
        dictation.addLine(to: CGPoint(x: 9, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 13), controlPoint1: CGPoint(x: 9, y: 11.66), controlPoint2: CGPoint(x: 7.66, y: 13))
        dictation.addLine(to: CGPoint(x: 6, y: 13))
        dictation.addCurve(to: CGPoint(x: 3, y: 10), controlPoint1: CGPoint(x: 4.34, y: 13), controlPoint2: CGPoint(x: 3, y: 11.66))
        dictation.addLine(to: CGPoint(x: 3, y: 3))
        dictation.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 3, y: 1.34), controlPoint2: CGPoint(x: 4.34, y: 0))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 10.5, y: 7.25), controlPoint1: CGPoint(x: 10.84, y: 6.5), controlPoint2: CGPoint(x: 10.5, y: 6.84))
        dictation.addLine(to: CGPoint(x: 10.5, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 14.5), controlPoint1: CGPoint(x: 10.5, y: 12.49), controlPoint2: CGPoint(x: 8.49, y: 14.5))
        dictation.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 3.51, y: 14.5), controlPoint2: CGPoint(x: 1.5, y: 12.49))
        dictation.addLine(to: CGPoint(x: 1.5, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 0.75, y: 6.5), controlPoint1: CGPoint(x: 1.5, y: 6.84), controlPoint2: CGPoint(x: 1.16, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.34, y: 6.5), controlPoint2: CGPoint(x: 0, y: 6.84))
        dictation.addLine(to: CGPoint(x: 0, y: 10))
        dictation.addCurve(to: CGPoint(x: 5.25, y: 15.95), controlPoint1: CGPoint(x: 0, y: 13.02), controlPoint2: CGPoint(x: 2.25, y: 15.57))
        dictation.addLine(to: CGPoint(x: 5.25, y: 17.5))
        dictation.addLine(to: CGPoint(x: 3.25, y: 17.5))
        dictation.addCurve(to: CGPoint(x: 2.5, y: 18.25), controlPoint1: CGPoint(x: 2.84, y: 17.5), controlPoint2: CGPoint(x: 2.5, y: 17.84))
        dictation.addCurve(to: CGPoint(x: 3.25, y: 19), controlPoint1: CGPoint(x: 2.5, y: 18.66), controlPoint2: CGPoint(x: 2.84, y: 19))
        dictation.addLine(to: CGPoint(x: 8.75, y: 19))
        dictation.addCurve(to: CGPoint(x: 9.5, y: 18.25), controlPoint1: CGPoint(x: 9.16, y: 19), controlPoint2: CGPoint(x: 9.5, y: 18.66))
        dictation.addCurve(to: CGPoint(x: 8.75, y: 17.5), controlPoint1: CGPoint(x: 9.5, y: 17.84), controlPoint2: CGPoint(x: 9.16, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 15.95))
        dictation.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 9.75, y: 15.57), controlPoint2: CGPoint(x: 12, y: 13.02))
        dictation.addLine(to: CGPoint(x: 12, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 11.25, y: 6.5), controlPoint1: CGPoint(x: 12, y: 6.84), controlPoint2: CGPoint(x: 11.66, y: 6.5))
        dictation.addLine(to: CGPoint(x: 11.25, y: 6.5))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        context.saveGState()
        dictation.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        dictation.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesDarkSearchFieldEmpty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.14).setFill()
        searchField.fill()
        context.restoreGState()
        /// ↳ Dictation
        // Warning: New symbols are not supported.
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// ↳ Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesDarkSearchFieldFocus1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 281, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.14).setFill()
        searchField.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// ↳ Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 23, y: 0))
            context.restoreGState()
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        context.saveGState()
        cancel.draw(at: CGPoint(x: 297, y: 7))
        context.restoreGState()
        /// Cursror
        let cursror = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 32, y: 7)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        cursror.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesDarkSearchFieldFocus2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 281, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.14).setFill()
        searchField.fill()
        context.restoreGState()
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        context.saveGState()
        cancel.draw(at: CGPoint(x: 297, y: 7))
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            /// ↳ Input
            let input = NSMutableAttributedString(string: "S")
            input.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: input.length))
            input.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: input.length))
            input.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: input.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                input.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: input.length))
            }
            context.saveGState()
            input.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// Cursror
            let cursror = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
            cursror.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesLightSearchFieldFocus2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 281, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
        searchField.fill()
        context.restoreGState()
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        context.saveGState()
        cancel.draw(at: CGPoint(x: 297, y: 7))
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            /// ↳ Input
            let input = NSMutableAttributedString(string: "S")
            input.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: input.length))
            input.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: input.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                input.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: input.length))
            }
            context.saveGState()
            input.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// Cursror
            let cursror = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
            cursror.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesLightSearchFieldFocus1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 281, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
        searchField.fill()
        context.restoreGState()
        /// Cancel
        let cancel = NSMutableAttributedString(string: "Cancel")
        cancel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: cancel.length))
        cancel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: cancel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            cancel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
        }
        context.saveGState()
        cancel.draw(at: CGPoint(x: 297, y: 7))
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// ↳ Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 23, y: 0))
            context.restoreGState()
            
            /// Cursror
            let cursror = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 21), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 22, y: 0)
            UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
            cursror.fill()
            context.restoreGState()
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBar_ResourcesLightSearchFieldEmpty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 359, height: 36), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 359, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 36)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 36), cornerRadius: 10)
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 0.12).setFill()
        searchField.fill()
        context.restoreGState()
        /// ↳ Dictation
        // Warning: New symbols are not supported.
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 10, y: 7)
            
            /// ↳ Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// iOS UIKit/Components - Bars/Search Bar/_Resources/Search Glyph
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBarAsNavigationBarLightSearchBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 66), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 66), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 66)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 66))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field Type
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBarLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 51), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 51), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 51)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 51))
        context.saveGState()
        UIColor(hue: 0.667, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 36), cornerRadius: 10)
        context.saveGState()
        context.translateBy(x: 8, y: 8)
        UIColor.white.setFill()
        searchField.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 15)
            
            /// Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// Search
            let search = UIBezierPath()
            search.move(to: CGPoint(x: 13.74, y: 12.57))
            search.addLine(to: CGPoint(x: 9.91, y: 8.74))
            search.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
            search.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
            search.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
            search.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
            search.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
            search.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
            search.addLine(to: CGPoint(x: 8.75, y: 9.91))
            search.addLine(to: CGPoint(x: 12.58, y: 13.74))
            search.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
            search.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
            search.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
            search.addLine(to: CGPoint(x: 13.74, y: 12.57))
            search.close()
            search.move(to: CGPoint(x: 5.5, y: 9.88))
            search.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
            search.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
            search.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
            search.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
            search.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
            search.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
            search.close()
            search.move(to: CGPoint(x: 5.5, y: 9.88))
            context.saveGState()
            context.translateBy(x: -0, y: 4)
            search.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            search.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Dictation
        let dictation = UIBezierPath()
        dictation.move(to: CGPoint(x: 6, y: 0))
        dictation.addLine(to: CGPoint(x: 6, y: 0))
        dictation.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 7.66, y: 0), controlPoint2: CGPoint(x: 9, y: 1.34))
        dictation.addLine(to: CGPoint(x: 9, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 13), controlPoint1: CGPoint(x: 9, y: 11.66), controlPoint2: CGPoint(x: 7.66, y: 13))
        dictation.addLine(to: CGPoint(x: 6, y: 13))
        dictation.addCurve(to: CGPoint(x: 3, y: 10), controlPoint1: CGPoint(x: 4.34, y: 13), controlPoint2: CGPoint(x: 3, y: 11.66))
        dictation.addLine(to: CGPoint(x: 3, y: 3))
        dictation.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 3, y: 1.34), controlPoint2: CGPoint(x: 4.34, y: 0))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 10.5, y: 7.25), controlPoint1: CGPoint(x: 10.84, y: 6.5), controlPoint2: CGPoint(x: 10.5, y: 6.84))
        dictation.addLine(to: CGPoint(x: 10.5, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 14.5), controlPoint1: CGPoint(x: 10.5, y: 12.49), controlPoint2: CGPoint(x: 8.49, y: 14.5))
        dictation.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 3.51, y: 14.5), controlPoint2: CGPoint(x: 1.5, y: 12.49))
        dictation.addLine(to: CGPoint(x: 1.5, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 0.75, y: 6.5), controlPoint1: CGPoint(x: 1.5, y: 6.84), controlPoint2: CGPoint(x: 1.16, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.34, y: 6.5), controlPoint2: CGPoint(x: 0, y: 6.84))
        dictation.addLine(to: CGPoint(x: 0, y: 10))
        dictation.addCurve(to: CGPoint(x: 5.25, y: 15.95), controlPoint1: CGPoint(x: 0, y: 13.02), controlPoint2: CGPoint(x: 2.25, y: 15.57))
        dictation.addLine(to: CGPoint(x: 5.25, y: 17.5))
        dictation.addLine(to: CGPoint(x: 3.25, y: 17.5))
        dictation.addCurve(to: CGPoint(x: 2.5, y: 18.25), controlPoint1: CGPoint(x: 2.84, y: 17.5), controlPoint2: CGPoint(x: 2.5, y: 17.84))
        dictation.addCurve(to: CGPoint(x: 3.25, y: 19), controlPoint1: CGPoint(x: 2.5, y: 18.66), controlPoint2: CGPoint(x: 2.84, y: 19))
        dictation.addLine(to: CGPoint(x: 8.75, y: 19))
        dictation.addCurve(to: CGPoint(x: 9.5, y: 18.25), controlPoint1: CGPoint(x: 9.16, y: 19), controlPoint2: CGPoint(x: 9.5, y: 18.66))
        dictation.addCurve(to: CGPoint(x: 8.75, y: 17.5), controlPoint1: CGPoint(x: 9.5, y: 17.84), controlPoint2: CGPoint(x: 9.16, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 15.95))
        dictation.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 9.75, y: 15.57), controlPoint2: CGPoint(x: 12, y: 13.02))
        dictation.addLine(to: CGPoint(x: 12, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 11.25, y: 6.5), controlPoint1: CGPoint(x: 12, y: 6.84), controlPoint2: CGPoint(x: 11.66, y: 6.5))
        dictation.addLine(to: CGPoint(x: 11.25, y: 6.5))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        context.saveGState()
        context.translateBy(x: 345, y: 16)
        dictation.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        dictation.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBarAsNavigationBarDarkSearchBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 66), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 66), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 66)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 66))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field Type
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsSearchBarDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 51), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 51), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 51)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 51))
        context.saveGState()
        UIColor(white: 0.188, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field
        let searchField = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 36), cornerRadius: 10)
        context.saveGState()
        context.translateBy(x: 8, y: 8)
        UIColor.black.setFill()
        searchField.fill()
        context.restoreGState()
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 15)
            
            /// Placeholder Label
            let placeholderLabel = NSMutableAttributedString(string: "Search")
            placeholderLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: placeholderLabel.length))
            placeholderLabel.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: placeholderLabel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                placeholderLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: placeholderLabel.length))
            }
            context.saveGState()
            placeholderLabel.draw(at: CGPoint(x: 21, y: 0))
            context.restoreGState()
            
            /// Search
            let search = UIBezierPath()
            search.move(to: CGPoint(x: 13.74, y: 12.57))
            search.addLine(to: CGPoint(x: 9.91, y: 8.74))
            search.addCurve(to: CGPoint(x: 10.96, y: 5.51), controlPoint1: CGPoint(x: 10.6, y: 7.8), controlPoint2: CGPoint(x: 10.97, y: 6.67))
            search.addCurve(to: CGPoint(x: 5.46, y: 0), controlPoint1: CGPoint(x: 10.95, y: 2.47), controlPoint2: CGPoint(x: 8.49, y: 0.02))
            search.addCurve(to: CGPoint(x: 1.59, y: 1.59), controlPoint1: CGPoint(x: 4.01, y: -0.01), controlPoint2: CGPoint(x: 2.62, y: 0.57))
            search.addCurve(to: CGPoint(x: 0, y: 5.47), controlPoint1: CGPoint(x: 0.56, y: 2.62), controlPoint2: CGPoint(x: -0.01, y: 4.02))
            search.addCurve(to: CGPoint(x: 5.5, y: 10.98), controlPoint1: CGPoint(x: 0.01, y: 8.5), controlPoint2: CGPoint(x: 2.47, y: 10.96))
            search.addCurve(to: CGPoint(x: 8.74, y: 9.91), controlPoint1: CGPoint(x: 6.67, y: 10.98), controlPoint2: CGPoint(x: 7.8, y: 10.61))
            search.addLine(to: CGPoint(x: 8.75, y: 9.91))
            search.addLine(to: CGPoint(x: 12.58, y: 13.74))
            search.addCurve(to: CGPoint(x: 13.38, y: 13.97), controlPoint1: CGPoint(x: 12.78, y: 13.96), controlPoint2: CGPoint(x: 13.09, y: 14.05))
            search.addCurve(to: CGPoint(x: 13.97, y: 13.38), controlPoint1: CGPoint(x: 13.67, y: 13.9), controlPoint2: CGPoint(x: 13.9, y: 13.67))
            search.addCurve(to: CGPoint(x: 13.74, y: 12.57), controlPoint1: CGPoint(x: 14.05, y: 13.09), controlPoint2: CGPoint(x: 13.96, y: 12.78))
            search.addLine(to: CGPoint(x: 13.74, y: 12.57))
            search.close()
            search.move(to: CGPoint(x: 5.5, y: 9.88))
            search.addCurve(to: CGPoint(x: 1.1, y: 5.47), controlPoint1: CGPoint(x: 3.07, y: 9.86), controlPoint2: CGPoint(x: 1.11, y: 7.9))
            search.addCurve(to: CGPoint(x: 2.37, y: 2.37), controlPoint1: CGPoint(x: 1.09, y: 4.31), controlPoint2: CGPoint(x: 1.55, y: 3.2))
            search.addCurve(to: CGPoint(x: 5.46, y: 1.1), controlPoint1: CGPoint(x: 3.19, y: 1.55), controlPoint2: CGPoint(x: 4.3, y: 1.09))
            search.addCurve(to: CGPoint(x: 9.86, y: 5.5), controlPoint1: CGPoint(x: 7.89, y: 1.11), controlPoint2: CGPoint(x: 9.85, y: 3.08))
            search.addCurve(to: CGPoint(x: 8.59, y: 8.6), controlPoint1: CGPoint(x: 9.87, y: 6.66), controlPoint2: CGPoint(x: 9.41, y: 7.78))
            search.addCurve(to: CGPoint(x: 5.5, y: 9.88), controlPoint1: CGPoint(x: 7.77, y: 9.42), controlPoint2: CGPoint(x: 6.66, y: 9.88))
            search.close()
            search.move(to: CGPoint(x: 5.5, y: 9.88))
            context.saveGState()
            context.translateBy(x: -0, y: 4)
            search.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
            search.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Dictation
        let dictation = UIBezierPath()
        dictation.move(to: CGPoint(x: 6, y: 0))
        dictation.addLine(to: CGPoint(x: 6, y: 0))
        dictation.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 7.66, y: 0), controlPoint2: CGPoint(x: 9, y: 1.34))
        dictation.addLine(to: CGPoint(x: 9, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 13), controlPoint1: CGPoint(x: 9, y: 11.66), controlPoint2: CGPoint(x: 7.66, y: 13))
        dictation.addLine(to: CGPoint(x: 6, y: 13))
        dictation.addCurve(to: CGPoint(x: 3, y: 10), controlPoint1: CGPoint(x: 4.34, y: 13), controlPoint2: CGPoint(x: 3, y: 11.66))
        dictation.addLine(to: CGPoint(x: 3, y: 3))
        dictation.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 3, y: 1.34), controlPoint2: CGPoint(x: 4.34, y: 0))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 10.5, y: 7.25), controlPoint1: CGPoint(x: 10.84, y: 6.5), controlPoint2: CGPoint(x: 10.5, y: 6.84))
        dictation.addLine(to: CGPoint(x: 10.5, y: 10))
        dictation.addCurve(to: CGPoint(x: 6, y: 14.5), controlPoint1: CGPoint(x: 10.5, y: 12.49), controlPoint2: CGPoint(x: 8.49, y: 14.5))
        dictation.addCurve(to: CGPoint(x: 1.5, y: 10), controlPoint1: CGPoint(x: 3.51, y: 14.5), controlPoint2: CGPoint(x: 1.5, y: 12.49))
        dictation.addLine(to: CGPoint(x: 1.5, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 0.75, y: 6.5), controlPoint1: CGPoint(x: 1.5, y: 6.84), controlPoint2: CGPoint(x: 1.16, y: 6.5))
        dictation.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.34, y: 6.5), controlPoint2: CGPoint(x: 0, y: 6.84))
        dictation.addLine(to: CGPoint(x: 0, y: 10))
        dictation.addCurve(to: CGPoint(x: 5.25, y: 15.95), controlPoint1: CGPoint(x: 0, y: 13.02), controlPoint2: CGPoint(x: 2.25, y: 15.57))
        dictation.addLine(to: CGPoint(x: 5.25, y: 17.5))
        dictation.addLine(to: CGPoint(x: 3.25, y: 17.5))
        dictation.addCurve(to: CGPoint(x: 2.5, y: 18.25), controlPoint1: CGPoint(x: 2.84, y: 17.5), controlPoint2: CGPoint(x: 2.5, y: 17.84))
        dictation.addCurve(to: CGPoint(x: 3.25, y: 19), controlPoint1: CGPoint(x: 2.5, y: 18.66), controlPoint2: CGPoint(x: 2.84, y: 19))
        dictation.addLine(to: CGPoint(x: 8.75, y: 19))
        dictation.addCurve(to: CGPoint(x: 9.5, y: 18.25), controlPoint1: CGPoint(x: 9.16, y: 19), controlPoint2: CGPoint(x: 9.5, y: 18.66))
        dictation.addCurve(to: CGPoint(x: 8.75, y: 17.5), controlPoint1: CGPoint(x: 9.5, y: 17.84), controlPoint2: CGPoint(x: 9.16, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 17.5))
        dictation.addLine(to: CGPoint(x: 6.75, y: 15.95))
        dictation.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 9.75, y: 15.57), controlPoint2: CGPoint(x: 12, y: 13.02))
        dictation.addLine(to: CGPoint(x: 12, y: 7.25))
        dictation.addCurve(to: CGPoint(x: 11.25, y: 6.5), controlPoint1: CGPoint(x: 12, y: 6.84), controlPoint2: CGPoint(x: 11.66, y: 6.5))
        dictation.addLine(to: CGPoint(x: 11.25, y: 6.5))
        dictation.close()
        dictation.move(to: CGPoint(x: 11.25, y: 6.5))
        context.saveGState()
        context.translateBy(x: 345, y: 16)
        dictation.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        dictation.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightLeftCombinationsActionButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Icon
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightLeftCombinationsBackButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// back button copy
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 10)
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Parent Title")
                label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
                label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                context.saveGState()
                label.draw(at: CGPoint(x: 19, y: 0))
                context.restoreGState()
                
                /// Chevron
                let chevron = UIBezierPath()
                chevron.move(to: CGPoint(x: 0, y: 10.5))
                chevron.addLine(to: CGPoint(x: 10.5, y: 0))
                chevron.addLine(to: CGPoint(x: 12.5, y: 2))
                chevron.addLine(to: CGPoint(x: 4, y: 10.5))
                chevron.addLine(to: CGPoint(x: 12.5, y: 19))
                chevron.addLine(to: CGPoint(x: 10.5, y: 21))
                chevron.addLine(to: CGPoint(x: 0, y: 10.5))
                chevron.close()
                chevron.move(to: CGPoint(x: 0, y: 10.5))
                context.saveGState()
                context.translateBy(x: 0.5, y: 1.5)
                chevron.usesEvenOddFillRule = true
                UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
                chevron.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightLeftCombinationsLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Cancel")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 17, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightLeftCombinationsLabelEmphasized(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Done")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 17, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightRightCombinations1Action(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 170, height: 44))
            
            /// ↳ Icon
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightRightCombinations2Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 170, height: 44))
            
            /// ↳ Icon 2
            // Warning: New symbols are not supported.
            
            /// ↳ Icon 1
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightRightCombinationsLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 170, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Edit")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 124, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesLightRightCombinationsLabelEmphasized(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 170, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 170, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 170, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 170, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Done")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 112, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarLightLargeNavigationBarWithSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 170), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 170), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 170)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 170))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Large Title
        let largeTitle = NSMutableAttributedString(string: "Large Title")
        largeTitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: largeTitle.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            largeTitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: largeTitle.length))
        }
        context.saveGState()
        largeTitle.draw(at: CGPoint(x: 14, y: 66))
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        /// Search Field Type
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarLightLargeNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 116), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 116), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 116)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 116))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Large Title
        let largeTitle = NSMutableAttributedString(string: "Large Title")
        largeTitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: largeTitle.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            largeTitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: largeTitle.length))
        }
        context.saveGState()
        largeTitle.draw(at: CGPoint(x: 14, y: 66))
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarLightDefaultNavigationBarWithSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 118), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 118), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 118)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 118))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field Type
        // Warning: New symbols are not supported.
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 169, y: 31))
        context.restoreGState()
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarLightDefaultNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 64), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 64)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 64))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 169, y: 31))
        context.restoreGState()
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkLeftCombinationsActionButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 179, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 179, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 179, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Frame
            let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Icon
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkLeftCombinationsBackButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 179, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 179, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 179, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 179, height: 44))
            
            /// back button copy
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 10)
                
                /// ↳ Label
                let label = NSMutableAttributedString(string: "Parent Title")
                label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
                label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1), range: NSRange(location: 0, length: label.length))
                label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
                }
                context.saveGState()
                label.draw(at: CGPoint(x: 19, y: 0))
                context.restoreGState()
                
                /// Chevron
                let chevron = UIBezierPath()
                chevron.move(to: CGPoint(x: 0, y: 10.5))
                chevron.addLine(to: CGPoint(x: 10.5, y: 0))
                chevron.addLine(to: CGPoint(x: 12.5, y: 2))
                chevron.addLine(to: CGPoint(x: 4, y: 10.5))
                chevron.addLine(to: CGPoint(x: 12.5, y: 19))
                chevron.addLine(to: CGPoint(x: 10.5, y: 21))
                chevron.addLine(to: CGPoint(x: 0, y: 10.5))
                chevron.close()
                chevron.move(to: CGPoint(x: 0, y: 10.5))
                context.saveGState()
                context.translateBy(x: 0.5, y: 1.5)
                chevron.usesEvenOddFillRule = true
                UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
                chevron.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkLeftCombinationsLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 179, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 179, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 179, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Cancel")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 17, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkLeftCombinationsLabelEmphasized(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 179, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 179, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 179, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Done")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 17, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkRightCombinations1Action(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 169, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 169, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 169, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// ↳ Icon
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkRightCombinations2Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 169, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 169, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 169, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 170, height: 44))
            
            /// ↳ Icon 2
            // Warning: New symbols are not supported.
            
            /// ↳ Icon 1
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkRightCombinationsLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 169, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 169, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 169, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Edit")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 123, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBar_ResourcesDarkRightCombinationsLabelEmphasized(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 169, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 169, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 169, y: resizedFrame.height / 44)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 169, height: 44))
            
            /// ↳ Label
            let label = NSMutableAttributedString(string: "Done")
            label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
            label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                paragraphStyle.maximumLineHeight = 22
                paragraphStyle.minimumLineHeight = 22
                label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            context.saveGState()
            label.draw(at: CGPoint(x: 111, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarDarkLargeNavigationBarWithSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 170), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 170), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 170)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 170))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field Type
        // Warning: New symbols are not supported.
        /// Large Title
        let largeTitle = NSMutableAttributedString(string: "Large Title")
        largeTitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: largeTitle.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            largeTitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: largeTitle.length))
        }
        context.saveGState()
        largeTitle.draw(at: CGPoint(x: 14, y: 66))
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarDarkLargeNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 116), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 116), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 116)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 116))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Left Accessory
        // Warning: New symbols are not supported.
        /// Large Title
        let largeTitle = NSMutableAttributedString(string: "Large Title")
        largeTitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: largeTitle.length))
        largeTitle.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: largeTitle.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            largeTitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: largeTitle.length))
        }
        context.saveGState()
        largeTitle.draw(at: CGPoint(x: 14, y: 66))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarDarkDefaultNavigationBarWithSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 118), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 118), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 118)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 118))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Search Field Type
        // Warning: New symbols are not supported.
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 169, y: 31))
        context.restoreGState()
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsNavigationBarDarkDefaultNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 64), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 64)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 64))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Right Accessory
        // Warning: New symbols are not supported.
        /// Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 17)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(at: CGPoint(x: 169, y: 31))
        context.restoreGState()
        /// Left Accessory
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawGlyphsTabBarIconsFavoriteActiveOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 32)
        
        /// Favorites
        let favorites = UIBezierPath()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        favorites.addLine(to: CGPoint(x: 18.05, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 17, y: 8.16), controlPoint1: CGPoint(x: 17.58, y: 8.9), controlPoint2: CGPoint(x: 17.16, y: 8.6))
        favorites.addLine(to: CGPoint(x: 14.57, y: 0.75))
        favorites.addCurve(to: CGPoint(x: 13.52, y: 0), controlPoint1: CGPoint(x: 14.42, y: 0.3), controlPoint2: CGPoint(x: 14, y: 0))
        favorites.addCurve(to: CGPoint(x: 12.48, y: 0.75), controlPoint1: CGPoint(x: 13.05, y: 0), controlPoint2: CGPoint(x: 12.63, y: 0.3))
        favorites.addLine(to: CGPoint(x: 10.05, y: 8.16))
        favorites.addCurve(to: CGPoint(x: 9, y: 8.9), controlPoint1: CGPoint(x: 9.89, y: 8.6), controlPoint2: CGPoint(x: 9.47, y: 8.9))
        favorites.addLine(to: CGPoint(x: 1.1, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 0.06, y: 9.63), controlPoint1: CGPoint(x: 0.63, y: 8.89), controlPoint2: CGPoint(x: 0.2, y: 9.19))
        favorites.addCurve(to: CGPoint(x: 0.45, y: 10.84), controlPoint1: CGPoint(x: -0.09, y: 10.08), controlPoint2: CGPoint(x: 0.06, y: 10.57))
        favorites.addLine(to: CGPoint(x: 6.86, y: 15.45))
        favorites.addCurve(to: CGPoint(x: 7.26, y: 16.65), controlPoint1: CGPoint(x: 7.24, y: 15.72), controlPoint2: CGPoint(x: 7.4, y: 16.21))
        favorites.addLine(to: CGPoint(x: 4.81, y: 24.09))
        favorites.addCurve(to: CGPoint(x: 4.97, y: 25.06), controlPoint1: CGPoint(x: 4.71, y: 24.42), controlPoint2: CGPoint(x: 4.77, y: 24.78))
        favorites.addCurve(to: CGPoint(x: 5.86, y: 25.5), controlPoint1: CGPoint(x: 5.18, y: 25.34), controlPoint2: CGPoint(x: 5.51, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 6.51, y: 25.28), controlPoint1: CGPoint(x: 6.09, y: 25.5), controlPoint2: CGPoint(x: 6.32, y: 25.42))
        favorites.addLine(to: CGPoint(x: 12.88, y: 20.71))
        favorites.addCurve(to: CGPoint(x: 14.17, y: 20.71), controlPoint1: CGPoint(x: 13.26, y: 20.43), controlPoint2: CGPoint(x: 13.79, y: 20.43))
        favorites.addLine(to: CGPoint(x: 20.54, y: 25.28))
        favorites.addCurve(to: CGPoint(x: 21.19, y: 25.5), controlPoint1: CGPoint(x: 20.73, y: 25.42), controlPoint2: CGPoint(x: 20.96, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 22.08, y: 25.06), controlPoint1: CGPoint(x: 21.54, y: 25.5), controlPoint2: CGPoint(x: 21.87, y: 25.34))
        favorites.addCurve(to: CGPoint(x: 22.24, y: 24.09), controlPoint1: CGPoint(x: 22.28, y: 24.78), controlPoint2: CGPoint(x: 22.34, y: 24.42))
        favorites.addLine(to: CGPoint(x: 19.79, y: 16.65))
        favorites.addCurve(to: CGPoint(x: 20.19, y: 15.45), controlPoint1: CGPoint(x: 19.65, y: 16.21), controlPoint2: CGPoint(x: 19.81, y: 15.72))
        favorites.addLine(to: CGPoint(x: 26.6, y: 10.84))
        favorites.addCurve(to: CGPoint(x: 26.99, y: 9.63), controlPoint1: CGPoint(x: 26.99, y: 10.57), controlPoint2: CGPoint(x: 27.14, y: 10.08))
        favorites.addCurve(to: CGPoint(x: 25.95, y: 8.9), controlPoint1: CGPoint(x: 26.85, y: 9.19), controlPoint2: CGPoint(x: 26.42, y: 8.89))
        favorites.addLine(to: CGPoint(x: 25.95, y: 8.9))
        favorites.close()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        context.saveGState()
        context.translateBy(x: 10, y: 3)
        favorites.usesEvenOddFillRule = true
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        favorites.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsTabBarIconsFavoriteInactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 32)
        
        /// Favorites
        let favorites = UIBezierPath()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        favorites.addLine(to: CGPoint(x: 18.05, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 17, y: 8.16), controlPoint1: CGPoint(x: 17.58, y: 8.9), controlPoint2: CGPoint(x: 17.16, y: 8.6))
        favorites.addLine(to: CGPoint(x: 14.57, y: 0.75))
        favorites.addCurve(to: CGPoint(x: 13.52, y: 0), controlPoint1: CGPoint(x: 14.42, y: 0.3), controlPoint2: CGPoint(x: 14, y: 0))
        favorites.addCurve(to: CGPoint(x: 12.48, y: 0.75), controlPoint1: CGPoint(x: 13.05, y: 0), controlPoint2: CGPoint(x: 12.63, y: 0.3))
        favorites.addLine(to: CGPoint(x: 10.05, y: 8.16))
        favorites.addCurve(to: CGPoint(x: 9, y: 8.9), controlPoint1: CGPoint(x: 9.89, y: 8.6), controlPoint2: CGPoint(x: 9.47, y: 8.9))
        favorites.addLine(to: CGPoint(x: 1.1, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 0.06, y: 9.63), controlPoint1: CGPoint(x: 0.63, y: 8.89), controlPoint2: CGPoint(x: 0.2, y: 9.19))
        favorites.addCurve(to: CGPoint(x: 0.45, y: 10.84), controlPoint1: CGPoint(x: -0.09, y: 10.08), controlPoint2: CGPoint(x: 0.06, y: 10.57))
        favorites.addLine(to: CGPoint(x: 6.86, y: 15.45))
        favorites.addCurve(to: CGPoint(x: 7.26, y: 16.65), controlPoint1: CGPoint(x: 7.24, y: 15.72), controlPoint2: CGPoint(x: 7.4, y: 16.21))
        favorites.addLine(to: CGPoint(x: 4.81, y: 24.09))
        favorites.addCurve(to: CGPoint(x: 4.97, y: 25.06), controlPoint1: CGPoint(x: 4.71, y: 24.42), controlPoint2: CGPoint(x: 4.77, y: 24.78))
        favorites.addCurve(to: CGPoint(x: 5.86, y: 25.5), controlPoint1: CGPoint(x: 5.18, y: 25.34), controlPoint2: CGPoint(x: 5.51, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 6.51, y: 25.28), controlPoint1: CGPoint(x: 6.09, y: 25.5), controlPoint2: CGPoint(x: 6.32, y: 25.42))
        favorites.addLine(to: CGPoint(x: 12.88, y: 20.71))
        favorites.addCurve(to: CGPoint(x: 14.17, y: 20.71), controlPoint1: CGPoint(x: 13.26, y: 20.43), controlPoint2: CGPoint(x: 13.79, y: 20.43))
        favorites.addLine(to: CGPoint(x: 20.54, y: 25.28))
        favorites.addCurve(to: CGPoint(x: 21.19, y: 25.5), controlPoint1: CGPoint(x: 20.73, y: 25.42), controlPoint2: CGPoint(x: 20.96, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 22.08, y: 25.06), controlPoint1: CGPoint(x: 21.54, y: 25.5), controlPoint2: CGPoint(x: 21.87, y: 25.34))
        favorites.addCurve(to: CGPoint(x: 22.24, y: 24.09), controlPoint1: CGPoint(x: 22.28, y: 24.78), controlPoint2: CGPoint(x: 22.34, y: 24.42))
        favorites.addLine(to: CGPoint(x: 19.79, y: 16.65))
        favorites.addCurve(to: CGPoint(x: 20.19, y: 15.45), controlPoint1: CGPoint(x: 19.65, y: 16.21), controlPoint2: CGPoint(x: 19.81, y: 15.72))
        favorites.addLine(to: CGPoint(x: 26.6, y: 10.84))
        favorites.addCurve(to: CGPoint(x: 26.99, y: 9.63), controlPoint1: CGPoint(x: 26.99, y: 10.57), controlPoint2: CGPoint(x: 27.14, y: 10.08))
        favorites.addCurve(to: CGPoint(x: 25.95, y: 8.9), controlPoint1: CGPoint(x: 26.85, y: 9.19), controlPoint2: CGPoint(x: 26.42, y: 8.89))
        favorites.addLine(to: CGPoint(x: 25.95, y: 8.9))
        favorites.close()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        context.saveGState()
        context.translateBy(x: 10, y: 3)
        favorites.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1).setFill()
        favorites.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsTabBarIconsFavoriteActiveOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 32)
        
        /// Favorites
        let favorites = UIBezierPath()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        favorites.addLine(to: CGPoint(x: 18.05, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 17, y: 8.16), controlPoint1: CGPoint(x: 17.58, y: 8.9), controlPoint2: CGPoint(x: 17.16, y: 8.6))
        favorites.addLine(to: CGPoint(x: 14.57, y: 0.75))
        favorites.addCurve(to: CGPoint(x: 13.52, y: 0), controlPoint1: CGPoint(x: 14.42, y: 0.3), controlPoint2: CGPoint(x: 14, y: 0))
        favorites.addCurve(to: CGPoint(x: 12.48, y: 0.75), controlPoint1: CGPoint(x: 13.05, y: 0), controlPoint2: CGPoint(x: 12.63, y: 0.3))
        favorites.addLine(to: CGPoint(x: 10.05, y: 8.16))
        favorites.addCurve(to: CGPoint(x: 9, y: 8.9), controlPoint1: CGPoint(x: 9.89, y: 8.6), controlPoint2: CGPoint(x: 9.47, y: 8.9))
        favorites.addLine(to: CGPoint(x: 1.1, y: 8.9))
        favorites.addCurve(to: CGPoint(x: 0.06, y: 9.63), controlPoint1: CGPoint(x: 0.63, y: 8.89), controlPoint2: CGPoint(x: 0.2, y: 9.19))
        favorites.addCurve(to: CGPoint(x: 0.45, y: 10.84), controlPoint1: CGPoint(x: -0.09, y: 10.08), controlPoint2: CGPoint(x: 0.06, y: 10.57))
        favorites.addLine(to: CGPoint(x: 6.86, y: 15.45))
        favorites.addCurve(to: CGPoint(x: 7.26, y: 16.65), controlPoint1: CGPoint(x: 7.24, y: 15.72), controlPoint2: CGPoint(x: 7.4, y: 16.21))
        favorites.addLine(to: CGPoint(x: 4.81, y: 24.09))
        favorites.addCurve(to: CGPoint(x: 4.97, y: 25.06), controlPoint1: CGPoint(x: 4.71, y: 24.42), controlPoint2: CGPoint(x: 4.77, y: 24.78))
        favorites.addCurve(to: CGPoint(x: 5.86, y: 25.5), controlPoint1: CGPoint(x: 5.18, y: 25.34), controlPoint2: CGPoint(x: 5.51, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 6.51, y: 25.28), controlPoint1: CGPoint(x: 6.09, y: 25.5), controlPoint2: CGPoint(x: 6.32, y: 25.42))
        favorites.addLine(to: CGPoint(x: 12.88, y: 20.71))
        favorites.addCurve(to: CGPoint(x: 14.17, y: 20.71), controlPoint1: CGPoint(x: 13.26, y: 20.43), controlPoint2: CGPoint(x: 13.79, y: 20.43))
        favorites.addLine(to: CGPoint(x: 20.54, y: 25.28))
        favorites.addCurve(to: CGPoint(x: 21.19, y: 25.5), controlPoint1: CGPoint(x: 20.73, y: 25.42), controlPoint2: CGPoint(x: 20.96, y: 25.5))
        favorites.addCurve(to: CGPoint(x: 22.08, y: 25.06), controlPoint1: CGPoint(x: 21.54, y: 25.5), controlPoint2: CGPoint(x: 21.87, y: 25.34))
        favorites.addCurve(to: CGPoint(x: 22.24, y: 24.09), controlPoint1: CGPoint(x: 22.28, y: 24.78), controlPoint2: CGPoint(x: 22.34, y: 24.42))
        favorites.addLine(to: CGPoint(x: 19.79, y: 16.65))
        favorites.addCurve(to: CGPoint(x: 20.19, y: 15.45), controlPoint1: CGPoint(x: 19.65, y: 16.21), controlPoint2: CGPoint(x: 19.81, y: 15.72))
        favorites.addLine(to: CGPoint(x: 26.6, y: 10.84))
        favorites.addCurve(to: CGPoint(x: 26.99, y: 9.63), controlPoint1: CGPoint(x: 26.99, y: 10.57), controlPoint2: CGPoint(x: 27.14, y: 10.08))
        favorites.addCurve(to: CGPoint(x: 25.95, y: 8.9), controlPoint1: CGPoint(x: 26.85, y: 9.19), controlPoint2: CGPoint(x: 26.42, y: 8.89))
        favorites.addLine(to: CGPoint(x: 25.95, y: 8.9))
        favorites.close()
        favorites.move(to: CGPoint(x: 25.95, y: 8.9))
        context.saveGState()
        context.translateBy(x: 10, y: 3)
        favorites.usesEvenOddFillRule = true
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        favorites.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight2Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight3Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight4Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 4
        // Warning: New symbols are not supported.
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight5Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 5
        // Warning: New symbols are not supported.
        /// Action 4
        // Warning: New symbols are not supported.
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight2Labels(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 2
        let action2 = NSMutableAttributedString(string: "Action 2")
        action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
        }
        context.saveGState()
        action2.draw(at: CGPoint(x: 296, y: 10))
        context.restoreGState()
        /// Action 1
        let action1 = NSMutableAttributedString(string: "Action 1")
        action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
        }
        context.saveGState()
        action1.draw(at: CGPoint(x: 16, y: 10))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarLight3Labels(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Action 3
        let action3 = NSMutableAttributedString(string: "Action 3")
        action3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action3.length))
        action3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action3.length))
        action3.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action3.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action3.length))
        }
        context.saveGState()
        action3.draw(at: CGPoint(x: 295, y: 10))
        context.restoreGState()
        /// Action 2
        let action2 = NSMutableAttributedString(string: "Action 2")
        action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
        }
        context.saveGState()
        action2.draw(at: CGPoint(x: 156, y: 10))
        context.restoreGState()
        /// Action 1
        let action1 = NSMutableAttributedString(string: "Action 1")
        action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
        }
        context.saveGState()
        action1.draw(at: CGPoint(x: 16, y: 10))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark2Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark3Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark4Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 4
        // Warning: New symbols are not supported.
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark5Actions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 5
        // Warning: New symbols are not supported.
        /// Action 4
        // Warning: New symbols are not supported.
        /// Action 3
        // Warning: New symbols are not supported.
        /// Action 2
        // Warning: New symbols are not supported.
        /// Action 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark2Labels(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 2
        let action2 = NSMutableAttributedString(string: "Action 2")
        action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
        }
        context.saveGState()
        action2.draw(at: CGPoint(x: 296, y: 10))
        context.restoreGState()
        /// Action 1
        let action1 = NSMutableAttributedString(string: "Action 1")
        action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
        }
        context.saveGState()
        action1.draw(at: CGPoint(x: 16, y: 10))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsToolbarDark3Labels(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Action 3
        let action3 = NSMutableAttributedString(string: "Action 3")
        action3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action3.length))
        action3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action3.length))
        action3.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action3.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action3.length))
        }
        context.saveGState()
        action3.draw(at: CGPoint(x: 295, y: 10))
        context.restoreGState()
        /// Action 2
        let action2 = NSMutableAttributedString(string: "Action 2")
        action2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action2.length))
        action2.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action2.length))
        }
        context.saveGState()
        action2.draw(at: CGPoint(x: 156, y: 10))
        context.restoreGState()
        /// Action 1
        let action1 = NSMutableAttributedString(string: "Action 1")
        action1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: action1.length))
        action1.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: action1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            action1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: action1.length))
        }
        context.saveGState()
        action1.draw(at: CGPoint(x: 16, y: 10))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarDarkStatusBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Right Detail
        do {
            context.saveGState()
            context.translateBy(x: 302, y: 3)
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 44, y: 2)
                
                /// Rectangle 3
                let rectangle3 = UIBezierPath()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                rectangle3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
                rectangle3.addLine(to: CGPoint(x: 19.5, y: 0))
                rectangle3.addCurve(to: CGPoint(x: 22, y: 2.5), controlPoint1: CGPoint(x: 20.88, y: 0), controlPoint2: CGPoint(x: 22, y: 1.12))
                rectangle3.addLine(to: CGPoint(x: 22, y: 8))
                rectangle3.addCurve(to: CGPoint(x: 19.51, y: 10.5), controlPoint1: CGPoint(x: 22, y: 9.38), controlPoint2: CGPoint(x: 20.88, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 20.96, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 15.98, y: 10.5), controlPoint1: CGPoint(x: 19.58, y: 10.5), controlPoint2: CGPoint(x: 17.34, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 2.49, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.12, y: 10.5), controlPoint2: CGPoint(x: 0, y: 9.38))
                rectangle3.addLine(to: CGPoint(x: 0, y: 2.5))
                rectangle3.close()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    rectangle3.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle3.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor.white.setStroke()
                    rectangle3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint.zero)
                combinedShape.addCurve(to: CGPoint(x: 1.5, y: 1.94), controlPoint1: CGPoint(x: 0.86, y: 0.22), controlPoint2: CGPoint(x: 1.5, y: 1.01))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 3.87), controlPoint1: CGPoint(x: 1.5, y: 2.87), controlPoint2: CGPoint(x: 0.86, y: 3.65))
                combinedShape.addLine(to: CGPoint.zero)
                combinedShape.close()
                combinedShape.move(to: CGPoint.zero)
                context.saveGState()
                context.translateBy(x: 23, y: 3.5)
                combinedShape.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.4).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Rectangle Copy 4
                let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 18, height: 6.5), cornerRadius: 1)
                context.saveGState()
                context.translateBy(x: 2, y: 2)
                UIColor.white.setFill()
                rectangleCopy4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: _100.length))
            _100.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 8, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            /// bluetooth
            let bluetooth = UIBezierPath()
            bluetooth.move(to: CGPoint(x: 3.5, y: 0))
            bluetooth.addLine(to: CGPoint(x: 7.5, y: 4))
            bluetooth.addLine(to: CGPoint(x: 5, y: 7))
            bluetooth.addLine(to: CGPoint(x: 7.5, y: 9.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 13.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 8))
            bluetooth.addLine(to: CGPoint(x: 1, y: 10.5))
            bluetooth.addLine(to: CGPoint(x: 0.5, y: 10))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 7))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 6.5))
            bluetooth.addLine(to: CGPoint(x: 0, y: 3.5))
            bluetooth.addLine(to: CGPoint(x: 0.5, y: 3))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 5.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 0))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 2.5))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 5.5))
            bluetooth.addLine(to: CGPoint(x: 6.03, y: 4))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 2.5))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 11))
            bluetooth.addLine(to: CGPoint(x: 5.96, y: 9.5))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 8))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8))
            context.saveGState()
            bluetooth.usesEvenOddFillRule = true
            UIColor.white.setFill()
            bluetooth.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 164, y: 3.5))
        context.restoreGState()
        /// Left Detail
        do {
            context.saveGState()
            context.translateBy(x: 7, y: 5)
            
            /// Wifi
            let wifi = UIBezierPath()
            wifi.move(to: CGPoint(x: 8.64, y: 6.94))
            wifi.addLine(to: CGPoint(x: 6.52, y: 9))
            wifi.addLine(to: CGPoint(x: 4.36, y: 6.91))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
            wifi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
            wifi.close()
            wifi.move(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 9.73, y: 5.88))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
            wifi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
            wifi.addLine(to: CGPoint(x: 2.18, y: 4.79))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
            wifi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            wifi.addLine(to: CGPoint(x: 11.91, y: 3.76))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
            wifi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
            wifi.addLine(to: CGPoint(x: 0, y: 2.68))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
            wifi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            context.saveGState()
            context.translateBy(x: 18.5, y: 0.5)
            wifi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wifi.fill()
            context.restoreGState()
            
            /// Mobile Signal
            let mobileSignal = UIBezierPath()
            mobileSignal.move(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.addCurve(to: CGPoint(x: 12.51, y: 0), controlPoint1: CGPoint(x: 12, y: 0.22), controlPoint2: CGPoint(x: 12.23, y: 0))
            mobileSignal.addLine(to: CGPoint(x: 13.99, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 14.5, y: 0.5), controlPoint1: CGPoint(x: 14.27, y: 0), controlPoint2: CGPoint(x: 14.5, y: 0.22))
            mobileSignal.addLine(to: CGPoint(x: 14.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 13.99, y: 9.5), controlPoint1: CGPoint(x: 14.5, y: 9.28), controlPoint2: CGPoint(x: 14.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 12.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 12.23, y: 9.5), controlPoint2: CGPoint(x: 12, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 8, y: 3))
            mobileSignal.addCurve(to: CGPoint(x: 8.51, y: 2.5), controlPoint1: CGPoint(x: 8, y: 2.73), controlPoint2: CGPoint(x: 8.23, y: 2.5))
            mobileSignal.addLine(to: CGPoint(x: 9.99, y: 2.5))
            mobileSignal.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 10.27, y: 2.5), controlPoint2: CGPoint(x: 10.5, y: 2.73))
            mobileSignal.addLine(to: CGPoint(x: 10.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 9.99, y: 9.5), controlPoint1: CGPoint(x: 10.5, y: 9.27), controlPoint2: CGPoint(x: 10.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 8.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 8, y: 9), controlPoint1: CGPoint(x: 8.23, y: 9.5), controlPoint2: CGPoint(x: 8, y: 9.27))
            mobileSignal.addLine(to: CGPoint(x: 8, y: 3))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 4, y: 5))
            mobileSignal.addCurve(to: CGPoint(x: 4.51, y: 4.5), controlPoint1: CGPoint(x: 4, y: 4.72), controlPoint2: CGPoint(x: 4.23, y: 4.5))
            mobileSignal.addLine(to: CGPoint(x: 5.99, y: 4.5))
            mobileSignal.addCurve(to: CGPoint(x: 6.5, y: 5), controlPoint1: CGPoint(x: 6.27, y: 4.5), controlPoint2: CGPoint(x: 6.5, y: 4.71))
            mobileSignal.addLine(to: CGPoint(x: 6.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 5.99, y: 9.5), controlPoint1: CGPoint(x: 6.5, y: 9.28), controlPoint2: CGPoint(x: 6.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 4.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 4.23, y: 9.5), controlPoint2: CGPoint(x: 4, y: 9.29))
            mobileSignal.addLine(to: CGPoint(x: 4, y: 5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            mobileSignal.addCurve(to: CGPoint(x: 0.51, y: 6.5), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 0.23, y: 6.5))
            mobileSignal.addLine(to: CGPoint(x: 1.99, y: 6.5))
            mobileSignal.addCurve(to: CGPoint(x: 2.5, y: 7), controlPoint1: CGPoint(x: 2.27, y: 6.5), controlPoint2: CGPoint(x: 2.5, y: 6.72))
            mobileSignal.addLine(to: CGPoint(x: 2.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 1.99, y: 9.5), controlPoint1: CGPoint(x: 2.5, y: 9.28), controlPoint2: CGPoint(x: 2.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 0.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.23, y: 9.5), controlPoint2: CGPoint(x: 0, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 0, y: 7))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            context.saveGState()
            mobileSignal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            mobileSignal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarLightStatusBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Right Detail
        do {
            context.saveGState()
            context.translateBy(x: 302, y: 3)
            
            /// battery
            do {
                context.saveGState()
                context.translateBy(x: 8, y: 0)
                
                /// 100%
                let _100 = NSMutableAttributedString(string: "100%")
                _100.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: _100.length))
                _100.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
                }
                context.saveGState()
                _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
                context.restoreGState()
                
                /// Battery
                do {
                    context.saveGState()
                    context.translateBy(x: 36, y: 2)
                    
                    /// Rectangle 3
                    let rectangle3 = UIBezierPath()
                    rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                    rectangle3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
                    rectangle3.addLine(to: CGPoint(x: 19.5, y: 0))
                    rectangle3.addCurve(to: CGPoint(x: 22, y: 2.5), controlPoint1: CGPoint(x: 20.88, y: 0), controlPoint2: CGPoint(x: 22, y: 1.12))
                    rectangle3.addLine(to: CGPoint(x: 22, y: 8))
                    rectangle3.addCurve(to: CGPoint(x: 19.51, y: 10.5), controlPoint1: CGPoint(x: 22, y: 9.38), controlPoint2: CGPoint(x: 20.88, y: 10.5))
                    rectangle3.addLine(to: CGPoint(x: 20.96, y: 10.5))
                    rectangle3.addCurve(to: CGPoint(x: 15.98, y: 10.5), controlPoint1: CGPoint(x: 19.58, y: 10.5), controlPoint2: CGPoint(x: 17.34, y: 10.5))
                    rectangle3.addLine(to: CGPoint(x: 2.49, y: 10.5))
                    rectangle3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.12, y: 10.5), controlPoint2: CGPoint(x: 0, y: 9.38))
                    rectangle3.addLine(to: CGPoint(x: 0, y: 2.5))
                    rectangle3.close()
                    rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                    context.saveGState()
                    context.setAlpha(0.4)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.saveGState()
                        rectangle3.lineWidth = 2
                        context.beginPath()
                        context.addPath(rectangle3.cgPath)
                        context.clip(using: .evenOdd)
                        UIColor.black.setStroke()
                        rectangle3.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Combined Shape
                    let combinedShape = UIBezierPath()
                    combinedShape.move(to: CGPoint.zero)
                    combinedShape.addCurve(to: CGPoint(x: 1.5, y: 1.94), controlPoint1: CGPoint(x: 0.86, y: 0.22), controlPoint2: CGPoint(x: 1.5, y: 1.01))
                    combinedShape.addCurve(to: CGPoint(x: 0, y: 3.87), controlPoint1: CGPoint(x: 1.5, y: 2.87), controlPoint2: CGPoint(x: 0.86, y: 3.65))
                    combinedShape.addLine(to: CGPoint.zero)
                    combinedShape.close()
                    combinedShape.move(to: CGPoint.zero)
                    context.saveGState()
                    context.translateBy(x: 23, y: 3.5)
                    combinedShape.usesEvenOddFillRule = true
                    UIColor(white: 0, alpha: 0.5).setFill()
                    combinedShape.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy 4
                    let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 18, height: 6.5), cornerRadius: 1)
                    context.saveGState()
                    context.translateBy(x: 2, y: 2)
                    UIColor.black.setFill()
                    rectangleCopy4.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// bluetooth
            let bluetooth = UIBezierPath()
            bluetooth.move(to: CGPoint(x: 3.5, y: 0))
            bluetooth.addLine(to: CGPoint(x: 7.5, y: 4))
            bluetooth.addLine(to: CGPoint(x: 5, y: 7))
            bluetooth.addLine(to: CGPoint(x: 7.5, y: 9.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 13.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 8))
            bluetooth.addLine(to: CGPoint(x: 1, y: 10.5))
            bluetooth.addLine(to: CGPoint(x: 0.5, y: 10))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 7))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 6.5))
            bluetooth.addLine(to: CGPoint(x: 0, y: 3.5))
            bluetooth.addLine(to: CGPoint(x: 0.5, y: 3))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 5.5))
            bluetooth.addLine(to: CGPoint(x: 3.5, y: 0))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 2.5))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 5.5))
            bluetooth.addLine(to: CGPoint(x: 6.03, y: 4))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 2.5))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 11))
            bluetooth.addLine(to: CGPoint(x: 5.96, y: 9.5))
            bluetooth.addLine(to: CGPoint(x: 4.5, y: 8))
            bluetooth.close()
            bluetooth.move(to: CGPoint(x: 4.5, y: 8))
            context.saveGState()
            bluetooth.usesEvenOddFillRule = true
            UIColor.black.setFill()
            bluetooth.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 164, y: 3.5))
        context.restoreGState()
        /// Left Detail
        do {
            context.saveGState()
            context.translateBy(x: 7, y: 5)
            
            /// Wifi
            let wifi = UIBezierPath()
            wifi.move(to: CGPoint(x: 8.64, y: 6.94))
            wifi.addLine(to: CGPoint(x: 6.52, y: 9))
            wifi.addLine(to: CGPoint(x: 4.36, y: 6.91))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
            wifi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
            wifi.close()
            wifi.move(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 9.73, y: 5.88))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
            wifi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
            wifi.addLine(to: CGPoint(x: 2.18, y: 4.79))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
            wifi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            wifi.addLine(to: CGPoint(x: 11.91, y: 3.76))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
            wifi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
            wifi.addLine(to: CGPoint(x: 0, y: 2.68))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
            wifi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            context.saveGState()
            context.translateBy(x: 18.5, y: 0.5)
            wifi.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            wifi.fill()
            context.restoreGState()
            
            /// Mobile Signal
            let mobileSignal = UIBezierPath()
            mobileSignal.move(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.addCurve(to: CGPoint(x: 12.51, y: 0), controlPoint1: CGPoint(x: 12, y: 0.22), controlPoint2: CGPoint(x: 12.23, y: 0))
            mobileSignal.addLine(to: CGPoint(x: 13.99, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 14.5, y: 0.5), controlPoint1: CGPoint(x: 14.27, y: 0), controlPoint2: CGPoint(x: 14.5, y: 0.22))
            mobileSignal.addLine(to: CGPoint(x: 14.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 13.99, y: 9.5), controlPoint1: CGPoint(x: 14.5, y: 9.28), controlPoint2: CGPoint(x: 14.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 12.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 12.23, y: 9.5), controlPoint2: CGPoint(x: 12, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 8, y: 3))
            mobileSignal.addCurve(to: CGPoint(x: 8.51, y: 2.5), controlPoint1: CGPoint(x: 8, y: 2.73), controlPoint2: CGPoint(x: 8.23, y: 2.5))
            mobileSignal.addLine(to: CGPoint(x: 9.99, y: 2.5))
            mobileSignal.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 10.27, y: 2.5), controlPoint2: CGPoint(x: 10.5, y: 2.73))
            mobileSignal.addLine(to: CGPoint(x: 10.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 9.99, y: 9.5), controlPoint1: CGPoint(x: 10.5, y: 9.27), controlPoint2: CGPoint(x: 10.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 8.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 8, y: 9), controlPoint1: CGPoint(x: 8.23, y: 9.5), controlPoint2: CGPoint(x: 8, y: 9.27))
            mobileSignal.addLine(to: CGPoint(x: 8, y: 3))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 4, y: 5))
            mobileSignal.addCurve(to: CGPoint(x: 4.51, y: 4.5), controlPoint1: CGPoint(x: 4, y: 4.72), controlPoint2: CGPoint(x: 4.23, y: 4.5))
            mobileSignal.addLine(to: CGPoint(x: 5.99, y: 4.5))
            mobileSignal.addCurve(to: CGPoint(x: 6.5, y: 5), controlPoint1: CGPoint(x: 6.27, y: 4.5), controlPoint2: CGPoint(x: 6.5, y: 4.71))
            mobileSignal.addLine(to: CGPoint(x: 6.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 5.99, y: 9.5), controlPoint1: CGPoint(x: 6.5, y: 9.28), controlPoint2: CGPoint(x: 6.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 4.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 4.23, y: 9.5), controlPoint2: CGPoint(x: 4, y: 9.29))
            mobileSignal.addLine(to: CGPoint(x: 4, y: 5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            mobileSignal.addCurve(to: CGPoint(x: 0.51, y: 6.5), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 0.23, y: 6.5))
            mobileSignal.addLine(to: CGPoint(x: 1.99, y: 6.5))
            mobileSignal.addCurve(to: CGPoint(x: 2.5, y: 7), controlPoint1: CGPoint(x: 2.27, y: 6.5), controlPoint2: CGPoint(x: 2.5, y: 6.72))
            mobileSignal.addLine(to: CGPoint(x: 2.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 1.99, y: 9.5), controlPoint1: CGPoint(x: 2.5, y: 9.28), controlPoint2: CGPoint(x: 2.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 0.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.23, y: 9.5), controlPoint2: CGPoint(x: 0, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 0, y: 7))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            context.saveGState()
            mobileSignal.usesEvenOddFillRule = true
            UIColor.black.setFill()
            mobileSignal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarLightStatusBarWithBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Right Detail
        do {
            context.saveGState()
            context.translateBy(x: 310, y: 3)
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: _100.length))
            _100.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 2)
                
                /// Rectangle 3
                let rectangle3 = UIBezierPath()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                rectangle3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
                rectangle3.addLine(to: CGPoint(x: 19.5, y: 0))
                rectangle3.addCurve(to: CGPoint(x: 22, y: 2.5), controlPoint1: CGPoint(x: 20.88, y: 0), controlPoint2: CGPoint(x: 22, y: 1.12))
                rectangle3.addLine(to: CGPoint(x: 22, y: 8))
                rectangle3.addCurve(to: CGPoint(x: 19.51, y: 10.5), controlPoint1: CGPoint(x: 22, y: 9.38), controlPoint2: CGPoint(x: 20.88, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 20.96, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 15.98, y: 10.5), controlPoint1: CGPoint(x: 19.58, y: 10.5), controlPoint2: CGPoint(x: 17.34, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 2.49, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.12, y: 10.5), controlPoint2: CGPoint(x: 0, y: 9.38))
                rectangle3.addLine(to: CGPoint(x: 0, y: 2.5))
                rectangle3.close()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    rectangle3.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle3.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor.black.setStroke()
                    rectangle3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint.zero)
                combinedShape.addCurve(to: CGPoint(x: 1.5, y: 1.94), controlPoint1: CGPoint(x: 0.86, y: 0.22), controlPoint2: CGPoint(x: 1.5, y: 1.01))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 3.87), controlPoint1: CGPoint(x: 1.5, y: 2.87), controlPoint2: CGPoint(x: 0.86, y: 3.65))
                combinedShape.addLine(to: CGPoint.zero)
                combinedShape.close()
                combinedShape.move(to: CGPoint.zero)
                context.saveGState()
                context.translateBy(x: 23, y: 3.5)
                combinedShape.usesEvenOddFillRule = true
                UIColor(white: 0, alpha: 0.5).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Rectangle Copy 4
                let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 18, height: 6.5), cornerRadius: 1)
                context.saveGState()
                context.translateBy(x: 2, y: 2)
                UIColor.black.setFill()
                rectangleCopy4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 164, y: 3.5))
        context.restoreGState()
        /// Left Detail
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 3)
            
            /// App Name
            let appName = NSMutableAttributedString(string: "App Name")
            appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: appName.length))
            context.saveGState()
            appName.draw(in: CGRect(x: 16, y: 0, width: 60.34, height: 16))
            context.restoreGState()
            
            /// Back_Arrow
            let back_Arrow = UIBezierPath()
            back_Arrow.move(to: CGPoint(x: 12, y: 8.52))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.92))
            back_Arrow.addCurve(to: CGPoint(x: 11.99, y: 9.26), controlPoint1: CGPoint(x: 12, y: 9.04), controlPoint2: CGPoint(x: 12, y: 9.15))
            back_Arrow.addCurve(to: CGPoint(x: 11.93, y: 9.99), controlPoint1: CGPoint(x: 11.99, y: 9.5), controlPoint2: CGPoint(x: 11.97, y: 9.75))
            back_Arrow.addCurve(to: CGPoint(x: 11.7, y: 10.68), controlPoint1: CGPoint(x: 11.89, y: 10.23), controlPoint2: CGPoint(x: 11.81, y: 10.46))
            back_Arrow.addCurve(to: CGPoint(x: 10.68, y: 11.7), controlPoint1: CGPoint(x: 11.47, y: 11.12), controlPoint2: CGPoint(x: 11.12, y: 11.48))
            back_Arrow.addCurve(to: CGPoint(x: 9.99, y: 11.93), controlPoint1: CGPoint(x: 10.46, y: 11.81), controlPoint2: CGPoint(x: 10.23, y: 11.89))
            back_Arrow.addCurve(to: CGPoint(x: 9.26, y: 12), controlPoint1: CGPoint(x: 9.74, y: 11.97), controlPoint2: CGPoint(x: 9.5, y: 11.99))
            back_Arrow.addCurve(to: CGPoint(x: 8.92, y: 12), controlPoint1: CGPoint(x: 9.14, y: 12), controlPoint2: CGPoint(x: 9.03, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 8.52, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 3.47, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 3.07, y: 12))
            back_Arrow.addCurve(to: CGPoint(x: 2.74, y: 12), controlPoint1: CGPoint(x: 2.96, y: 12), controlPoint2: CGPoint(x: 2.85, y: 12))
            back_Arrow.addCurve(to: CGPoint(x: 2.01, y: 11.93), controlPoint1: CGPoint(x: 2.49, y: 11.99), controlPoint2: CGPoint(x: 2.25, y: 11.97))
            back_Arrow.addCurve(to: CGPoint(x: 1.31, y: 11.7), controlPoint1: CGPoint(x: 1.77, y: 11.89), controlPoint2: CGPoint(x: 1.53, y: 11.81))
            back_Arrow.addCurve(to: CGPoint(x: 0.29, y: 10.68), controlPoint1: CGPoint(x: 0.87, y: 11.48), controlPoint2: CGPoint(x: 0.52, y: 11.12))
            back_Arrow.addCurve(to: CGPoint(x: 0.07, y: 9.99), controlPoint1: CGPoint(x: 0.18, y: 10.46), controlPoint2: CGPoint(x: 0.11, y: 10.23))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 9.26), controlPoint1: CGPoint(x: 0.03, y: 9.75), controlPoint2: CGPoint(x: 0, y: 9.5))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 8.92), controlPoint1: CGPoint(x: 0, y: 9.15), controlPoint2: CGPoint(x: 0, y: 9.03))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 8.52))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 3.47))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 3.07))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 2.74), controlPoint1: CGPoint(x: 0, y: 2.96), controlPoint2: CGPoint(x: 0, y: 2.85))
            back_Arrow.addCurve(to: CGPoint(x: 0.07, y: 2.01), controlPoint1: CGPoint(x: 0.01, y: 2.49), controlPoint2: CGPoint(x: 0.03, y: 2.25))
            back_Arrow.addCurve(to: CGPoint(x: 0.3, y: 1.32), controlPoint1: CGPoint(x: 0.11, y: 1.77), controlPoint2: CGPoint(x: 0.19, y: 1.54))
            back_Arrow.addCurve(to: CGPoint(x: 1.32, y: 0.3), controlPoint1: CGPoint(x: 0.52, y: 0.88), controlPoint2: CGPoint(x: 0.88, y: 0.52))
            back_Arrow.addCurve(to: CGPoint(x: 2.01, y: 0.07), controlPoint1: CGPoint(x: 1.54, y: 0.19), controlPoint2: CGPoint(x: 1.77, y: 0.11))
            back_Arrow.addCurve(to: CGPoint(x: 2.74, y: 0.01), controlPoint1: CGPoint(x: 2.25, y: 0.03), controlPoint2: CGPoint(x: 2.5, y: 0.01))
            back_Arrow.addCurve(to: CGPoint(x: 3.08, y: 0), controlPoint1: CGPoint(x: 2.85, y: 0), controlPoint2: CGPoint(x: 2.97, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 3.48, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 8.52, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 8.92, y: 0))
            back_Arrow.addCurve(to: CGPoint(x: 9.26, y: 0), controlPoint1: CGPoint(x: 9.04, y: 0), controlPoint2: CGPoint(x: 9.15, y: 0))
            back_Arrow.addCurve(to: CGPoint(x: 9.99, y: 0.07), controlPoint1: CGPoint(x: 9.5, y: 0.01), controlPoint2: CGPoint(x: 9.75, y: 0.03))
            back_Arrow.addCurve(to: CGPoint(x: 10.68, y: 0.3), controlPoint1: CGPoint(x: 10.23, y: 0.11), controlPoint2: CGPoint(x: 10.46, y: 0.19))
            back_Arrow.addCurve(to: CGPoint(x: 11.7, y: 1.32), controlPoint1: CGPoint(x: 11.12, y: 0.52), controlPoint2: CGPoint(x: 11.48, y: 0.88))
            back_Arrow.addCurve(to: CGPoint(x: 11.93, y: 2.01), controlPoint1: CGPoint(x: 11.81, y: 1.54), controlPoint2: CGPoint(x: 11.89, y: 1.77))
            back_Arrow.addCurve(to: CGPoint(x: 12, y: 2.74), controlPoint1: CGPoint(x: 11.97, y: 2.25), controlPoint2: CGPoint(x: 11.99, y: 2.5))
            back_Arrow.addCurve(to: CGPoint(x: 12, y: 3.08), controlPoint1: CGPoint(x: 12, y: 2.85), controlPoint2: CGPoint(x: 12, y: 2.96))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 3.48))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.53))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.52))
            back_Arrow.close()
            back_Arrow.move(to: CGPoint(x: 6.88, y: 2.11))
            back_Arrow.addLine(to: CGPoint(x: 3, y: 6))
            back_Arrow.addLine(to: CGPoint(x: 6.86, y: 9.86))
            back_Arrow.addLine(to: CGPoint(x: 7.88, y: 8.89))
            back_Arrow.addLine(to: CGPoint(x: 5, y: 6))
            back_Arrow.addLine(to: CGPoint(x: 7.92, y: 3.07))
            back_Arrow.addLine(to: CGPoint(x: 6.88, y: 2.11))
            back_Arrow.close()
            back_Arrow.move(to: CGPoint(x: 6.88, y: 2.11))
            context.saveGState()
            context.translateBy(x: 0.5, y: 1)
            back_Arrow.usesEvenOddFillRule = true
            UIColor.black.setFill()
            back_Arrow.fill()
            context.restoreGState()
            
            /// Wifi
            let wifi = UIBezierPath()
            wifi.move(to: CGPoint(x: 8.64, y: 6.94))
            wifi.addLine(to: CGPoint(x: 6.52, y: 9))
            wifi.addLine(to: CGPoint(x: 4.36, y: 6.91))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
            wifi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
            wifi.close()
            wifi.move(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 9.73, y: 5.88))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
            wifi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
            wifi.addLine(to: CGPoint(x: 2.18, y: 4.79))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
            wifi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            wifi.addLine(to: CGPoint(x: 11.91, y: 3.76))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
            wifi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
            wifi.addLine(to: CGPoint(x: 0, y: 2.68))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
            wifi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            context.saveGState()
            context.translateBy(x: 101.5, y: 2.5)
            wifi.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            wifi.fill()
            context.restoreGState()
            
            /// Mobile Signal
            let mobileSignal = UIBezierPath()
            mobileSignal.move(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.addCurve(to: CGPoint(x: 12.51, y: 0), controlPoint1: CGPoint(x: 12, y: 0.22), controlPoint2: CGPoint(x: 12.23, y: 0))
            mobileSignal.addLine(to: CGPoint(x: 13.99, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 14.5, y: 0.5), controlPoint1: CGPoint(x: 14.27, y: 0), controlPoint2: CGPoint(x: 14.5, y: 0.22))
            mobileSignal.addLine(to: CGPoint(x: 14.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 13.99, y: 9.5), controlPoint1: CGPoint(x: 14.5, y: 9.28), controlPoint2: CGPoint(x: 14.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 12.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 12.23, y: 9.5), controlPoint2: CGPoint(x: 12, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 8, y: 3))
            mobileSignal.addCurve(to: CGPoint(x: 8.51, y: 2.5), controlPoint1: CGPoint(x: 8, y: 2.73), controlPoint2: CGPoint(x: 8.23, y: 2.5))
            mobileSignal.addLine(to: CGPoint(x: 9.99, y: 2.5))
            mobileSignal.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 10.27, y: 2.5), controlPoint2: CGPoint(x: 10.5, y: 2.73))
            mobileSignal.addLine(to: CGPoint(x: 10.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 9.99, y: 9.5), controlPoint1: CGPoint(x: 10.5, y: 9.27), controlPoint2: CGPoint(x: 10.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 8.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 8, y: 9), controlPoint1: CGPoint(x: 8.23, y: 9.5), controlPoint2: CGPoint(x: 8, y: 9.27))
            mobileSignal.addLine(to: CGPoint(x: 8, y: 3))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 4, y: 5))
            mobileSignal.addCurve(to: CGPoint(x: 4.51, y: 4.5), controlPoint1: CGPoint(x: 4, y: 4.72), controlPoint2: CGPoint(x: 4.23, y: 4.5))
            mobileSignal.addLine(to: CGPoint(x: 5.99, y: 4.5))
            mobileSignal.addCurve(to: CGPoint(x: 6.5, y: 5), controlPoint1: CGPoint(x: 6.27, y: 4.5), controlPoint2: CGPoint(x: 6.5, y: 4.71))
            mobileSignal.addLine(to: CGPoint(x: 6.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 5.99, y: 9.5), controlPoint1: CGPoint(x: 6.5, y: 9.28), controlPoint2: CGPoint(x: 6.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 4.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 4.23, y: 9.5), controlPoint2: CGPoint(x: 4, y: 9.29))
            mobileSignal.addLine(to: CGPoint(x: 4, y: 5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            mobileSignal.addCurve(to: CGPoint(x: 0.51, y: 6.5), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 0.23, y: 6.5))
            mobileSignal.addLine(to: CGPoint(x: 1.99, y: 6.5))
            mobileSignal.addCurve(to: CGPoint(x: 2.5, y: 7), controlPoint1: CGPoint(x: 2.27, y: 6.5), controlPoint2: CGPoint(x: 2.5, y: 6.72))
            mobileSignal.addLine(to: CGPoint(x: 2.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 1.99, y: 9.5), controlPoint1: CGPoint(x: 2.5, y: 9.28), controlPoint2: CGPoint(x: 2.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 0.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.23, y: 9.5), controlPoint2: CGPoint(x: 0, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 0, y: 7))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            context.saveGState()
            context.translateBy(x: 83, y: 2)
            mobileSignal.usesEvenOddFillRule = true
            UIColor.black.setFill()
            mobileSignal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarDarkStatusBarWithBack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Right Detail
        do {
            context.saveGState()
            context.translateBy(x: 310, y: 3)
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: _100.length))
            _100.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            /// Battery
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 2)
                
                /// Rectangle 3
                let rectangle3 = UIBezierPath()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                rectangle3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
                rectangle3.addLine(to: CGPoint(x: 19.5, y: 0))
                rectangle3.addCurve(to: CGPoint(x: 22, y: 2.5), controlPoint1: CGPoint(x: 20.88, y: 0), controlPoint2: CGPoint(x: 22, y: 1.12))
                rectangle3.addLine(to: CGPoint(x: 22, y: 8))
                rectangle3.addCurve(to: CGPoint(x: 19.51, y: 10.5), controlPoint1: CGPoint(x: 22, y: 9.38), controlPoint2: CGPoint(x: 20.88, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 20.96, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 15.98, y: 10.5), controlPoint1: CGPoint(x: 19.58, y: 10.5), controlPoint2: CGPoint(x: 17.34, y: 10.5))
                rectangle3.addLine(to: CGPoint(x: 2.49, y: 10.5))
                rectangle3.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 1.12, y: 10.5), controlPoint2: CGPoint(x: 0, y: 9.38))
                rectangle3.addLine(to: CGPoint(x: 0, y: 2.5))
                rectangle3.close()
                rectangle3.move(to: CGPoint(x: 0, y: 2.5))
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    rectangle3.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle3.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor.white.setStroke()
                    rectangle3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint.zero)
                combinedShape.addCurve(to: CGPoint(x: 1.5, y: 1.94), controlPoint1: CGPoint(x: 0.86, y: 0.22), controlPoint2: CGPoint(x: 1.5, y: 1.01))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 3.87), controlPoint1: CGPoint(x: 1.5, y: 2.87), controlPoint2: CGPoint(x: 0.86, y: 3.65))
                combinedShape.addLine(to: CGPoint.zero)
                combinedShape.close()
                combinedShape.move(to: CGPoint.zero)
                context.saveGState()
                context.translateBy(x: 23, y: 3.5)
                combinedShape.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.4).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Rectangle Copy 4
                let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 18, height: 6.5), cornerRadius: 1)
                context.saveGState()
                context.translateBy(x: 2, y: 2)
                UIColor.white.setFill()
                rectangleCopy4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Semibold", size: 12)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(at: CGPoint(x: 164, y: 3.5))
        context.restoreGState()
        /// Left Detail
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 3)
            
            /// App Name
            let appName = NSMutableAttributedString(string: "App Name")
            appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 12)!, range: NSRange(location: 0, length: appName.length))
            appName.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: appName.length))
            context.saveGState()
            appName.draw(in: CGRect(x: 16, y: 0, width: 60.34, height: 16))
            context.restoreGState()
            
            /// Back_Arrow
            let back_Arrow = UIBezierPath()
            back_Arrow.move(to: CGPoint(x: 12, y: 8.52))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.92))
            back_Arrow.addCurve(to: CGPoint(x: 11.99, y: 9.26), controlPoint1: CGPoint(x: 12, y: 9.04), controlPoint2: CGPoint(x: 12, y: 9.15))
            back_Arrow.addCurve(to: CGPoint(x: 11.93, y: 9.99), controlPoint1: CGPoint(x: 11.99, y: 9.5), controlPoint2: CGPoint(x: 11.97, y: 9.75))
            back_Arrow.addCurve(to: CGPoint(x: 11.7, y: 10.68), controlPoint1: CGPoint(x: 11.89, y: 10.23), controlPoint2: CGPoint(x: 11.81, y: 10.46))
            back_Arrow.addCurve(to: CGPoint(x: 10.68, y: 11.7), controlPoint1: CGPoint(x: 11.47, y: 11.12), controlPoint2: CGPoint(x: 11.12, y: 11.48))
            back_Arrow.addCurve(to: CGPoint(x: 9.99, y: 11.93), controlPoint1: CGPoint(x: 10.46, y: 11.81), controlPoint2: CGPoint(x: 10.23, y: 11.89))
            back_Arrow.addCurve(to: CGPoint(x: 9.26, y: 12), controlPoint1: CGPoint(x: 9.74, y: 11.97), controlPoint2: CGPoint(x: 9.5, y: 11.99))
            back_Arrow.addCurve(to: CGPoint(x: 8.92, y: 12), controlPoint1: CGPoint(x: 9.14, y: 12), controlPoint2: CGPoint(x: 9.03, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 8.52, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 3.47, y: 12))
            back_Arrow.addLine(to: CGPoint(x: 3.07, y: 12))
            back_Arrow.addCurve(to: CGPoint(x: 2.74, y: 12), controlPoint1: CGPoint(x: 2.96, y: 12), controlPoint2: CGPoint(x: 2.85, y: 12))
            back_Arrow.addCurve(to: CGPoint(x: 2.01, y: 11.93), controlPoint1: CGPoint(x: 2.49, y: 11.99), controlPoint2: CGPoint(x: 2.25, y: 11.97))
            back_Arrow.addCurve(to: CGPoint(x: 1.31, y: 11.7), controlPoint1: CGPoint(x: 1.77, y: 11.89), controlPoint2: CGPoint(x: 1.53, y: 11.81))
            back_Arrow.addCurve(to: CGPoint(x: 0.29, y: 10.68), controlPoint1: CGPoint(x: 0.87, y: 11.48), controlPoint2: CGPoint(x: 0.52, y: 11.12))
            back_Arrow.addCurve(to: CGPoint(x: 0.07, y: 9.99), controlPoint1: CGPoint(x: 0.18, y: 10.46), controlPoint2: CGPoint(x: 0.11, y: 10.23))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 9.26), controlPoint1: CGPoint(x: 0.03, y: 9.75), controlPoint2: CGPoint(x: 0, y: 9.5))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 8.92), controlPoint1: CGPoint(x: 0, y: 9.15), controlPoint2: CGPoint(x: 0, y: 9.03))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 8.52))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 3.47))
            back_Arrow.addLine(to: CGPoint(x: 0, y: 3.07))
            back_Arrow.addCurve(to: CGPoint(x: 0, y: 2.74), controlPoint1: CGPoint(x: 0, y: 2.96), controlPoint2: CGPoint(x: 0, y: 2.85))
            back_Arrow.addCurve(to: CGPoint(x: 0.07, y: 2.01), controlPoint1: CGPoint(x: 0.01, y: 2.49), controlPoint2: CGPoint(x: 0.03, y: 2.25))
            back_Arrow.addCurve(to: CGPoint(x: 0.3, y: 1.32), controlPoint1: CGPoint(x: 0.11, y: 1.77), controlPoint2: CGPoint(x: 0.19, y: 1.54))
            back_Arrow.addCurve(to: CGPoint(x: 1.32, y: 0.3), controlPoint1: CGPoint(x: 0.52, y: 0.88), controlPoint2: CGPoint(x: 0.88, y: 0.52))
            back_Arrow.addCurve(to: CGPoint(x: 2.01, y: 0.07), controlPoint1: CGPoint(x: 1.54, y: 0.19), controlPoint2: CGPoint(x: 1.77, y: 0.11))
            back_Arrow.addCurve(to: CGPoint(x: 2.74, y: 0.01), controlPoint1: CGPoint(x: 2.25, y: 0.03), controlPoint2: CGPoint(x: 2.5, y: 0.01))
            back_Arrow.addCurve(to: CGPoint(x: 3.08, y: 0), controlPoint1: CGPoint(x: 2.85, y: 0), controlPoint2: CGPoint(x: 2.97, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 3.48, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 8.52, y: 0))
            back_Arrow.addLine(to: CGPoint(x: 8.92, y: 0))
            back_Arrow.addCurve(to: CGPoint(x: 9.26, y: 0), controlPoint1: CGPoint(x: 9.04, y: 0), controlPoint2: CGPoint(x: 9.15, y: 0))
            back_Arrow.addCurve(to: CGPoint(x: 9.99, y: 0.07), controlPoint1: CGPoint(x: 9.5, y: 0.01), controlPoint2: CGPoint(x: 9.75, y: 0.03))
            back_Arrow.addCurve(to: CGPoint(x: 10.68, y: 0.3), controlPoint1: CGPoint(x: 10.23, y: 0.11), controlPoint2: CGPoint(x: 10.46, y: 0.19))
            back_Arrow.addCurve(to: CGPoint(x: 11.7, y: 1.32), controlPoint1: CGPoint(x: 11.12, y: 0.52), controlPoint2: CGPoint(x: 11.48, y: 0.88))
            back_Arrow.addCurve(to: CGPoint(x: 11.93, y: 2.01), controlPoint1: CGPoint(x: 11.81, y: 1.54), controlPoint2: CGPoint(x: 11.89, y: 1.77))
            back_Arrow.addCurve(to: CGPoint(x: 12, y: 2.74), controlPoint1: CGPoint(x: 11.97, y: 2.25), controlPoint2: CGPoint(x: 11.99, y: 2.5))
            back_Arrow.addCurve(to: CGPoint(x: 12, y: 3.08), controlPoint1: CGPoint(x: 12, y: 2.85), controlPoint2: CGPoint(x: 12, y: 2.96))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 3.48))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.53))
            back_Arrow.addLine(to: CGPoint(x: 12, y: 8.52))
            back_Arrow.close()
            back_Arrow.move(to: CGPoint(x: 6.88, y: 2.11))
            back_Arrow.addLine(to: CGPoint(x: 3, y: 6))
            back_Arrow.addLine(to: CGPoint(x: 6.86, y: 9.86))
            back_Arrow.addLine(to: CGPoint(x: 7.88, y: 8.89))
            back_Arrow.addLine(to: CGPoint(x: 5, y: 6))
            back_Arrow.addLine(to: CGPoint(x: 7.92, y: 3.07))
            back_Arrow.addLine(to: CGPoint(x: 6.88, y: 2.11))
            back_Arrow.close()
            back_Arrow.move(to: CGPoint(x: 6.88, y: 2.11))
            context.saveGState()
            context.translateBy(x: 0.5, y: 1)
            back_Arrow.usesEvenOddFillRule = true
            UIColor.white.setFill()
            back_Arrow.fill()
            context.restoreGState()
            
            /// Wifi
            let wifi = UIBezierPath()
            wifi.move(to: CGPoint(x: 8.64, y: 6.94))
            wifi.addLine(to: CGPoint(x: 6.52, y: 9))
            wifi.addLine(to: CGPoint(x: 4.36, y: 6.91))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
            wifi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
            wifi.close()
            wifi.move(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 10.82, y: 4.82))
            wifi.addLine(to: CGPoint(x: 9.73, y: 5.88))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
            wifi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
            wifi.addLine(to: CGPoint(x: 2.18, y: 4.79))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
            wifi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            wifi.addLine(to: CGPoint(x: 11.91, y: 3.76))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
            wifi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
            wifi.addLine(to: CGPoint(x: 0, y: 2.68))
            wifi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
            wifi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
            wifi.close()
            wifi.move(to: CGPoint(x: 13, y: 2.71))
            context.saveGState()
            context.translateBy(x: 101.5, y: 2.5)
            wifi.usesEvenOddFillRule = true
            UIColor.white.setFill()
            wifi.fill()
            context.restoreGState()
            
            /// Mobile Signal
            let mobileSignal = UIBezierPath()
            mobileSignal.move(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.addCurve(to: CGPoint(x: 12.51, y: 0), controlPoint1: CGPoint(x: 12, y: 0.22), controlPoint2: CGPoint(x: 12.23, y: 0))
            mobileSignal.addLine(to: CGPoint(x: 13.99, y: 0))
            mobileSignal.addCurve(to: CGPoint(x: 14.5, y: 0.5), controlPoint1: CGPoint(x: 14.27, y: 0), controlPoint2: CGPoint(x: 14.5, y: 0.22))
            mobileSignal.addLine(to: CGPoint(x: 14.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 13.99, y: 9.5), controlPoint1: CGPoint(x: 14.5, y: 9.28), controlPoint2: CGPoint(x: 14.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 12.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 12.23, y: 9.5), controlPoint2: CGPoint(x: 12, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 12, y: 0.5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 8, y: 3))
            mobileSignal.addCurve(to: CGPoint(x: 8.51, y: 2.5), controlPoint1: CGPoint(x: 8, y: 2.73), controlPoint2: CGPoint(x: 8.23, y: 2.5))
            mobileSignal.addLine(to: CGPoint(x: 9.99, y: 2.5))
            mobileSignal.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 10.27, y: 2.5), controlPoint2: CGPoint(x: 10.5, y: 2.73))
            mobileSignal.addLine(to: CGPoint(x: 10.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 9.99, y: 9.5), controlPoint1: CGPoint(x: 10.5, y: 9.27), controlPoint2: CGPoint(x: 10.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 8.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 8, y: 9), controlPoint1: CGPoint(x: 8.23, y: 9.5), controlPoint2: CGPoint(x: 8, y: 9.27))
            mobileSignal.addLine(to: CGPoint(x: 8, y: 3))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 4, y: 5))
            mobileSignal.addCurve(to: CGPoint(x: 4.51, y: 4.5), controlPoint1: CGPoint(x: 4, y: 4.72), controlPoint2: CGPoint(x: 4.23, y: 4.5))
            mobileSignal.addLine(to: CGPoint(x: 5.99, y: 4.5))
            mobileSignal.addCurve(to: CGPoint(x: 6.5, y: 5), controlPoint1: CGPoint(x: 6.27, y: 4.5), controlPoint2: CGPoint(x: 6.5, y: 4.71))
            mobileSignal.addLine(to: CGPoint(x: 6.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 5.99, y: 9.5), controlPoint1: CGPoint(x: 6.5, y: 9.28), controlPoint2: CGPoint(x: 6.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 4.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 4.23, y: 9.5), controlPoint2: CGPoint(x: 4, y: 9.29))
            mobileSignal.addLine(to: CGPoint(x: 4, y: 5))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            mobileSignal.addCurve(to: CGPoint(x: 0.51, y: 6.5), controlPoint1: CGPoint(x: 0, y: 6.72), controlPoint2: CGPoint(x: 0.23, y: 6.5))
            mobileSignal.addLine(to: CGPoint(x: 1.99, y: 6.5))
            mobileSignal.addCurve(to: CGPoint(x: 2.5, y: 7), controlPoint1: CGPoint(x: 2.27, y: 6.5), controlPoint2: CGPoint(x: 2.5, y: 6.72))
            mobileSignal.addLine(to: CGPoint(x: 2.5, y: 9))
            mobileSignal.addCurve(to: CGPoint(x: 1.99, y: 9.5), controlPoint1: CGPoint(x: 2.5, y: 9.28), controlPoint2: CGPoint(x: 2.27, y: 9.5))
            mobileSignal.addLine(to: CGPoint(x: 0.51, y: 9.5))
            mobileSignal.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 0.23, y: 9.5), controlPoint2: CGPoint(x: 0, y: 9.28))
            mobileSignal.addLine(to: CGPoint(x: 0, y: 7))
            mobileSignal.close()
            mobileSignal.move(to: CGPoint(x: 0, y: 7))
            context.saveGState()
            context.translateBy(x: 83, y: 2)
            mobileSignal.usesEvenOddFillRule = true
            UIColor.white.setFill()
            mobileSignal.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarDoubleHeightInCall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Background Color
        UIColor(hue: 0.362, saturation: 0.65, brightness: 0.851, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// app name
        let appName = NSMutableAttributedString(string: "Touch to return to call 10:09")
        appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: appName.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            appName.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appName.length))
        }
        context.saveGState()
        appName.draw(at: CGPoint(x: 99, y: 22))
        context.restoreGState()
        /// iOS UIKit/Bars/Status Bars/On Dark Background
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarDoubleHeightRecording(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Background Color
        UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// app name
        let appName = NSMutableAttributedString(string: "Recording 10:09")
        appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: appName.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            appName.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appName.length))
        }
        context.saveGState()
        appName.draw(at: CGPoint(x: 134.5, y: 22))
        context.restoreGState()
        /// iOS UIKit/Bars/Status Bars/On Dark Background Copy
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBarDoubleHeightLocation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Background Color
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// app name
        let appName = NSMutableAttributedString(string: "App Name is Using Your Location")
        appName.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: appName.length))
        appName.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: appName.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            appName.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: appName.length))
        }
        context.saveGState()
        appName.draw(at: CGPoint(x: 83.5, y: 22))
        context.restoreGState()
        /// iOS UIKit/Bars/Status Bars/On Dark Background Copy 2
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbar_ResourcesInactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 49)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Frame
        let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 49))
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.667, saturation: 0.034, brightness: 0.576, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 34, width: 48, height: 14))
        context.restoreGState()
        /// ↳ Icon
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbar_ResourcesLightActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 49)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Frame
        let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 49))
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 34, width: 48, height: 14))
        context.restoreGState()
        /// ↳ Icon
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbar_ResourcesDarkActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 49)
        
        /// Background Color
        UIColor.black.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Frame
        let frame2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 49))
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Label")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 10)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.24, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(in: CGRect(x: 0, y: 34, width: 48, height: 14))
        context.restoreGState()
        /// ↳ Icon
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarLight3Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarLight4Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 4
        // Warning: New symbols are not supported.
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarLight5Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 5
        // Warning: New symbols are not supported.
        /// Tab 4
        // Warning: New symbols are not supported.
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarDark3Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarDark4Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 4
        // Warning: New symbols are not supported.
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsTabbarDark5Tabs(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 49), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 49), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 49)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 49))
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: -0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.16).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        UIColor(white: 0.039, alpha: 0.96).setFill()
        background.fill()
        context.restoreGState()
        /// Tab 5
        // Warning: New symbols are not supported.
        /// Tab 4
        // Warning: New symbols are not supported.
        /// Tab 3
        // Warning: New symbols are not supported.
        /// Tab 2
        // Warning: New symbols are not supported.
        /// Tab 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawGlyphs_GuidesSizeGuideNavigationBarAndToolbar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Max Width or Height @2x: 28pt x 28pt
        let maxWidthOrHeight2x28ptX28pt = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            maxWidthOrHeight2x28ptX28pt.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Target Size @2x: 25pt x 25pt
        let targetSize2x25ptX25pt = UIBezierPath()
        targetSize2x25ptX25pt.move(to: CGPoint.zero)
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 28, y: 0))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 28, y: 28))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 0, y: 28))
        targetSize2x25ptX25pt.addLine(to: CGPoint.zero)
        targetSize2x25ptX25pt.close()
        targetSize2x25ptX25pt.move(to: CGPoint(x: 1.5, y: 1.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 1.5, y: 26.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 26.5, y: 26.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 26.5, y: 1.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 1.5, y: 1.5))
        targetSize2x25ptX25pt.close()
        targetSize2x25ptX25pt.move(to: CGPoint(x: 1.5, y: 1.5))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            targetSize2x25ptX25pt.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            targetSize2x25ptX25pt.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder1OnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6.66, y: 20.85))
        star.addLine(to: CGPoint(x: 12.36, y: 16.65))
        star.addLine(to: CGPoint(x: 18.07, y: 20.85))
        star.addLine(to: CGPoint(x: 15.84, y: 14.13))
        star.addLine(to: CGPoint(x: 21.59, y: 10))
        star.addLine(to: CGPoint(x: 14.51, y: 10.05))
        star.addLine(to: CGPoint(x: 12.36, y: 3.3))
        star.addLine(to: CGPoint(x: 10.22, y: 10.05))
        star.addLine(to: CGPoint(x: 3.14, y: 10))
        star.addLine(to: CGPoint(x: 8.89, y: 14.13))
        star.addLine(to: CGPoint(x: 6.66, y: 20.85))
        star.close()
        star.move(to: CGPoint(x: 12.36, y: 17.89))
        star.addLine(to: CGPoint(x: 4.72, y: 23.52))
        star.addLine(to: CGPoint(x: 7.71, y: 14.51))
        star.addLine(to: CGPoint(x: 0, y: 8.98))
        star.addLine(to: CGPoint(x: 9.49, y: 9.04))
        star.addLine(to: CGPoint(x: 12.36, y: 0))
        star.addLine(to: CGPoint(x: 15.24, y: 9.04))
        star.addLine(to: CGPoint(x: 24.73, y: 8.98))
        star.addLine(to: CGPoint(x: 17.02, y: 14.51))
        star.addLine(to: CGPoint(x: 20, y: 23.52))
        star.addLine(to: CGPoint(x: 12.36, y: 17.89))
        star.close()
        star.move(to: CGPoint(x: 12.36, y: 17.89))
        context.saveGState()
        context.translateBy(x: 1.64, y: 2)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        star.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder2OnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 11, y: 21))
        oval.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        oval.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        oval.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        oval.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        oval.close()
        oval.move(to: CGPoint(x: 11, y: 22))
        oval.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        oval.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        oval.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        oval.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        oval.close()
        oval.move(to: CGPoint(x: 11, y: 22))
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        oval.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder3OnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 1, y: 21))
        rectangle.addLine(to: CGPoint(x: 21, y: 21))
        rectangle.addLine(to: CGPoint(x: 21, y: 1))
        rectangle.addLine(to: CGPoint(x: 1, y: 1))
        rectangle.addLine(to: CGPoint(x: 1, y: 21))
        rectangle.close()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 22, y: 0))
        rectangle.addLine(to: CGPoint(x: 22, y: 22))
        rectangle.addLine(to: CGPoint(x: 0, y: 22))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        rectangle.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder4OnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Triangle
        let triangle = UIBezierPath()
        triangle.move(to: CGPoint(x: 1.63, y: 20.5))
        triangle.addLine(to: CGPoint(x: 20.37, y: 20.5))
        triangle.addLine(to: CGPoint(x: 11, y: 2.2))
        triangle.addLine(to: CGPoint(x: 1.63, y: 20.5))
        triangle.close()
        triangle.move(to: CGPoint(x: 11, y: 0))
        triangle.addLine(to: CGPoint(x: 22, y: 21.5))
        triangle.addLine(to: CGPoint(x: 0, y: 21.5))
        triangle.addLine(to: CGPoint(x: 11, y: 0))
        triangle.close()
        triangle.move(to: CGPoint(x: 11, y: 0))
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        triangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder5OnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Polygon
        let polygon = UIBezierPath()
        polygon.move(to: CGPoint(x: 1, y: 6.33))
        polygon.addLine(to: CGPoint(x: 1, y: 16.67))
        polygon.addLine(to: CGPoint(x: 9.96, y: 21.85))
        polygon.addLine(to: CGPoint(x: 18.92, y: 16.67))
        polygon.addLine(to: CGPoint(x: 18.92, y: 6.33))
        polygon.addLine(to: CGPoint(x: 9.96, y: 1.15))
        polygon.addLine(to: CGPoint(x: 1, y: 6.33))
        polygon.close()
        polygon.move(to: CGPoint(x: 9.96, y: 0))
        polygon.addLine(to: CGPoint(x: 19.92, y: 5.75))
        polygon.addLine(to: CGPoint(x: 19.92, y: 17.25))
        polygon.addLine(to: CGPoint(x: 9.96, y: 23))
        polygon.addLine(to: CGPoint(x: 0, y: 17.25))
        polygon.addLine(to: CGPoint(x: 0, y: 5.75))
        polygon.addLine(to: CGPoint(x: 9.96, y: 0))
        polygon.close()
        polygon.move(to: CGPoint(x: 9.96, y: 0))
        context.saveGState()
        context.translateBy(x: 4.04, y: 2.5)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        polygon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder1OnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6.66, y: 20.85))
        star.addLine(to: CGPoint(x: 12.36, y: 16.65))
        star.addLine(to: CGPoint(x: 18.07, y: 20.85))
        star.addLine(to: CGPoint(x: 15.84, y: 14.13))
        star.addLine(to: CGPoint(x: 21.59, y: 10))
        star.addLine(to: CGPoint(x: 14.51, y: 10.05))
        star.addLine(to: CGPoint(x: 12.36, y: 3.3))
        star.addLine(to: CGPoint(x: 10.22, y: 10.05))
        star.addLine(to: CGPoint(x: 3.14, y: 10))
        star.addLine(to: CGPoint(x: 8.89, y: 14.13))
        star.addLine(to: CGPoint(x: 6.66, y: 20.85))
        star.close()
        star.move(to: CGPoint(x: 12.36, y: 17.89))
        star.addLine(to: CGPoint(x: 4.72, y: 23.52))
        star.addLine(to: CGPoint(x: 7.71, y: 14.51))
        star.addLine(to: CGPoint(x: 0, y: 8.98))
        star.addLine(to: CGPoint(x: 9.49, y: 9.04))
        star.addLine(to: CGPoint(x: 12.36, y: 0))
        star.addLine(to: CGPoint(x: 15.24, y: 9.04))
        star.addLine(to: CGPoint(x: 24.73, y: 8.98))
        star.addLine(to: CGPoint(x: 17.02, y: 14.51))
        star.addLine(to: CGPoint(x: 20, y: 23.52))
        star.addLine(to: CGPoint(x: 12.36, y: 17.89))
        star.close()
        star.move(to: CGPoint(x: 12.36, y: 17.89))
        context.saveGState()
        context.translateBy(x: 1.64, y: 2)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        star.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder2OnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 11, y: 21))
        oval.addCurve(to: CGPoint(x: 21, y: 11), controlPoint1: CGPoint(x: 16.52, y: 21), controlPoint2: CGPoint(x: 21, y: 16.52))
        oval.addCurve(to: CGPoint(x: 11, y: 1), controlPoint1: CGPoint(x: 21, y: 5.48), controlPoint2: CGPoint(x: 16.52, y: 1))
        oval.addCurve(to: CGPoint(x: 1, y: 11), controlPoint1: CGPoint(x: 5.48, y: 1), controlPoint2: CGPoint(x: 1, y: 5.48))
        oval.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 1, y: 16.52), controlPoint2: CGPoint(x: 5.48, y: 21))
        oval.close()
        oval.move(to: CGPoint(x: 11, y: 22))
        oval.addCurve(to: CGPoint(x: 0, y: 11), controlPoint1: CGPoint(x: 4.92, y: 22), controlPoint2: CGPoint(x: 0, y: 17.08))
        oval.addCurve(to: CGPoint(x: 11, y: 0), controlPoint1: CGPoint(x: 0, y: 4.92), controlPoint2: CGPoint(x: 4.92, y: 0))
        oval.addCurve(to: CGPoint(x: 22, y: 11), controlPoint1: CGPoint(x: 17.08, y: 0), controlPoint2: CGPoint(x: 22, y: 4.92))
        oval.addCurve(to: CGPoint(x: 11, y: 22), controlPoint1: CGPoint(x: 22, y: 17.08), controlPoint2: CGPoint(x: 17.08, y: 22))
        oval.close()
        oval.move(to: CGPoint(x: 11, y: 22))
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        oval.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder3OnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 1, y: 21))
        rectangle.addLine(to: CGPoint(x: 21, y: 21))
        rectangle.addLine(to: CGPoint(x: 21, y: 1))
        rectangle.addLine(to: CGPoint(x: 1, y: 1))
        rectangle.addLine(to: CGPoint(x: 1, y: 21))
        rectangle.close()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 22, y: 0))
        rectangle.addLine(to: CGPoint(x: 22, y: 22))
        rectangle.addLine(to: CGPoint(x: 0, y: 22))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        rectangle.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder4OnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Triangle
        let triangle = UIBezierPath()
        triangle.move(to: CGPoint(x: 1.63, y: 20.5))
        triangle.addLine(to: CGPoint(x: 20.37, y: 20.5))
        triangle.addLine(to: CGPoint(x: 11, y: 2.2))
        triangle.addLine(to: CGPoint(x: 1.63, y: 20.5))
        triangle.close()
        triangle.move(to: CGPoint(x: 11, y: 0))
        triangle.addLine(to: CGPoint(x: 22, y: 21.5))
        triangle.addLine(to: CGPoint(x: 0, y: 21.5))
        triangle.addLine(to: CGPoint(x: 11, y: 0))
        triangle.close()
        triangle.move(to: CGPoint(x: 11, y: 0))
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        triangle.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphsNavigationOrToolbarPlaceholder5OnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        
        /// Guide / Glyph Sizing - Navigation Bar and Toolbar
        // Warning: New symbols are not supported.
        /// Polygon
        let polygon = UIBezierPath()
        polygon.move(to: CGPoint(x: 1, y: 6.33))
        polygon.addLine(to: CGPoint(x: 1, y: 16.67))
        polygon.addLine(to: CGPoint(x: 9.96, y: 21.85))
        polygon.addLine(to: CGPoint(x: 18.92, y: 16.67))
        polygon.addLine(to: CGPoint(x: 18.92, y: 6.33))
        polygon.addLine(to: CGPoint(x: 9.96, y: 1.15))
        polygon.addLine(to: CGPoint(x: 1, y: 6.33))
        polygon.close()
        polygon.move(to: CGPoint(x: 9.96, y: 0))
        polygon.addLine(to: CGPoint(x: 19.92, y: 5.75))
        polygon.addLine(to: CGPoint(x: 19.92, y: 17.25))
        polygon.addLine(to: CGPoint(x: 9.96, y: 23))
        polygon.addLine(to: CGPoint(x: 0, y: 17.25))
        polygon.addLine(to: CGPoint(x: 0, y: 5.75))
        polygon.addLine(to: CGPoint(x: 9.96, y: 0))
        polygon.close()
        polygon.move(to: CGPoint(x: 9.96, y: 0))
        context.saveGState()
        context.translateBy(x: 4.04, y: 2.5)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        polygon.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawGlyphs_GuidesSizeGuideTabBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 32), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 32)
        
        /// Max Size @2x: 48pt x 32pt
        let maxSize2x48ptX32pt = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 32))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            maxSize2x48ptX32pt.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Max Width or Height @2x: 28pt x 28pt
        let maxWidthOrHeight2x28ptX28pt = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 28, height: 28))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 10, y: 2)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            maxWidthOrHeight2x28ptX28pt.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Target Size @2x: 25pt x 25pt
        let targetSize2x25ptX25pt = UIBezierPath()
        targetSize2x25ptX25pt.move(to: CGPoint.zero)
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 28, y: 0))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 28, y: 28))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 0, y: 28))
        targetSize2x25ptX25pt.addLine(to: CGPoint.zero)
        targetSize2x25ptX25pt.close()
        targetSize2x25ptX25pt.move(to: CGPoint(x: 1.5, y: 1.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 1.5, y: 26.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 26.5, y: 26.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 26.5, y: 1.5))
        targetSize2x25ptX25pt.addLine(to: CGPoint(x: 1.5, y: 1.5))
        targetSize2x25ptX25pt.close()
        targetSize2x25ptX25pt.move(to: CGPoint(x: 1.5, y: 1.5))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 10, y: 2)
            targetSize2x25ptX25pt.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            targetSize2x25ptX25pt.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl2ButtonsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 327.25, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 327.25, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 172, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl3ButtonsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 328.75, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 328.75, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 3
        // Warning: New symbols are not supported.
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 114, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        /// Separator
        let separator2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 228, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator2.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl4ButtonsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 328.75, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 328.75, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 4
        // Warning: New symbols are not supported.
        
        /// Tab 3
        // Warning: New symbols are not supported.
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 85.5, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        /// Separator
        let separator2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 171, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator2.fill()
        context.restoreGState()
        
        /// Separator
        let separator3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 256.5, y: 0)
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator3.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl2ButtonsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 328.75, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 328.75, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 172, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl3ButtonsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 328.75, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 328.75, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 3
        // Warning: New symbols are not supported.
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 114, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        /// Separator
        let separator2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 228, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator2.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl4ButtonsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 28)
        
        /// Base
        let base2 = UIBezierPath()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        base2.addLine(to: CGPoint(x: 328.75, y: 0))
        base2.addLine(to: CGPoint(x: 337.44, y: 0))
        base2.addCurve(to: CGPoint(x: 338.08, y: 0), controlPoint1: CGPoint(x: 337.65, y: 0), controlPoint2: CGPoint(x: 337.86, y: 0))
        base2.addCurve(to: CGPoint(x: 338.61, y: 0.01), controlPoint1: CGPoint(x: 338.25, y: 0), controlPoint2: CGPoint(x: 338.43, y: 0))
        base2.addCurve(to: CGPoint(x: 339.78, y: 0.11), controlPoint1: CGPoint(x: 339, y: 0.02), controlPoint2: CGPoint(x: 339.39, y: 0.04))
        base2.addCurve(to: CGPoint(x: 340.89, y: 0.48), controlPoint1: CGPoint(x: 340.17, y: 0.18), controlPoint2: CGPoint(x: 340.53, y: 0.3))
        base2.addCurve(to: CGPoint(x: 341.84, y: 1.16), controlPoint1: CGPoint(x: 341.24, y: 0.66), controlPoint2: CGPoint(x: 341.56, y: 0.89))
        base2.addCurve(to: CGPoint(x: 342.52, y: 2.11), controlPoint1: CGPoint(x: 342.11, y: 1.44), controlPoint2: CGPoint(x: 342.34, y: 1.76))
        base2.addCurve(to: CGPoint(x: 342.89, y: 3.22), controlPoint1: CGPoint(x: 342.7, y: 2.46), controlPoint2: CGPoint(x: 342.82, y: 2.83))
        base2.addCurve(to: CGPoint(x: 342.99, y: 4.39), controlPoint1: CGPoint(x: 342.96, y: 3.61), controlPoint2: CGPoint(x: 342.98, y: 4))
        base2.addCurve(to: CGPoint(x: 343, y: 4.92), controlPoint1: CGPoint(x: 343, y: 4.57), controlPoint2: CGPoint(x: 343, y: 4.75))
        base2.addCurve(to: CGPoint(x: 343, y: 5.56), controlPoint1: CGPoint(x: 343, y: 5.14), controlPoint2: CGPoint(x: 343, y: 5.35))
        base2.addLine(to: CGPoint(x: 343, y: 8))
        base2.addLine(to: CGPoint(x: 343, y: 6.78))
        base2.addLine(to: CGPoint(x: 343, y: 21.22))
        base2.addLine(to: CGPoint(x: 343, y: 20))
        base2.addLine(to: CGPoint(x: 343, y: 22.44))
        base2.addCurve(to: CGPoint(x: 343, y: 23.08), controlPoint1: CGPoint(x: 343, y: 22.65), controlPoint2: CGPoint(x: 343, y: 22.86))
        base2.addCurve(to: CGPoint(x: 342.99, y: 23.61), controlPoint1: CGPoint(x: 343, y: 23.25), controlPoint2: CGPoint(x: 343, y: 23.43))
        base2.addCurve(to: CGPoint(x: 342.89, y: 24.78), controlPoint1: CGPoint(x: 342.98, y: 24), controlPoint2: CGPoint(x: 342.96, y: 24.39))
        base2.addCurve(to: CGPoint(x: 342.52, y: 25.89), controlPoint1: CGPoint(x: 342.82, y: 25.17), controlPoint2: CGPoint(x: 342.7, y: 25.54))
        base2.addCurve(to: CGPoint(x: 341.84, y: 26.84), controlPoint1: CGPoint(x: 342.34, y: 26.24), controlPoint2: CGPoint(x: 342.11, y: 26.56))
        base2.addCurve(to: CGPoint(x: 340.89, y: 27.52), controlPoint1: CGPoint(x: 341.56, y: 27.11), controlPoint2: CGPoint(x: 341.24, y: 27.34))
        base2.addCurve(to: CGPoint(x: 339.78, y: 27.89), controlPoint1: CGPoint(x: 340.53, y: 27.7), controlPoint2: CGPoint(x: 340.17, y: 27.82))
        base2.addCurve(to: CGPoint(x: 338.61, y: 27.99), controlPoint1: CGPoint(x: 339.39, y: 27.96), controlPoint2: CGPoint(x: 339, y: 27.98))
        base2.addCurve(to: CGPoint(x: 338.08, y: 28), controlPoint1: CGPoint(x: 338.43, y: 28), controlPoint2: CGPoint(x: 338.25, y: 28))
        base2.addCurve(to: CGPoint(x: 337.44, y: 28), controlPoint1: CGPoint(x: 337.86, y: 28), controlPoint2: CGPoint(x: 337.65, y: 28))
        base2.addLine(to: CGPoint(x: 335, y: 28))
        base2.addLine(to: CGPoint(x: 336.22, y: 28))
        base2.addLine(to: CGPoint(x: 328.75, y: 28))
        base2.addLine(to: CGPoint(x: 15.5, y: 28))
        base2.addLine(to: CGPoint(x: 6.78, y: 28))
        base2.addLine(to: CGPoint(x: 8, y: 28))
        base2.addLine(to: CGPoint(x: 5.56, y: 28))
        base2.addCurve(to: CGPoint(x: 4.92, y: 28), controlPoint1: CGPoint(x: 5.35, y: 28), controlPoint2: CGPoint(x: 5.14, y: 28))
        base2.addCurve(to: CGPoint(x: 4.39, y: 27.99), controlPoint1: CGPoint(x: 4.75, y: 28), controlPoint2: CGPoint(x: 4.57, y: 28))
        base2.addCurve(to: CGPoint(x: 3.22, y: 27.89), controlPoint1: CGPoint(x: 4, y: 27.98), controlPoint2: CGPoint(x: 3.61, y: 27.96))
        base2.addCurve(to: CGPoint(x: 2.11, y: 27.52), controlPoint1: CGPoint(x: 2.83, y: 27.82), controlPoint2: CGPoint(x: 2.47, y: 27.7))
        base2.addCurve(to: CGPoint(x: 1.16, y: 26.84), controlPoint1: CGPoint(x: 1.76, y: 27.34), controlPoint2: CGPoint(x: 1.44, y: 27.11))
        base2.addCurve(to: CGPoint(x: 0.48, y: 25.89), controlPoint1: CGPoint(x: 0.89, y: 26.56), controlPoint2: CGPoint(x: 0.66, y: 26.24))
        base2.addCurve(to: CGPoint(x: 0.11, y: 24.78), controlPoint1: CGPoint(x: 0.3, y: 25.54), controlPoint2: CGPoint(x: 0.18, y: 25.17))
        base2.addCurve(to: CGPoint(x: 0.01, y: 23.61), controlPoint1: CGPoint(x: 0.04, y: 24.39), controlPoint2: CGPoint(x: 0.02, y: 24))
        base2.addCurve(to: CGPoint(x: 0, y: 23.08), controlPoint1: CGPoint(x: 0, y: 23.43), controlPoint2: CGPoint(x: 0, y: 23.25))
        base2.addCurve(to: CGPoint(x: 0, y: 22.44), controlPoint1: CGPoint(x: 0, y: 22.86), controlPoint2: CGPoint(x: 0, y: 22.65))
        base2.addLine(to: CGPoint(x: 0, y: 20))
        base2.addLine(to: CGPoint(x: 0, y: 21.22))
        base2.addLine(to: CGPoint(x: 0, y: 6.78))
        base2.addLine(to: CGPoint(x: 0, y: 8))
        base2.addLine(to: CGPoint(x: 0, y: 5.56))
        base2.addCurve(to: CGPoint(x: 0, y: 4.92), controlPoint1: CGPoint(x: 0, y: 5.35), controlPoint2: CGPoint(x: 0, y: 5.14))
        base2.addCurve(to: CGPoint(x: 0.01, y: 4.39), controlPoint1: CGPoint(x: 0, y: 4.75), controlPoint2: CGPoint(x: 0, y: 4.57))
        base2.addCurve(to: CGPoint(x: 0.11, y: 3.22), controlPoint1: CGPoint(x: 0.02, y: 4), controlPoint2: CGPoint(x: 0.04, y: 3.61))
        base2.addCurve(to: CGPoint(x: 0.48, y: 2.11), controlPoint1: CGPoint(x: 0.18, y: 2.83), controlPoint2: CGPoint(x: 0.3, y: 2.46))
        base2.addCurve(to: CGPoint(x: 1.16, y: 1.16), controlPoint1: CGPoint(x: 0.66, y: 1.76), controlPoint2: CGPoint(x: 0.89, y: 1.44))
        base2.addCurve(to: CGPoint(x: 2.11, y: 0.48), controlPoint1: CGPoint(x: 1.44, y: 0.89), controlPoint2: CGPoint(x: 1.76, y: 0.66))
        base2.addCurve(to: CGPoint(x: 3.22, y: 0.11), controlPoint1: CGPoint(x: 2.47, y: 0.3), controlPoint2: CGPoint(x: 2.83, y: 0.18))
        base2.addCurve(to: CGPoint(x: 4.39, y: 0.01), controlPoint1: CGPoint(x: 3.61, y: 0.04), controlPoint2: CGPoint(x: 4, y: 0.02))
        base2.addCurve(to: CGPoint(x: 4.92, y: 0), controlPoint1: CGPoint(x: 4.57, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0))
        base2.addCurve(to: CGPoint(x: 5.56, y: 0), controlPoint1: CGPoint(x: 5.14, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0))
        base2.addLine(to: CGPoint(x: 15.5, y: 0))
        base2.close()
        base2.move(to: CGPoint(x: 15.5, y: 0))
        context.saveGState()
        context.saveGState()
        base2.lineWidth = 2
        context.beginPath()
        context.addPath(base2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setStroke()
        base2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Base (Outline Mask)
        context.saveGState()
        base2.addClip()
        
        /// Tab 4
        // Warning: New symbols are not supported.
        
        /// Tab 3
        // Warning: New symbols are not supported.
        
        /// Tab 2
        // Warning: New symbols are not supported.
        
        /// Tab 1
        // Warning: New symbols are not supported.
        
        /// Separator
        let separator = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 85.5, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator.fill()
        context.restoreGState()
        
        /// Separator
        let separator2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 171, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator2.fill()
        context.restoreGState()
        
        /// Separator
        let separator3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1, height: 28))
        context.saveGState()
        context.translateBy(x: 256.5, y: 0)
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        separator3.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Base (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_ResourcesButtonActiveOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 50, height: 28))
        context.saveGState()
        UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Tab Label
        let tabLabel = NSMutableAttributedString(string: "Label")
        tabLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: tabLabel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            tabLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabLabel.length))
        }
        context.saveGState()
        tabLabel.draw(at: CGPoint(x: 9, y: 5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_ResourcesButtonOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 28)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 50, height: 28))
        /// Tab Label
        let tabLabel = NSMutableAttributedString(string: "Label")
        tabLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: tabLabel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            tabLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabLabel.length))
        }
        context.saveGState()
        tabLabel.draw(at: CGPoint(x: 9, y: 5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_ResourcesButtonActiveOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 50, height: 28))
        context.saveGState()
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        /// Tab Label
        let tabLabel = NSMutableAttributedString(string: "Label")
        tabLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: tabLabel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            tabLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabLabel.length))
        }
        context.saveGState()
        tabLabel.draw(at: CGPoint(x: 9, y: 5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsSegmentedControl_ResourcesButtonOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 28)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 50, height: 28))
        /// Tab Label
        let tabLabel = NSMutableAttributedString(string: "Label")
        tabLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 13)!, range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: tabLabel.length))
        tabLabel.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: tabLabel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 18
            paragraphStyle.minimumLineHeight = 18
            tabLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tabLabel.length))
        }
        context.saveGState()
        tabLabel.draw(at: CGPoint(x: 9, y: 5))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots2DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 89, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots3DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 79.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots4DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 71.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots5DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 63.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots6DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 55.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            /// Dot 6
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots7DotsOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 47.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            /// Dot 6
            // Warning: New symbols are not supported.
            
            /// Dot 7
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots_ResourcesPageDotOnLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 7, height: 7), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 7, height: 7), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 7, y: resizedFrame.height / 7)
        
        /// Controls / Pagination Dots / _Resources / Page Dot - On Dark
        let controlsPaginationDots_ResourcesPageDotOnDark2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 7, height: 7))
        context.saveGState()
        UIColor.black.setFill()
        controlsPaginationDots_ResourcesPageDotOnDark2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots2DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 89, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots3DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 80.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots4DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 72.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots5DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 64.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots6DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 56.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            /// Dot 6
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots7DotsOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 20)
        
        /// Center
        do {
            context.saveGState()
            context.translateBy(x: 48.5, y: 7)
            
            /// Dot 1
            // Warning: New symbols are not supported.
            
            /// Dot 2
            // Warning: New symbols are not supported.
            
            /// Dot 3
            // Warning: New symbols are not supported.
            
            /// Dot 4
            // Warning: New symbols are not supported.
            
            /// Dot 5
            // Warning: New symbols are not supported.
            
            /// Dot 6
            // Warning: New symbols are not supported.
            
            /// Dot 7
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawControlsPaginationDots_ResourcesPageDotOnDark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 7, height: 7), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 7, height: 7), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 7, y: resizedFrame.height / 7)
        
        /// Controls / Pagination Dots / _Resources / Page Dot - On Dark
        let controlsPaginationDots_ResourcesPageDotOnDark2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 7, height: 7))
        context.saveGState()
        UIColor.white.setFill()
        controlsPaginationDots_ResourcesPageDotOnDark2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsText_ResourcesCursorOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 2, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 2, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 2, y: resizedFrame.height / 16)
        
        /// cursor
        let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 16), cornerRadius: 2)
        context.saveGState()
        UIColor(hue: 0.097, saturation: 1, brightness: 1, alpha: 1).setFill()
        cursor.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawControlsText_ResourcesCursorBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 2, height: 16), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 2, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 2, y: resizedFrame.height / 16)
        
        /// cursor
        let cursor = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 16), cornerRadius: 2)
        context.saveGState()
        UIColor(hue: 0.628, saturation: 0.727, brightness: 0.949, alpha: 1).setFill()
        cursor.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetActionSheet(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Views/Action Sheet/Base Sheet
        // Warning: New symbols are not supported.
        /// Button 4
        // Warning: New symbols are not supported.
        /// Button 3
        // Warning: New symbols are not supported.
        /// Button 2
        // Warning: New symbols are not supported.
        /// Button 1
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetActionSheetWithDescription(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Views/Action Sheet/Base Sheet
        // Warning: New symbols are not supported.
        /// Button 3
        // Warning: New symbols are not supported.
        /// Button 2
        // Warning: New symbols are not supported.
        /// Button 1
        // Warning: New symbols are not supported.
        /// Description
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsActionSheetActionSheetLongWithDescription(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Views/Action Sheet/Base Sheet
        // Warning: New symbols are not supported.
        /// Button 9
        // Warning: New symbols are not supported.
        /// Button 8
        // Warning: New symbols are not supported.
        /// Button 7
        // Warning: New symbols are not supported.
        /// Button 6
        // Warning: New symbols are not supported.
        /// Button 5
        // Warning: New symbols are not supported.
        /// Button 4
        // Warning: New symbols are not supported.
        /// Button 3
        // Warning: New symbols are not supported.
        /// Button 2
        // Warning: New symbols are not supported.
        /// Button 1
        // Warning: New symbols are not supported.
        /// Description
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawViewsActivityView_ResourcesActionIconShape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)
        
        /// app icon
        let appIcon = UIBezierPath()
        appIcon.move(to: CGPoint(x: 60, y: 18.77))
        appIcon.addCurve(to: CGPoint(x: 60, y: 16.62), controlPoint1: CGPoint(x: 60, y: 18.05), controlPoint2: CGPoint(x: 60, y: 17.34))
        appIcon.addCurve(to: CGPoint(x: 59.97, y: 14.81), controlPoint1: CGPoint(x: 59.99, y: 16.02), controlPoint2: CGPoint(x: 59.99, y: 15.41))
        appIcon.addCurve(to: CGPoint(x: 59.62, y: 10.87), controlPoint1: CGPoint(x: 59.93, y: 13.49), controlPoint2: CGPoint(x: 59.86, y: 12.17))
        appIcon.addCurve(to: CGPoint(x: 58.39, y: 7.12), controlPoint1: CGPoint(x: 59.39, y: 9.55), controlPoint2: CGPoint(x: 59, y: 8.32))
        appIcon.addCurve(to: CGPoint(x: 56.07, y: 3.93), controlPoint1: CGPoint(x: 57.79, y: 5.94), controlPoint2: CGPoint(x: 57, y: 4.87))
        appIcon.addCurve(to: CGPoint(x: 52.88, y: 1.61), controlPoint1: CGPoint(x: 55.14, y: 3), controlPoint2: CGPoint(x: 54.06, y: 2.21))
        appIcon.addCurve(to: CGPoint(x: 49.13, y: 0.38), controlPoint1: CGPoint(x: 51.68, y: 1), controlPoint2: CGPoint(x: 50.45, y: 0.62))
        appIcon.addCurve(to: CGPoint(x: 45.19, y: 0.03), controlPoint1: CGPoint(x: 47.83, y: 0.14), controlPoint2: CGPoint(x: 46.51, y: 0.07))
        appIcon.addCurve(to: CGPoint(x: 43.38, y: 0), controlPoint1: CGPoint(x: 44.59, y: 0.02), controlPoint2: CGPoint(x: 43.99, y: 0.01))
        appIcon.addCurve(to: CGPoint(x: 41.23, y: 0), controlPoint1: CGPoint(x: 42.67, y: 0), controlPoint2: CGPoint(x: 41.95, y: 0))
        appIcon.addLine(to: CGPoint(x: 18.77, y: 0))
        appIcon.addCurve(to: CGPoint(x: 16.62, y: 0), controlPoint1: CGPoint(x: 18.05, y: 0), controlPoint2: CGPoint(x: 17.34, y: 0))
        appIcon.addCurve(to: CGPoint(x: 14.81, y: 0.03), controlPoint1: CGPoint(x: 16.02, y: 0.01), controlPoint2: CGPoint(x: 15.41, y: 0.02))
        appIcon.addCurve(to: CGPoint(x: 10.87, y: 0.38), controlPoint1: CGPoint(x: 13.49, y: 0.07), controlPoint2: CGPoint(x: 12.17, y: 0.14))
        appIcon.addCurve(to: CGPoint(x: 7.12, y: 1.61), controlPoint1: CGPoint(x: 9.55, y: 0.62), controlPoint2: CGPoint(x: 8.32, y: 1))
        appIcon.addCurve(to: CGPoint(x: 3.93, y: 3.93), controlPoint1: CGPoint(x: 5.94, y: 2.21), controlPoint2: CGPoint(x: 4.87, y: 3))
        appIcon.addCurve(to: CGPoint(x: 1.61, y: 7.12), controlPoint1: CGPoint(x: 3, y: 4.87), controlPoint2: CGPoint(x: 2.21, y: 5.94))
        appIcon.addCurve(to: CGPoint(x: 0.38, y: 10.87), controlPoint1: CGPoint(x: 1, y: 8.32), controlPoint2: CGPoint(x: 0.62, y: 9.55))
        appIcon.addCurve(to: CGPoint(x: 0.03, y: 14.81), controlPoint1: CGPoint(x: 0.14, y: 12.17), controlPoint2: CGPoint(x: 0.07, y: 13.49))
        appIcon.addCurve(to: CGPoint(x: 0.01, y: 16.62), controlPoint1: CGPoint(x: 0.02, y: 15.41), controlPoint2: CGPoint(x: 0.01, y: 16.02))
        appIcon.addCurve(to: CGPoint(x: 0, y: 18.77), controlPoint1: CGPoint(x: 0, y: 17.34), controlPoint2: CGPoint(x: 0, y: 18.05))
        appIcon.addLine(to: CGPoint(x: 0, y: 41.23))
        appIcon.addCurve(to: CGPoint(x: 0.01, y: 43.38), controlPoint1: CGPoint(x: 0, y: 41.95), controlPoint2: CGPoint(x: 0, y: 42.66))
        appIcon.addCurve(to: CGPoint(x: 0.03, y: 45.19), controlPoint1: CGPoint(x: 0.01, y: 43.98), controlPoint2: CGPoint(x: 0.02, y: 44.59))
        appIcon.addCurve(to: CGPoint(x: 0.38, y: 49.13), controlPoint1: CGPoint(x: 0.07, y: 46.51), controlPoint2: CGPoint(x: 0.14, y: 47.83))
        appIcon.addCurve(to: CGPoint(x: 1.61, y: 52.88), controlPoint1: CGPoint(x: 0.62, y: 50.45), controlPoint2: CGPoint(x: 1, y: 51.68))
        appIcon.addCurve(to: CGPoint(x: 3.93, y: 56.07), controlPoint1: CGPoint(x: 2.21, y: 54.06), controlPoint2: CGPoint(x: 3, y: 55.14))
        appIcon.addCurve(to: CGPoint(x: 7.12, y: 58.39), controlPoint1: CGPoint(x: 4.87, y: 57), controlPoint2: CGPoint(x: 5.94, y: 57.79))
        appIcon.addCurve(to: CGPoint(x: 10.87, y: 59.62), controlPoint1: CGPoint(x: 8.32, y: 59), controlPoint2: CGPoint(x: 9.55, y: 59.39))
        appIcon.addCurve(to: CGPoint(x: 14.81, y: 59.97), controlPoint1: CGPoint(x: 12.17, y: 59.86), controlPoint2: CGPoint(x: 13.49, y: 59.93))
        appIcon.addCurve(to: CGPoint(x: 16.62, y: 60), controlPoint1: CGPoint(x: 15.41, y: 59.99), controlPoint2: CGPoint(x: 16.02, y: 59.99))
        appIcon.addCurve(to: CGPoint(x: 18.77, y: 60), controlPoint1: CGPoint(x: 17.34, y: 60), controlPoint2: CGPoint(x: 18.05, y: 60))
        appIcon.addLine(to: CGPoint(x: 41.23, y: 60))
        appIcon.addCurve(to: CGPoint(x: 43.38, y: 60), controlPoint1: CGPoint(x: 41.95, y: 60), controlPoint2: CGPoint(x: 42.67, y: 60))
        appIcon.addCurve(to: CGPoint(x: 45.19, y: 59.97), controlPoint1: CGPoint(x: 43.99, y: 59.99), controlPoint2: CGPoint(x: 44.59, y: 59.99))
        appIcon.addCurve(to: CGPoint(x: 49.13, y: 59.62), controlPoint1: CGPoint(x: 46.51, y: 59.93), controlPoint2: CGPoint(x: 47.83, y: 59.86))
        appIcon.addCurve(to: CGPoint(x: 52.88, y: 58.39), controlPoint1: CGPoint(x: 50.45, y: 59.39), controlPoint2: CGPoint(x: 51.68, y: 59))
        appIcon.addCurve(to: CGPoint(x: 56.07, y: 56.07), controlPoint1: CGPoint(x: 54.06, y: 57.79), controlPoint2: CGPoint(x: 55.14, y: 57))
        appIcon.addCurve(to: CGPoint(x: 58.39, y: 52.88), controlPoint1: CGPoint(x: 57, y: 55.14), controlPoint2: CGPoint(x: 57.79, y: 54.06))
        appIcon.addCurve(to: CGPoint(x: 59.62, y: 49.13), controlPoint1: CGPoint(x: 59, y: 51.68), controlPoint2: CGPoint(x: 59.39, y: 50.45))
        appIcon.addCurve(to: CGPoint(x: 59.97, y: 45.19), controlPoint1: CGPoint(x: 59.86, y: 47.83), controlPoint2: CGPoint(x: 59.93, y: 46.51))
        appIcon.addCurve(to: CGPoint(x: 60, y: 43.38), controlPoint1: CGPoint(x: 59.99, y: 44.59), controlPoint2: CGPoint(x: 59.99, y: 43.98))
        appIcon.addCurve(to: CGPoint(x: 60, y: 41.23), controlPoint1: CGPoint(x: 60, y: 42.66), controlPoint2: CGPoint(x: 60, y: 41.95))
        appIcon.addLine(to: CGPoint(x: 60, y: 18.77))
        appIcon.close()
        appIcon.move(to: CGPoint(x: 60, y: 18.77))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            appIcon.usesEvenOddFillRule = true
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            appIcon.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemLightKeyboardAlphabetic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.611, saturation: 0.041, brightness: 0.859, alpha: 0.9).setFill()
        background.fill()
        context.restoreGState()
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 170)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 278, y: 0)
                
                /// keycap
                let keycap = UIBezierPath()
                keycap.move(to: CGPoint(x: 86.95, y: 36.52))
                keycap.addCurve(to: CGPoint(x: 86.83, y: 37.97), controlPoint1: CGPoint(x: 86.94, y: 37), controlPoint2: CGPoint(x: 86.91, y: 37.49))
                keycap.addCurve(to: CGPoint(x: 86.38, y: 39.36), controlPoint1: CGPoint(x: 86.74, y: 38.46), controlPoint2: CGPoint(x: 86.6, y: 38.92))
                keycap.addCurve(to: CGPoint(x: 85.53, y: 40.54), controlPoint1: CGPoint(x: 86.16, y: 39.8), controlPoint2: CGPoint(x: 85.87, y: 40.2))
                keycap.addCurve(to: CGPoint(x: 84.36, y: 41.4), controlPoint1: CGPoint(x: 85.19, y: 40.89), controlPoint2: CGPoint(x: 84.79, y: 41.18))
                keycap.addCurve(to: CGPoint(x: 82.99, y: 41.86), controlPoint1: CGPoint(x: 83.92, y: 41.63), controlPoint2: CGPoint(x: 83.47, y: 41.77))
                keycap.addCurve(to: CGPoint(x: 81.55, y: 41.99), controlPoint1: CGPoint(x: 82.51, y: 41.95), controlPoint2: CGPoint(x: 82.03, y: 41.98))
                keycap.addCurve(to: CGPoint(x: 80.88, y: 42), controlPoint1: CGPoint(x: 81.32, y: 41.99), controlPoint2: CGPoint(x: 81.1, y: 42))
                keycap.addCurve(to: CGPoint(x: 80.1, y: 42), controlPoint1: CGPoint(x: 80.62, y: 42), controlPoint2: CGPoint(x: 80.36, y: 42))
                keycap.addLine(to: CGPoint(x: 9.88, y: 42.06))
                keycap.addLine(to: CGPoint(x: 6.87, y: 42.06))
                keycap.addCurve(to: CGPoint(x: 6.08, y: 42.06), controlPoint1: CGPoint(x: 6.61, y: 42.06), controlPoint2: CGPoint(x: 6.35, y: 42.06))
                keycap.addCurve(to: CGPoint(x: 5.42, y: 42.05), controlPoint1: CGPoint(x: 5.86, y: 42.06), controlPoint2: CGPoint(x: 5.64, y: 42.05))
                keycap.addCurve(to: CGPoint(x: 3.98, y: 41.92), controlPoint1: CGPoint(x: 4.94, y: 42.03), controlPoint2: CGPoint(x: 4.45, y: 42.01))
                keycap.addCurve(to: CGPoint(x: 2.61, y: 41.46), controlPoint1: CGPoint(x: 3.49, y: 41.83), controlPoint2: CGPoint(x: 3.05, y: 41.69))
                keycap.addCurve(to: CGPoint(x: 1.44, y: 40.6), controlPoint1: CGPoint(x: 2.18, y: 41.24), controlPoint2: CGPoint(x: 1.78, y: 40.95))
                keycap.addCurve(to: CGPoint(x: 0.59, y: 39.42), controlPoint1: CGPoint(x: 1.1, y: 40.26), controlPoint2: CGPoint(x: 0.81, y: 39.86))
                keycap.addCurve(to: CGPoint(x: 0.14, y: 38.03), controlPoint1: CGPoint(x: 0.37, y: 38.98), controlPoint2: CGPoint(x: 0.23, y: 38.52))
                keycap.addCurve(to: CGPoint(x: 0.01, y: 36.57), controlPoint1: CGPoint(x: 0.05, y: 37.55), controlPoint2: CGPoint(x: 0.02, y: 37.06))
                keycap.addCurve(to: CGPoint(x: 0, y: 35.9), controlPoint1: CGPoint(x: 0.01, y: 36.35), controlPoint2: CGPoint(x: 0, y: 36.13))
                keycap.addCurve(to: CGPoint(x: 0, y: 35.11), controlPoint1: CGPoint(x: 0, y: 35.64), controlPoint2: CGPoint(x: 0, y: 35.37))
                keycap.addLine(to: CGPoint(x: 0, y: 32.06))
                keycap.addLine(to: CGPoint(x: 0, y: 10.06))
                keycap.addLine(to: CGPoint(x: 0, y: 7.01))
                keycap.addCurve(to: CGPoint(x: 0, y: 6.21), controlPoint1: CGPoint(x: 0, y: 6.74), controlPoint2: CGPoint(x: 0, y: 6.48))
                keycap.addCurve(to: CGPoint(x: 0.01, y: 5.54), controlPoint1: CGPoint(x: 0, y: 5.99), controlPoint2: CGPoint(x: 0.01, y: 5.77))
                keycap.addCurve(to: CGPoint(x: 0.14, y: 4.08), controlPoint1: CGPoint(x: 0.02, y: 5.06), controlPoint2: CGPoint(x: 0.05, y: 4.57))
                keycap.addCurve(to: CGPoint(x: 0.59, y: 2.7), controlPoint1: CGPoint(x: 0.23, y: 3.59), controlPoint2: CGPoint(x: 0.37, y: 3.14))
                keycap.addCurve(to: CGPoint(x: 1.44, y: 1.51), controlPoint1: CGPoint(x: 0.81, y: 2.26), controlPoint2: CGPoint(x: 1.1, y: 1.86))
                keycap.addCurve(to: CGPoint(x: 2.61, y: 0.66), controlPoint1: CGPoint(x: 1.78, y: 1.17), controlPoint2: CGPoint(x: 2.18, y: 0.88))
                keycap.addCurve(to: CGPoint(x: 3.98, y: 0.2), controlPoint1: CGPoint(x: 3.05, y: 0.43), controlPoint2: CGPoint(x: 3.49, y: 0.29))
                keycap.addCurve(to: CGPoint(x: 5.42, y: 0.07), controlPoint1: CGPoint(x: 4.45, y: 0.11), controlPoint2: CGPoint(x: 4.94, y: 0.08))
                keycap.addCurve(to: CGPoint(x: 6.08, y: 0.06), controlPoint1: CGPoint(x: 5.64, y: 0.06), controlPoint2: CGPoint(x: 5.86, y: 0.06))
                keycap.addCurve(to: CGPoint(x: 6.87, y: 0.06), controlPoint1: CGPoint(x: 6.35, y: 0.06), controlPoint2: CGPoint(x: 6.61, y: 0.06))
                keycap.addLine(to: CGPoint(x: 9.88, y: 0.06))
                keycap.addLine(to: CGPoint(x: 79.88, y: 0))
                keycap.addLine(to: CGPoint(x: 77.08, y: 0))
                keycap.addLine(to: CGPoint(x: 80.1, y: 0))
                keycap.addCurve(to: CGPoint(x: 80.88, y: 0), controlPoint1: CGPoint(x: 80.36, y: 0), controlPoint2: CGPoint(x: 80.62, y: 0))
                keycap.addCurve(to: CGPoint(x: 81.55, y: 0.01), controlPoint1: CGPoint(x: 81.1, y: 0), controlPoint2: CGPoint(x: 81.32, y: 0.01))
                keycap.addCurve(to: CGPoint(x: 82.99, y: 0.14), controlPoint1: CGPoint(x: 82.03, y: 0.02), controlPoint2: CGPoint(x: 82.51, y: 0.05))
                keycap.addCurve(to: CGPoint(x: 84.36, y: 0.6), controlPoint1: CGPoint(x: 83.47, y: 0.23), controlPoint2: CGPoint(x: 83.92, y: 0.37))
                keycap.addCurve(to: CGPoint(x: 85.53, y: 1.46), controlPoint1: CGPoint(x: 84.79, y: 0.82), controlPoint2: CGPoint(x: 85.19, y: 1.11))
                keycap.addCurve(to: CGPoint(x: 86.38, y: 2.64), controlPoint1: CGPoint(x: 85.87, y: 1.8), controlPoint2: CGPoint(x: 86.16, y: 2.2))
                keycap.addCurve(to: CGPoint(x: 86.83, y: 4.03), controlPoint1: CGPoint(x: 86.6, y: 3.08), controlPoint2: CGPoint(x: 86.74, y: 3.54))
                keycap.addCurve(to: CGPoint(x: 86.95, y: 5.48), controlPoint1: CGPoint(x: 86.91, y: 4.51), controlPoint2: CGPoint(x: 86.94, y: 5))
                keycap.addCurve(to: CGPoint(x: 86.96, y: 6.16), controlPoint1: CGPoint(x: 86.96, y: 5.71), controlPoint2: CGPoint(x: 86.96, y: 5.93))
                keycap.addCurve(to: CGPoint(x: 86.97, y: 6.95), controlPoint1: CGPoint(x: 86.97, y: 6.42), controlPoint2: CGPoint(x: 86.97, y: 6.69))
                keycap.addLine(to: CGPoint(x: 86.97, y: 10))
                keycap.addLine(to: CGPoint(x: 86.97, y: 32))
                keycap.addLine(to: CGPoint(x: 86.97, y: 35.05))
                keycap.addCurve(to: CGPoint(x: 86.96, y: 35.84), controlPoint1: CGPoint(x: 86.97, y: 35.31), controlPoint2: CGPoint(x: 86.97, y: 35.58))
                keycap.addCurve(to: CGPoint(x: 86.95, y: 36.52), controlPoint1: CGPoint(x: 86.96, y: 36.07), controlPoint2: CGPoint(x: 86.96, y: 36.29))
                keycap.close()
                keycap.move(to: CGPoint(x: 86.95, y: 36.52))
                context.saveGState()
                context.translateBy(x: 0.03, y: 0)
                keycap.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap.cgPath)
                context.addRect(keycap.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -87.97, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 87.97, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap.fill()
                context.restoreGState()
                keycap.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.2).setFill()
                keycap.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel = NSMutableAttributedString(string: "return")
                keyLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel.length))
                keyLabel.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel.length))
                }
                context.saveGState()
                keyLabel.draw(in: CGRect(x: 0, y: 11, width: 87, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// spacebar
            do {
                context.saveGState()
                context.translateBy(x: 130, y: 0)
                
                /// keycap
                let keycap2 = UIBezierPath()
                keycap2.move(to: CGPoint(x: 142, y: 36.52))
                keycap2.addCurve(to: CGPoint(x: 141.87, y: 37.97), controlPoint1: CGPoint(x: 141.98, y: 37), controlPoint2: CGPoint(x: 141.96, y: 37.49))
                keycap2.addCurve(to: CGPoint(x: 141.42, y: 39.36), controlPoint1: CGPoint(x: 141.78, y: 38.46), controlPoint2: CGPoint(x: 141.64, y: 38.92))
                keycap2.addCurve(to: CGPoint(x: 140.58, y: 40.54), controlPoint1: CGPoint(x: 141.2, y: 39.8), controlPoint2: CGPoint(x: 140.92, y: 40.2))
                keycap2.addCurve(to: CGPoint(x: 139.41, y: 41.4), controlPoint1: CGPoint(x: 140.23, y: 40.89), controlPoint2: CGPoint(x: 139.84, y: 41.18))
                keycap2.addCurve(to: CGPoint(x: 138.05, y: 41.86), controlPoint1: CGPoint(x: 138.97, y: 41.63), controlPoint2: CGPoint(x: 138.53, y: 41.77))
                keycap2.addCurve(to: CGPoint(x: 136.61, y: 41.99), controlPoint1: CGPoint(x: 137.57, y: 41.95), controlPoint2: CGPoint(x: 137.09, y: 41.98))
                keycap2.addCurve(to: CGPoint(x: 135.95, y: 42), controlPoint1: CGPoint(x: 136.39, y: 41.99), controlPoint2: CGPoint(x: 136.17, y: 42))
                keycap2.addCurve(to: CGPoint(x: 135.17, y: 42), controlPoint1: CGPoint(x: 135.69, y: 42), controlPoint2: CGPoint(x: 135.43, y: 42))
                keycap2.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap2.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap2.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap2.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap2.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap2.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap2.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap2.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap2.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap2.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap2.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap2.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap2.addLine(to: CGPoint(x: 0, y: 32))
                keycap2.addLine(to: CGPoint(x: 0, y: 10))
                keycap2.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap2.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap2.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap2.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap2.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap2.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap2.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap2.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap2.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap2.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap2.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap2.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap2.addLine(to: CGPoint(x: 134.95, y: 0))
                keycap2.addLine(to: CGPoint(x: 132.16, y: 0))
                keycap2.addLine(to: CGPoint(x: 135.17, y: 0))
                keycap2.addCurve(to: CGPoint(x: 135.95, y: 0), controlPoint1: CGPoint(x: 135.43, y: 0), controlPoint2: CGPoint(x: 135.69, y: 0))
                keycap2.addCurve(to: CGPoint(x: 136.61, y: 0.01), controlPoint1: CGPoint(x: 136.17, y: 0), controlPoint2: CGPoint(x: 136.39, y: 0.01))
                keycap2.addCurve(to: CGPoint(x: 138.05, y: 0.14), controlPoint1: CGPoint(x: 137.09, y: 0.02), controlPoint2: CGPoint(x: 137.57, y: 0.05))
                keycap2.addCurve(to: CGPoint(x: 139.41, y: 0.6), controlPoint1: CGPoint(x: 138.53, y: 0.23), controlPoint2: CGPoint(x: 138.97, y: 0.37))
                keycap2.addCurve(to: CGPoint(x: 140.58, y: 1.46), controlPoint1: CGPoint(x: 139.84, y: 0.82), controlPoint2: CGPoint(x: 140.23, y: 1.11))
                keycap2.addCurve(to: CGPoint(x: 141.42, y: 2.64), controlPoint1: CGPoint(x: 140.92, y: 1.8), controlPoint2: CGPoint(x: 141.2, y: 2.2))
                keycap2.addCurve(to: CGPoint(x: 141.87, y: 4.03), controlPoint1: CGPoint(x: 141.64, y: 3.08), controlPoint2: CGPoint(x: 141.78, y: 3.54))
                keycap2.addCurve(to: CGPoint(x: 142, y: 5.48), controlPoint1: CGPoint(x: 141.96, y: 4.51), controlPoint2: CGPoint(x: 141.98, y: 5))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 6.16), controlPoint1: CGPoint(x: 142, y: 5.71), controlPoint2: CGPoint(x: 142.01, y: 5.93))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 6.95), controlPoint1: CGPoint(x: 142.01, y: 6.42), controlPoint2: CGPoint(x: 142.01, y: 6.69))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 10))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 32))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 35.05))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 35.84), controlPoint1: CGPoint(x: 142.01, y: 35.31), controlPoint2: CGPoint(x: 142.01, y: 35.58))
                keycap2.addCurve(to: CGPoint(x: 142, y: 36.52), controlPoint1: CGPoint(x: 142.01, y: 36.07), controlPoint2: CGPoint(x: 142, y: 36.29))
                keycap2.close()
                keycap2.move(to: CGPoint(x: 142, y: 36.52))
                context.saveGState()
                keycap2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap2.cgPath)
                context.addRect(keycap2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -143.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 143.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap2.fill()
                context.restoreGState()
                keycap2.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// keycap
                let keycap3 = UIBezierPath()
                keycap3.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap3.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap3.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap3.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap3.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap3.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap3.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap3.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap3.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap3.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap3.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap3.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap3.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap3.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap3.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap3.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap3.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap3.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap3.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap3.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap3.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap3.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap3.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap3.addLine(to: CGPoint(x: 0, y: 32))
                keycap3.addLine(to: CGPoint(x: 0, y: 10))
                keycap3.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap3.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap3.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap3.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap3.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap3.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap3.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap3.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap3.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap3.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap3.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap3.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap3.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap3.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap3.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap3.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap3.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap3.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap3.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap3.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap3.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap3.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap3.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap3.cgPath)
                context.addRect(keycap3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap3.fill()
                context.restoreGState()
                keycap3.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap3.fill()
                context.restoreGState()
                
                /// microophone glyph
                let microophoneGlyph = UIBezierPath()
                microophoneGlyph.move(to: CGPoint(x: 10, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 10, y: 8.67))
                microophoneGlyph.addCurve(to: CGPoint(x: 9.97, y: 10.32), controlPoint1: CGPoint(x: 10, y: 9.24), controlPoint2: CGPoint(x: 10, y: 9.78))
                microophoneGlyph.addCurve(to: CGPoint(x: 9.75, y: 11.75), controlPoint1: CGPoint(x: 9.94, y: 10.89), controlPoint2: CGPoint(x: 9.87, y: 11.34))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.17, y: 14.1), controlPoint1: CGPoint(x: 9.49, y: 12.7), controlPoint2: CGPoint(x: 8.94, y: 13.51))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 15), controlPoint1: CGPoint(x: 7.41, y: 14.68), controlPoint2: CGPoint(x: 6.46, y: 15))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.83, y: 14.1), controlPoint1: CGPoint(x: 4.54, y: 15), controlPoint2: CGPoint(x: 3.59, y: 14.68))
                microophoneGlyph.addCurve(to: CGPoint(x: 1.25, y: 11.76), controlPoint1: CGPoint(x: 2.06, y: 13.51), controlPoint2: CGPoint(x: 1.51, y: 12.7))
                microophoneGlyph.addCurve(to: CGPoint(x: 1.03, y: 10.32), controlPoint1: CGPoint(x: 1.13, y: 11.34), controlPoint2: CGPoint(x: 1.06, y: 10.89))
                microophoneGlyph.addCurve(to: CGPoint(x: 1, y: 8.65), controlPoint1: CGPoint(x: 1, y: 9.77), controlPoint2: CGPoint(x: 1, y: 9.23))
                microophoneGlyph.addLine(to: CGPoint(x: 1, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 8.52))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 8.52))
                microophoneGlyph.addCurve(to: CGPoint(x: 0.03, y: 10.37), controlPoint1: CGPoint(x: 0, y: 9.14), controlPoint2: CGPoint(x: -0, y: 9.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 0.29, y: 12.02), controlPoint1: CGPoint(x: 0.06, y: 10.93), controlPoint2: CGPoint(x: 0.13, y: 11.48))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.22, y: 14.89), controlPoint1: CGPoint(x: 0.61, y: 13.17), controlPoint2: CGPoint(x: 1.27, y: 14.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 5, y: 15.97), controlPoint1: CGPoint(x: 3.03, y: 15.51), controlPoint2: CGPoint(x: 3.99, y: 15.88))
                microophoneGlyph.addLine(to: CGPoint(x: 5, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 20))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 20))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 6, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 6, y: 15.97))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.78, y: 14.89), controlPoint1: CGPoint(x: 7.01, y: 15.88), controlPoint2: CGPoint(x: 7.97, y: 15.51))
                microophoneGlyph.addCurve(to: CGPoint(x: 10.72, y: 12.02), controlPoint1: CGPoint(x: 9.73, y: 14.17), controlPoint2: CGPoint(x: 10.4, y: 13.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 10.97, y: 10.37), controlPoint1: CGPoint(x: 10.87, y: 11.48), controlPoint2: CGPoint(x: 10.94, y: 10.93))
                microophoneGlyph.addCurve(to: CGPoint(x: 11, y: 8.52), controlPoint1: CGPoint(x: 11, y: 9.76), controlPoint2: CGPoint(x: 11, y: 9.14))
                microophoneGlyph.addCurve(to: CGPoint(x: 11, y: 8.52), controlPoint1: CGPoint(x: 11, y: 8.52), controlPoint2: CGPoint(x: 11, y: 8.52))
                microophoneGlyph.addLine(to: CGPoint(x: 11, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 10, y: 7))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 3, y: 4.67))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.02, y: 3.64), controlPoint1: CGPoint(x: 3, y: 4.33), controlPoint2: CGPoint(x: 3, y: 3.98))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.14, y: 2.8), controlPoint1: CGPoint(x: 3.04, y: 3.3), controlPoint2: CGPoint(x: 3.08, y: 3.04))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.02, y: 1.5), controlPoint1: CGPoint(x: 3.29, y: 2.27), controlPoint2: CGPoint(x: 3.59, y: 1.83))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.36, y: 1.28), controlPoint1: CGPoint(x: 4.12, y: 1.42), controlPoint2: CGPoint(x: 4.24, y: 1.35))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.71, y: 1.13), controlPoint1: CGPoint(x: 4.46, y: 1.23), controlPoint2: CGPoint(x: 4.58, y: 1.18))
                microophoneGlyph.addLine(to: CGPoint(x: 4.77, y: 1.11))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 1), controlPoint1: CGPoint(x: 5, y: 1.04), controlPoint2: CGPoint(x: 5.25, y: 1))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.23, y: 1.11), controlPoint1: CGPoint(x: 5.75, y: 1), controlPoint2: CGPoint(x: 5.99, y: 1.04))
                microophoneGlyph.addLine(to: CGPoint(x: 6.3, y: 1.14))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.65, y: 1.29), controlPoint1: CGPoint(x: 6.42, y: 1.18), controlPoint2: CGPoint(x: 6.54, y: 1.23))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.98, y: 1.5), controlPoint1: CGPoint(x: 6.76, y: 1.35), controlPoint2: CGPoint(x: 6.87, y: 1.42))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.86, y: 2.8), controlPoint1: CGPoint(x: 7.41, y: 1.82), controlPoint2: CGPoint(x: 7.71, y: 2.27))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.98, y: 3.64), controlPoint1: CGPoint(x: 7.92, y: 3.04), controlPoint2: CGPoint(x: 7.96, y: 3.3))
                microophoneGlyph.addCurve(to: CGPoint(x: 8, y: 4.67), controlPoint1: CGPoint(x: 8, y: 3.98), controlPoint2: CGPoint(x: 8, y: 4.33))
                microophoneGlyph.addLine(to: CGPoint(x: 8, y: 9.33))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.98, y: 10.36), controlPoint1: CGPoint(x: 8, y: 9.67), controlPoint2: CGPoint(x: 8, y: 10.02))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.85, y: 11.2), controlPoint1: CGPoint(x: 7.96, y: 10.7), controlPoint2: CGPoint(x: 7.92, y: 10.96))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.98, y: 12.5), controlPoint1: CGPoint(x: 7.71, y: 11.73), controlPoint2: CGPoint(x: 7.41, y: 12.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 13), controlPoint1: CGPoint(x: 6.56, y: 12.82), controlPoint2: CGPoint(x: 6.03, y: 13))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.02, y: 12.5), controlPoint1: CGPoint(x: 4.97, y: 13), controlPoint2: CGPoint(x: 4.44, y: 12.82))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.15, y: 11.2), controlPoint1: CGPoint(x: 3.59, y: 12.17), controlPoint2: CGPoint(x: 3.29, y: 11.73))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.02, y: 10.36), controlPoint1: CGPoint(x: 3.08, y: 10.96), controlPoint2: CGPoint(x: 3.04, y: 10.7))
                microophoneGlyph.addCurve(to: CGPoint(x: 3, y: 9.33), controlPoint1: CGPoint(x: 3, y: 10.02), controlPoint2: CGPoint(x: 3, y: 9.67))
                microophoneGlyph.addLine(to: CGPoint(x: 3, y: 4.67))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 2.02, y: 10.42))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.18, y: 11.47), controlPoint1: CGPoint(x: 2.04, y: 10.78), controlPoint2: CGPoint(x: 2.08, y: 11.12))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.41, y: 13.3), controlPoint1: CGPoint(x: 2.39, y: 12.2), controlPoint2: CGPoint(x: 2.81, y: 12.83))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 14), controlPoint1: CGPoint(x: 4.01, y: 13.75), controlPoint2: CGPoint(x: 4.75, y: 14))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.59, y: 13.3), controlPoint1: CGPoint(x: 6.25, y: 14), controlPoint2: CGPoint(x: 6.99, y: 13.75))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.82, y: 11.47), controlPoint1: CGPoint(x: 8.19, y: 12.83), controlPoint2: CGPoint(x: 8.62, y: 12.2))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.98, y: 10.42), controlPoint1: CGPoint(x: 8.92, y: 11.12), controlPoint2: CGPoint(x: 8.96, y: 10.78))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 9.24), controlPoint1: CGPoint(x: 9, y: 10.03), controlPoint2: CGPoint(x: 9, y: 9.63))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 9.24), controlPoint1: CGPoint(x: 9, y: 9.24), controlPoint2: CGPoint(x: 9, y: 9.24))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 4.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 4.76), controlPoint1: CGPoint(x: 9, y: 4.76), controlPoint2: CGPoint(x: 9, y: 4.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.98, y: 3.58), controlPoint1: CGPoint(x: 9, y: 4.37), controlPoint2: CGPoint(x: 9, y: 3.97))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.82, y: 2.53), controlPoint1: CGPoint(x: 8.96, y: 3.22), controlPoint2: CGPoint(x: 8.92, y: 2.88))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.59, y: 0.71), controlPoint1: CGPoint(x: 8.62, y: 1.8), controlPoint2: CGPoint(x: 8.19, y: 1.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.11, y: 0.4), controlPoint1: CGPoint(x: 7.44, y: 0.59), controlPoint2: CGPoint(x: 7.28, y: 0.49))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.61, y: 0.19), controlPoint1: CGPoint(x: 6.95, y: 0.32), controlPoint2: CGPoint(x: 6.79, y: 0.25))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.6, y: 0.18), controlPoint1: CGPoint(x: 6.61, y: 0.19), controlPoint2: CGPoint(x: 6.61, y: 0.18))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 6.25, y: 0.06), controlPoint2: CGPoint(x: 5.88, y: 0))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.4, y: 0.18), controlPoint1: CGPoint(x: 5.12, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0.06))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.38, y: 0.19), controlPoint1: CGPoint(x: 4.39, y: 0.18), controlPoint2: CGPoint(x: 4.39, y: 0.19))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.89, y: 0.4), controlPoint1: CGPoint(x: 4.21, y: 0.25), controlPoint2: CGPoint(x: 4.05, y: 0.32))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.41, y: 0.71), controlPoint1: CGPoint(x: 3.72, y: 0.49), controlPoint2: CGPoint(x: 3.56, y: 0.59))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.18, y: 2.53), controlPoint1: CGPoint(x: 2.81, y: 1.17), controlPoint2: CGPoint(x: 2.39, y: 1.8))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.02, y: 3.58), controlPoint1: CGPoint(x: 2.08, y: 2.88), controlPoint2: CGPoint(x: 2.04, y: 3.22))
                microophoneGlyph.addCurve(to: CGPoint(x: 2, y: 4.76), controlPoint1: CGPoint(x: 2, y: 3.97), controlPoint2: CGPoint(x: 2, y: 4.37))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 4.76))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 9.24))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 9.24))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.02, y: 10.42), controlPoint1: CGPoint(x: 2, y: 9.63), controlPoint2: CGPoint(x: 2, y: 10.03))
                microophoneGlyph.addLine(to: CGPoint(x: 2.02, y: 10.42))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 2.02, y: 10.42))
                context.saveGState()
                context.translateBy(x: 10, y: 11)
                microophoneGlyph.usesEvenOddFillRule = true
                UIColor.black.setFill()
                microophoneGlyph.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap4 = UIBezierPath()
                keycap4.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap4.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap4.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap4.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap4.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap4.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap4.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap4.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap4.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap4.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap4.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap4.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap4.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap4.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap4.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap4.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap4.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap4.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap4.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap4.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap4.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap4.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap4.addLine(to: CGPoint(x: 0, y: 32))
                keycap4.addLine(to: CGPoint(x: 0, y: 10))
                keycap4.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap4.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap4.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap4.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap4.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap4.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap4.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap4.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap4.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap4.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap4.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap4.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap4.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap4.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap4.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap4.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap4.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap4.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap4.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap4.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap4.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap4.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap4.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap4.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap4.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap4.addLine(to: CGPoint(x: 42, y: 10))
                keycap4.addLine(to: CGPoint(x: 42, y: 32))
                keycap4.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap4.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap4.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap4.close()
                keycap4.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap4.cgPath)
                context.addRect(keycap4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap4.fill()
                context.restoreGState()
                keycap4.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.2).setFill()
                keycap4.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel2 = NSMutableAttributedString(string: "123")
                keyLabel2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel2.length))
                keyLabel2.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel2.length))
                }
                context.saveGState()
                keyLabel2.draw(in: CGRect(x: 0, y: 13, width: 42, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 47, y: 0)
                
                /// keycap
                let keycap5 = UIBezierPath()
                keycap5.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap5.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap5.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap5.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap5.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap5.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap5.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap5.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap5.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap5.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap5.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap5.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap5.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap5.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap5.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap5.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap5.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap5.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap5.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap5.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap5.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap5.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap5.addLine(to: CGPoint(x: 0, y: 32))
                keycap5.addLine(to: CGPoint(x: 0, y: 10))
                keycap5.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap5.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap5.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap5.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap5.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap5.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap5.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap5.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap5.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap5.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap5.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap5.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap5.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap5.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap5.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap5.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap5.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap5.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap5.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap5.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap5.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap5.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap5.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap5.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap5.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap5.addLine(to: CGPoint(x: 42, y: 10))
                keycap5.addLine(to: CGPoint(x: 42, y: 32))
                keycap5.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap5.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap5.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap5.close()
                keycap5.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap5.cgPath)
                context.addRect(keycap5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap5.fill()
                context.restoreGState()
                keycap5.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.2).setFill()
                keycap5.fill()
                context.restoreGState()
                
                /// icon
                let icon = UIBezierPath()
                icon.move(to: CGPoint(x: 9.75, y: 19.5))
                icon.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
                icon.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
                icon.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
                icon.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
                icon.close()
                icon.move(to: CGPoint(x: 9.75, y: 18.5))
                icon.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
                icon.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
                icon.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
                icon.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
                icon.close()
                icon.move(to: CGPoint(x: 6.75, y: 8))
                icon.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
                icon.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
                icon.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
                icon.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
                icon.close()
                icon.move(to: CGPoint(x: 9.75, y: 16.5))
                icon.addCurve(to: CGPoint(x: 3, y: 11), controlPoint1: CGPoint(x: 6.02, y: 16.5), controlPoint2: CGPoint(x: 3, y: 13.08))
                icon.addCurve(to: CGPoint(x: 9.75, y: 11), controlPoint1: CGPoint(x: 3, y: 9.06), controlPoint2: CGPoint(x: 6.02, y: 11))
                icon.addCurve(to: CGPoint(x: 16.5, y: 11), controlPoint1: CGPoint(x: 13.48, y: 11), controlPoint2: CGPoint(x: 16.5, y: 9.1))
                icon.addCurve(to: CGPoint(x: 9.75, y: 16.5), controlPoint1: CGPoint(x: 16.5, y: 13.02), controlPoint2: CGPoint(x: 13.48, y: 16.5))
                icon.close()
                icon.move(to: CGPoint(x: 12.75, y: 8))
                icon.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
                icon.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
                icon.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
                icon.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
                icon.close()
                icon.move(to: CGPoint(x: 4.5, y: 11.5))
                icon.addCurve(to: CGPoint(x: 4.85, y: 12.33), controlPoint1: CGPoint(x: 4.5, y: 11.77), controlPoint2: CGPoint(x: 4.66, y: 12.15))
                icon.addCurve(to: CGPoint(x: 9.79, y: 13.5), controlPoint1: CGPoint(x: 4.85, y: 12.33), controlPoint2: CGPoint(x: 5.55, y: 13.5))
                icon.addCurve(to: CGPoint(x: 14.65, y: 12.35), controlPoint1: CGPoint(x: 14.04, y: 13.5), controlPoint2: CGPoint(x: 14.65, y: 12.35))
                icon.addCurve(to: CGPoint(x: 15, y: 11.5), controlPoint1: CGPoint(x: 14.85, y: 12.17), controlPoint2: CGPoint(x: 15, y: 11.78))
                icon.addCurve(to: CGPoint(x: 14.54, y: 11.19), controlPoint1: CGPoint(x: 15, y: 11.23), controlPoint2: CGPoint(x: 14.79, y: 11.08))
                icon.addCurve(to: CGPoint(x: 9.86, y: 12), controlPoint1: CGPoint(x: 14.54, y: 11.19), controlPoint2: CGPoint(x: 12.88, y: 12))
                icon.addCurve(to: CGPoint(x: 4.97, y: 11.17), controlPoint1: CGPoint(x: 6.85, y: 12), controlPoint2: CGPoint(x: 4.97, y: 11.17))
                icon.addCurve(to: CGPoint(x: 4.5, y: 11.5), controlPoint1: CGPoint(x: 4.7, y: 11.08), controlPoint2: CGPoint(x: 4.5, y: 11.22))
                icon.close()
                icon.move(to: CGPoint(x: 4.5, y: 11.5))
                context.saveGState()
                context.translateBy(x: 11, y: 11)
                icon.usesEvenOddFillRule = true
                UIColor.black.setFill()
                icon.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 117)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 323, y: 0)
                
                /// keycap
                let keycap6 = UIBezierPath()
                keycap6.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap6.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap6.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap6.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap6.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap6.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap6.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap6.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap6.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap6.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap6.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap6.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap6.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap6.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap6.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap6.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap6.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap6.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap6.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap6.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap6.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap6.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap6.addLine(to: CGPoint(x: 0, y: 32))
                keycap6.addLine(to: CGPoint(x: 0, y: 10))
                keycap6.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap6.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap6.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap6.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap6.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap6.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap6.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap6.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap6.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap6.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap6.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap6.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap6.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap6.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap6.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap6.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap6.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap6.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap6.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap6.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap6.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap6.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap6.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap6.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap6.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap6.addLine(to: CGPoint(x: 42, y: 10))
                keycap6.addLine(to: CGPoint(x: 42, y: 32))
                keycap6.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap6.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap6.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap6.close()
                keycap6.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap6.cgPath)
                context.addRect(keycap6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap6.fill()
                context.restoreGState()
                keycap6.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.2).setFill()
                keycap6.fill()
                context.restoreGState()
                
                /// backspace
                let backspace = UIBezierPath()
                backspace.move(to: CGPoint(x: 22, y: 4.87))
                backspace.addCurve(to: CGPoint(x: 22, y: 4.31), controlPoint1: CGPoint(x: 22, y: 4.68), controlPoint2: CGPoint(x: 22, y: 4.49))
                backspace.addCurve(to: CGPoint(x: 21.99, y: 3.84), controlPoint1: CGPoint(x: 22, y: 4.15), controlPoint2: CGPoint(x: 22, y: 4))
                backspace.addCurve(to: CGPoint(x: 21.9, y: 2.82), controlPoint1: CGPoint(x: 21.98, y: 3.5), controlPoint2: CGPoint(x: 21.96, y: 3.15))
                backspace.addCurve(to: CGPoint(x: 21.58, y: 1.85), controlPoint1: CGPoint(x: 21.84, y: 2.48), controlPoint2: CGPoint(x: 21.74, y: 2.16))
                backspace.addCurve(to: CGPoint(x: 20.98, y: 1.02), controlPoint1: CGPoint(x: 21.43, y: 1.54), controlPoint2: CGPoint(x: 21.22, y: 1.26))
                backspace.addCurve(to: CGPoint(x: 20.15, y: 0.42), controlPoint1: CGPoint(x: 20.74, y: 0.78), controlPoint2: CGPoint(x: 20.46, y: 0.57))
                backspace.addCurve(to: CGPoint(x: 19.18, y: 0.1), controlPoint1: CGPoint(x: 19.84, y: 0.26), controlPoint2: CGPoint(x: 19.52, y: 0.16))
                backspace.addCurve(to: CGPoint(x: 18.16, y: 0.01), controlPoint1: CGPoint(x: 18.84, y: 0.04), controlPoint2: CGPoint(x: 18.5, y: 0.02))
                backspace.addCurve(to: CGPoint(x: 17.69, y: 0), controlPoint1: CGPoint(x: 18, y: 0), controlPoint2: CGPoint(x: 17.85, y: 0))
                backspace.addCurve(to: CGPoint(x: 17.13, y: 0), controlPoint1: CGPoint(x: 17.5, y: 0), controlPoint2: CGPoint(x: 17.32, y: 0))
                backspace.addLine(to: CGPoint(x: 15, y: 0))
                backspace.addLine(to: CGPoint(x: 16.98, y: 0))
                backspace.addLine(to: CGPoint(x: 9, y: 0))
                backspace.addCurve(to: CGPoint(x: 7.5, y: 0.5), controlPoint1: CGPoint(x: 8.31, y: -0.01), controlPoint2: CGPoint(x: 7.73, y: 0.27))
                backspace.addLine(to: CGPoint(x: 0.11, y: 7.73))
                backspace.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.04, y: 7.8), controlPoint2: CGPoint(x: 0, y: 7.9))
                backspace.addCurve(to: CGPoint(x: 0.11, y: 8.27), controlPoint1: CGPoint(x: 0, y: 8.1), controlPoint2: CGPoint(x: 0.04, y: 8.2))
                backspace.addLine(to: CGPoint(x: 7.5, y: 15.5))
                backspace.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 7.73, y: 15.73), controlPoint2: CGPoint(x: 8.31, y: 16.01))
                backspace.addLine(to: CGPoint(x: 16.98, y: 16))
                backspace.addLine(to: CGPoint(x: 17.13, y: 16))
                backspace.addCurve(to: CGPoint(x: 17.69, y: 16), controlPoint1: CGPoint(x: 17.32, y: 16), controlPoint2: CGPoint(x: 17.5, y: 16))
                backspace.addCurve(to: CGPoint(x: 18.16, y: 15.99), controlPoint1: CGPoint(x: 17.85, y: 16), controlPoint2: CGPoint(x: 18, y: 16))
                backspace.addCurve(to: CGPoint(x: 19.18, y: 15.9), controlPoint1: CGPoint(x: 18.5, y: 15.98), controlPoint2: CGPoint(x: 18.84, y: 15.96))
                backspace.addCurve(to: CGPoint(x: 20.15, y: 15.58), controlPoint1: CGPoint(x: 19.52, y: 15.84), controlPoint2: CGPoint(x: 19.84, y: 15.74))
                backspace.addCurve(to: CGPoint(x: 20.98, y: 14.98), controlPoint1: CGPoint(x: 20.46, y: 15.43), controlPoint2: CGPoint(x: 20.74, y: 15.22))
                backspace.addCurve(to: CGPoint(x: 21.58, y: 14.15), controlPoint1: CGPoint(x: 21.22, y: 14.74), controlPoint2: CGPoint(x: 21.43, y: 14.46))
                backspace.addCurve(to: CGPoint(x: 21.9, y: 13.18), controlPoint1: CGPoint(x: 21.74, y: 13.84), controlPoint2: CGPoint(x: 21.84, y: 13.52))
                backspace.addCurve(to: CGPoint(x: 21.99, y: 12.16), controlPoint1: CGPoint(x: 21.96, y: 12.85), controlPoint2: CGPoint(x: 21.98, y: 12.5))
                backspace.addCurve(to: CGPoint(x: 22, y: 11.69), controlPoint1: CGPoint(x: 22, y: 12), controlPoint2: CGPoint(x: 22, y: 11.85))
                backspace.addCurve(to: CGPoint(x: 22, y: 11.13), controlPoint1: CGPoint(x: 22, y: 11.51), controlPoint2: CGPoint(x: 22, y: 11.32))
                backspace.addLine(to: CGPoint(x: 22, y: 9))
                backspace.addLine(to: CGPoint(x: 22, y: 7))
                backspace.addLine(to: CGPoint(x: 22, y: 4.87))
                backspace.close()
                backspace.move(to: CGPoint(x: 22, y: 4.87))
                context.saveGState()
                context.translateBy(x: 9, y: 13)
                backspace.lineJoinStyle = .round
                backspace.lineCapStyle = .round
                context.saveGState()
                backspace.lineWidth = 3
                context.beginPath()
                context.addPath(backspace.cgPath)
                context.clip(using: .evenOdd)
                UIColor.black.setStroke()
                backspace.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Path
                let path13 = UIBezierPath()
                path13.move(to: CGPoint(x: 7.22, y: 6.51))
                path13.addCurve(to: CGPoint(x: 7.22, y: 7.22), controlPoint1: CGPoint(x: 7.41, y: 6.71), controlPoint2: CGPoint(x: 7.41, y: 7.02))
                path13.addCurve(to: CGPoint(x: 6.51, y: 7.22), controlPoint1: CGPoint(x: 7.02, y: 7.41), controlPoint2: CGPoint(x: 6.71, y: 7.41))
                path13.addLine(to: CGPoint(x: 3.68, y: 4.39))
                path13.addLine(to: CGPoint(x: 0.85, y: 7.22))
                path13.addCurve(to: CGPoint(x: 0.15, y: 7.22), controlPoint1: CGPoint(x: 0.66, y: 7.41), controlPoint2: CGPoint(x: 0.34, y: 7.41))
                path13.addCurve(to: CGPoint(x: 0.15, y: 6.51), controlPoint1: CGPoint(x: -0.05, y: 7.02), controlPoint2: CGPoint(x: -0.05, y: 6.71))
                path13.addLine(to: CGPoint(x: 2.98, y: 3.68))
                path13.addLine(to: CGPoint(x: 0.15, y: 0.85))
                path13.addCurve(to: CGPoint(x: 0.15, y: 0.15), controlPoint1: CGPoint(x: -0.05, y: 0.66), controlPoint2: CGPoint(x: -0.05, y: 0.34))
                path13.addCurve(to: CGPoint(x: 0.85, y: 0.15), controlPoint1: CGPoint(x: 0.34, y: -0.05), controlPoint2: CGPoint(x: 0.66, y: -0.05))
                path13.addLine(to: CGPoint(x: 3.68, y: 2.97))
                path13.addLine(to: CGPoint(x: 6.51, y: 0.15))
                path13.addCurve(to: CGPoint(x: 7.22, y: 0.15), controlPoint1: CGPoint(x: 6.71, y: -0.05), controlPoint2: CGPoint(x: 7.02, y: -0.05))
                path13.addCurve(to: CGPoint(x: 7.22, y: 0.85), controlPoint1: CGPoint(x: 7.41, y: 0.34), controlPoint2: CGPoint(x: 7.41, y: 0.66))
                path13.addLine(to: CGPoint(x: 4.39, y: 3.68))
                path13.addLine(to: CGPoint(x: 7.22, y: 6.51))
                path13.close()
                path13.move(to: CGPoint(x: 7.22, y: 6.51))
                context.saveGState()
                context.translateBy(x: 18.82, y: 17.32)
                path13.usesEvenOddFillRule = true
                UIColor.black.setFill()
                path13.fill()
                path13.lineWidth = 0.75
                UIColor.black.setStroke()
                path13.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 278, y: 0)
                
                /// keycap
                let keycap7 = UIBezierPath()
                keycap7.move(to: CGPoint(x: 31, y: 36.52))
                keycap7.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap7.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap7.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap7.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap7.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap7.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap7.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap7.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap7.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap7.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap7.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap7.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap7.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap7.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap7.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap7.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap7.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap7.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap7.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap7.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap7.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap7.addLine(to: CGPoint(x: 0, y: 32))
                keycap7.addLine(to: CGPoint(x: 0, y: 10))
                keycap7.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap7.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap7.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap7.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap7.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap7.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap7.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap7.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap7.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap7.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap7.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap7.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap7.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap7.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap7.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap7.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap7.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap7.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap7.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap7.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap7.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap7.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap7.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap7.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap7.close()
                keycap7.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap7.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap7.cgPath)
                context.addRect(keycap7.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap7.fill()
                context.restoreGState()
                keycap7.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap7.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel3 = NSMutableAttributedString(string: "M")
                keyLabel3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel3.length))
                keyLabel3.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel3.length))
                }
                context.saveGState()
                keyLabel3.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 241, y: 0)
                
                /// keycap
                let keycap8 = UIBezierPath()
                keycap8.move(to: CGPoint(x: 31, y: 36.52))
                keycap8.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap8.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap8.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap8.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap8.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap8.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap8.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap8.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap8.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap8.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap8.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap8.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap8.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap8.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap8.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap8.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap8.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap8.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap8.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap8.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap8.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap8.addLine(to: CGPoint(x: 0, y: 32))
                keycap8.addLine(to: CGPoint(x: 0, y: 10))
                keycap8.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap8.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap8.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap8.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap8.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap8.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap8.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap8.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap8.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap8.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap8.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap8.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap8.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap8.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap8.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap8.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap8.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap8.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap8.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap8.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap8.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap8.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap8.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap8.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap8.close()
                keycap8.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap8.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap8.cgPath)
                context.addRect(keycap8.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap8.fill()
                context.restoreGState()
                keycap8.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap8.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel4 = NSMutableAttributedString(string: "N")
                keyLabel4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel4.length))
                keyLabel4.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel4.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel4.length))
                }
                context.saveGState()
                keyLabel4.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 204, y: 0)
                
                /// keycap
                let keycap9 = UIBezierPath()
                keycap9.move(to: CGPoint(x: 31, y: 36.52))
                keycap9.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap9.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap9.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap9.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap9.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap9.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap9.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap9.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap9.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap9.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap9.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap9.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap9.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap9.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap9.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap9.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap9.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap9.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap9.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap9.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap9.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap9.addLine(to: CGPoint(x: 0, y: 32))
                keycap9.addLine(to: CGPoint(x: 0, y: 10))
                keycap9.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap9.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap9.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap9.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap9.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap9.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap9.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap9.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap9.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap9.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap9.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap9.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap9.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap9.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap9.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap9.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap9.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap9.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap9.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap9.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap9.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap9.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap9.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap9.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap9.close()
                keycap9.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap9.cgPath)
                context.addRect(keycap9.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap9.fill()
                context.restoreGState()
                keycap9.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap9.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel5 = NSMutableAttributedString(string: "B")
                keyLabel5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel5.length))
                keyLabel5.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel5.length))
                }
                context.saveGState()
                keyLabel5.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 167, y: 0)
                
                /// keycap
                let keycap10 = UIBezierPath()
                keycap10.move(to: CGPoint(x: 31, y: 36.52))
                keycap10.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap10.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap10.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap10.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap10.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap10.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap10.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap10.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap10.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap10.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap10.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap10.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap10.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap10.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap10.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap10.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap10.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap10.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap10.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap10.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap10.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap10.addLine(to: CGPoint(x: 0, y: 32))
                keycap10.addLine(to: CGPoint(x: 0, y: 10))
                keycap10.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap10.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap10.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap10.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap10.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap10.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap10.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap10.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap10.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap10.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap10.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap10.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap10.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap10.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap10.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap10.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap10.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap10.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap10.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap10.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap10.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap10.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap10.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap10.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap10.close()
                keycap10.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap10.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap10.cgPath)
                context.addRect(keycap10.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap10.fill()
                context.restoreGState()
                keycap10.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap10.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel6 = NSMutableAttributedString(string: "V")
                keyLabel6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel6.length))
                keyLabel6.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel6.length))
                }
                context.saveGState()
                keyLabel6.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 130, y: 0)
                
                /// keycap
                let keycap11 = UIBezierPath()
                keycap11.move(to: CGPoint(x: 31, y: 36.52))
                keycap11.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap11.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap11.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap11.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap11.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap11.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap11.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap11.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap11.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap11.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap11.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap11.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap11.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap11.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap11.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap11.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap11.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap11.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap11.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap11.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap11.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap11.addLine(to: CGPoint(x: 0, y: 32))
                keycap11.addLine(to: CGPoint(x: 0, y: 10))
                keycap11.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap11.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap11.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap11.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap11.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap11.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap11.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap11.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap11.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap11.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap11.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap11.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap11.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap11.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap11.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap11.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap11.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap11.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap11.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap11.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap11.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap11.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap11.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap11.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap11.close()
                keycap11.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap11.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap11.cgPath)
                context.addRect(keycap11.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap11.fill()
                context.restoreGState()
                keycap11.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap11.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel7 = NSMutableAttributedString(string: "C")
                keyLabel7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel7.length))
                keyLabel7.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel7.length))
                }
                context.saveGState()
                keyLabel7.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// keycap
                let keycap12 = UIBezierPath()
                keycap12.move(to: CGPoint(x: 31, y: 36.52))
                keycap12.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap12.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap12.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap12.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap12.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap12.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap12.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap12.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap12.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap12.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap12.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap12.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap12.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap12.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap12.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap12.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap12.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap12.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap12.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap12.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap12.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap12.addLine(to: CGPoint(x: 0, y: 32))
                keycap12.addLine(to: CGPoint(x: 0, y: 10))
                keycap12.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap12.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap12.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap12.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap12.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap12.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap12.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap12.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap12.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap12.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap12.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap12.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap12.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap12.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap12.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap12.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap12.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap12.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap12.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap12.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap12.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap12.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap12.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap12.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap12.close()
                keycap12.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap12.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap12.cgPath)
                context.addRect(keycap12.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap12.fill()
                context.restoreGState()
                keycap12.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap12.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel8 = NSMutableAttributedString(string: "X")
                keyLabel8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel8.length))
                keyLabel8.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel8.length))
                }
                context.saveGState()
                keyLabel8.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 56, y: 0)
                
                /// keycap
                let keycap13 = UIBezierPath()
                keycap13.move(to: CGPoint(x: 31, y: 36.52))
                keycap13.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap13.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap13.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap13.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap13.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap13.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap13.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap13.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap13.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap13.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap13.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap13.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap13.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap13.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap13.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap13.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap13.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap13.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap13.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap13.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap13.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap13.addLine(to: CGPoint(x: 0, y: 32))
                keycap13.addLine(to: CGPoint(x: 0, y: 10))
                keycap13.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap13.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap13.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap13.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap13.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap13.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap13.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap13.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap13.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap13.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap13.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap13.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap13.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap13.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap13.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap13.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap13.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap13.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap13.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap13.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap13.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap13.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap13.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap13.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap13.close()
                keycap13.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap13.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap13.cgPath)
                context.addRect(keycap13.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap13.fill()
                context.restoreGState()
                keycap13.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap13.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel9 = NSMutableAttributedString(string: "Z")
                keyLabel9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel9.length))
                keyLabel9.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel9.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel9.length))
                }
                context.saveGState()
                keyLabel9.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap14 = UIBezierPath()
                keycap14.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap14.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap14.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap14.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap14.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap14.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap14.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap14.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap14.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap14.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap14.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap14.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap14.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap14.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap14.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap14.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap14.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap14.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap14.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap14.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap14.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap14.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap14.addLine(to: CGPoint(x: 0, y: 32))
                keycap14.addLine(to: CGPoint(x: 0, y: 10))
                keycap14.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap14.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap14.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap14.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap14.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap14.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap14.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap14.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap14.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap14.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap14.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap14.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap14.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap14.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap14.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap14.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap14.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap14.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap14.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap14.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap14.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap14.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap14.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap14.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap14.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap14.addLine(to: CGPoint(x: 42, y: 10))
                keycap14.addLine(to: CGPoint(x: 42, y: 32))
                keycap14.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap14.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap14.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap14.close()
                keycap14.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap14.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap14.cgPath)
                context.addRect(keycap14.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap14.fill()
                context.restoreGState()
                keycap14.usesEvenOddFillRule = true
                UIColor.white.setFill()
                keycap14.fill()
                context.restoreGState()
                
                /// arrow
                let arrow = UIBezierPath()
                arrow.move(to: CGPoint(x: 19.85, y: 9.21))
                arrow.addLine(to: CGPoint(x: 10.33, y: 0.13))
                arrow.addCurve(to: CGPoint(x: 9.65, y: 0.13), controlPoint1: CGPoint(x: 10.15, y: -0.04), controlPoint2: CGPoint(x: 9.84, y: -0.04))
                arrow.addLine(to: CGPoint(x: 0.14, y: 9.21))
                arrow.addCurve(to: CGPoint(x: 0.04, y: 9.71), controlPoint1: CGPoint(x: 0, y: 9.34), controlPoint2: CGPoint(x: -0.04, y: 9.54))
                arrow.addCurve(to: CGPoint(x: 0.14, y: 9.86), controlPoint1: CGPoint(x: 0.06, y: 9.77), controlPoint2: CGPoint(x: 0.1, y: 9.82))
                arrow.addCurve(to: CGPoint(x: 0.48, y: 9.99), controlPoint1: CGPoint(x: 0.23, y: 9.94), controlPoint2: CGPoint(x: 0.35, y: 9.99))
                arrow.addLine(to: CGPoint(x: 19.51, y: 9.99))
                arrow.addCurve(to: CGPoint(x: 19.95, y: 9.71), controlPoint1: CGPoint(x: 19.7, y: 9.99), controlPoint2: CGPoint(x: 19.88, y: 9.88))
                arrow.addCurve(to: CGPoint(x: 19.85, y: 9.21), controlPoint1: CGPoint(x: 20.03, y: 9.54), controlPoint2: CGPoint(x: 19.98, y: 9.34))
                arrow.addLine(to: CGPoint(x: 19.85, y: 9.21))
                arrow.close()
                arrow.move(to: CGPoint(x: 5.49, y: 16))
                arrow.addLine(to: CGPoint(x: 14.49, y: 16))
                arrow.addLine(to: CGPoint(x: 14.49, y: 10))
                arrow.addLine(to: CGPoint(x: 5.49, y: 10))
                arrow.addLine(to: CGPoint(x: 5.49, y: 16))
                arrow.close()
                arrow.move(to: CGPoint(x: 5.49, y: 16))
                context.saveGState()
                context.translateBy(x: 11, y: 13)
                arrow.usesEvenOddFillRule = true
                UIColor.black.setFill()
                arrow.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 24, y: 64)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 296, y: 0)
                
                /// keycap
                let keycap15 = UIBezierPath()
                keycap15.move(to: CGPoint(x: 31, y: 36.52))
                keycap15.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap15.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap15.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap15.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap15.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap15.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap15.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap15.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap15.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap15.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap15.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap15.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap15.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap15.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap15.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap15.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap15.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap15.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap15.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap15.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap15.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap15.addLine(to: CGPoint(x: 0, y: 32))
                keycap15.addLine(to: CGPoint(x: 0, y: 10))
                keycap15.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap15.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap15.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap15.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap15.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap15.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap15.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap15.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap15.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap15.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap15.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap15.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap15.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap15.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap15.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap15.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap15.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap15.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap15.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap15.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap15.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap15.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap15.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap15.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap15.close()
                keycap15.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap15.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap15.cgPath)
                context.addRect(keycap15.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap15.fill()
                context.restoreGState()
                keycap15.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap15.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel10 = NSMutableAttributedString(string: "L")
                keyLabel10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel10.length))
                keyLabel10.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel10.length))
                }
                context.saveGState()
                keyLabel10.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 259, y: 0)
                
                /// keycap
                let keycap16 = UIBezierPath()
                keycap16.move(to: CGPoint(x: 31, y: 36.52))
                keycap16.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap16.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap16.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap16.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap16.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap16.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap16.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap16.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap16.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap16.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap16.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap16.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap16.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap16.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap16.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap16.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap16.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap16.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap16.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap16.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap16.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap16.addLine(to: CGPoint(x: 0, y: 32))
                keycap16.addLine(to: CGPoint(x: 0, y: 10))
                keycap16.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap16.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap16.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap16.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap16.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap16.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap16.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap16.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap16.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap16.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap16.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap16.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap16.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap16.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap16.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap16.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap16.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap16.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap16.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap16.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap16.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap16.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap16.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap16.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap16.close()
                keycap16.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap16.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap16.cgPath)
                context.addRect(keycap16.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap16.fill()
                context.restoreGState()
                keycap16.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap16.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel11 = NSMutableAttributedString(string: "K")
                keyLabel11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel11.length))
                keyLabel11.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel11.length))
                }
                context.saveGState()
                keyLabel11.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 222, y: 0)
                
                /// keycap
                let keycap17 = UIBezierPath()
                keycap17.move(to: CGPoint(x: 31, y: 36.52))
                keycap17.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap17.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap17.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap17.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap17.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap17.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap17.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap17.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap17.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap17.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap17.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap17.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap17.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap17.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap17.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap17.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap17.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap17.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap17.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap17.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap17.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap17.addLine(to: CGPoint(x: 0, y: 32))
                keycap17.addLine(to: CGPoint(x: 0, y: 10))
                keycap17.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap17.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap17.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap17.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap17.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap17.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap17.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap17.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap17.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap17.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap17.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap17.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap17.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap17.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap17.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap17.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap17.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap17.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap17.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap17.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap17.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap17.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap17.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap17.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap17.close()
                keycap17.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap17.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap17.cgPath)
                context.addRect(keycap17.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap17.fill()
                context.restoreGState()
                keycap17.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap17.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel12 = NSMutableAttributedString(string: "J")
                keyLabel12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel12.length))
                keyLabel12.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel12.length))
                }
                context.saveGState()
                keyLabel12.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 185, y: 0)
                
                /// keycap
                let keycap18 = UIBezierPath()
                keycap18.move(to: CGPoint(x: 31, y: 36.52))
                keycap18.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap18.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap18.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap18.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap18.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap18.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap18.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap18.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap18.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap18.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap18.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap18.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap18.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap18.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap18.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap18.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap18.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap18.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap18.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap18.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap18.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap18.addLine(to: CGPoint(x: 0, y: 32))
                keycap18.addLine(to: CGPoint(x: 0, y: 10))
                keycap18.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap18.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap18.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap18.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap18.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap18.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap18.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap18.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap18.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap18.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap18.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap18.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap18.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap18.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap18.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap18.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap18.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap18.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap18.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap18.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap18.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap18.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap18.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap18.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap18.close()
                keycap18.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap18.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap18.cgPath)
                context.addRect(keycap18.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap18.fill()
                context.restoreGState()
                keycap18.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap18.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel13 = NSMutableAttributedString(string: "H")
                keyLabel13.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel13.length))
                keyLabel13.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel13.length))
                }
                context.saveGState()
                keyLabel13.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 148, y: 0)
                
                /// keycap
                let keycap19 = UIBezierPath()
                keycap19.move(to: CGPoint(x: 31, y: 36.52))
                keycap19.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap19.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap19.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap19.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap19.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap19.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap19.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap19.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap19.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap19.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap19.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap19.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap19.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap19.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap19.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap19.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap19.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap19.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap19.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap19.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap19.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap19.addLine(to: CGPoint(x: 0, y: 32))
                keycap19.addLine(to: CGPoint(x: 0, y: 10))
                keycap19.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap19.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap19.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap19.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap19.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap19.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap19.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap19.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap19.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap19.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap19.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap19.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap19.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap19.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap19.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap19.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap19.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap19.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap19.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap19.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap19.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap19.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap19.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap19.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap19.close()
                keycap19.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap19.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap19.cgPath)
                context.addRect(keycap19.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap19.fill()
                context.restoreGState()
                keycap19.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap19.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel14 = NSMutableAttributedString(string: "G")
                keyLabel14.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel14.length))
                keyLabel14.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel14.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel14.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel14.length))
                }
                context.saveGState()
                keyLabel14.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 111, y: 0)
                
                /// keycap
                let keycap20 = UIBezierPath()
                keycap20.move(to: CGPoint(x: 31, y: 36.52))
                keycap20.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap20.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap20.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap20.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap20.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap20.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap20.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap20.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap20.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap20.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap20.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap20.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap20.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap20.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap20.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap20.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap20.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap20.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap20.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap20.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap20.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap20.addLine(to: CGPoint(x: 0, y: 32))
                keycap20.addLine(to: CGPoint(x: 0, y: 10))
                keycap20.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap20.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap20.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap20.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap20.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap20.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap20.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap20.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap20.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap20.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap20.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap20.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap20.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap20.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap20.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap20.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap20.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap20.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap20.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap20.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap20.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap20.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap20.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap20.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap20.close()
                keycap20.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap20.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap20.cgPath)
                context.addRect(keycap20.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap20.fill()
                context.restoreGState()
                keycap20.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap20.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel15 = NSMutableAttributedString(string: "F")
                keyLabel15.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel15.length))
                keyLabel15.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel15.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel15.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel15.length))
                }
                context.saveGState()
                keyLabel15.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 74, y: 0)
                
                /// keycap
                let keycap21 = UIBezierPath()
                keycap21.move(to: CGPoint(x: 31, y: 36.52))
                keycap21.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap21.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap21.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap21.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap21.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap21.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap21.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap21.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap21.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap21.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap21.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap21.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap21.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap21.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap21.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap21.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap21.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap21.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap21.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap21.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap21.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap21.addLine(to: CGPoint(x: 0, y: 32))
                keycap21.addLine(to: CGPoint(x: 0, y: 10))
                keycap21.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap21.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap21.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap21.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap21.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap21.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap21.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap21.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap21.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap21.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap21.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap21.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap21.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap21.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap21.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap21.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap21.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap21.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap21.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap21.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap21.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap21.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap21.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap21.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap21.close()
                keycap21.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap21.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap21.cgPath)
                context.addRect(keycap21.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap21.fill()
                context.restoreGState()
                keycap21.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap21.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel16 = NSMutableAttributedString(string: "D")
                keyLabel16.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel16.length))
                keyLabel16.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel16.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel16.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel16.length))
                }
                context.saveGState()
                keyLabel16.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 37, y: 0)
                
                /// keycap
                let keycap22 = UIBezierPath()
                keycap22.move(to: CGPoint(x: 31, y: 36.52))
                keycap22.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap22.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap22.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap22.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap22.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap22.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap22.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap22.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap22.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap22.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap22.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap22.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap22.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap22.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap22.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap22.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap22.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap22.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap22.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap22.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap22.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap22.addLine(to: CGPoint(x: 0, y: 32))
                keycap22.addLine(to: CGPoint(x: 0, y: 10))
                keycap22.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap22.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap22.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap22.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap22.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap22.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap22.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap22.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap22.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap22.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap22.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap22.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap22.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap22.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap22.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap22.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap22.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap22.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap22.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap22.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap22.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap22.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap22.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap22.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap22.close()
                keycap22.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap22.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap22.cgPath)
                context.addRect(keycap22.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap22.fill()
                context.restoreGState()
                keycap22.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap22.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel17 = NSMutableAttributedString(string: "S")
                keyLabel17.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel17.length))
                keyLabel17.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel17.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel17.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel17.length))
                }
                context.saveGState()
                keyLabel17.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap23 = UIBezierPath()
                keycap23.move(to: CGPoint(x: 31, y: 36.52))
                keycap23.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap23.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap23.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap23.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap23.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap23.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap23.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap23.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap23.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap23.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap23.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap23.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap23.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap23.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap23.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap23.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap23.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap23.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap23.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap23.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap23.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap23.addLine(to: CGPoint(x: 0, y: 32))
                keycap23.addLine(to: CGPoint(x: 0, y: 10))
                keycap23.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap23.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap23.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap23.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap23.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap23.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap23.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap23.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap23.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap23.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap23.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap23.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap23.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap23.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap23.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap23.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap23.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap23.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap23.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap23.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap23.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap23.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap23.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap23.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap23.close()
                keycap23.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap23.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap23.cgPath)
                context.addRect(keycap23.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap23.fill()
                context.restoreGState()
                keycap23.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap23.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel18 = NSMutableAttributedString(string: "A")
                keyLabel18.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel18.length))
                keyLabel18.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel18.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel18.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel18.length))
                }
                context.saveGState()
                keyLabel18.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 10)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 334, y: 0)
                
                /// keycap
                let keycap24 = UIBezierPath()
                keycap24.move(to: CGPoint(x: 31, y: 36.52))
                keycap24.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap24.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap24.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap24.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap24.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap24.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap24.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap24.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap24.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap24.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap24.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap24.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap24.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap24.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap24.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap24.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap24.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap24.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap24.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap24.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap24.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap24.addLine(to: CGPoint(x: 0, y: 32))
                keycap24.addLine(to: CGPoint(x: 0, y: 10))
                keycap24.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap24.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap24.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap24.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap24.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap24.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap24.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap24.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap24.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap24.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap24.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap24.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap24.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap24.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap24.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap24.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap24.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap24.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap24.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap24.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap24.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap24.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap24.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap24.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap24.close()
                keycap24.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap24.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap24.cgPath)
                context.addRect(keycap24.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap24.fill()
                context.restoreGState()
                keycap24.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap24.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel19 = NSMutableAttributedString(string: "P")
                keyLabel19.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel19.length))
                keyLabel19.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel19.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel19.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel19.length))
                }
                context.saveGState()
                keyLabel19.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 296, y: 0)
                
                /// keycap
                let keycap25 = UIBezierPath()
                keycap25.move(to: CGPoint(x: 31, y: 36.52))
                keycap25.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap25.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap25.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap25.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap25.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap25.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap25.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap25.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap25.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap25.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap25.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap25.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap25.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap25.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap25.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap25.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap25.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap25.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap25.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap25.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap25.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap25.addLine(to: CGPoint(x: 0, y: 32))
                keycap25.addLine(to: CGPoint(x: 0, y: 10))
                keycap25.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap25.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap25.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap25.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap25.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap25.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap25.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap25.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap25.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap25.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap25.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap25.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap25.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap25.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap25.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap25.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap25.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap25.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap25.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap25.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap25.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap25.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap25.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap25.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap25.close()
                keycap25.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap25.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap25.cgPath)
                context.addRect(keycap25.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap25.fill()
                context.restoreGState()
                keycap25.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap25.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel20 = NSMutableAttributedString(string: "I")
                keyLabel20.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel20.length))
                keyLabel20.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel20.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel20.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel20.length))
                }
                context.saveGState()
                keyLabel20.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 259, y: 0)
                
                /// keycap
                let keycap26 = UIBezierPath()
                keycap26.move(to: CGPoint(x: 31, y: 36.52))
                keycap26.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap26.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap26.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap26.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap26.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap26.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap26.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap26.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap26.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap26.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap26.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap26.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap26.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap26.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap26.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap26.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap26.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap26.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap26.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap26.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap26.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap26.addLine(to: CGPoint(x: 0, y: 32))
                keycap26.addLine(to: CGPoint(x: 0, y: 10))
                keycap26.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap26.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap26.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap26.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap26.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap26.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap26.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap26.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap26.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap26.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap26.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap26.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap26.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap26.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap26.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap26.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap26.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap26.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap26.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap26.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap26.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap26.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap26.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap26.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap26.close()
                keycap26.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap26.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap26.cgPath)
                context.addRect(keycap26.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap26.fill()
                context.restoreGState()
                keycap26.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap26.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel21 = NSMutableAttributedString(string: "O")
                keyLabel21.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel21.length))
                keyLabel21.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel21.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel21.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel21.length))
                }
                context.saveGState()
                keyLabel21.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 222, y: 0)
                
                /// keycap
                let keycap27 = UIBezierPath()
                keycap27.move(to: CGPoint(x: 31, y: 36.52))
                keycap27.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap27.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap27.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap27.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap27.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap27.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap27.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap27.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap27.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap27.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap27.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap27.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap27.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap27.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap27.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap27.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap27.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap27.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap27.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap27.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap27.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap27.addLine(to: CGPoint(x: 0, y: 32))
                keycap27.addLine(to: CGPoint(x: 0, y: 10))
                keycap27.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap27.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap27.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap27.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap27.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap27.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap27.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap27.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap27.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap27.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap27.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap27.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap27.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap27.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap27.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap27.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap27.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap27.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap27.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap27.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap27.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap27.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap27.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap27.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap27.close()
                keycap27.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap27.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap27.cgPath)
                context.addRect(keycap27.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap27.fill()
                context.restoreGState()
                keycap27.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap27.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel22 = NSMutableAttributedString(string: "U")
                keyLabel22.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel22.length))
                keyLabel22.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel22.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel22.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel22.length))
                }
                context.saveGState()
                keyLabel22.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 185, y: 0)
                
                /// keycap
                let keycap28 = UIBezierPath()
                keycap28.move(to: CGPoint(x: 31, y: 36.52))
                keycap28.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap28.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap28.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap28.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap28.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap28.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap28.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap28.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap28.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap28.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap28.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap28.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap28.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap28.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap28.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap28.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap28.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap28.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap28.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap28.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap28.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap28.addLine(to: CGPoint(x: 0, y: 32))
                keycap28.addLine(to: CGPoint(x: 0, y: 10))
                keycap28.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap28.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap28.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap28.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap28.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap28.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap28.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap28.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap28.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap28.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap28.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap28.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap28.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap28.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap28.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap28.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap28.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap28.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap28.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap28.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap28.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap28.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap28.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap28.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap28.close()
                keycap28.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap28.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap28.cgPath)
                context.addRect(keycap28.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap28.fill()
                context.restoreGState()
                keycap28.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap28.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel23 = NSMutableAttributedString(string: "Y")
                keyLabel23.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel23.length))
                keyLabel23.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel23.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel23.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel23.length))
                }
                context.saveGState()
                keyLabel23.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 148, y: 0)
                
                /// keycap
                let keycap29 = UIBezierPath()
                keycap29.move(to: CGPoint(x: 31, y: 36.52))
                keycap29.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap29.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap29.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap29.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap29.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap29.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap29.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap29.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap29.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap29.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap29.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap29.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap29.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap29.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap29.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap29.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap29.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap29.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap29.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap29.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap29.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap29.addLine(to: CGPoint(x: 0, y: 32))
                keycap29.addLine(to: CGPoint(x: 0, y: 10))
                keycap29.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap29.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap29.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap29.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap29.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap29.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap29.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap29.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap29.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap29.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap29.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap29.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap29.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap29.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap29.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap29.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap29.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap29.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap29.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap29.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap29.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap29.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap29.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap29.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap29.close()
                keycap29.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap29.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap29.cgPath)
                context.addRect(keycap29.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap29.fill()
                context.restoreGState()
                keycap29.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap29.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel24 = NSMutableAttributedString(string: "T")
                keyLabel24.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel24.length))
                keyLabel24.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel24.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel24.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel24.length))
                }
                context.saveGState()
                keyLabel24.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 111, y: 0)
                
                /// keycap
                let keycap30 = UIBezierPath()
                keycap30.move(to: CGPoint(x: 31, y: 36.52))
                keycap30.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap30.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap30.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap30.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap30.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap30.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap30.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap30.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap30.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap30.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap30.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap30.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap30.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap30.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap30.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap30.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap30.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap30.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap30.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap30.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap30.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap30.addLine(to: CGPoint(x: 0, y: 32))
                keycap30.addLine(to: CGPoint(x: 0, y: 10))
                keycap30.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap30.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap30.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap30.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap30.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap30.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap30.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap30.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap30.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap30.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap30.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap30.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap30.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap30.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap30.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap30.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap30.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap30.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap30.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap30.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap30.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap30.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap30.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap30.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap30.close()
                keycap30.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap30.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap30.cgPath)
                context.addRect(keycap30.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap30.fill()
                context.restoreGState()
                keycap30.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap30.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel25 = NSMutableAttributedString(string: "R")
                keyLabel25.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel25.length))
                keyLabel25.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel25.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel25.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel25.length))
                }
                context.saveGState()
                keyLabel25.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 74, y: 0)
                
                /// keycap
                let keycap31 = UIBezierPath()
                keycap31.move(to: CGPoint(x: 31, y: 36.52))
                keycap31.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap31.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap31.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap31.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap31.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap31.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap31.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap31.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap31.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap31.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap31.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap31.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap31.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap31.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap31.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap31.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap31.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap31.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap31.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap31.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap31.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap31.addLine(to: CGPoint(x: 0, y: 32))
                keycap31.addLine(to: CGPoint(x: 0, y: 10))
                keycap31.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap31.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap31.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap31.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap31.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap31.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap31.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap31.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap31.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap31.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap31.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap31.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap31.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap31.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap31.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap31.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap31.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap31.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap31.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap31.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap31.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap31.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap31.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap31.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap31.close()
                keycap31.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap31.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap31.cgPath)
                context.addRect(keycap31.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap31.fill()
                context.restoreGState()
                keycap31.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap31.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel26 = NSMutableAttributedString(string: "E")
                keyLabel26.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel26.length))
                keyLabel26.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel26.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel26.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel26.length))
                }
                context.saveGState()
                keyLabel26.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 37, y: 0)
                
                /// keycap
                let keycap32 = UIBezierPath()
                keycap32.move(to: CGPoint(x: 31, y: 36.52))
                keycap32.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap32.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap32.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap32.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap32.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap32.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap32.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap32.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap32.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap32.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap32.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap32.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap32.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap32.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap32.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap32.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap32.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap32.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap32.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap32.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap32.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap32.addLine(to: CGPoint(x: 0, y: 32))
                keycap32.addLine(to: CGPoint(x: 0, y: 10))
                keycap32.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap32.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap32.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap32.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap32.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap32.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap32.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap32.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap32.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap32.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap32.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap32.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap32.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap32.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap32.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap32.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap32.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap32.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap32.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap32.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap32.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap32.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap32.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap32.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap32.close()
                keycap32.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap32.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap32.cgPath)
                context.addRect(keycap32.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap32.fill()
                context.restoreGState()
                keycap32.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap32.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel27 = NSMutableAttributedString(string: "W")
                keyLabel27.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel27.length))
                keyLabel27.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel27.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel27.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel27.length))
                }
                context.saveGState()
                keyLabel27.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap33 = UIBezierPath()
                keycap33.move(to: CGPoint(x: 31, y: 36.52))
                keycap33.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap33.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap33.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap33.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap33.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap33.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap33.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap33.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap33.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap33.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap33.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap33.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap33.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap33.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap33.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap33.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap33.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap33.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap33.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap33.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap33.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap33.addLine(to: CGPoint(x: 0, y: 32))
                keycap33.addLine(to: CGPoint(x: 0, y: 10))
                keycap33.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap33.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap33.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap33.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap33.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap33.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap33.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap33.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap33.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap33.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap33.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap33.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap33.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap33.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap33.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap33.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap33.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap33.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap33.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap33.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap33.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap33.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap33.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                keycap33.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap33.close()
                keycap33.move(to: CGPoint(x: 31, y: 36.52))
                context.saveGState()
                keycap33.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap33.cgPath)
                context.addRect(keycap33.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap33.fill()
                context.restoreGState()
                keycap33.usesEvenOddFillRule = true
                UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
                keycap33.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel28 = NSMutableAttributedString(string: "Q")
                keyLabel28.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel28.length))
                keyLabel28.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel28.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel28.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel28.length))
                }
                context.saveGState()
                keyLabel28.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// key label
        let keyLabel29 = NSMutableAttributedString(string: "space")
        keyLabel29.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel29.length))
        keyLabel29.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel29.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            keyLabel29.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel29.length))
        }
        context.saveGState()
        keyLabel29.draw(in: CGRect(x: 135, y: 181, width: 142, height: 21))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemDarkKeyboardAlphabetic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.11, alpha: 0.72).setFill()
        background.fill()
        context.restoreGState()
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 170)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 278, y: 0)
                
                /// keycap
                let keycap = UIBezierPath()
                keycap.move(to: CGPoint(x: 86.95, y: 36.52))
                keycap.addCurve(to: CGPoint(x: 86.83, y: 37.97), controlPoint1: CGPoint(x: 86.94, y: 37), controlPoint2: CGPoint(x: 86.91, y: 37.49))
                keycap.addCurve(to: CGPoint(x: 86.38, y: 39.36), controlPoint1: CGPoint(x: 86.74, y: 38.46), controlPoint2: CGPoint(x: 86.6, y: 38.92))
                keycap.addCurve(to: CGPoint(x: 85.53, y: 40.54), controlPoint1: CGPoint(x: 86.16, y: 39.8), controlPoint2: CGPoint(x: 85.87, y: 40.2))
                keycap.addCurve(to: CGPoint(x: 84.36, y: 41.4), controlPoint1: CGPoint(x: 85.19, y: 40.89), controlPoint2: CGPoint(x: 84.79, y: 41.18))
                keycap.addCurve(to: CGPoint(x: 82.99, y: 41.86), controlPoint1: CGPoint(x: 83.92, y: 41.63), controlPoint2: CGPoint(x: 83.47, y: 41.77))
                keycap.addCurve(to: CGPoint(x: 81.55, y: 41.99), controlPoint1: CGPoint(x: 82.51, y: 41.95), controlPoint2: CGPoint(x: 82.03, y: 41.98))
                keycap.addCurve(to: CGPoint(x: 80.88, y: 42), controlPoint1: CGPoint(x: 81.32, y: 41.99), controlPoint2: CGPoint(x: 81.1, y: 42))
                keycap.addCurve(to: CGPoint(x: 80.1, y: 42), controlPoint1: CGPoint(x: 80.62, y: 42), controlPoint2: CGPoint(x: 80.36, y: 42))
                keycap.addLine(to: CGPoint(x: 9.88, y: 42.06))
                keycap.addLine(to: CGPoint(x: 6.87, y: 42.06))
                keycap.addCurve(to: CGPoint(x: 6.08, y: 42.06), controlPoint1: CGPoint(x: 6.61, y: 42.06), controlPoint2: CGPoint(x: 6.35, y: 42.06))
                keycap.addCurve(to: CGPoint(x: 5.42, y: 42.05), controlPoint1: CGPoint(x: 5.86, y: 42.06), controlPoint2: CGPoint(x: 5.64, y: 42.05))
                keycap.addCurve(to: CGPoint(x: 3.98, y: 41.92), controlPoint1: CGPoint(x: 4.94, y: 42.03), controlPoint2: CGPoint(x: 4.45, y: 42.01))
                keycap.addCurve(to: CGPoint(x: 2.61, y: 41.46), controlPoint1: CGPoint(x: 3.49, y: 41.83), controlPoint2: CGPoint(x: 3.05, y: 41.69))
                keycap.addCurve(to: CGPoint(x: 1.44, y: 40.6), controlPoint1: CGPoint(x: 2.18, y: 41.24), controlPoint2: CGPoint(x: 1.78, y: 40.95))
                keycap.addCurve(to: CGPoint(x: 0.59, y: 39.42), controlPoint1: CGPoint(x: 1.1, y: 40.26), controlPoint2: CGPoint(x: 0.81, y: 39.86))
                keycap.addCurve(to: CGPoint(x: 0.14, y: 38.03), controlPoint1: CGPoint(x: 0.37, y: 38.98), controlPoint2: CGPoint(x: 0.23, y: 38.52))
                keycap.addCurve(to: CGPoint(x: 0.01, y: 36.57), controlPoint1: CGPoint(x: 0.05, y: 37.55), controlPoint2: CGPoint(x: 0.02, y: 37.06))
                keycap.addCurve(to: CGPoint(x: 0, y: 35.9), controlPoint1: CGPoint(x: 0.01, y: 36.35), controlPoint2: CGPoint(x: 0, y: 36.13))
                keycap.addCurve(to: CGPoint(x: 0, y: 35.11), controlPoint1: CGPoint(x: 0, y: 35.64), controlPoint2: CGPoint(x: 0, y: 35.37))
                keycap.addLine(to: CGPoint(x: 0, y: 32.06))
                keycap.addLine(to: CGPoint(x: 0, y: 10.06))
                keycap.addLine(to: CGPoint(x: 0, y: 7.01))
                keycap.addCurve(to: CGPoint(x: 0, y: 6.21), controlPoint1: CGPoint(x: 0, y: 6.74), controlPoint2: CGPoint(x: 0, y: 6.48))
                keycap.addCurve(to: CGPoint(x: 0.01, y: 5.54), controlPoint1: CGPoint(x: 0, y: 5.99), controlPoint2: CGPoint(x: 0.01, y: 5.77))
                keycap.addCurve(to: CGPoint(x: 0.14, y: 4.08), controlPoint1: CGPoint(x: 0.02, y: 5.06), controlPoint2: CGPoint(x: 0.05, y: 4.57))
                keycap.addCurve(to: CGPoint(x: 0.59, y: 2.7), controlPoint1: CGPoint(x: 0.23, y: 3.59), controlPoint2: CGPoint(x: 0.37, y: 3.14))
                keycap.addCurve(to: CGPoint(x: 1.44, y: 1.51), controlPoint1: CGPoint(x: 0.81, y: 2.26), controlPoint2: CGPoint(x: 1.1, y: 1.86))
                keycap.addCurve(to: CGPoint(x: 2.61, y: 0.66), controlPoint1: CGPoint(x: 1.78, y: 1.17), controlPoint2: CGPoint(x: 2.18, y: 0.88))
                keycap.addCurve(to: CGPoint(x: 3.98, y: 0.2), controlPoint1: CGPoint(x: 3.05, y: 0.43), controlPoint2: CGPoint(x: 3.49, y: 0.29))
                keycap.addCurve(to: CGPoint(x: 5.42, y: 0.07), controlPoint1: CGPoint(x: 4.45, y: 0.11), controlPoint2: CGPoint(x: 4.94, y: 0.08))
                keycap.addCurve(to: CGPoint(x: 6.08, y: 0.06), controlPoint1: CGPoint(x: 5.64, y: 0.06), controlPoint2: CGPoint(x: 5.86, y: 0.06))
                keycap.addCurve(to: CGPoint(x: 6.87, y: 0.06), controlPoint1: CGPoint(x: 6.35, y: 0.06), controlPoint2: CGPoint(x: 6.61, y: 0.06))
                keycap.addLine(to: CGPoint(x: 9.88, y: 0.06))
                keycap.addLine(to: CGPoint(x: 79.88, y: 0))
                keycap.addLine(to: CGPoint(x: 77.08, y: 0))
                keycap.addLine(to: CGPoint(x: 80.1, y: 0))
                keycap.addCurve(to: CGPoint(x: 80.88, y: 0), controlPoint1: CGPoint(x: 80.36, y: 0), controlPoint2: CGPoint(x: 80.62, y: 0))
                keycap.addCurve(to: CGPoint(x: 81.55, y: 0.01), controlPoint1: CGPoint(x: 81.1, y: 0), controlPoint2: CGPoint(x: 81.32, y: 0.01))
                keycap.addCurve(to: CGPoint(x: 82.99, y: 0.14), controlPoint1: CGPoint(x: 82.03, y: 0.02), controlPoint2: CGPoint(x: 82.51, y: 0.05))
                keycap.addCurve(to: CGPoint(x: 84.36, y: 0.6), controlPoint1: CGPoint(x: 83.47, y: 0.23), controlPoint2: CGPoint(x: 83.92, y: 0.37))
                keycap.addCurve(to: CGPoint(x: 85.53, y: 1.46), controlPoint1: CGPoint(x: 84.79, y: 0.82), controlPoint2: CGPoint(x: 85.19, y: 1.11))
                keycap.addCurve(to: CGPoint(x: 86.38, y: 2.64), controlPoint1: CGPoint(x: 85.87, y: 1.8), controlPoint2: CGPoint(x: 86.16, y: 2.2))
                keycap.addCurve(to: CGPoint(x: 86.83, y: 4.03), controlPoint1: CGPoint(x: 86.6, y: 3.08), controlPoint2: CGPoint(x: 86.74, y: 3.54))
                keycap.addCurve(to: CGPoint(x: 86.95, y: 5.48), controlPoint1: CGPoint(x: 86.91, y: 4.51), controlPoint2: CGPoint(x: 86.94, y: 5))
                keycap.addCurve(to: CGPoint(x: 86.96, y: 6.16), controlPoint1: CGPoint(x: 86.96, y: 5.71), controlPoint2: CGPoint(x: 86.96, y: 5.93))
                keycap.addCurve(to: CGPoint(x: 86.97, y: 6.95), controlPoint1: CGPoint(x: 86.97, y: 6.42), controlPoint2: CGPoint(x: 86.97, y: 6.69))
                keycap.addLine(to: CGPoint(x: 86.97, y: 10))
                keycap.addLine(to: CGPoint(x: 86.97, y: 32))
                keycap.addLine(to: CGPoint(x: 86.97, y: 35.05))
                keycap.addCurve(to: CGPoint(x: 86.96, y: 35.84), controlPoint1: CGPoint(x: 86.97, y: 35.31), controlPoint2: CGPoint(x: 86.97, y: 35.58))
                keycap.addCurve(to: CGPoint(x: 86.95, y: 36.52), controlPoint1: CGPoint(x: 86.96, y: 36.07), controlPoint2: CGPoint(x: 86.96, y: 36.29))
                keycap.close()
                keycap.move(to: CGPoint(x: 86.95, y: 36.52))
                context.saveGState()
                context.translateBy(x: 0.03, y: 0)
                keycap.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap.cgPath)
                context.addRect(keycap.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -87.97, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 87.97, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap.fill()
                context.restoreGState()
                keycap.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.12).setFill()
                keycap.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel = NSMutableAttributedString(string: "return")
                keyLabel.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel.length))
                keyLabel.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel.length))
                keyLabel.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel.length))
                }
                context.saveGState()
                keyLabel.draw(in: CGRect(x: 0, y: 11, width: 87, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// spacebar
            do {
                context.saveGState()
                context.translateBy(x: 130, y: 0)
                
                /// keycap
                let keycap2 = UIBezierPath()
                keycap2.move(to: CGPoint(x: 142, y: 36.52))
                keycap2.addCurve(to: CGPoint(x: 141.87, y: 37.97), controlPoint1: CGPoint(x: 141.98, y: 37), controlPoint2: CGPoint(x: 141.96, y: 37.49))
                keycap2.addCurve(to: CGPoint(x: 141.42, y: 39.36), controlPoint1: CGPoint(x: 141.78, y: 38.46), controlPoint2: CGPoint(x: 141.64, y: 38.92))
                keycap2.addCurve(to: CGPoint(x: 140.58, y: 40.54), controlPoint1: CGPoint(x: 141.2, y: 39.8), controlPoint2: CGPoint(x: 140.92, y: 40.2))
                keycap2.addCurve(to: CGPoint(x: 139.41, y: 41.4), controlPoint1: CGPoint(x: 140.23, y: 40.89), controlPoint2: CGPoint(x: 139.84, y: 41.18))
                keycap2.addCurve(to: CGPoint(x: 138.05, y: 41.86), controlPoint1: CGPoint(x: 138.97, y: 41.63), controlPoint2: CGPoint(x: 138.53, y: 41.77))
                keycap2.addCurve(to: CGPoint(x: 136.61, y: 41.99), controlPoint1: CGPoint(x: 137.57, y: 41.95), controlPoint2: CGPoint(x: 137.09, y: 41.98))
                keycap2.addCurve(to: CGPoint(x: 135.95, y: 42), controlPoint1: CGPoint(x: 136.39, y: 41.99), controlPoint2: CGPoint(x: 136.17, y: 42))
                keycap2.addCurve(to: CGPoint(x: 135.17, y: 42), controlPoint1: CGPoint(x: 135.69, y: 42), controlPoint2: CGPoint(x: 135.43, y: 42))
                keycap2.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap2.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap2.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap2.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap2.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap2.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap2.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap2.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap2.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap2.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap2.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap2.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap2.addLine(to: CGPoint(x: 0, y: 32))
                keycap2.addLine(to: CGPoint(x: 0, y: 10))
                keycap2.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap2.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap2.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap2.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap2.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap2.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap2.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap2.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap2.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap2.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap2.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap2.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap2.addLine(to: CGPoint(x: 134.95, y: 0))
                keycap2.addLine(to: CGPoint(x: 132.16, y: 0))
                keycap2.addLine(to: CGPoint(x: 135.17, y: 0))
                keycap2.addCurve(to: CGPoint(x: 135.95, y: 0), controlPoint1: CGPoint(x: 135.43, y: 0), controlPoint2: CGPoint(x: 135.69, y: 0))
                keycap2.addCurve(to: CGPoint(x: 136.61, y: 0.01), controlPoint1: CGPoint(x: 136.17, y: 0), controlPoint2: CGPoint(x: 136.39, y: 0.01))
                keycap2.addCurve(to: CGPoint(x: 138.05, y: 0.14), controlPoint1: CGPoint(x: 137.09, y: 0.02), controlPoint2: CGPoint(x: 137.57, y: 0.05))
                keycap2.addCurve(to: CGPoint(x: 139.41, y: 0.6), controlPoint1: CGPoint(x: 138.53, y: 0.23), controlPoint2: CGPoint(x: 138.97, y: 0.37))
                keycap2.addCurve(to: CGPoint(x: 140.58, y: 1.46), controlPoint1: CGPoint(x: 139.84, y: 0.82), controlPoint2: CGPoint(x: 140.23, y: 1.11))
                keycap2.addCurve(to: CGPoint(x: 141.42, y: 2.64), controlPoint1: CGPoint(x: 140.92, y: 1.8), controlPoint2: CGPoint(x: 141.2, y: 2.2))
                keycap2.addCurve(to: CGPoint(x: 141.87, y: 4.03), controlPoint1: CGPoint(x: 141.64, y: 3.08), controlPoint2: CGPoint(x: 141.78, y: 3.54))
                keycap2.addCurve(to: CGPoint(x: 142, y: 5.48), controlPoint1: CGPoint(x: 141.96, y: 4.51), controlPoint2: CGPoint(x: 141.98, y: 5))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 6.16), controlPoint1: CGPoint(x: 142, y: 5.71), controlPoint2: CGPoint(x: 142.01, y: 5.93))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 6.95), controlPoint1: CGPoint(x: 142.01, y: 6.42), controlPoint2: CGPoint(x: 142.01, y: 6.69))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 10))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 32))
                keycap2.addLine(to: CGPoint(x: 142.01, y: 35.05))
                keycap2.addCurve(to: CGPoint(x: 142.01, y: 35.84), controlPoint1: CGPoint(x: 142.01, y: 35.31), controlPoint2: CGPoint(x: 142.01, y: 35.58))
                keycap2.addCurve(to: CGPoint(x: 142, y: 36.52), controlPoint1: CGPoint(x: 142.01, y: 36.07), controlPoint2: CGPoint(x: 142, y: 36.29))
                keycap2.close()
                keycap2.move(to: CGPoint(x: 142, y: 36.52))
                context.saveGState()
                keycap2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap2.cgPath)
                context.addRect(keycap2.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -143.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 143.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap2.fill()
                context.restoreGState()
                keycap2.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// keycap
                let keycap3 = UIBezierPath()
                keycap3.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap3.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap3.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap3.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap3.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap3.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap3.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap3.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap3.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap3.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap3.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap3.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap3.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap3.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap3.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap3.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap3.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap3.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap3.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap3.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap3.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap3.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap3.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap3.addLine(to: CGPoint(x: 0, y: 32))
                keycap3.addLine(to: CGPoint(x: 0, y: 10))
                keycap3.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap3.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap3.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap3.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap3.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap3.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap3.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap3.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap3.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap3.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap3.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap3.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap3.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap3.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap3.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap3.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap3.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap3.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap3.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap3.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap3.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap3.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap3.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap3.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap3.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap3.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap3.cgPath)
                context.addRect(keycap3.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap3.fill()
                context.restoreGState()
                keycap3.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap3.fill()
                context.restoreGState()
                
                /// microophone glyph
                let microophoneGlyph = UIBezierPath()
                microophoneGlyph.move(to: CGPoint(x: 10, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 10, y: 8.67))
                microophoneGlyph.addCurve(to: CGPoint(x: 9.97, y: 10.32), controlPoint1: CGPoint(x: 10, y: 9.24), controlPoint2: CGPoint(x: 10, y: 9.78))
                microophoneGlyph.addCurve(to: CGPoint(x: 9.75, y: 11.75), controlPoint1: CGPoint(x: 9.94, y: 10.89), controlPoint2: CGPoint(x: 9.87, y: 11.34))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.17, y: 14.1), controlPoint1: CGPoint(x: 9.49, y: 12.7), controlPoint2: CGPoint(x: 8.94, y: 13.51))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 15), controlPoint1: CGPoint(x: 7.41, y: 14.68), controlPoint2: CGPoint(x: 6.46, y: 15))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.83, y: 14.1), controlPoint1: CGPoint(x: 4.54, y: 15), controlPoint2: CGPoint(x: 3.59, y: 14.68))
                microophoneGlyph.addCurve(to: CGPoint(x: 1.25, y: 11.76), controlPoint1: CGPoint(x: 2.06, y: 13.51), controlPoint2: CGPoint(x: 1.51, y: 12.7))
                microophoneGlyph.addCurve(to: CGPoint(x: 1.03, y: 10.32), controlPoint1: CGPoint(x: 1.13, y: 11.34), controlPoint2: CGPoint(x: 1.06, y: 10.89))
                microophoneGlyph.addCurve(to: CGPoint(x: 1, y: 8.65), controlPoint1: CGPoint(x: 1, y: 9.77), controlPoint2: CGPoint(x: 1, y: 9.23))
                microophoneGlyph.addLine(to: CGPoint(x: 1, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 8.52))
                microophoneGlyph.addLine(to: CGPoint(x: 0, y: 8.52))
                microophoneGlyph.addCurve(to: CGPoint(x: 0.03, y: 10.37), controlPoint1: CGPoint(x: 0, y: 9.14), controlPoint2: CGPoint(x: -0, y: 9.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 0.29, y: 12.02), controlPoint1: CGPoint(x: 0.06, y: 10.93), controlPoint2: CGPoint(x: 0.13, y: 11.48))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.22, y: 14.89), controlPoint1: CGPoint(x: 0.61, y: 13.17), controlPoint2: CGPoint(x: 1.27, y: 14.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 5, y: 15.97), controlPoint1: CGPoint(x: 3.03, y: 15.51), controlPoint2: CGPoint(x: 3.99, y: 15.88))
                microophoneGlyph.addLine(to: CGPoint(x: 5, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 20))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 20))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 6, y: 19))
                microophoneGlyph.addLine(to: CGPoint(x: 6, y: 15.97))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.78, y: 14.89), controlPoint1: CGPoint(x: 7.01, y: 15.88), controlPoint2: CGPoint(x: 7.97, y: 15.51))
                microophoneGlyph.addCurve(to: CGPoint(x: 10.72, y: 12.02), controlPoint1: CGPoint(x: 9.73, y: 14.17), controlPoint2: CGPoint(x: 10.4, y: 13.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 10.97, y: 10.37), controlPoint1: CGPoint(x: 10.87, y: 11.48), controlPoint2: CGPoint(x: 10.94, y: 10.93))
                microophoneGlyph.addCurve(to: CGPoint(x: 11, y: 8.52), controlPoint1: CGPoint(x: 11, y: 9.76), controlPoint2: CGPoint(x: 11, y: 9.14))
                microophoneGlyph.addCurve(to: CGPoint(x: 11, y: 8.52), controlPoint1: CGPoint(x: 11, y: 8.52), controlPoint2: CGPoint(x: 11, y: 8.52))
                microophoneGlyph.addLine(to: CGPoint(x: 11, y: 7))
                microophoneGlyph.addLine(to: CGPoint(x: 10, y: 7))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 3, y: 4.67))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.02, y: 3.64), controlPoint1: CGPoint(x: 3, y: 4.33), controlPoint2: CGPoint(x: 3, y: 3.98))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.14, y: 2.8), controlPoint1: CGPoint(x: 3.04, y: 3.3), controlPoint2: CGPoint(x: 3.08, y: 3.04))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.02, y: 1.5), controlPoint1: CGPoint(x: 3.29, y: 2.27), controlPoint2: CGPoint(x: 3.59, y: 1.83))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.36, y: 1.28), controlPoint1: CGPoint(x: 4.12, y: 1.42), controlPoint2: CGPoint(x: 4.24, y: 1.35))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.71, y: 1.13), controlPoint1: CGPoint(x: 4.46, y: 1.23), controlPoint2: CGPoint(x: 4.58, y: 1.18))
                microophoneGlyph.addLine(to: CGPoint(x: 4.77, y: 1.11))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 1), controlPoint1: CGPoint(x: 5, y: 1.04), controlPoint2: CGPoint(x: 5.25, y: 1))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.23, y: 1.11), controlPoint1: CGPoint(x: 5.75, y: 1), controlPoint2: CGPoint(x: 5.99, y: 1.04))
                microophoneGlyph.addLine(to: CGPoint(x: 6.3, y: 1.14))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.65, y: 1.29), controlPoint1: CGPoint(x: 6.42, y: 1.18), controlPoint2: CGPoint(x: 6.54, y: 1.23))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.98, y: 1.5), controlPoint1: CGPoint(x: 6.76, y: 1.35), controlPoint2: CGPoint(x: 6.87, y: 1.42))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.86, y: 2.8), controlPoint1: CGPoint(x: 7.41, y: 1.82), controlPoint2: CGPoint(x: 7.71, y: 2.27))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.98, y: 3.64), controlPoint1: CGPoint(x: 7.92, y: 3.04), controlPoint2: CGPoint(x: 7.96, y: 3.3))
                microophoneGlyph.addCurve(to: CGPoint(x: 8, y: 4.67), controlPoint1: CGPoint(x: 8, y: 3.98), controlPoint2: CGPoint(x: 8, y: 4.33))
                microophoneGlyph.addLine(to: CGPoint(x: 8, y: 9.33))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.98, y: 10.36), controlPoint1: CGPoint(x: 8, y: 9.67), controlPoint2: CGPoint(x: 8, y: 10.02))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.85, y: 11.2), controlPoint1: CGPoint(x: 7.96, y: 10.7), controlPoint2: CGPoint(x: 7.92, y: 10.96))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.98, y: 12.5), controlPoint1: CGPoint(x: 7.71, y: 11.73), controlPoint2: CGPoint(x: 7.41, y: 12.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 13), controlPoint1: CGPoint(x: 6.56, y: 12.82), controlPoint2: CGPoint(x: 6.03, y: 13))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.02, y: 12.5), controlPoint1: CGPoint(x: 4.97, y: 13), controlPoint2: CGPoint(x: 4.44, y: 12.82))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.15, y: 11.2), controlPoint1: CGPoint(x: 3.59, y: 12.17), controlPoint2: CGPoint(x: 3.29, y: 11.73))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.02, y: 10.36), controlPoint1: CGPoint(x: 3.08, y: 10.96), controlPoint2: CGPoint(x: 3.04, y: 10.7))
                microophoneGlyph.addCurve(to: CGPoint(x: 3, y: 9.33), controlPoint1: CGPoint(x: 3, y: 10.02), controlPoint2: CGPoint(x: 3, y: 9.67))
                microophoneGlyph.addLine(to: CGPoint(x: 3, y: 4.67))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 2.02, y: 10.42))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.18, y: 11.47), controlPoint1: CGPoint(x: 2.04, y: 10.78), controlPoint2: CGPoint(x: 2.08, y: 11.12))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.41, y: 13.3), controlPoint1: CGPoint(x: 2.39, y: 12.2), controlPoint2: CGPoint(x: 2.81, y: 12.83))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 14), controlPoint1: CGPoint(x: 4.01, y: 13.75), controlPoint2: CGPoint(x: 4.75, y: 14))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.59, y: 13.3), controlPoint1: CGPoint(x: 6.25, y: 14), controlPoint2: CGPoint(x: 6.99, y: 13.75))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.82, y: 11.47), controlPoint1: CGPoint(x: 8.19, y: 12.83), controlPoint2: CGPoint(x: 8.62, y: 12.2))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.98, y: 10.42), controlPoint1: CGPoint(x: 8.92, y: 11.12), controlPoint2: CGPoint(x: 8.96, y: 10.78))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 9.24), controlPoint1: CGPoint(x: 9, y: 10.03), controlPoint2: CGPoint(x: 9, y: 9.63))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 9.24), controlPoint1: CGPoint(x: 9, y: 9.24), controlPoint2: CGPoint(x: 9, y: 9.24))
                microophoneGlyph.addLine(to: CGPoint(x: 9, y: 4.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 9, y: 4.76), controlPoint1: CGPoint(x: 9, y: 4.76), controlPoint2: CGPoint(x: 9, y: 4.76))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.98, y: 3.58), controlPoint1: CGPoint(x: 9, y: 4.37), controlPoint2: CGPoint(x: 9, y: 3.97))
                microophoneGlyph.addCurve(to: CGPoint(x: 8.82, y: 2.53), controlPoint1: CGPoint(x: 8.96, y: 3.22), controlPoint2: CGPoint(x: 8.92, y: 2.88))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.59, y: 0.71), controlPoint1: CGPoint(x: 8.62, y: 1.8), controlPoint2: CGPoint(x: 8.19, y: 1.17))
                microophoneGlyph.addCurve(to: CGPoint(x: 7.11, y: 0.4), controlPoint1: CGPoint(x: 7.44, y: 0.59), controlPoint2: CGPoint(x: 7.28, y: 0.49))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.61, y: 0.19), controlPoint1: CGPoint(x: 6.95, y: 0.32), controlPoint2: CGPoint(x: 6.79, y: 0.25))
                microophoneGlyph.addCurve(to: CGPoint(x: 6.6, y: 0.18), controlPoint1: CGPoint(x: 6.61, y: 0.19), controlPoint2: CGPoint(x: 6.61, y: 0.18))
                microophoneGlyph.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 6.25, y: 0.06), controlPoint2: CGPoint(x: 5.88, y: 0))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.4, y: 0.18), controlPoint1: CGPoint(x: 5.12, y: 0), controlPoint2: CGPoint(x: 4.75, y: 0.06))
                microophoneGlyph.addCurve(to: CGPoint(x: 4.38, y: 0.19), controlPoint1: CGPoint(x: 4.39, y: 0.18), controlPoint2: CGPoint(x: 4.39, y: 0.19))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.89, y: 0.4), controlPoint1: CGPoint(x: 4.21, y: 0.25), controlPoint2: CGPoint(x: 4.05, y: 0.32))
                microophoneGlyph.addCurve(to: CGPoint(x: 3.41, y: 0.71), controlPoint1: CGPoint(x: 3.72, y: 0.49), controlPoint2: CGPoint(x: 3.56, y: 0.59))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.18, y: 2.53), controlPoint1: CGPoint(x: 2.81, y: 1.17), controlPoint2: CGPoint(x: 2.39, y: 1.8))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.02, y: 3.58), controlPoint1: CGPoint(x: 2.08, y: 2.88), controlPoint2: CGPoint(x: 2.04, y: 3.22))
                microophoneGlyph.addCurve(to: CGPoint(x: 2, y: 4.76), controlPoint1: CGPoint(x: 2, y: 3.97), controlPoint2: CGPoint(x: 2, y: 4.37))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 4.76))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 9.24))
                microophoneGlyph.addLine(to: CGPoint(x: 2, y: 9.24))
                microophoneGlyph.addCurve(to: CGPoint(x: 2.02, y: 10.42), controlPoint1: CGPoint(x: 2, y: 9.63), controlPoint2: CGPoint(x: 2, y: 10.03))
                microophoneGlyph.addLine(to: CGPoint(x: 2.02, y: 10.42))
                microophoneGlyph.close()
                microophoneGlyph.move(to: CGPoint(x: 2.02, y: 10.42))
                context.saveGState()
                context.translateBy(x: 10, y: 11)
                microophoneGlyph.usesEvenOddFillRule = true
                UIColor.white.setFill()
                microophoneGlyph.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap4 = UIBezierPath()
                keycap4.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap4.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap4.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap4.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap4.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap4.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap4.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap4.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap4.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap4.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap4.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap4.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap4.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap4.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap4.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap4.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap4.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap4.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap4.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap4.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap4.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap4.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap4.addLine(to: CGPoint(x: 0, y: 32))
                keycap4.addLine(to: CGPoint(x: 0, y: 10))
                keycap4.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap4.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap4.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap4.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap4.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap4.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap4.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap4.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap4.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap4.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap4.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap4.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap4.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap4.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap4.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap4.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap4.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap4.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap4.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap4.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap4.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap4.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap4.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap4.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap4.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap4.addLine(to: CGPoint(x: 42, y: 10))
                keycap4.addLine(to: CGPoint(x: 42, y: 32))
                keycap4.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap4.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap4.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap4.close()
                keycap4.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap4.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap4.cgPath)
                context.addRect(keycap4.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap4.fill()
                context.restoreGState()
                keycap4.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.12).setFill()
                keycap4.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel2 = NSMutableAttributedString(string: "123")
                keyLabel2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel2.length))
                keyLabel2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel2.length))
                keyLabel2.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel2.length))
                }
                context.saveGState()
                keyLabel2.draw(in: CGRect(x: 0, y: 13, width: 42, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 47, y: 0)
                
                /// keycap
                let keycap5 = UIBezierPath()
                keycap5.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap5.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap5.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap5.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap5.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap5.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap5.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap5.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap5.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap5.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap5.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap5.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap5.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap5.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap5.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap5.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap5.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap5.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap5.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap5.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap5.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap5.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap5.addLine(to: CGPoint(x: 0, y: 32))
                keycap5.addLine(to: CGPoint(x: 0, y: 10))
                keycap5.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap5.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap5.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap5.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap5.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap5.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap5.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap5.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap5.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap5.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap5.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap5.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap5.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap5.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap5.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap5.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap5.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap5.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap5.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap5.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap5.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap5.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap5.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap5.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap5.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap5.addLine(to: CGPoint(x: 42, y: 10))
                keycap5.addLine(to: CGPoint(x: 42, y: 32))
                keycap5.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap5.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap5.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap5.close()
                keycap5.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap5.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap5.cgPath)
                context.addRect(keycap5.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap5.fill()
                context.restoreGState()
                keycap5.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.12).setFill()
                keycap5.fill()
                context.restoreGState()
                
                /// icon
                let icon = UIBezierPath()
                icon.move(to: CGPoint(x: 9.75, y: 19.5))
                icon.addCurve(to: CGPoint(x: 0, y: 9.75), controlPoint1: CGPoint(x: 4.37, y: 19.5), controlPoint2: CGPoint(x: 0, y: 15.13))
                icon.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 0, y: 4.37), controlPoint2: CGPoint(x: 4.37, y: 0))
                icon.addCurve(to: CGPoint(x: 19.5, y: 9.75), controlPoint1: CGPoint(x: 15.13, y: 0), controlPoint2: CGPoint(x: 19.5, y: 4.37))
                icon.addCurve(to: CGPoint(x: 9.75, y: 19.5), controlPoint1: CGPoint(x: 19.5, y: 15.13), controlPoint2: CGPoint(x: 15.13, y: 19.5))
                icon.close()
                icon.move(to: CGPoint(x: 9.75, y: 18.5))
                icon.addCurve(to: CGPoint(x: 18.5, y: 9.75), controlPoint1: CGPoint(x: 14.58, y: 18.5), controlPoint2: CGPoint(x: 18.5, y: 14.58))
                icon.addCurve(to: CGPoint(x: 9.75, y: 1), controlPoint1: CGPoint(x: 18.5, y: 4.92), controlPoint2: CGPoint(x: 14.58, y: 1))
                icon.addCurve(to: CGPoint(x: 1, y: 9.75), controlPoint1: CGPoint(x: 4.92, y: 1), controlPoint2: CGPoint(x: 1, y: 4.92))
                icon.addCurve(to: CGPoint(x: 9.75, y: 18.5), controlPoint1: CGPoint(x: 1, y: 14.58), controlPoint2: CGPoint(x: 4.92, y: 18.5))
                icon.close()
                icon.move(to: CGPoint(x: 6.75, y: 8))
                icon.addCurve(to: CGPoint(x: 5.5, y: 6.75), controlPoint1: CGPoint(x: 6.06, y: 8), controlPoint2: CGPoint(x: 5.5, y: 7.44))
                icon.addCurve(to: CGPoint(x: 6.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 6.06), controlPoint2: CGPoint(x: 6.06, y: 5.5))
                icon.addCurve(to: CGPoint(x: 8, y: 6.75), controlPoint1: CGPoint(x: 7.44, y: 5.5), controlPoint2: CGPoint(x: 8, y: 6.06))
                icon.addCurve(to: CGPoint(x: 6.75, y: 8), controlPoint1: CGPoint(x: 8, y: 7.44), controlPoint2: CGPoint(x: 7.44, y: 8))
                icon.close()
                icon.move(to: CGPoint(x: 9.75, y: 16.5))
                icon.addCurve(to: CGPoint(x: 3, y: 11), controlPoint1: CGPoint(x: 6.02, y: 16.5), controlPoint2: CGPoint(x: 3, y: 13.08))
                icon.addCurve(to: CGPoint(x: 9.75, y: 11), controlPoint1: CGPoint(x: 3, y: 9.06), controlPoint2: CGPoint(x: 6.02, y: 11))
                icon.addCurve(to: CGPoint(x: 16.5, y: 11), controlPoint1: CGPoint(x: 13.48, y: 11), controlPoint2: CGPoint(x: 16.5, y: 9.1))
                icon.addCurve(to: CGPoint(x: 9.75, y: 16.5), controlPoint1: CGPoint(x: 16.5, y: 13.02), controlPoint2: CGPoint(x: 13.48, y: 16.5))
                icon.close()
                icon.move(to: CGPoint(x: 12.75, y: 8))
                icon.addCurve(to: CGPoint(x: 11.5, y: 6.75), controlPoint1: CGPoint(x: 12.06, y: 8), controlPoint2: CGPoint(x: 11.5, y: 7.44))
                icon.addCurve(to: CGPoint(x: 12.75, y: 5.5), controlPoint1: CGPoint(x: 11.5, y: 6.06), controlPoint2: CGPoint(x: 12.06, y: 5.5))
                icon.addCurve(to: CGPoint(x: 14, y: 6.75), controlPoint1: CGPoint(x: 13.44, y: 5.5), controlPoint2: CGPoint(x: 14, y: 6.06))
                icon.addCurve(to: CGPoint(x: 12.75, y: 8), controlPoint1: CGPoint(x: 14, y: 7.44), controlPoint2: CGPoint(x: 13.44, y: 8))
                icon.close()
                icon.move(to: CGPoint(x: 4.5, y: 11.5))
                icon.addCurve(to: CGPoint(x: 4.85, y: 12.33), controlPoint1: CGPoint(x: 4.5, y: 11.77), controlPoint2: CGPoint(x: 4.66, y: 12.15))
                icon.addCurve(to: CGPoint(x: 9.79, y: 13.5), controlPoint1: CGPoint(x: 4.85, y: 12.33), controlPoint2: CGPoint(x: 5.55, y: 13.5))
                icon.addCurve(to: CGPoint(x: 14.65, y: 12.35), controlPoint1: CGPoint(x: 14.04, y: 13.5), controlPoint2: CGPoint(x: 14.65, y: 12.35))
                icon.addCurve(to: CGPoint(x: 15, y: 11.5), controlPoint1: CGPoint(x: 14.85, y: 12.17), controlPoint2: CGPoint(x: 15, y: 11.78))
                icon.addCurve(to: CGPoint(x: 14.54, y: 11.19), controlPoint1: CGPoint(x: 15, y: 11.23), controlPoint2: CGPoint(x: 14.79, y: 11.08))
                icon.addCurve(to: CGPoint(x: 9.86, y: 12), controlPoint1: CGPoint(x: 14.54, y: 11.19), controlPoint2: CGPoint(x: 12.88, y: 12))
                icon.addCurve(to: CGPoint(x: 4.97, y: 11.17), controlPoint1: CGPoint(x: 6.85, y: 12), controlPoint2: CGPoint(x: 4.97, y: 11.17))
                icon.addCurve(to: CGPoint(x: 4.5, y: 11.5), controlPoint1: CGPoint(x: 4.7, y: 11.08), controlPoint2: CGPoint(x: 4.5, y: 11.22))
                icon.close()
                icon.move(to: CGPoint(x: 4.5, y: 11.5))
                context.saveGState()
                context.translateBy(x: 11, y: 11)
                icon.usesEvenOddFillRule = true
                UIColor.white.setFill()
                icon.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 117)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 323, y: 0)
                
                /// keycap
                let keycap6 = UIBezierPath()
                keycap6.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap6.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap6.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap6.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap6.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap6.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap6.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap6.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap6.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap6.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap6.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap6.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap6.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap6.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap6.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap6.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap6.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap6.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap6.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap6.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap6.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap6.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap6.addLine(to: CGPoint(x: 0, y: 32))
                keycap6.addLine(to: CGPoint(x: 0, y: 10))
                keycap6.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap6.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap6.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap6.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap6.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap6.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap6.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap6.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap6.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap6.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap6.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap6.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap6.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap6.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap6.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap6.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap6.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap6.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap6.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap6.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap6.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap6.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap6.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap6.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap6.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap6.addLine(to: CGPoint(x: 42, y: 10))
                keycap6.addLine(to: CGPoint(x: 42, y: 32))
                keycap6.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap6.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap6.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap6.close()
                keycap6.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap6.cgPath)
                context.addRect(keycap6.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap6.fill()
                context.restoreGState()
                keycap6.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.12).setFill()
                keycap6.fill()
                context.restoreGState()
                
                /// backspace
                let backspace = UIBezierPath()
                backspace.move(to: CGPoint(x: 22, y: 4.87))
                backspace.addCurve(to: CGPoint(x: 22, y: 4.31), controlPoint1: CGPoint(x: 22, y: 4.68), controlPoint2: CGPoint(x: 22, y: 4.49))
                backspace.addCurve(to: CGPoint(x: 21.99, y: 3.84), controlPoint1: CGPoint(x: 22, y: 4.15), controlPoint2: CGPoint(x: 22, y: 4))
                backspace.addCurve(to: CGPoint(x: 21.9, y: 2.82), controlPoint1: CGPoint(x: 21.98, y: 3.5), controlPoint2: CGPoint(x: 21.96, y: 3.15))
                backspace.addCurve(to: CGPoint(x: 21.58, y: 1.85), controlPoint1: CGPoint(x: 21.84, y: 2.48), controlPoint2: CGPoint(x: 21.74, y: 2.16))
                backspace.addCurve(to: CGPoint(x: 20.98, y: 1.02), controlPoint1: CGPoint(x: 21.43, y: 1.54), controlPoint2: CGPoint(x: 21.22, y: 1.26))
                backspace.addCurve(to: CGPoint(x: 20.15, y: 0.42), controlPoint1: CGPoint(x: 20.74, y: 0.78), controlPoint2: CGPoint(x: 20.46, y: 0.57))
                backspace.addCurve(to: CGPoint(x: 19.18, y: 0.1), controlPoint1: CGPoint(x: 19.84, y: 0.26), controlPoint2: CGPoint(x: 19.52, y: 0.16))
                backspace.addCurve(to: CGPoint(x: 18.16, y: 0.01), controlPoint1: CGPoint(x: 18.84, y: 0.04), controlPoint2: CGPoint(x: 18.5, y: 0.02))
                backspace.addCurve(to: CGPoint(x: 17.69, y: 0), controlPoint1: CGPoint(x: 18, y: 0), controlPoint2: CGPoint(x: 17.85, y: 0))
                backspace.addCurve(to: CGPoint(x: 17.13, y: 0), controlPoint1: CGPoint(x: 17.5, y: 0), controlPoint2: CGPoint(x: 17.32, y: 0))
                backspace.addLine(to: CGPoint(x: 15, y: 0))
                backspace.addLine(to: CGPoint(x: 16.98, y: 0))
                backspace.addLine(to: CGPoint(x: 9, y: 0))
                backspace.addCurve(to: CGPoint(x: 7.5, y: 0.5), controlPoint1: CGPoint(x: 8.31, y: -0.01), controlPoint2: CGPoint(x: 7.73, y: 0.27))
                backspace.addLine(to: CGPoint(x: 0.11, y: 7.73))
                backspace.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.04, y: 7.8), controlPoint2: CGPoint(x: 0, y: 7.9))
                backspace.addCurve(to: CGPoint(x: 0.11, y: 8.27), controlPoint1: CGPoint(x: 0, y: 8.1), controlPoint2: CGPoint(x: 0.04, y: 8.2))
                backspace.addLine(to: CGPoint(x: 7.5, y: 15.5))
                backspace.addCurve(to: CGPoint(x: 9, y: 16), controlPoint1: CGPoint(x: 7.73, y: 15.73), controlPoint2: CGPoint(x: 8.31, y: 16.01))
                backspace.addLine(to: CGPoint(x: 16.98, y: 16))
                backspace.addLine(to: CGPoint(x: 17.13, y: 16))
                backspace.addCurve(to: CGPoint(x: 17.69, y: 16), controlPoint1: CGPoint(x: 17.32, y: 16), controlPoint2: CGPoint(x: 17.5, y: 16))
                backspace.addCurve(to: CGPoint(x: 18.16, y: 15.99), controlPoint1: CGPoint(x: 17.85, y: 16), controlPoint2: CGPoint(x: 18, y: 16))
                backspace.addCurve(to: CGPoint(x: 19.18, y: 15.9), controlPoint1: CGPoint(x: 18.5, y: 15.98), controlPoint2: CGPoint(x: 18.84, y: 15.96))
                backspace.addCurve(to: CGPoint(x: 20.15, y: 15.58), controlPoint1: CGPoint(x: 19.52, y: 15.84), controlPoint2: CGPoint(x: 19.84, y: 15.74))
                backspace.addCurve(to: CGPoint(x: 20.98, y: 14.98), controlPoint1: CGPoint(x: 20.46, y: 15.43), controlPoint2: CGPoint(x: 20.74, y: 15.22))
                backspace.addCurve(to: CGPoint(x: 21.58, y: 14.15), controlPoint1: CGPoint(x: 21.22, y: 14.74), controlPoint2: CGPoint(x: 21.43, y: 14.46))
                backspace.addCurve(to: CGPoint(x: 21.9, y: 13.18), controlPoint1: CGPoint(x: 21.74, y: 13.84), controlPoint2: CGPoint(x: 21.84, y: 13.52))
                backspace.addCurve(to: CGPoint(x: 21.99, y: 12.16), controlPoint1: CGPoint(x: 21.96, y: 12.85), controlPoint2: CGPoint(x: 21.98, y: 12.5))
                backspace.addCurve(to: CGPoint(x: 22, y: 11.69), controlPoint1: CGPoint(x: 22, y: 12), controlPoint2: CGPoint(x: 22, y: 11.85))
                backspace.addCurve(to: CGPoint(x: 22, y: 11.13), controlPoint1: CGPoint(x: 22, y: 11.51), controlPoint2: CGPoint(x: 22, y: 11.32))
                backspace.addLine(to: CGPoint(x: 22, y: 9))
                backspace.addLine(to: CGPoint(x: 22, y: 7))
                backspace.addLine(to: CGPoint(x: 22, y: 4.87))
                backspace.close()
                backspace.move(to: CGPoint(x: 22, y: 4.87))
                context.saveGState()
                context.translateBy(x: 9, y: 13)
                backspace.lineJoinStyle = .round
                backspace.lineCapStyle = .round
                context.saveGState()
                backspace.lineWidth = 3
                context.beginPath()
                context.addPath(backspace.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                backspace.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Path
                let path13 = UIBezierPath()
                path13.move(to: CGPoint(x: 7.22, y: 6.51))
                path13.addCurve(to: CGPoint(x: 7.22, y: 7.22), controlPoint1: CGPoint(x: 7.41, y: 6.71), controlPoint2: CGPoint(x: 7.41, y: 7.02))
                path13.addCurve(to: CGPoint(x: 6.51, y: 7.22), controlPoint1: CGPoint(x: 7.02, y: 7.41), controlPoint2: CGPoint(x: 6.71, y: 7.41))
                path13.addLine(to: CGPoint(x: 3.68, y: 4.39))
                path13.addLine(to: CGPoint(x: 0.85, y: 7.22))
                path13.addCurve(to: CGPoint(x: 0.15, y: 7.22), controlPoint1: CGPoint(x: 0.66, y: 7.41), controlPoint2: CGPoint(x: 0.34, y: 7.41))
                path13.addCurve(to: CGPoint(x: 0.15, y: 6.51), controlPoint1: CGPoint(x: -0.05, y: 7.02), controlPoint2: CGPoint(x: -0.05, y: 6.71))
                path13.addLine(to: CGPoint(x: 2.98, y: 3.68))
                path13.addLine(to: CGPoint(x: 0.15, y: 0.85))
                path13.addCurve(to: CGPoint(x: 0.15, y: 0.15), controlPoint1: CGPoint(x: -0.05, y: 0.66), controlPoint2: CGPoint(x: -0.05, y: 0.34))
                path13.addCurve(to: CGPoint(x: 0.85, y: 0.15), controlPoint1: CGPoint(x: 0.34, y: -0.05), controlPoint2: CGPoint(x: 0.66, y: -0.05))
                path13.addLine(to: CGPoint(x: 3.68, y: 2.97))
                path13.addLine(to: CGPoint(x: 6.51, y: 0.15))
                path13.addCurve(to: CGPoint(x: 7.22, y: 0.15), controlPoint1: CGPoint(x: 6.71, y: -0.05), controlPoint2: CGPoint(x: 7.02, y: -0.05))
                path13.addCurve(to: CGPoint(x: 7.22, y: 0.85), controlPoint1: CGPoint(x: 7.41, y: 0.34), controlPoint2: CGPoint(x: 7.41, y: 0.66))
                path13.addLine(to: CGPoint(x: 4.39, y: 3.68))
                path13.addLine(to: CGPoint(x: 7.22, y: 6.51))
                path13.close()
                path13.move(to: CGPoint(x: 7.22, y: 6.51))
                context.saveGState()
                context.translateBy(x: 18.82, y: 17.32)
                path13.usesEvenOddFillRule = true
                UIColor.white.setFill()
                path13.fill()
                path13.lineWidth = 0.75
                UIColor.white.setStroke()
                path13.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 278, y: 0)
                
                /// keycap
                let keycap7 = UIBezierPath()
                keycap7.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap7.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap7.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap7.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap7.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap7.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap7.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap7.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap7.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap7.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap7.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap7.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap7.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap7.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap7.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap7.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap7.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap7.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap7.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap7.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap7.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap7.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap7.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap7.addLine(to: CGPoint(x: 0, y: 32))
                keycap7.addLine(to: CGPoint(x: 0, y: 10))
                keycap7.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap7.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap7.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap7.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap7.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap7.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap7.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap7.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap7.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap7.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap7.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap7.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap7.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap7.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap7.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap7.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap7.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap7.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap7.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap7.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap7.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap7.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap7.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap7.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap7.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap7.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap7.cgPath)
                context.addRect(keycap7.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap7.fill()
                context.restoreGState()
                keycap7.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap7.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel3 = NSMutableAttributedString(string: "M")
                keyLabel3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel3.length))
                keyLabel3.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel3.length))
                keyLabel3.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel3.length))
                }
                context.saveGState()
                keyLabel3.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 241, y: 0)
                
                /// keycap
                let keycap8 = UIBezierPath()
                keycap8.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap8.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap8.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap8.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap8.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap8.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap8.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap8.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap8.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap8.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap8.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap8.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap8.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap8.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap8.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap8.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap8.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap8.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap8.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap8.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap8.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap8.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap8.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap8.addLine(to: CGPoint(x: 0, y: 32))
                keycap8.addLine(to: CGPoint(x: 0, y: 10))
                keycap8.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap8.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap8.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap8.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap8.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap8.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap8.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap8.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap8.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap8.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap8.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap8.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap8.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap8.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap8.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap8.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap8.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap8.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap8.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap8.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap8.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap8.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap8.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap8.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap8.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap8.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap8.cgPath)
                context.addRect(keycap8.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap8.fill()
                context.restoreGState()
                keycap8.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap8.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel4 = NSMutableAttributedString(string: "N")
                keyLabel4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel4.length))
                keyLabel4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel4.length))
                keyLabel4.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel4.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel4.length))
                }
                context.saveGState()
                keyLabel4.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 204, y: 0)
                
                /// keycap
                let keycap9 = UIBezierPath()
                keycap9.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap9.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap9.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap9.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap9.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap9.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap9.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap9.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap9.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap9.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap9.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap9.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap9.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap9.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap9.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap9.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap9.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap9.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap9.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap9.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap9.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap9.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap9.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap9.addLine(to: CGPoint(x: 0, y: 32))
                keycap9.addLine(to: CGPoint(x: 0, y: 10))
                keycap9.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap9.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap9.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap9.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap9.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap9.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap9.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap9.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap9.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap9.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap9.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap9.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap9.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap9.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap9.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap9.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap9.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap9.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap9.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap9.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap9.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap9.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap9.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap9.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap9.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap9.cgPath)
                context.addRect(keycap9.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap9.fill()
                context.restoreGState()
                keycap9.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap9.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel5 = NSMutableAttributedString(string: "B")
                keyLabel5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel5.length))
                keyLabel5.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel5.length))
                keyLabel5.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel5.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel5.length))
                }
                context.saveGState()
                keyLabel5.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 167, y: 0)
                
                /// keycap
                let keycap10 = UIBezierPath()
                keycap10.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap10.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap10.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap10.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap10.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap10.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap10.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap10.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap10.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap10.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap10.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap10.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap10.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap10.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap10.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap10.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap10.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap10.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap10.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap10.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap10.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap10.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap10.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap10.addLine(to: CGPoint(x: 0, y: 32))
                keycap10.addLine(to: CGPoint(x: 0, y: 10))
                keycap10.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap10.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap10.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap10.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap10.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap10.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap10.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap10.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap10.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap10.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap10.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap10.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap10.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap10.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap10.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap10.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap10.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap10.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap10.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap10.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap10.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap10.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap10.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap10.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap10.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap10.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap10.cgPath)
                context.addRect(keycap10.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap10.fill()
                context.restoreGState()
                keycap10.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap10.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel6 = NSMutableAttributedString(string: "V")
                keyLabel6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel6.length))
                keyLabel6.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel6.length))
                keyLabel6.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel6.length))
                }
                context.saveGState()
                keyLabel6.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 130, y: 0)
                
                /// keycap
                let keycap11 = UIBezierPath()
                keycap11.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap11.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap11.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap11.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap11.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap11.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap11.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap11.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap11.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap11.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap11.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap11.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap11.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap11.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap11.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap11.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap11.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap11.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap11.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap11.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap11.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap11.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap11.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap11.addLine(to: CGPoint(x: 0, y: 32))
                keycap11.addLine(to: CGPoint(x: 0, y: 10))
                keycap11.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap11.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap11.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap11.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap11.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap11.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap11.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap11.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap11.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap11.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap11.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap11.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap11.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap11.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap11.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap11.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap11.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap11.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap11.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap11.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap11.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap11.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap11.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap11.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap11.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap11.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap11.cgPath)
                context.addRect(keycap11.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap11.fill()
                context.restoreGState()
                keycap11.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap11.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel7 = NSMutableAttributedString(string: "C")
                keyLabel7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel7.length))
                keyLabel7.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel7.length))
                keyLabel7.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel7.length))
                }
                context.saveGState()
                keyLabel7.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// keycap
                let keycap12 = UIBezierPath()
                keycap12.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap12.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap12.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap12.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap12.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap12.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap12.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap12.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap12.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap12.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap12.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap12.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap12.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap12.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap12.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap12.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap12.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap12.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap12.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap12.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap12.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap12.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap12.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap12.addLine(to: CGPoint(x: 0, y: 32))
                keycap12.addLine(to: CGPoint(x: 0, y: 10))
                keycap12.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap12.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap12.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap12.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap12.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap12.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap12.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap12.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap12.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap12.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap12.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap12.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap12.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap12.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap12.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap12.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap12.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap12.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap12.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap12.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap12.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap12.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap12.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap12.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap12.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap12.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap12.cgPath)
                context.addRect(keycap12.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap12.fill()
                context.restoreGState()
                keycap12.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap12.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel8 = NSMutableAttributedString(string: "X")
                keyLabel8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel8.length))
                keyLabel8.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel8.length))
                keyLabel8.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel8.length))
                }
                context.saveGState()
                keyLabel8.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 56, y: 0)
                
                /// keycap
                let keycap13 = UIBezierPath()
                keycap13.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap13.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap13.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap13.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap13.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap13.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap13.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap13.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap13.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap13.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap13.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap13.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap13.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap13.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap13.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap13.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap13.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap13.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap13.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap13.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap13.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap13.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap13.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap13.addLine(to: CGPoint(x: 0, y: 32))
                keycap13.addLine(to: CGPoint(x: 0, y: 10))
                keycap13.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap13.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap13.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap13.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap13.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap13.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap13.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap13.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap13.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap13.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap13.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap13.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap13.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap13.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap13.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap13.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap13.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap13.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap13.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap13.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap13.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap13.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap13.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap13.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap13.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap13.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap13.cgPath)
                context.addRect(keycap13.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap13.fill()
                context.restoreGState()
                keycap13.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap13.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel9 = NSMutableAttributedString(string: "Z")
                keyLabel9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel9.length))
                keyLabel9.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel9.length))
                keyLabel9.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel9.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel9.length))
                }
                context.saveGState()
                keyLabel9.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap14 = UIBezierPath()
                keycap14.move(to: CGPoint(x: 41.99, y: 36.52))
                keycap14.addCurve(to: CGPoint(x: 41.86, y: 37.97), controlPoint1: CGPoint(x: 41.98, y: 37), controlPoint2: CGPoint(x: 41.95, y: 37.49))
                keycap14.addCurve(to: CGPoint(x: 41.41, y: 39.36), controlPoint1: CGPoint(x: 41.78, y: 38.46), controlPoint2: CGPoint(x: 41.63, y: 38.92))
                keycap14.addCurve(to: CGPoint(x: 40.56, y: 40.54), controlPoint1: CGPoint(x: 41.19, y: 39.8), controlPoint2: CGPoint(x: 40.9, y: 40.2))
                keycap14.addCurve(to: CGPoint(x: 39.39, y: 41.4), controlPoint1: CGPoint(x: 40.22, y: 40.89), controlPoint2: CGPoint(x: 39.82, y: 41.18))
                keycap14.addCurve(to: CGPoint(x: 38.02, y: 41.86), controlPoint1: CGPoint(x: 38.96, y: 41.63), controlPoint2: CGPoint(x: 38.51, y: 41.77))
                keycap14.addCurve(to: CGPoint(x: 36.58, y: 41.99), controlPoint1: CGPoint(x: 37.55, y: 41.95), controlPoint2: CGPoint(x: 37.06, y: 41.98))
                keycap14.addCurve(to: CGPoint(x: 35.92, y: 42), controlPoint1: CGPoint(x: 36.36, y: 41.99), controlPoint2: CGPoint(x: 36.14, y: 42))
                keycap14.addCurve(to: CGPoint(x: 35.13, y: 42), controlPoint1: CGPoint(x: 35.66, y: 42), controlPoint2: CGPoint(x: 35.39, y: 42))
                keycap14.addLine(to: CGPoint(x: 34.91, y: 42))
                keycap14.addLine(to: CGPoint(x: 9.88, y: 42))
                keycap14.addLine(to: CGPoint(x: 6.87, y: 42))
                keycap14.addCurve(to: CGPoint(x: 6.08, y: 42), controlPoint1: CGPoint(x: 6.61, y: 42), controlPoint2: CGPoint(x: 6.35, y: 42))
                keycap14.addCurve(to: CGPoint(x: 5.42, y: 41.99), controlPoint1: CGPoint(x: 5.86, y: 42), controlPoint2: CGPoint(x: 5.64, y: 41.99))
                keycap14.addCurve(to: CGPoint(x: 3.98, y: 41.86), controlPoint1: CGPoint(x: 4.94, y: 41.98), controlPoint2: CGPoint(x: 4.45, y: 41.95))
                keycap14.addCurve(to: CGPoint(x: 2.61, y: 41.4), controlPoint1: CGPoint(x: 3.49, y: 41.77), controlPoint2: CGPoint(x: 3.05, y: 41.63))
                keycap14.addCurve(to: CGPoint(x: 1.44, y: 40.54), controlPoint1: CGPoint(x: 2.18, y: 41.18), controlPoint2: CGPoint(x: 1.78, y: 40.89))
                keycap14.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.1, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap14.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.23, y: 38.46))
                keycap14.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap14.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap14.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap14.addLine(to: CGPoint(x: 0, y: 32))
                keycap14.addLine(to: CGPoint(x: 0, y: 10))
                keycap14.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap14.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap14.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap14.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap14.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.23, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap14.addCurve(to: CGPoint(x: 1.44, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.1, y: 1.8))
                keycap14.addCurve(to: CGPoint(x: 2.61, y: 0.6), controlPoint1: CGPoint(x: 1.78, y: 1.11), controlPoint2: CGPoint(x: 2.18, y: 0.82))
                keycap14.addCurve(to: CGPoint(x: 3.98, y: 0.14), controlPoint1: CGPoint(x: 3.05, y: 0.37), controlPoint2: CGPoint(x: 3.49, y: 0.23))
                keycap14.addCurve(to: CGPoint(x: 5.42, y: 0.01), controlPoint1: CGPoint(x: 4.45, y: 0.05), controlPoint2: CGPoint(x: 4.94, y: 0.02))
                keycap14.addCurve(to: CGPoint(x: 6.08, y: 0), controlPoint1: CGPoint(x: 5.64, y: 0.01), controlPoint2: CGPoint(x: 5.86, y: 0))
                keycap14.addCurve(to: CGPoint(x: 6.87, y: 0), controlPoint1: CGPoint(x: 6.35, y: 0), controlPoint2: CGPoint(x: 6.61, y: 0))
                keycap14.addLine(to: CGPoint(x: 9.88, y: 0))
                keycap14.addLine(to: CGPoint(x: 34.91, y: 0))
                keycap14.addLine(to: CGPoint(x: 32.12, y: 0))
                keycap14.addLine(to: CGPoint(x: 35.13, y: 0))
                keycap14.addCurve(to: CGPoint(x: 35.92, y: 0), controlPoint1: CGPoint(x: 35.39, y: 0), controlPoint2: CGPoint(x: 35.66, y: 0))
                keycap14.addCurve(to: CGPoint(x: 36.58, y: 0.01), controlPoint1: CGPoint(x: 36.14, y: 0), controlPoint2: CGPoint(x: 36.36, y: 0.01))
                keycap14.addCurve(to: CGPoint(x: 38.02, y: 0.14), controlPoint1: CGPoint(x: 37.06, y: 0.02), controlPoint2: CGPoint(x: 37.55, y: 0.05))
                keycap14.addCurve(to: CGPoint(x: 39.39, y: 0.6), controlPoint1: CGPoint(x: 38.51, y: 0.23), controlPoint2: CGPoint(x: 38.96, y: 0.37))
                keycap14.addCurve(to: CGPoint(x: 40.56, y: 1.46), controlPoint1: CGPoint(x: 39.82, y: 0.82), controlPoint2: CGPoint(x: 40.22, y: 1.11))
                keycap14.addCurve(to: CGPoint(x: 41.41, y: 2.64), controlPoint1: CGPoint(x: 40.9, y: 1.8), controlPoint2: CGPoint(x: 41.19, y: 2.2))
                keycap14.addCurve(to: CGPoint(x: 41.86, y: 4.03), controlPoint1: CGPoint(x: 41.63, y: 3.08), controlPoint2: CGPoint(x: 41.78, y: 3.54))
                keycap14.addCurve(to: CGPoint(x: 41.99, y: 5.48), controlPoint1: CGPoint(x: 41.95, y: 4.51), controlPoint2: CGPoint(x: 41.98, y: 5))
                keycap14.addCurve(to: CGPoint(x: 42, y: 6.16), controlPoint1: CGPoint(x: 41.99, y: 5.71), controlPoint2: CGPoint(x: 42, y: 5.93))
                keycap14.addCurve(to: CGPoint(x: 42, y: 6.95), controlPoint1: CGPoint(x: 42, y: 6.42), controlPoint2: CGPoint(x: 42, y: 6.69))
                keycap14.addLine(to: CGPoint(x: 42, y: 10))
                keycap14.addLine(to: CGPoint(x: 42, y: 32))
                keycap14.addLine(to: CGPoint(x: 42, y: 35.05))
                keycap14.addCurve(to: CGPoint(x: 42, y: 35.84), controlPoint1: CGPoint(x: 42, y: 35.31), controlPoint2: CGPoint(x: 42, y: 35.58))
                keycap14.addCurve(to: CGPoint(x: 41.99, y: 36.52), controlPoint1: CGPoint(x: 42, y: 36.07), controlPoint2: CGPoint(x: 41.99, y: 36.29))
                keycap14.close()
                keycap14.move(to: CGPoint(x: 41.99, y: 36.52))
                context.saveGState()
                keycap14.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap14.cgPath)
                context.addRect(keycap14.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -43, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap14.fill()
                context.restoreGState()
                keycap14.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.12).setFill()
                keycap14.fill()
                context.restoreGState()
                
                /// arrow
                let arrow = UIBezierPath()
                arrow.move(to: CGPoint(x: 19.85, y: 9.21))
                arrow.addLine(to: CGPoint(x: 10.33, y: 0.13))
                arrow.addCurve(to: CGPoint(x: 9.65, y: 0.13), controlPoint1: CGPoint(x: 10.15, y: -0.04), controlPoint2: CGPoint(x: 9.84, y: -0.04))
                arrow.addLine(to: CGPoint(x: 0.14, y: 9.21))
                arrow.addCurve(to: CGPoint(x: 0.04, y: 9.71), controlPoint1: CGPoint(x: 0, y: 9.34), controlPoint2: CGPoint(x: -0.04, y: 9.54))
                arrow.addCurve(to: CGPoint(x: 0.14, y: 9.86), controlPoint1: CGPoint(x: 0.06, y: 9.77), controlPoint2: CGPoint(x: 0.1, y: 9.82))
                arrow.addCurve(to: CGPoint(x: 0.48, y: 9.99), controlPoint1: CGPoint(x: 0.23, y: 9.94), controlPoint2: CGPoint(x: 0.35, y: 9.99))
                arrow.addLine(to: CGPoint(x: 19.51, y: 9.99))
                arrow.addCurve(to: CGPoint(x: 19.95, y: 9.71), controlPoint1: CGPoint(x: 19.7, y: 9.99), controlPoint2: CGPoint(x: 19.88, y: 9.88))
                arrow.addCurve(to: CGPoint(x: 19.85, y: 9.21), controlPoint1: CGPoint(x: 20.03, y: 9.54), controlPoint2: CGPoint(x: 19.98, y: 9.34))
                arrow.addLine(to: CGPoint(x: 19.85, y: 9.21))
                arrow.close()
                arrow.move(to: CGPoint(x: 5.49, y: 16))
                arrow.addLine(to: CGPoint(x: 14.49, y: 16))
                arrow.addLine(to: CGPoint(x: 14.49, y: 10))
                arrow.addLine(to: CGPoint(x: 5.49, y: 10))
                arrow.addLine(to: CGPoint(x: 5.49, y: 16))
                arrow.close()
                arrow.move(to: CGPoint(x: 5.49, y: 16))
                context.saveGState()
                context.translateBy(x: 11, y: 13)
                arrow.usesEvenOddFillRule = true
                UIColor.white.setFill()
                arrow.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 24, y: 64)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 296, y: 0)
                
                /// keycap
                let keycap15 = UIBezierPath()
                keycap15.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap15.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap15.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap15.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap15.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap15.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap15.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap15.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap15.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap15.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap15.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap15.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap15.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap15.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap15.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap15.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap15.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap15.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap15.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap15.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap15.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap15.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap15.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap15.addLine(to: CGPoint(x: 0, y: 32))
                keycap15.addLine(to: CGPoint(x: 0, y: 10))
                keycap15.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap15.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap15.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap15.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap15.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap15.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap15.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap15.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap15.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap15.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap15.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap15.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap15.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap15.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap15.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap15.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap15.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap15.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap15.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap15.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap15.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap15.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap15.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap15.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap15.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap15.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap15.cgPath)
                context.addRect(keycap15.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap15.fill()
                context.restoreGState()
                keycap15.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap15.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel10 = NSMutableAttributedString(string: "L")
                keyLabel10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel10.length))
                keyLabel10.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel10.length))
                keyLabel10.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel10.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel10.length))
                }
                context.saveGState()
                keyLabel10.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 259, y: 0)
                
                /// keycap
                let keycap16 = UIBezierPath()
                keycap16.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap16.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap16.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap16.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap16.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap16.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap16.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap16.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap16.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap16.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap16.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap16.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap16.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap16.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap16.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap16.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap16.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap16.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap16.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap16.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap16.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap16.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap16.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap16.addLine(to: CGPoint(x: 0, y: 32))
                keycap16.addLine(to: CGPoint(x: 0, y: 10))
                keycap16.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap16.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap16.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap16.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap16.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap16.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap16.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap16.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap16.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap16.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap16.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap16.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap16.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap16.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap16.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap16.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap16.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap16.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap16.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap16.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap16.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap16.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap16.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap16.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap16.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap16.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap16.cgPath)
                context.addRect(keycap16.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap16.fill()
                context.restoreGState()
                keycap16.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap16.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel11 = NSMutableAttributedString(string: "K")
                keyLabel11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel11.length))
                keyLabel11.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel11.length))
                keyLabel11.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel11.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel11.length))
                }
                context.saveGState()
                keyLabel11.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 222, y: 0)
                
                /// keycap
                let keycap17 = UIBezierPath()
                keycap17.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap17.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap17.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap17.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap17.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap17.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap17.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap17.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap17.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap17.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap17.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap17.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap17.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap17.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap17.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap17.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap17.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap17.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap17.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap17.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap17.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap17.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap17.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap17.addLine(to: CGPoint(x: 0, y: 32))
                keycap17.addLine(to: CGPoint(x: 0, y: 10))
                keycap17.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap17.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap17.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap17.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap17.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap17.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap17.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap17.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap17.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap17.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap17.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap17.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap17.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap17.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap17.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap17.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap17.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap17.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap17.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap17.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap17.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap17.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap17.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap17.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap17.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap17.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap17.cgPath)
                context.addRect(keycap17.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap17.fill()
                context.restoreGState()
                keycap17.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap17.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel12 = NSMutableAttributedString(string: "J")
                keyLabel12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel12.length))
                keyLabel12.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel12.length))
                keyLabel12.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel12.length))
                }
                context.saveGState()
                keyLabel12.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 185, y: 0)
                
                /// keycap
                let keycap18 = UIBezierPath()
                keycap18.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap18.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap18.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap18.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap18.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap18.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap18.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap18.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap18.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap18.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap18.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap18.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap18.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap18.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap18.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap18.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap18.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap18.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap18.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap18.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap18.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap18.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap18.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap18.addLine(to: CGPoint(x: 0, y: 32))
                keycap18.addLine(to: CGPoint(x: 0, y: 10))
                keycap18.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap18.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap18.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap18.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap18.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap18.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap18.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap18.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap18.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap18.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap18.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap18.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap18.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap18.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap18.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap18.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap18.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap18.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap18.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap18.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap18.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap18.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap18.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap18.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap18.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap18.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap18.cgPath)
                context.addRect(keycap18.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap18.fill()
                context.restoreGState()
                keycap18.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap18.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel13 = NSMutableAttributedString(string: "H")
                keyLabel13.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel13.length))
                keyLabel13.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel13.length))
                keyLabel13.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel13.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel13.length))
                }
                context.saveGState()
                keyLabel13.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 148, y: 0)
                
                /// keycap
                let keycap19 = UIBezierPath()
                keycap19.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap19.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap19.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap19.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap19.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap19.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap19.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap19.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap19.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap19.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap19.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap19.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap19.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap19.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap19.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap19.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap19.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap19.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap19.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap19.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap19.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap19.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap19.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap19.addLine(to: CGPoint(x: 0, y: 32))
                keycap19.addLine(to: CGPoint(x: 0, y: 10))
                keycap19.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap19.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap19.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap19.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap19.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap19.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap19.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap19.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap19.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap19.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap19.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap19.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap19.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap19.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap19.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap19.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap19.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap19.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap19.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap19.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap19.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap19.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap19.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap19.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap19.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap19.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap19.cgPath)
                context.addRect(keycap19.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap19.fill()
                context.restoreGState()
                keycap19.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap19.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel14 = NSMutableAttributedString(string: "G")
                keyLabel14.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel14.length))
                keyLabel14.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel14.length))
                keyLabel14.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel14.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel14.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel14.length))
                }
                context.saveGState()
                keyLabel14.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 111, y: 0)
                
                /// keycap
                let keycap20 = UIBezierPath()
                keycap20.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap20.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap20.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap20.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap20.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap20.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap20.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap20.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap20.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap20.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap20.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap20.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap20.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap20.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap20.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap20.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap20.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap20.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap20.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap20.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap20.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap20.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap20.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap20.addLine(to: CGPoint(x: 0, y: 32))
                keycap20.addLine(to: CGPoint(x: 0, y: 10))
                keycap20.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap20.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap20.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap20.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap20.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap20.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap20.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap20.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap20.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap20.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap20.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap20.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap20.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap20.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap20.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap20.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap20.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap20.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap20.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap20.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap20.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap20.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap20.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap20.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap20.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap20.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap20.cgPath)
                context.addRect(keycap20.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap20.fill()
                context.restoreGState()
                keycap20.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap20.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel15 = NSMutableAttributedString(string: "F")
                keyLabel15.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel15.length))
                keyLabel15.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel15.length))
                keyLabel15.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel15.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel15.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel15.length))
                }
                context.saveGState()
                keyLabel15.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 74, y: 0)
                
                /// keycap
                let keycap21 = UIBezierPath()
                keycap21.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap21.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap21.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap21.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap21.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap21.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap21.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap21.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap21.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap21.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap21.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap21.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap21.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap21.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap21.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap21.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap21.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap21.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap21.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap21.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap21.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap21.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap21.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap21.addLine(to: CGPoint(x: 0, y: 32))
                keycap21.addLine(to: CGPoint(x: 0, y: 10))
                keycap21.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap21.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap21.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap21.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap21.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap21.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap21.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap21.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap21.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap21.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap21.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap21.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap21.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap21.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap21.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap21.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap21.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap21.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap21.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap21.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap21.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap21.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap21.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap21.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap21.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap21.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap21.cgPath)
                context.addRect(keycap21.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap21.fill()
                context.restoreGState()
                keycap21.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap21.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel16 = NSMutableAttributedString(string: "D")
                keyLabel16.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel16.length))
                keyLabel16.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel16.length))
                keyLabel16.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel16.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel16.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel16.length))
                }
                context.saveGState()
                keyLabel16.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 37, y: 0)
                
                /// keycap
                let keycap22 = UIBezierPath()
                keycap22.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap22.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap22.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap22.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap22.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap22.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap22.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap22.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap22.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap22.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap22.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap22.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap22.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap22.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap22.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap22.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap22.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap22.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap22.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap22.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap22.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap22.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap22.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap22.addLine(to: CGPoint(x: 0, y: 32))
                keycap22.addLine(to: CGPoint(x: 0, y: 10))
                keycap22.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap22.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap22.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap22.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap22.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap22.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap22.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap22.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap22.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap22.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap22.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap22.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap22.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap22.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap22.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap22.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap22.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap22.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap22.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap22.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap22.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap22.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap22.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap22.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap22.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap22.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap22.cgPath)
                context.addRect(keycap22.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap22.fill()
                context.restoreGState()
                keycap22.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap22.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel17 = NSMutableAttributedString(string: "S")
                keyLabel17.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel17.length))
                keyLabel17.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel17.length))
                keyLabel17.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel17.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel17.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel17.length))
                }
                context.saveGState()
                keyLabel17.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap23 = UIBezierPath()
                keycap23.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap23.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap23.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap23.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap23.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap23.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap23.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap23.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap23.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap23.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap23.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap23.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap23.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap23.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap23.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap23.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap23.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap23.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap23.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap23.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap23.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap23.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap23.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap23.addLine(to: CGPoint(x: 0, y: 32))
                keycap23.addLine(to: CGPoint(x: 0, y: 10))
                keycap23.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap23.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap23.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap23.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap23.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap23.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap23.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap23.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap23.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap23.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap23.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap23.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap23.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap23.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap23.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap23.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap23.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap23.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap23.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap23.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap23.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap23.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap23.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap23.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap23.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap23.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap23.cgPath)
                context.addRect(keycap23.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap23.fill()
                context.restoreGState()
                keycap23.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap23.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel18 = NSMutableAttributedString(string: "A")
                keyLabel18.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel18.length))
                keyLabel18.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel18.length))
                keyLabel18.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel18.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel18.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel18.length))
                }
                context.saveGState()
                keyLabel18.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// row
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 10)
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 334, y: 0)
                
                /// keycap
                let keycap24 = UIBezierPath()
                keycap24.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap24.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap24.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap24.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap24.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap24.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap24.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap24.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap24.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap24.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap24.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap24.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap24.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap24.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap24.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap24.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap24.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap24.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap24.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap24.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap24.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap24.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap24.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap24.addLine(to: CGPoint(x: 0, y: 32))
                keycap24.addLine(to: CGPoint(x: 0, y: 10))
                keycap24.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap24.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap24.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap24.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap24.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap24.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap24.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap24.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap24.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap24.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap24.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap24.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap24.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap24.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap24.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap24.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap24.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap24.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap24.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap24.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap24.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap24.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap24.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap24.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap24.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap24.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap24.cgPath)
                context.addRect(keycap24.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap24.fill()
                context.restoreGState()
                keycap24.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap24.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel19 = NSMutableAttributedString(string: "P")
                keyLabel19.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel19.length))
                keyLabel19.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel19.length))
                keyLabel19.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel19.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel19.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel19.length))
                }
                context.saveGState()
                keyLabel19.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 296, y: 0)
                
                /// keycap
                let keycap25 = UIBezierPath()
                keycap25.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap25.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap25.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap25.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap25.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap25.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap25.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap25.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap25.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap25.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap25.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap25.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap25.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap25.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap25.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap25.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap25.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap25.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap25.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap25.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap25.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap25.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap25.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap25.addLine(to: CGPoint(x: 0, y: 32))
                keycap25.addLine(to: CGPoint(x: 0, y: 10))
                keycap25.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap25.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap25.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap25.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap25.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap25.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap25.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap25.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap25.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap25.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap25.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap25.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap25.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap25.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap25.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap25.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap25.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap25.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap25.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap25.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap25.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap25.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap25.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap25.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap25.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap25.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap25.cgPath)
                context.addRect(keycap25.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap25.fill()
                context.restoreGState()
                keycap25.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap25.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel20 = NSMutableAttributedString(string: "I")
                keyLabel20.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel20.length))
                keyLabel20.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel20.length))
                keyLabel20.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel20.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel20.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel20.length))
                }
                context.saveGState()
                keyLabel20.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 259, y: 0)
                
                /// keycap
                let keycap26 = UIBezierPath()
                keycap26.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap26.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap26.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap26.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap26.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap26.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap26.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap26.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap26.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap26.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap26.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap26.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap26.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap26.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap26.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap26.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap26.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap26.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap26.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap26.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap26.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap26.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap26.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap26.addLine(to: CGPoint(x: 0, y: 32))
                keycap26.addLine(to: CGPoint(x: 0, y: 10))
                keycap26.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap26.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap26.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap26.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap26.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap26.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap26.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap26.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap26.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap26.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap26.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap26.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap26.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap26.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap26.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap26.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap26.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap26.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap26.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap26.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap26.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap26.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap26.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap26.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap26.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap26.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap26.cgPath)
                context.addRect(keycap26.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap26.fill()
                context.restoreGState()
                keycap26.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap26.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel21 = NSMutableAttributedString(string: "O")
                keyLabel21.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel21.length))
                keyLabel21.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel21.length))
                keyLabel21.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel21.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel21.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel21.length))
                }
                context.saveGState()
                keyLabel21.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 222, y: 0)
                
                /// keycap
                let keycap27 = UIBezierPath()
                keycap27.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap27.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap27.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap27.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap27.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap27.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap27.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap27.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap27.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap27.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap27.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap27.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap27.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap27.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap27.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap27.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap27.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap27.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap27.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap27.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap27.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap27.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap27.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap27.addLine(to: CGPoint(x: 0, y: 32))
                keycap27.addLine(to: CGPoint(x: 0, y: 10))
                keycap27.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap27.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap27.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap27.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap27.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap27.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap27.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap27.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap27.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap27.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap27.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap27.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap27.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap27.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap27.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap27.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap27.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap27.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap27.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap27.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap27.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap27.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap27.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap27.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap27.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap27.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap27.cgPath)
                context.addRect(keycap27.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap27.fill()
                context.restoreGState()
                keycap27.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap27.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel22 = NSMutableAttributedString(string: "U")
                keyLabel22.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel22.length))
                keyLabel22.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel22.length))
                keyLabel22.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel22.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel22.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel22.length))
                }
                context.saveGState()
                keyLabel22.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 185, y: 0)
                
                /// keycap
                let keycap28 = UIBezierPath()
                keycap28.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap28.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap28.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap28.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap28.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap28.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap28.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap28.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap28.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap28.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap28.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap28.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap28.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap28.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap28.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap28.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap28.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap28.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap28.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap28.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap28.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap28.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap28.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap28.addLine(to: CGPoint(x: 0, y: 32))
                keycap28.addLine(to: CGPoint(x: 0, y: 10))
                keycap28.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap28.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap28.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap28.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap28.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap28.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap28.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap28.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap28.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap28.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap28.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap28.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap28.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap28.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap28.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap28.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap28.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap28.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap28.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap28.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap28.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap28.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap28.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap28.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap28.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap28.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap28.cgPath)
                context.addRect(keycap28.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap28.fill()
                context.restoreGState()
                keycap28.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap28.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel23 = NSMutableAttributedString(string: "Y")
                keyLabel23.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel23.length))
                keyLabel23.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel23.length))
                keyLabel23.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel23.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel23.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel23.length))
                }
                context.saveGState()
                keyLabel23.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 148, y: 0)
                
                /// keycap
                let keycap29 = UIBezierPath()
                keycap29.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap29.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap29.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap29.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap29.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap29.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap29.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap29.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap29.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap29.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap29.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap29.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap29.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap29.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap29.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap29.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap29.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap29.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap29.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap29.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap29.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap29.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap29.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap29.addLine(to: CGPoint(x: 0, y: 32))
                keycap29.addLine(to: CGPoint(x: 0, y: 10))
                keycap29.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap29.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap29.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap29.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap29.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap29.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap29.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap29.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap29.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap29.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap29.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap29.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap29.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap29.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap29.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap29.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap29.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap29.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap29.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap29.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap29.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap29.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap29.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap29.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap29.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap29.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap29.cgPath)
                context.addRect(keycap29.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap29.fill()
                context.restoreGState()
                keycap29.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap29.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel24 = NSMutableAttributedString(string: "T")
                keyLabel24.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel24.length))
                keyLabel24.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel24.length))
                keyLabel24.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel24.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel24.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel24.length))
                }
                context.saveGState()
                keyLabel24.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 111, y: 0)
                
                /// keycap
                let keycap30 = UIBezierPath()
                keycap30.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap30.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap30.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap30.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap30.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap30.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap30.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap30.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap30.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap30.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap30.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap30.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap30.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap30.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap30.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap30.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap30.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap30.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap30.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap30.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap30.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap30.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap30.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap30.addLine(to: CGPoint(x: 0, y: 32))
                keycap30.addLine(to: CGPoint(x: 0, y: 10))
                keycap30.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap30.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap30.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap30.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap30.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap30.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap30.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap30.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap30.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap30.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap30.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap30.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap30.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap30.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap30.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap30.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap30.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap30.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap30.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap30.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap30.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap30.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap30.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap30.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap30.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap30.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap30.cgPath)
                context.addRect(keycap30.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap30.fill()
                context.restoreGState()
                keycap30.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap30.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel25 = NSMutableAttributedString(string: "R")
                keyLabel25.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel25.length))
                keyLabel25.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel25.length))
                keyLabel25.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel25.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel25.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel25.length))
                }
                context.saveGState()
                keyLabel25.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 74, y: 0)
                
                /// keycap
                let keycap31 = UIBezierPath()
                keycap31.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap31.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap31.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap31.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap31.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap31.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap31.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap31.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap31.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap31.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap31.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap31.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap31.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap31.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap31.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap31.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap31.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap31.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap31.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap31.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap31.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap31.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap31.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap31.addLine(to: CGPoint(x: 0, y: 32))
                keycap31.addLine(to: CGPoint(x: 0, y: 10))
                keycap31.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap31.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap31.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap31.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap31.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap31.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap31.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap31.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap31.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap31.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap31.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap31.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap31.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap31.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap31.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap31.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap31.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap31.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap31.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap31.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap31.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap31.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap31.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap31.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap31.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap31.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap31.cgPath)
                context.addRect(keycap31.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap31.fill()
                context.restoreGState()
                keycap31.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap31.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel26 = NSMutableAttributedString(string: "E")
                keyLabel26.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel26.length))
                keyLabel26.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel26.length))
                keyLabel26.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel26.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel26.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel26.length))
                }
                context.saveGState()
                keyLabel26.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                context.translateBy(x: 37, y: 0)
                
                /// keycap
                let keycap32 = UIBezierPath()
                keycap32.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap32.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap32.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap32.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap32.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap32.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap32.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap32.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap32.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap32.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap32.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap32.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap32.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap32.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap32.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap32.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap32.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap32.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap32.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap32.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap32.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap32.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap32.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap32.addLine(to: CGPoint(x: 0, y: 32))
                keycap32.addLine(to: CGPoint(x: 0, y: 10))
                keycap32.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap32.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap32.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap32.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap32.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap32.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap32.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap32.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap32.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap32.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap32.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap32.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap32.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap32.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap32.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap32.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap32.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap32.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap32.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap32.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap32.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap32.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap32.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap32.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap32.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap32.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap32.cgPath)
                context.addRect(keycap32.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap32.fill()
                context.restoreGState()
                keycap32.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap32.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel27 = NSMutableAttributedString(string: "W")
                keyLabel27.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel27.length))
                keyLabel27.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel27.length))
                keyLabel27.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel27.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel27.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel27.length))
                }
                context.saveGState()
                keyLabel27.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// key
            do {
                context.saveGState()
                
                /// keycap
                let keycap33 = UIBezierPath()
                keycap33.move(to: CGPoint(x: 31.01, y: 35.84))
                keycap33.addCurve(to: CGPoint(x: 31, y: 36.52), controlPoint1: CGPoint(x: 31.01, y: 36.07), controlPoint2: CGPoint(x: 31, y: 36.29))
                keycap33.addCurve(to: CGPoint(x: 30.87, y: 37.97), controlPoint1: CGPoint(x: 30.98, y: 37), controlPoint2: CGPoint(x: 30.96, y: 37.49))
                keycap33.addCurve(to: CGPoint(x: 30.42, y: 39.36), controlPoint1: CGPoint(x: 30.78, y: 38.46), controlPoint2: CGPoint(x: 30.64, y: 38.92))
                keycap33.addCurve(to: CGPoint(x: 29.58, y: 40.54), controlPoint1: CGPoint(x: 30.2, y: 39.8), controlPoint2: CGPoint(x: 29.92, y: 40.2))
                keycap33.addCurve(to: CGPoint(x: 28.41, y: 41.4), controlPoint1: CGPoint(x: 29.23, y: 40.89), controlPoint2: CGPoint(x: 28.84, y: 41.18))
                keycap33.addCurve(to: CGPoint(x: 27.05, y: 41.86), controlPoint1: CGPoint(x: 27.97, y: 41.63), controlPoint2: CGPoint(x: 27.53, y: 41.77))
                keycap33.addCurve(to: CGPoint(x: 25.61, y: 41.99), controlPoint1: CGPoint(x: 26.57, y: 41.95), controlPoint2: CGPoint(x: 26.09, y: 41.98))
                keycap33.addCurve(to: CGPoint(x: 24.95, y: 42), controlPoint1: CGPoint(x: 25.39, y: 41.99), controlPoint2: CGPoint(x: 25.17, y: 42))
                keycap33.addCurve(to: CGPoint(x: 24.17, y: 42), controlPoint1: CGPoint(x: 24.69, y: 42), controlPoint2: CGPoint(x: 24.43, y: 42))
                keycap33.addLine(to: CGPoint(x: 23.95, y: 42))
                keycap33.addLine(to: CGPoint(x: 9.84, y: 42))
                keycap33.addLine(to: CGPoint(x: 6.84, y: 42))
                keycap33.addCurve(to: CGPoint(x: 6.06, y: 42), controlPoint1: CGPoint(x: 6.58, y: 42), controlPoint2: CGPoint(x: 6.32, y: 42))
                keycap33.addCurve(to: CGPoint(x: 5.4, y: 41.99), controlPoint1: CGPoint(x: 5.84, y: 42), controlPoint2: CGPoint(x: 5.62, y: 41.99))
                keycap33.addCurve(to: CGPoint(x: 3.96, y: 41.86), controlPoint1: CGPoint(x: 4.92, y: 41.98), controlPoint2: CGPoint(x: 4.44, y: 41.95))
                keycap33.addCurve(to: CGPoint(x: 2.6, y: 41.4), controlPoint1: CGPoint(x: 3.48, y: 41.77), controlPoint2: CGPoint(x: 3.03, y: 41.63))
                keycap33.addCurve(to: CGPoint(x: 1.43, y: 40.54), controlPoint1: CGPoint(x: 2.17, y: 41.18), controlPoint2: CGPoint(x: 1.77, y: 40.89))
                keycap33.addCurve(to: CGPoint(x: 0.59, y: 39.36), controlPoint1: CGPoint(x: 1.09, y: 40.2), controlPoint2: CGPoint(x: 0.81, y: 39.8))
                keycap33.addCurve(to: CGPoint(x: 0.14, y: 37.97), controlPoint1: CGPoint(x: 0.37, y: 38.92), controlPoint2: CGPoint(x: 0.22, y: 38.46))
                keycap33.addCurve(to: CGPoint(x: 0.01, y: 36.52), controlPoint1: CGPoint(x: 0.05, y: 37.49), controlPoint2: CGPoint(x: 0.02, y: 37))
                keycap33.addCurve(to: CGPoint(x: 0, y: 35.84), controlPoint1: CGPoint(x: 0.01, y: 36.29), controlPoint2: CGPoint(x: 0, y: 36.07))
                keycap33.addCurve(to: CGPoint(x: 0, y: 35.05), controlPoint1: CGPoint(x: 0, y: 35.58), controlPoint2: CGPoint(x: 0, y: 35.31))
                keycap33.addLine(to: CGPoint(x: 0, y: 32))
                keycap33.addLine(to: CGPoint(x: 0, y: 10))
                keycap33.addLine(to: CGPoint(x: 0, y: 6.95))
                keycap33.addCurve(to: CGPoint(x: 0, y: 6.16), controlPoint1: CGPoint(x: 0, y: 6.69), controlPoint2: CGPoint(x: 0, y: 6.42))
                keycap33.addCurve(to: CGPoint(x: 0.01, y: 5.48), controlPoint1: CGPoint(x: 0, y: 5.93), controlPoint2: CGPoint(x: 0.01, y: 5.71))
                keycap33.addCurve(to: CGPoint(x: 0.14, y: 4.03), controlPoint1: CGPoint(x: 0.02, y: 5), controlPoint2: CGPoint(x: 0.05, y: 4.51))
                keycap33.addCurve(to: CGPoint(x: 0.59, y: 2.64), controlPoint1: CGPoint(x: 0.22, y: 3.54), controlPoint2: CGPoint(x: 0.37, y: 3.08))
                keycap33.addCurve(to: CGPoint(x: 1.43, y: 1.46), controlPoint1: CGPoint(x: 0.81, y: 2.2), controlPoint2: CGPoint(x: 1.09, y: 1.8))
                keycap33.addCurve(to: CGPoint(x: 2.6, y: 0.6), controlPoint1: CGPoint(x: 1.77, y: 1.11), controlPoint2: CGPoint(x: 2.17, y: 0.82))
                keycap33.addCurve(to: CGPoint(x: 3.96, y: 0.14), controlPoint1: CGPoint(x: 3.03, y: 0.37), controlPoint2: CGPoint(x: 3.48, y: 0.23))
                keycap33.addCurve(to: CGPoint(x: 5.4, y: 0.01), controlPoint1: CGPoint(x: 4.44, y: 0.05), controlPoint2: CGPoint(x: 4.92, y: 0.02))
                keycap33.addCurve(to: CGPoint(x: 6.06, y: 0), controlPoint1: CGPoint(x: 5.62, y: 0.01), controlPoint2: CGPoint(x: 5.84, y: 0))
                keycap33.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 6.32, y: 0), controlPoint2: CGPoint(x: 6.58, y: 0))
                keycap33.addLine(to: CGPoint(x: 9.84, y: 0))
                keycap33.addLine(to: CGPoint(x: 23.95, y: 0))
                keycap33.addLine(to: CGPoint(x: 21.16, y: 0))
                keycap33.addLine(to: CGPoint(x: 24.17, y: 0))
                keycap33.addCurve(to: CGPoint(x: 24.95, y: 0), controlPoint1: CGPoint(x: 24.43, y: 0), controlPoint2: CGPoint(x: 24.69, y: 0))
                keycap33.addCurve(to: CGPoint(x: 25.61, y: 0.01), controlPoint1: CGPoint(x: 25.17, y: 0), controlPoint2: CGPoint(x: 25.39, y: 0.01))
                keycap33.addCurve(to: CGPoint(x: 27.05, y: 0.14), controlPoint1: CGPoint(x: 26.09, y: 0.02), controlPoint2: CGPoint(x: 26.57, y: 0.05))
                keycap33.addCurve(to: CGPoint(x: 28.41, y: 0.6), controlPoint1: CGPoint(x: 27.53, y: 0.23), controlPoint2: CGPoint(x: 27.97, y: 0.37))
                keycap33.addCurve(to: CGPoint(x: 29.58, y: 1.46), controlPoint1: CGPoint(x: 28.84, y: 0.82), controlPoint2: CGPoint(x: 29.23, y: 1.11))
                keycap33.addCurve(to: CGPoint(x: 30.42, y: 2.64), controlPoint1: CGPoint(x: 29.92, y: 1.8), controlPoint2: CGPoint(x: 30.2, y: 2.2))
                keycap33.addCurve(to: CGPoint(x: 30.87, y: 4.03), controlPoint1: CGPoint(x: 30.64, y: 3.08), controlPoint2: CGPoint(x: 30.78, y: 3.54))
                keycap33.addCurve(to: CGPoint(x: 31, y: 5.48), controlPoint1: CGPoint(x: 30.96, y: 4.51), controlPoint2: CGPoint(x: 30.98, y: 5))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 6.16), controlPoint1: CGPoint(x: 31, y: 5.71), controlPoint2: CGPoint(x: 31.01, y: 5.93))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 6.95), controlPoint1: CGPoint(x: 31.01, y: 6.42), controlPoint2: CGPoint(x: 31.01, y: 6.69))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 10))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 32))
                keycap33.addLine(to: CGPoint(x: 31.01, y: 35.05))
                keycap33.addCurve(to: CGPoint(x: 31.01, y: 35.84), controlPoint1: CGPoint(x: 31.01, y: 35.31), controlPoint2: CGPoint(x: 31.01, y: 35.58))
                context.saveGState()
                keycap33.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(keycap33.cgPath)
                context.addRect(keycap33.bounds.insetBy(dx: 0, dy: -1))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.01, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.01, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.667, saturation: 0.733, brightness: 0.059, alpha: 0.36).cgColor)
                }
                UIColor.black.setFill()
                keycap33.fill()
                context.restoreGState()
                keycap33.usesEvenOddFillRule = true
                UIColor(white: 1, alpha: 0.3).setFill()
                keycap33.fill()
                context.restoreGState()
                
                /// key label
                let keyLabel28 = NSMutableAttributedString(string: "Q")
                keyLabel28.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 23)!, range: NSRange(location: 0, length: keyLabel28.length))
                keyLabel28.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel28.length))
                keyLabel28.addAttribute(NSKernAttributeName, value: -0.55, range: NSRange(location: 0, length: keyLabel28.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    keyLabel28.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel28.length))
                }
                context.saveGState()
                keyLabel28.draw(in: CGRect(x: 0, y: 7, width: 31.01, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// key label
        let keyLabel29 = NSMutableAttributedString(string: "space")
        keyLabel29.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: keyLabel29.length))
        keyLabel29.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: keyLabel29.length))
        keyLabel29.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: keyLabel29.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            keyLabel29.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: keyLabel29.length))
        }
        context.saveGState()
        keyLabel29.draw(in: CGRect(x: 135, y: 181, width: 142, height: 21))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemLightSuggestionsExpanded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 42), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 42)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 42))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.611, saturation: 0.041, brightness: 0.859, alpha: 0.9).setFill()
        background.fill()
        context.restoreGState()
        /// suggestion
        do {
            context.saveGState()
            context.translateBy(x: 251, y: 0)
            
            /// background
            let background2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 124, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(hue: 0.583, saturation: 0.07, brightness: 0.788, alpha: 0.9).setFill()
            background2.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion1 = NSMutableAttributedString(string: "Hellos")
            suggestion1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion1.length))
            suggestion1.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion1.length))
            suggestion1.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion1.length))
            }
            context.saveGState()
            suggestion1.draw(in: CGRect(x: 9.07, y: 10, width: 106.86, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// suggestion
        do {
            context.saveGState()
            context.translateBy(x: 125, y: 0)
            
            /// background
            let background3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 125, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(hue: 0.583, saturation: 0.07, brightness: 0.788, alpha: 0.9).setFill()
            background3.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion2 = NSMutableAttributedString(string: "Hello")
            suggestion2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion2.length))
            suggestion2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion2.length))
            suggestion2.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion2.length))
            }
            context.saveGState()
            suggestion2.draw(in: CGRect(x: 9.15, y: 10, width: 107.72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// suggestion
        do {
            context.saveGState()
            
            /// background
            let background4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 124, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(hue: 0.583, saturation: 0.07, brightness: 0.788, alpha: 0.9).setFill()
            background4.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion4 = NSMutableAttributedString(string: "“Helli”")
            suggestion4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion4.length))
            suggestion4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion4.length))
            suggestion4.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion4.length))
            }
            context.saveGState()
            suggestion4.draw(in: CGRect(x: 9.07, y: 10, width: 106.86, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSystemDarkSuggestionsExpanded(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 42), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 42), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 42)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 42))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.039, alpha: 0.5).setFill()
        background.fill()
        context.restoreGState()
        /// suggestion
        do {
            context.saveGState()
            context.translateBy(x: 251, y: 0)
            
            /// background
            let background2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 124, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(white: 1, alpha: 0.06).setFill()
            background2.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion1 = NSMutableAttributedString(string: "Hellos")
            suggestion1.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion1.length))
            suggestion1.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion1.length))
            suggestion1.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion1.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion1.length))
            }
            context.saveGState()
            suggestion1.draw(in: CGRect(x: 9.07, y: 10, width: 106.86, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// suggestion
        do {
            context.saveGState()
            context.translateBy(x: 125, y: 0)
            
            /// background
            let background3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 125, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(white: 1, alpha: 0.06).setFill()
            background3.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion2 = NSMutableAttributedString(string: "Hello")
            suggestion2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion2.length))
            suggestion2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion2.length))
            suggestion2.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion2.length))
            }
            context.saveGState()
            suggestion2.draw(in: CGRect(x: 9.15, y: 10, width: 107.72, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// suggestion
        do {
            context.saveGState()
            
            /// background
            let background4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 124, height: 42))
            context.saveGState()
            // Warning: Blur effects are not supported.
            UIColor(white: 1, alpha: 0.06).setFill()
            background4.fill()
            context.restoreGState()
            
            /// suggestion 1
            let suggestion4 = NSMutableAttributedString(string: "“Helli”")
            suggestion4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 16)!, range: NSRange(location: 0, length: suggestion4.length))
            suggestion4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: suggestion4.length))
            suggestion4.addAttribute(NSKernAttributeName, value: -0.32, range: NSRange(location: 0, length: suggestion4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                suggestion4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: suggestion4.length))
            }
            context.saveGState()
            suggestion4.draw(in: CGRect(x: 9.07, y: 10, width: 106.86, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSystemLightSuggestionsCollapsed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 9), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 9), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 9)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 9))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.611, saturation: 0.041, brightness: 0.859, alpha: 0.9).setFill()
        background.fill()
        context.restoreGState()
        /// grabber
        let grabber = UIBezierPath()
        grabber.move(to: CGPoint(x: 33.28, y: 0))
        grabber.addCurve(to: CGPoint(x: 33.95, y: 0.01), controlPoint1: CGPoint(x: 33.51, y: 0), controlPoint2: CGPoint(x: 33.73, y: -0))
        grabber.addCurve(to: CGPoint(x: 34.55, y: 0.1), controlPoint1: CGPoint(x: 34.16, y: 0.02), controlPoint2: CGPoint(x: 34.36, y: 0.05))
        grabber.addCurve(to: CGPoint(x: 35.6, y: 0.81), controlPoint1: CGPoint(x: 34.97, y: 0.22), controlPoint2: CGPoint(x: 35.34, y: 0.46))
        grabber.addCurve(to: CGPoint(x: 36, y: 2), controlPoint1: CGPoint(x: 35.86, y: 1.15), controlPoint2: CGPoint(x: 36, y: 1.57))
        grabber.addCurve(to: CGPoint(x: 35.6, y: 3.19), controlPoint1: CGPoint(x: 36, y: 2.43), controlPoint2: CGPoint(x: 35.86, y: 2.85))
        grabber.addCurve(to: CGPoint(x: 34.55, y: 3.9), controlPoint1: CGPoint(x: 35.34, y: 3.54), controlPoint2: CGPoint(x: 34.97, y: 3.78))
        grabber.addCurve(to: CGPoint(x: 33.95, y: 3.99), controlPoint1: CGPoint(x: 34.36, y: 3.95), controlPoint2: CGPoint(x: 34.16, y: 3.98))
        grabber.addCurve(to: CGPoint(x: 33.28, y: 4), controlPoint1: CGPoint(x: 33.73, y: 4), controlPoint2: CGPoint(x: 33.51, y: 4))
        grabber.addLine(to: CGPoint(x: 33.28, y: 4))
        grabber.addLine(to: CGPoint(x: 2.72, y: 4))
        grabber.addLine(to: CGPoint(x: 2.72, y: 4))
        grabber.addCurve(to: CGPoint(x: 2.05, y: 3.99), controlPoint1: CGPoint(x: 2.5, y: 4), controlPoint2: CGPoint(x: 2.27, y: 4))
        grabber.addCurve(to: CGPoint(x: 1.45, y: 3.9), controlPoint1: CGPoint(x: 1.84, y: 3.98), controlPoint2: CGPoint(x: 1.64, y: 3.95))
        grabber.addCurve(to: CGPoint(x: 0.4, y: 3.19), controlPoint1: CGPoint(x: 1.03, y: 3.78), controlPoint2: CGPoint(x: 0.67, y: 3.54))
        grabber.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.14, y: 2.85), controlPoint2: CGPoint(x: 0, y: 2.43))
        grabber.addCurve(to: CGPoint(x: 0.4, y: 0.81), controlPoint1: CGPoint(x: 0, y: 1.57), controlPoint2: CGPoint(x: 0.14, y: 1.15))
        grabber.addCurve(to: CGPoint(x: 1.45, y: 0.1), controlPoint1: CGPoint(x: 0.67, y: 0.46), controlPoint2: CGPoint(x: 1.03, y: 0.22))
        grabber.addCurve(to: CGPoint(x: 2.05, y: 0.01), controlPoint1: CGPoint(x: 1.64, y: 0.05), controlPoint2: CGPoint(x: 1.84, y: 0.02))
        grabber.addCurve(to: CGPoint(x: 2.72, y: 0), controlPoint1: CGPoint(x: 2.27, y: -0), controlPoint2: CGPoint(x: 2.5, y: 0))
        grabber.addLine(to: CGPoint(x: 2.72, y: 0))
        grabber.addLine(to: CGPoint(x: 33.28, y: 0))
        grabber.addLine(to: CGPoint(x: 33.28, y: 0))
        grabber.close()
        grabber.move(to: CGPoint(x: 33.28, y: 0))
        context.saveGState()
        context.translateBy(x: 170, y: 2.5)
        grabber.usesEvenOddFillRule = true
        UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
        grabber.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemDarkSuggestionsCollapsed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 9), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 9), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 9)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 9))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.039, alpha: 0.5).setFill()
        background.fill()
        context.restoreGState()
        /// grabber
        let grabber = UIBezierPath()
        grabber.move(to: CGPoint(x: 33.28, y: 0))
        grabber.addCurve(to: CGPoint(x: 33.95, y: 0.01), controlPoint1: CGPoint(x: 33.51, y: 0), controlPoint2: CGPoint(x: 33.73, y: -0))
        grabber.addCurve(to: CGPoint(x: 34.55, y: 0.1), controlPoint1: CGPoint(x: 34.16, y: 0.02), controlPoint2: CGPoint(x: 34.36, y: 0.05))
        grabber.addCurve(to: CGPoint(x: 35.6, y: 0.81), controlPoint1: CGPoint(x: 34.97, y: 0.22), controlPoint2: CGPoint(x: 35.34, y: 0.46))
        grabber.addCurve(to: CGPoint(x: 36, y: 2), controlPoint1: CGPoint(x: 35.86, y: 1.15), controlPoint2: CGPoint(x: 36, y: 1.57))
        grabber.addCurve(to: CGPoint(x: 35.6, y: 3.19), controlPoint1: CGPoint(x: 36, y: 2.43), controlPoint2: CGPoint(x: 35.86, y: 2.85))
        grabber.addCurve(to: CGPoint(x: 34.55, y: 3.9), controlPoint1: CGPoint(x: 35.34, y: 3.54), controlPoint2: CGPoint(x: 34.97, y: 3.78))
        grabber.addCurve(to: CGPoint(x: 33.95, y: 3.99), controlPoint1: CGPoint(x: 34.36, y: 3.95), controlPoint2: CGPoint(x: 34.16, y: 3.98))
        grabber.addCurve(to: CGPoint(x: 33.28, y: 4), controlPoint1: CGPoint(x: 33.73, y: 4), controlPoint2: CGPoint(x: 33.51, y: 4))
        grabber.addLine(to: CGPoint(x: 33.28, y: 4))
        grabber.addLine(to: CGPoint(x: 2.72, y: 4))
        grabber.addLine(to: CGPoint(x: 2.72, y: 4))
        grabber.addCurve(to: CGPoint(x: 2.05, y: 3.99), controlPoint1: CGPoint(x: 2.5, y: 4), controlPoint2: CGPoint(x: 2.27, y: 4))
        grabber.addCurve(to: CGPoint(x: 1.45, y: 3.9), controlPoint1: CGPoint(x: 1.84, y: 3.98), controlPoint2: CGPoint(x: 1.64, y: 3.95))
        grabber.addCurve(to: CGPoint(x: 0.4, y: 3.19), controlPoint1: CGPoint(x: 1.03, y: 3.78), controlPoint2: CGPoint(x: 0.67, y: 3.54))
        grabber.addCurve(to: CGPoint(x: 0, y: 2), controlPoint1: CGPoint(x: 0.14, y: 2.85), controlPoint2: CGPoint(x: 0, y: 2.43))
        grabber.addCurve(to: CGPoint(x: 0.4, y: 0.81), controlPoint1: CGPoint(x: 0, y: 1.57), controlPoint2: CGPoint(x: 0.14, y: 1.15))
        grabber.addCurve(to: CGPoint(x: 1.45, y: 0.1), controlPoint1: CGPoint(x: 0.67, y: 0.46), controlPoint2: CGPoint(x: 1.03, y: 0.22))
        grabber.addCurve(to: CGPoint(x: 2.05, y: 0.01), controlPoint1: CGPoint(x: 1.64, y: 0.05), controlPoint2: CGPoint(x: 1.84, y: 0.02))
        grabber.addCurve(to: CGPoint(x: 2.72, y: 0), controlPoint1: CGPoint(x: 2.27, y: -0), controlPoint2: CGPoint(x: 2.5, y: 0))
        grabber.addLine(to: CGPoint(x: 2.72, y: 0))
        grabber.addLine(to: CGPoint(x: 33.28, y: 0))
        grabber.addLine(to: CGPoint(x: 33.28, y: 0))
        grabber.close()
        grabber.move(to: CGPoint(x: 33.28, y: 0))
        context.saveGState()
        context.translateBy(x: 170, y: 2.5)
        grabber.usesEvenOddFillRule = true
        UIColor(hue: 0.274, saturation: 0, brightness: 0.996, alpha: 1).setFill()
        grabber.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemLightKeyboardEmoji(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 259), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 259), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 259)
        
        /// Keyboard Emoji Light
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawSystemDarkKeyboardEmoji(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 258), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 258), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 258)
        
        /// Keyboard Emoji Dark
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawSystemLightKeyboardNumberic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.611, saturation: 0.041, brightness: 0.859, alpha: 0.9).setFill()
        background.fill()
        context.restoreGState()
        /// Delete
        let delete = UIBezierPath()
        delete.move(to: CGPoint(x: 7.07, y: 14.98))
        delete.addCurve(to: CGPoint(x: 7.41, y: 15.32), controlPoint1: CGPoint(x: 7.16, y: 15.08), controlPoint2: CGPoint(x: 7.26, y: 15.17))
        delete.addCurve(to: CGPoint(x: 7.67, y: 15.57), controlPoint1: CGPoint(x: 7.48, y: 15.4), controlPoint2: CGPoint(x: 7.56, y: 15.47))
        delete.addCurve(to: CGPoint(x: 7.77, y: 15.68), controlPoint1: CGPoint(x: 7.69, y: 15.6), controlPoint2: CGPoint(x: 7.7, y: 15.61))
        delete.addCurve(to: CGPoint(x: 7.82, y: 15.73), controlPoint1: CGPoint(x: 7.79, y: 15.7), controlPoint2: CGPoint(x: 7.81, y: 15.72))
        delete.addCurve(to: CGPoint(x: 8.53, y: 16.24), controlPoint1: CGPoint(x: 8.03, y: 15.94), controlPoint2: CGPoint(x: 8.26, y: 16.11))
        delete.addCurve(to: CGPoint(x: 9.36, y: 16.52), controlPoint1: CGPoint(x: 8.79, y: 16.38), controlPoint2: CGPoint(x: 9.07, y: 16.47))
        delete.addCurve(to: CGPoint(x: 10.36, y: 16.61), controlPoint1: CGPoint(x: 9.69, y: 16.57), controlPoint2: CGPoint(x: 10.02, y: 16.6))
        delete.addCurve(to: CGPoint(x: 10.56, y: 16.61), controlPoint1: CGPoint(x: 10.46, y: 16.61), controlPoint2: CGPoint(x: 10.5, y: 16.61))
        delete.addCurve(to: CGPoint(x: 10.84, y: 16.62), controlPoint1: CGPoint(x: 10.67, y: 16.61), controlPoint2: CGPoint(x: 10.76, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 17.31))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 17.33, y: 16.62))
        delete.addCurve(to: CGPoint(x: 17.82, y: 16.61), controlPoint1: CGPoint(x: 17.46, y: 16.62), controlPoint2: CGPoint(x: 17.56, y: 16.61))
        delete.addCurve(to: CGPoint(x: 18.8, y: 16.52), controlPoint1: CGPoint(x: 18.15, y: 16.6), controlPoint2: CGPoint(x: 18.48, y: 16.57))
        delete.addCurve(to: CGPoint(x: 19.64, y: 16.24), controlPoint1: CGPoint(x: 19.1, y: 16.47), controlPoint2: CGPoint(x: 19.38, y: 16.38))
        delete.addCurve(to: CGPoint(x: 20.35, y: 15.73), controlPoint1: CGPoint(x: 19.9, y: 16.11), controlPoint2: CGPoint(x: 20.14, y: 15.94))
        delete.addCurve(to: CGPoint(x: 20.86, y: 15.03), controlPoint1: CGPoint(x: 20.56, y: 15.52), controlPoint2: CGPoint(x: 20.73, y: 15.28))
        delete.addCurve(to: CGPoint(x: 21.14, y: 14.19), controlPoint1: CGPoint(x: 21, y: 14.76), controlPoint2: CGPoint(x: 21.09, y: 14.47))
        delete.addCurve(to: CGPoint(x: 21.23, y: 13.19), controlPoint1: CGPoint(x: 21.19, y: 13.86), controlPoint2: CGPoint(x: 21.22, y: 13.53))
        delete.addCurve(to: CGPoint(x: 21.23, y: 12.71), controlPoint1: CGPoint(x: 21.23, y: 13.01), controlPoint2: CGPoint(x: 21.23, y: 12.85))
        delete.addLine(to: CGPoint(x: 21.23, y: 5.59))
        delete.addCurve(to: CGPoint(x: 21.23, y: 5.3), controlPoint1: CGPoint(x: 21.23, y: 5.44), controlPoint2: CGPoint(x: 21.23, y: 5.44))
        delete.addCurve(to: CGPoint(x: 21.23, y: 5.18), controlPoint1: CGPoint(x: 21.23, y: 5.24), controlPoint2: CGPoint(x: 21.23, y: 5.24))
        delete.addCurve(to: CGPoint(x: 21.22, y: 4.8), controlPoint1: CGPoint(x: 21.23, y: 4.99), controlPoint2: CGPoint(x: 21.23, y: 4.91))
        delete.addCurve(to: CGPoint(x: 21.14, y: 3.82), controlPoint1: CGPoint(x: 21.22, y: 4.47), controlPoint2: CGPoint(x: 21.19, y: 4.14))
        delete.addCurve(to: CGPoint(x: 20.86, y: 2.98), controlPoint1: CGPoint(x: 21.09, y: 3.53), controlPoint2: CGPoint(x: 21, y: 3.24))
        delete.addCurve(to: CGPoint(x: 20.35, y: 2.27), controlPoint1: CGPoint(x: 20.73, y: 2.72), controlPoint2: CGPoint(x: 20.56, y: 2.48))
        delete.addCurve(to: CGPoint(x: 19.64, y: 1.76), controlPoint1: CGPoint(x: 20.14, y: 2.06), controlPoint2: CGPoint(x: 19.9, y: 1.89))
        delete.addCurve(to: CGPoint(x: 18.8, y: 1.48), controlPoint1: CGPoint(x: 19.38, y: 1.62), controlPoint2: CGPoint(x: 19.1, y: 1.53))
        delete.addCurve(to: CGPoint(x: 17.81, y: 1.39), controlPoint1: CGPoint(x: 18.48, y: 1.42), controlPoint2: CGPoint(x: 18.15, y: 1.4))
        delete.addCurve(to: CGPoint(x: 17.33, y: 1.38), controlPoint1: CGPoint(x: 17.56, y: 1.39), controlPoint2: CGPoint(x: 17.46, y: 1.38))
        delete.addLine(to: CGPoint(x: 10.84, y: 1.38))
        delete.addCurve(to: CGPoint(x: 10.56, y: 1.39), controlPoint1: CGPoint(x: 10.75, y: 1.38), controlPoint2: CGPoint(x: 10.66, y: 1.39))
        delete.addCurve(to: CGPoint(x: 10.34, y: 1.39), controlPoint1: CGPoint(x: 10.5, y: 1.39), controlPoint2: CGPoint(x: 10.46, y: 1.39))
        delete.addCurve(to: CGPoint(x: 9.36, y: 1.48), controlPoint1: CGPoint(x: 10.02, y: 1.4), controlPoint2: CGPoint(x: 9.69, y: 1.42))
        delete.addCurve(to: CGPoint(x: 8.52, y: 1.76), controlPoint1: CGPoint(x: 9.07, y: 1.53), controlPoint2: CGPoint(x: 8.79, y: 1.62))
        delete.addCurve(to: CGPoint(x: 7.8, y: 2.29), controlPoint1: CGPoint(x: 8.26, y: 1.89), controlPoint2: CGPoint(x: 8.02, y: 2.06))
        delete.addCurve(to: CGPoint(x: 7.67, y: 2.42), controlPoint1: CGPoint(x: 7.73, y: 2.36), controlPoint2: CGPoint(x: 7.7, y: 2.39))
        delete.addCurve(to: CGPoint(x: 7.39, y: 2.69), controlPoint1: CGPoint(x: 7.57, y: 2.51), controlPoint2: CGPoint(x: 7.49, y: 2.6))
        delete.addCurve(to: CGPoint(x: 7.06, y: 3.02), controlPoint1: CGPoint(x: 7.24, y: 2.84), controlPoint2: CGPoint(x: 7.16, y: 2.92))
        delete.addLine(to: CGPoint(x: 4.73, y: 5.36))
        delete.addCurve(to: CGPoint(x: 4.66, y: 5.42), controlPoint1: CGPoint(x: 4.69, y: 5.39), controlPoint2: CGPoint(x: 4.67, y: 5.41))
        delete.addCurve(to: CGPoint(x: 4.6, y: 5.48), controlPoint1: CGPoint(x: 4.63, y: 5.45), controlPoint2: CGPoint(x: 4.63, y: 5.45))
        delete.addCurve(to: CGPoint(x: 4.38, y: 5.7), controlPoint1: CGPoint(x: 4.49, y: 5.59), controlPoint2: CGPoint(x: 4.44, y: 5.64))
        delete.addLine(to: CGPoint(x: 2.31, y: 7.77))
        delete.addCurve(to: CGPoint(x: 2.26, y: 7.81), controlPoint1: CGPoint(x: 2.29, y: 7.79), controlPoint2: CGPoint(x: 2.29, y: 7.79))
        delete.addCurve(to: CGPoint(x: 2.22, y: 7.86), controlPoint1: CGPoint(x: 2.24, y: 7.83), controlPoint2: CGPoint(x: 2.24, y: 7.83))
        delete.addCurve(to: CGPoint(x: 2.12, y: 7.96), controlPoint1: CGPoint(x: 2.17, y: 7.91), controlPoint2: CGPoint(x: 2.14, y: 7.94))
        delete.addCurve(to: CGPoint(x: 1.98, y: 8.1), controlPoint1: CGPoint(x: 2.04, y: 8.04), controlPoint2: CGPoint(x: 2.01, y: 8.07))
        delete.addCurve(to: CGPoint(x: 1.55, y: 8.58), controlPoint1: CGPoint(x: 1.8, y: 8.28), controlPoint2: CGPoint(x: 1.67, y: 8.43))
        delete.addLine(to: CGPoint(x: 1.5, y: 8.64))
        delete.addCurve(to: CGPoint(x: 1.42, y: 8.74), controlPoint1: CGPoint(x: 1.47, y: 8.67), controlPoint2: CGPoint(x: 1.44, y: 8.7))
        delete.addCurve(to: CGPoint(x: 1.42, y: 9.26), controlPoint1: CGPoint(x: 1.37, y: 8.91), controlPoint2: CGPoint(x: 1.37, y: 9.09))
        delete.addCurve(to: CGPoint(x: 1.5, y: 9.38), controlPoint1: CGPoint(x: 1.44, y: 9.3), controlPoint2: CGPoint(x: 1.47, y: 9.34))
        delete.addCurve(to: CGPoint(x: 1.96, y: 9.88), controlPoint1: CGPoint(x: 1.67, y: 9.57), controlPoint2: CGPoint(x: 1.81, y: 9.73))
        delete.addCurve(to: CGPoint(x: 2, y: 9.92), controlPoint1: CGPoint(x: 1.98, y: 9.9), controlPoint2: CGPoint(x: 1.98, y: 9.9))
        delete.addCurve(to: CGPoint(x: 2.04, y: 9.96), controlPoint1: CGPoint(x: 2.02, y: 9.94), controlPoint2: CGPoint(x: 2.02, y: 9.94))
        delete.addCurve(to: CGPoint(x: 2.12, y: 10.04), controlPoint1: CGPoint(x: 2.08, y: 10), controlPoint2: CGPoint(x: 2.09, y: 10.01))
        delete.addCurve(to: CGPoint(x: 2.22, y: 10.14), controlPoint1: CGPoint(x: 2.15, y: 10.07), controlPoint2: CGPoint(x: 2.17, y: 10.09))
        delete.addCurve(to: CGPoint(x: 2.32, y: 10.24), controlPoint1: CGPoint(x: 2.27, y: 10.19), controlPoint2: CGPoint(x: 2.29, y: 10.21))
        delete.addLine(to: CGPoint(x: 4.37, y: 12.3))
        delete.addLine(to: CGPoint(x: 4.58, y: 12.5))
        delete.addLine(to: CGPoint(x: 4.71, y: 12.63))
        delete.addCurve(to: CGPoint(x: 4.78, y: 12.69), controlPoint1: CGPoint(x: 4.73, y: 12.65), controlPoint2: CGPoint(x: 4.76, y: 12.67))
        delete.addLine(to: CGPoint(x: 7.07, y: 14.98))
        delete.close()
        delete.move(to: CGPoint(x: 10.99, y: 5.56))
        delete.addCurve(to: CGPoint(x: 10.91, y: 5.46), controlPoint1: CGPoint(x: 10.96, y: 5.52), controlPoint2: CGPoint(x: 10.94, y: 5.49))
        delete.addLine(to: CGPoint(x: 10.91, y: 5.46))
        delete.addCurve(to: CGPoint(x: 10.49, y: 5.28), controlPoint1: CGPoint(x: 10.8, y: 5.35), controlPoint2: CGPoint(x: 10.64, y: 5.28))
        delete.addCurve(to: CGPoint(x: 10.06, y: 5.46), controlPoint1: CGPoint(x: 10.33, y: 5.28), controlPoint2: CGPoint(x: 10.18, y: 5.35))
        delete.addCurve(to: CGPoint(x: 10.06, y: 6.3), controlPoint1: CGPoint(x: 9.83, y: 5.69), controlPoint2: CGPoint(x: 9.83, y: 6.07))
        delete.addLine(to: CGPoint(x: 10.05, y: 6.31))
        delete.addLine(to: CGPoint(x: 12.74, y: 9))
        delete.addLine(to: CGPoint(x: 10.15, y: 11.59))
        delete.addCurve(to: CGPoint(x: 10.05, y: 11.67), controlPoint1: CGPoint(x: 10.12, y: 11.61), controlPoint2: CGPoint(x: 10.08, y: 11.64))
        delete.addCurve(to: CGPoint(x: 10.05, y: 12.51), controlPoint1: CGPoint(x: 9.82, y: 11.9), controlPoint2: CGPoint(x: 9.82, y: 12.28))
        delete.addCurve(to: CGPoint(x: 10.89, y: 12.52), controlPoint1: CGPoint(x: 10.28, y: 12.74), controlPoint2: CGPoint(x: 10.66, y: 12.74))
        delete.addLine(to: CGPoint(x: 10.9, y: 12.53))
        delete.addLine(to: CGPoint(x: 13.59, y: 9.84))
        delete.addLine(to: CGPoint(x: 16.28, y: 12.52))
        delete.addLine(to: CGPoint(x: 16.28, y: 12.51))
        delete.addCurve(to: CGPoint(x: 17.12, y: 12.51), controlPoint1: CGPoint(x: 16.52, y: 12.75), controlPoint2: CGPoint(x: 16.89, y: 12.75))
        delete.addCurve(to: CGPoint(x: 17.13, y: 11.67), controlPoint1: CGPoint(x: 17.36, y: 12.28), controlPoint2: CGPoint(x: 17.36, y: 11.91))
        delete.addLine(to: CGPoint(x: 17.13, y: 11.67))
        delete.addCurve(to: CGPoint(x: 17.04, y: 11.6), controlPoint1: CGPoint(x: 17.1, y: 11.65), controlPoint2: CGPoint(x: 17.07, y: 11.62))
        delete.addLine(to: CGPoint(x: 14.43, y: 9))
        delete.addLine(to: CGPoint(x: 17.12, y: 6.3))
        delete.addLine(to: CGPoint(x: 17.12, y: 6.3))
        delete.addCurve(to: CGPoint(x: 17.11, y: 5.46), controlPoint1: CGPoint(x: 17.35, y: 6.06), controlPoint2: CGPoint(x: 17.35, y: 5.69))
        delete.addCurve(to: CGPoint(x: 16.27, y: 5.46), controlPoint1: CGPoint(x: 16.88, y: 5.22), controlPoint2: CGPoint(x: 16.5, y: 5.22))
        delete.addLine(to: CGPoint(x: 16.27, y: 5.46))
        delete.addCurve(to: CGPoint(x: 16.2, y: 5.53), controlPoint1: CGPoint(x: 16.25, y: 5.48), controlPoint2: CGPoint(x: 16.22, y: 5.51))
        delete.addLine(to: CGPoint(x: 13.59, y: 8.15))
        delete.addLine(to: CGPoint(x: 10.99, y: 5.56))
        delete.close()
        delete.move(to: CGPoint(x: 3.77, y: 13.65))
        delete.addLine(to: CGPoint(x: 3.61, y: 13.48))
        delete.addLine(to: CGPoint(x: 3.4, y: 13.28))
        delete.addLine(to: CGPoint(x: 1.34, y: 11.22))
        delete.addCurve(to: CGPoint(x: 1.23, y: 11.11), controlPoint1: CGPoint(x: 1.31, y: 11.19), controlPoint2: CGPoint(x: 1.28, y: 11.16))
        delete.addCurve(to: CGPoint(x: 1.14, y: 11.02), controlPoint1: CGPoint(x: 1.19, y: 11.06), controlPoint2: CGPoint(x: 1.17, y: 11.04))
        delete.addCurve(to: CGPoint(x: 1.05, y: 10.93), controlPoint1: CGPoint(x: 1.11, y: 10.99), controlPoint2: CGPoint(x: 1.09, y: 10.97))
        delete.addCurve(to: CGPoint(x: 0.98, y: 10.85), controlPoint1: CGPoint(x: 0.99, y: 10.87), controlPoint2: CGPoint(x: 0.99, y: 10.87))
        delete.addCurve(to: CGPoint(x: 0.48, y: 10.31), controlPoint1: CGPoint(x: 0.8, y: 10.68), controlPoint2: CGPoint(x: 0.64, y: 10.5))
        delete.addCurve(to: CGPoint(x: 0.14, y: 9.79), controlPoint1: CGPoint(x: 0.34, y: 10.16), controlPoint2: CGPoint(x: 0.22, y: 9.98))
        delete.addLine(to: CGPoint(x: 0.11, y: 9.72))
        delete.addCurve(to: CGPoint(x: 0.11, y: 8.28), controlPoint1: CGPoint(x: -0.04, y: 9.25), controlPoint2: CGPoint(x: -0.04, y: 8.75))
        delete.addLine(to: CGPoint(x: 0.14, y: 8.22))
        delete.addCurve(to: CGPoint(x: 0.48, y: 7.69), controlPoint1: CGPoint(x: 0.22, y: 8.02), controlPoint2: CGPoint(x: 0.34, y: 7.85))
        delete.addCurve(to: CGPoint(x: 0.96, y: 7.16), controlPoint1: CGPoint(x: 0.63, y: 7.51), controlPoint2: CGPoint(x: 0.79, y: 7.33))
        delete.addCurve(to: CGPoint(x: 1.14, y: 6.98), controlPoint1: CGPoint(x: 1.01, y: 7.11), controlPoint2: CGPoint(x: 1.05, y: 7.07))
        delete.addCurve(to: CGPoint(x: 1.23, y: 6.89), controlPoint1: CGPoint(x: 1.16, y: 6.96), controlPoint2: CGPoint(x: 1.18, y: 6.94))
        delete.addCurve(to: CGPoint(x: 1.28, y: 6.83), controlPoint1: CGPoint(x: 1.26, y: 6.86), controlPoint2: CGPoint(x: 1.26, y: 6.86))
        delete.addCurve(to: CGPoint(x: 1.33, y: 6.78), controlPoint1: CGPoint(x: 1.31, y: 6.81), controlPoint2: CGPoint(x: 1.31, y: 6.81))
        delete.addLine(to: CGPoint(x: 3.39, y: 4.73))
        delete.addCurve(to: CGPoint(x: 3.6, y: 4.52), controlPoint1: CGPoint(x: 3.45, y: 4.67), controlPoint2: CGPoint(x: 3.51, y: 4.61))
        delete.addCurve(to: CGPoint(x: 3.68, y: 4.44), controlPoint1: CGPoint(x: 3.66, y: 4.47), controlPoint2: CGPoint(x: 3.66, y: 4.47))
        delete.addCurve(to: CGPoint(x: 3.78, y: 4.35), controlPoint1: CGPoint(x: 3.72, y: 4.4), controlPoint2: CGPoint(x: 3.75, y: 4.37))
        delete.addLine(to: CGPoint(x: 6.08, y: 2.05))
        delete.addCurve(to: CGPoint(x: 6.42, y: 1.71), controlPoint1: CGPoint(x: 6.18, y: 1.95), controlPoint2: CGPoint(x: 6.27, y: 1.86))
        delete.addCurve(to: CGPoint(x: 6.72, y: 1.41), controlPoint1: CGPoint(x: 6.51, y: 1.62), controlPoint2: CGPoint(x: 6.61, y: 1.52))
        delete.addCurve(to: CGPoint(x: 6.84, y: 1.29), controlPoint1: CGPoint(x: 6.81, y: 1.32), controlPoint2: CGPoint(x: 6.83, y: 1.3))
        delete.addCurve(to: CGPoint(x: 7.9, y: 0.52), controlPoint1: CGPoint(x: 7.15, y: 0.98), controlPoint2: CGPoint(x: 7.5, y: 0.72))
        delete.addCurve(to: CGPoint(x: 9.13, y: 0.12), controlPoint1: CGPoint(x: 8.29, y: 0.32), controlPoint2: CGPoint(x: 8.7, y: 0.19))
        delete.addCurve(to: CGPoint(x: 10.32, y: 0.01), controlPoint1: CGPoint(x: 9.53, y: 0.05), controlPoint2: CGPoint(x: 9.93, y: 0.01))
        delete.addCurve(to: CGPoint(x: 10.52, y: 0), controlPoint1: CGPoint(x: 10.42, y: 0.01), controlPoint2: CGPoint(x: 10.47, y: 0.01))
        delete.addCurve(to: CGPoint(x: 10.84, y: 0), controlPoint1: CGPoint(x: 10.64, y: 0), controlPoint2: CGPoint(x: 10.74, y: 0))
        delete.addLine(to: CGPoint(x: 17.33, y: 0))
        delete.addCurve(to: CGPoint(x: 17.83, y: 0.01), controlPoint1: CGPoint(x: 17.47, y: 0), controlPoint2: CGPoint(x: 17.59, y: 0))
        delete.addCurve(to: CGPoint(x: 19.03, y: 0.12), controlPoint1: CGPoint(x: 18.23, y: 0.01), controlPoint2: CGPoint(x: 18.64, y: 0.05))
        delete.addCurve(to: CGPoint(x: 20.27, y: 0.52), controlPoint1: CGPoint(x: 19.46, y: 0.19), controlPoint2: CGPoint(x: 19.88, y: 0.32))
        delete.addCurve(to: CGPoint(x: 21.33, y: 1.29), controlPoint1: CGPoint(x: 20.66, y: 0.72), controlPoint2: CGPoint(x: 21.02, y: 0.98))
        delete.addCurve(to: CGPoint(x: 22.1, y: 2.35), controlPoint1: CGPoint(x: 21.64, y: 1.6), controlPoint2: CGPoint(x: 21.9, y: 1.96))
        delete.addCurve(to: CGPoint(x: 22.51, y: 3.59), controlPoint1: CGPoint(x: 22.29, y: 2.74), controlPoint2: CGPoint(x: 22.43, y: 3.16))
        delete.addCurve(to: CGPoint(x: 22.61, y: 4.77), controlPoint1: CGPoint(x: 22.57, y: 3.98), controlPoint2: CGPoint(x: 22.6, y: 4.38))
        delete.addCurve(to: CGPoint(x: 22.62, y: 5.16), controlPoint1: CGPoint(x: 22.61, y: 4.88), controlPoint2: CGPoint(x: 22.61, y: 4.97))
        delete.addCurve(to: CGPoint(x: 22.62, y: 5.29), controlPoint1: CGPoint(x: 22.62, y: 5.22), controlPoint2: CGPoint(x: 22.62, y: 5.22))
        delete.addLine(to: CGPoint(x: 22.62, y: 12.71))
        delete.addCurve(to: CGPoint(x: 22.61, y: 13.22), controlPoint1: CGPoint(x: 22.62, y: 12.87), controlPoint2: CGPoint(x: 22.61, y: 13.04))
        delete.addCurve(to: CGPoint(x: 22.5, y: 14.42), controlPoint1: CGPoint(x: 22.6, y: 13.62), controlPoint2: CGPoint(x: 22.57, y: 14.02))
        delete.addCurve(to: CGPoint(x: 22.1, y: 15.66), controlPoint1: CGPoint(x: 22.43, y: 14.84), controlPoint2: CGPoint(x: 22.29, y: 15.26))
        delete.addCurve(to: CGPoint(x: 21.33, y: 16.71), controlPoint1: CGPoint(x: 21.9, y: 16.04), controlPoint2: CGPoint(x: 21.64, y: 16.4))
        delete.addCurve(to: CGPoint(x: 20.27, y: 17.48), controlPoint1: CGPoint(x: 21.02, y: 17.02), controlPoint2: CGPoint(x: 20.66, y: 17.28))
        delete.addCurve(to: CGPoint(x: 19.03, y: 17.88), controlPoint1: CGPoint(x: 19.88, y: 17.68), controlPoint2: CGPoint(x: 19.46, y: 17.81))
        delete.addCurve(to: CGPoint(x: 17.85, y: 17.99), controlPoint1: CGPoint(x: 18.64, y: 17.95), controlPoint2: CGPoint(x: 18.24, y: 17.99))
        delete.addCurve(to: CGPoint(x: 17.33, y: 18), controlPoint1: CGPoint(x: 17.59, y: 18), controlPoint2: CGPoint(x: 17.47, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 17.31))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 10.84, y: 18))
        delete.addCurve(to: CGPoint(x: 10.52, y: 18), controlPoint1: CGPoint(x: 10.74, y: 18), controlPoint2: CGPoint(x: 10.64, y: 18))
        delete.addCurve(to: CGPoint(x: 10.33, y: 17.99), controlPoint1: CGPoint(x: 10.47, y: 17.99), controlPoint2: CGPoint(x: 10.42, y: 17.99))
        delete.addCurve(to: CGPoint(x: 9.14, y: 17.88), controlPoint1: CGPoint(x: 9.93, y: 17.99), controlPoint2: CGPoint(x: 9.53, y: 17.95))
        delete.addCurve(to: CGPoint(x: 7.9, y: 17.48), controlPoint1: CGPoint(x: 8.71, y: 17.81), controlPoint2: CGPoint(x: 8.29, y: 17.68))
        delete.addCurve(to: CGPoint(x: 6.85, y: 16.72), controlPoint1: CGPoint(x: 7.51, y: 17.28), controlPoint2: CGPoint(x: 7.15, y: 17.02))
        delete.addCurve(to: CGPoint(x: 6.76, y: 16.63), controlPoint1: CGPoint(x: 6.83, y: 16.7), controlPoint2: CGPoint(x: 6.82, y: 16.68))
        delete.addCurve(to: CGPoint(x: 6.72, y: 16.58), controlPoint1: CGPoint(x: 6.75, y: 16.61), controlPoint2: CGPoint(x: 6.72, y: 16.59))
        delete.addCurve(to: CGPoint(x: 6.43, y: 16.3), controlPoint1: CGPoint(x: 6.59, y: 16.46), controlPoint2: CGPoint(x: 6.51, y: 16.38))
        delete.addCurve(to: CGPoint(x: 6.08, y: 15.96), controlPoint1: CGPoint(x: 6.28, y: 16.16), controlPoint2: CGPoint(x: 6.18, y: 16.06))
        delete.addLine(to: CGPoint(x: 3.85, y: 13.72))
        delete.addLine(to: CGPoint(x: 3.77, y: 13.65))
        delete.close()
        delete.move(to: CGPoint(x: 3.77, y: 13.65))
        context.saveGState()
        context.translateBy(x: 301.88, y: 180)
        UIColor(hue: 0.606, saturation: 0.149, brightness: 0.29, alpha: 1).setFill()
        delete.fill()
        context.restoreGState()
        /// 0
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 167)
            
            /// Key Background
            let keyBackground = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground.cgPath)
            context.addRect(keyBackground.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground.fill()
            context.restoreGState()
            
            /// #
            let layer = NSMutableAttributedString(string: "0")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
            }
            context.saveGState()
            layer.draw(in: CGRect(x: 0, y: 8, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 9
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 113)
            
            /// Key Background
            let keyBackground2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground2.cgPath)
            context.addRect(keyBackground2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground2.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground2.fill()
            context.restoreGState()
            
            /// ABC
            let aBC = NSMutableAttributedString(string: "WXYZ")
            aBC.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC.length))
            aBC.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC.length))
            }
            context.saveGState()
            aBC.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer2 = NSMutableAttributedString(string: "9")
            layer2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer2.length))
            layer2.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
            }
            context.saveGState()
            layer2.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 8
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 113)
            
            /// Key Background
            let keyBackground3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground3.cgPath)
            context.addRect(keyBackground3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground3.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground3.fill()
            context.restoreGState()
            
            /// ABC
            let aBC2 = NSMutableAttributedString(string: "TUV")
            aBC2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC2.length))
            aBC2.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC2.length))
            }
            context.saveGState()
            aBC2.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer3 = NSMutableAttributedString(string: "8")
            layer3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer3.length))
            layer3.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer3.length))
            }
            context.saveGState()
            layer3.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 7
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 113)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// ABC
            let aBC3 = NSMutableAttributedString(string: "PGRS")
            aBC3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC3.length))
            aBC3.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC3.length))
            }
            context.saveGState()
            aBC3.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer4 = NSMutableAttributedString(string: "7")
            layer4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer4.length))
            layer4.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer4.length))
            }
            context.saveGState()
            layer4.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 6
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 59)
            
            /// Key Background
            let keyBackground4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground4.cgPath)
            context.addRect(keyBackground4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground4.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground4.fill()
            context.restoreGState()
            
            /// ABC
            let aBC4 = NSMutableAttributedString(string: "MNO")
            aBC4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC4.length))
            aBC4.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC4.length))
            }
            context.saveGState()
            aBC4.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer5 = NSMutableAttributedString(string: "6")
            layer5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer5.length))
            layer5.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer5.length))
            }
            context.saveGState()
            layer5.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 5
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 59)
            
            /// Key Background
            let keyBackground5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground5.cgPath)
            context.addRect(keyBackground5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground5.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground5.fill()
            context.restoreGState()
            
            /// ABC
            let aBC5 = NSMutableAttributedString(string: "JKL")
            aBC5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC5.length))
            aBC5.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC5.length))
            }
            context.saveGState()
            aBC5.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer6 = NSMutableAttributedString(string: "5")
            layer6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer6.length))
            layer6.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer6.length))
            }
            context.saveGState()
            layer6.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 4
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 59)
            
            /// Key Background
            let keyBackground6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground6.cgPath)
            context.addRect(keyBackground6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground6.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground6.fill()
            context.restoreGState()
            
            /// ABC
            let aBC6 = NSMutableAttributedString(string: "GHI")
            aBC6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC6.length))
            aBC6.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC6.length))
            }
            context.saveGState()
            aBC6.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer7 = NSMutableAttributedString(string: "4")
            layer7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer7.length))
            layer7.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer7.length))
            }
            context.saveGState()
            layer7.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 3
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 6)
            
            /// Key Background
            let keyBackground7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground7.cgPath)
            context.addRect(keyBackground7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground7.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground7.fill()
            context.restoreGState()
            
            /// ABC
            let aBC7 = NSMutableAttributedString(string: "DEF")
            aBC7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC7.length))
            aBC7.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC7.length))
            }
            context.saveGState()
            aBC7.draw(in: CGRect(x: 0, y: 29, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer8 = NSMutableAttributedString(string: "3")
            layer8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer8.length))
            layer8.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer8.length))
            }
            context.saveGState()
            layer8.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 2
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 6)
            
            /// Key Background
            let keyBackground8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground8.cgPath)
            context.addRect(keyBackground8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground8.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground8.fill()
            context.restoreGState()
            
            /// ABC
            let aBC8 = NSMutableAttributedString(string: "ABC")
            aBC8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC8.length))
            aBC8.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: 2))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC8.length))
            }
            context.saveGState()
            aBC8.draw(in: CGRect(x: 0, y: 29, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer9 = NSMutableAttributedString(string: "2")
            layer9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer9.length))
            layer9.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer9.length))
            }
            context.saveGState()
            layer9.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 1
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            
            /// Key Background
            let keyBackground9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground9.cgPath)
            context.addRect(keyBackground9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.583, saturation: 0.029, brightness: 0.533, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            keyBackground9.fill()
            context.restoreGState()
            UIColor.white.setFill()
            keyBackground9.fill()
            context.restoreGState()
            
            /// #
            let layer10 = NSMutableAttributedString(string: "1")
            layer10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer10.length))
            layer10.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer10.length))
            }
            context.saveGState()
            layer10.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSystemDarkKeyboardNumberic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.11, alpha: 0.72).setFill()
        background.fill()
        context.restoreGState()
        /// Delete
        let delete = UIBezierPath()
        delete.move(to: CGPoint(x: 7.07, y: 14.98))
        delete.addCurve(to: CGPoint(x: 7.41, y: 15.32), controlPoint1: CGPoint(x: 7.16, y: 15.08), controlPoint2: CGPoint(x: 7.26, y: 15.17))
        delete.addCurve(to: CGPoint(x: 7.67, y: 15.57), controlPoint1: CGPoint(x: 7.48, y: 15.4), controlPoint2: CGPoint(x: 7.56, y: 15.47))
        delete.addCurve(to: CGPoint(x: 7.77, y: 15.68), controlPoint1: CGPoint(x: 7.69, y: 15.6), controlPoint2: CGPoint(x: 7.7, y: 15.61))
        delete.addCurve(to: CGPoint(x: 7.82, y: 15.73), controlPoint1: CGPoint(x: 7.79, y: 15.7), controlPoint2: CGPoint(x: 7.81, y: 15.72))
        delete.addCurve(to: CGPoint(x: 8.53, y: 16.24), controlPoint1: CGPoint(x: 8.03, y: 15.94), controlPoint2: CGPoint(x: 8.26, y: 16.11))
        delete.addCurve(to: CGPoint(x: 9.36, y: 16.52), controlPoint1: CGPoint(x: 8.79, y: 16.38), controlPoint2: CGPoint(x: 9.07, y: 16.47))
        delete.addCurve(to: CGPoint(x: 10.36, y: 16.61), controlPoint1: CGPoint(x: 9.69, y: 16.57), controlPoint2: CGPoint(x: 10.02, y: 16.6))
        delete.addCurve(to: CGPoint(x: 10.56, y: 16.61), controlPoint1: CGPoint(x: 10.46, y: 16.61), controlPoint2: CGPoint(x: 10.5, y: 16.61))
        delete.addCurve(to: CGPoint(x: 10.84, y: 16.62), controlPoint1: CGPoint(x: 10.67, y: 16.61), controlPoint2: CGPoint(x: 10.76, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 17.31))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 17.33, y: 16.62))
        delete.addCurve(to: CGPoint(x: 17.82, y: 16.61), controlPoint1: CGPoint(x: 17.46, y: 16.62), controlPoint2: CGPoint(x: 17.56, y: 16.61))
        delete.addCurve(to: CGPoint(x: 18.8, y: 16.52), controlPoint1: CGPoint(x: 18.15, y: 16.6), controlPoint2: CGPoint(x: 18.48, y: 16.57))
        delete.addCurve(to: CGPoint(x: 19.64, y: 16.24), controlPoint1: CGPoint(x: 19.1, y: 16.47), controlPoint2: CGPoint(x: 19.38, y: 16.38))
        delete.addCurve(to: CGPoint(x: 20.35, y: 15.73), controlPoint1: CGPoint(x: 19.9, y: 16.11), controlPoint2: CGPoint(x: 20.14, y: 15.94))
        delete.addCurve(to: CGPoint(x: 20.86, y: 15.03), controlPoint1: CGPoint(x: 20.56, y: 15.52), controlPoint2: CGPoint(x: 20.73, y: 15.28))
        delete.addCurve(to: CGPoint(x: 21.14, y: 14.19), controlPoint1: CGPoint(x: 21, y: 14.76), controlPoint2: CGPoint(x: 21.09, y: 14.47))
        delete.addCurve(to: CGPoint(x: 21.23, y: 13.19), controlPoint1: CGPoint(x: 21.19, y: 13.86), controlPoint2: CGPoint(x: 21.22, y: 13.53))
        delete.addCurve(to: CGPoint(x: 21.23, y: 12.71), controlPoint1: CGPoint(x: 21.23, y: 13.01), controlPoint2: CGPoint(x: 21.23, y: 12.85))
        delete.addLine(to: CGPoint(x: 21.23, y: 5.59))
        delete.addCurve(to: CGPoint(x: 21.23, y: 5.3), controlPoint1: CGPoint(x: 21.23, y: 5.44), controlPoint2: CGPoint(x: 21.23, y: 5.44))
        delete.addCurve(to: CGPoint(x: 21.23, y: 5.18), controlPoint1: CGPoint(x: 21.23, y: 5.24), controlPoint2: CGPoint(x: 21.23, y: 5.24))
        delete.addCurve(to: CGPoint(x: 21.22, y: 4.8), controlPoint1: CGPoint(x: 21.23, y: 4.99), controlPoint2: CGPoint(x: 21.23, y: 4.91))
        delete.addCurve(to: CGPoint(x: 21.14, y: 3.82), controlPoint1: CGPoint(x: 21.22, y: 4.47), controlPoint2: CGPoint(x: 21.19, y: 4.14))
        delete.addCurve(to: CGPoint(x: 20.86, y: 2.98), controlPoint1: CGPoint(x: 21.09, y: 3.53), controlPoint2: CGPoint(x: 21, y: 3.24))
        delete.addCurve(to: CGPoint(x: 20.35, y: 2.27), controlPoint1: CGPoint(x: 20.73, y: 2.72), controlPoint2: CGPoint(x: 20.56, y: 2.48))
        delete.addCurve(to: CGPoint(x: 19.64, y: 1.76), controlPoint1: CGPoint(x: 20.14, y: 2.06), controlPoint2: CGPoint(x: 19.9, y: 1.89))
        delete.addCurve(to: CGPoint(x: 18.8, y: 1.48), controlPoint1: CGPoint(x: 19.38, y: 1.62), controlPoint2: CGPoint(x: 19.1, y: 1.53))
        delete.addCurve(to: CGPoint(x: 17.81, y: 1.39), controlPoint1: CGPoint(x: 18.48, y: 1.42), controlPoint2: CGPoint(x: 18.15, y: 1.4))
        delete.addCurve(to: CGPoint(x: 17.33, y: 1.38), controlPoint1: CGPoint(x: 17.56, y: 1.39), controlPoint2: CGPoint(x: 17.46, y: 1.38))
        delete.addLine(to: CGPoint(x: 10.84, y: 1.38))
        delete.addCurve(to: CGPoint(x: 10.56, y: 1.39), controlPoint1: CGPoint(x: 10.75, y: 1.38), controlPoint2: CGPoint(x: 10.66, y: 1.39))
        delete.addCurve(to: CGPoint(x: 10.34, y: 1.39), controlPoint1: CGPoint(x: 10.5, y: 1.39), controlPoint2: CGPoint(x: 10.46, y: 1.39))
        delete.addCurve(to: CGPoint(x: 9.36, y: 1.48), controlPoint1: CGPoint(x: 10.02, y: 1.4), controlPoint2: CGPoint(x: 9.69, y: 1.42))
        delete.addCurve(to: CGPoint(x: 8.52, y: 1.76), controlPoint1: CGPoint(x: 9.07, y: 1.53), controlPoint2: CGPoint(x: 8.79, y: 1.62))
        delete.addCurve(to: CGPoint(x: 7.8, y: 2.29), controlPoint1: CGPoint(x: 8.26, y: 1.89), controlPoint2: CGPoint(x: 8.02, y: 2.06))
        delete.addCurve(to: CGPoint(x: 7.67, y: 2.42), controlPoint1: CGPoint(x: 7.73, y: 2.36), controlPoint2: CGPoint(x: 7.7, y: 2.39))
        delete.addCurve(to: CGPoint(x: 7.39, y: 2.69), controlPoint1: CGPoint(x: 7.57, y: 2.51), controlPoint2: CGPoint(x: 7.49, y: 2.6))
        delete.addCurve(to: CGPoint(x: 7.06, y: 3.02), controlPoint1: CGPoint(x: 7.24, y: 2.84), controlPoint2: CGPoint(x: 7.16, y: 2.92))
        delete.addLine(to: CGPoint(x: 4.73, y: 5.36))
        delete.addCurve(to: CGPoint(x: 4.66, y: 5.42), controlPoint1: CGPoint(x: 4.69, y: 5.39), controlPoint2: CGPoint(x: 4.67, y: 5.41))
        delete.addCurve(to: CGPoint(x: 4.6, y: 5.48), controlPoint1: CGPoint(x: 4.63, y: 5.45), controlPoint2: CGPoint(x: 4.63, y: 5.45))
        delete.addCurve(to: CGPoint(x: 4.38, y: 5.7), controlPoint1: CGPoint(x: 4.49, y: 5.59), controlPoint2: CGPoint(x: 4.44, y: 5.64))
        delete.addLine(to: CGPoint(x: 2.31, y: 7.77))
        delete.addCurve(to: CGPoint(x: 2.26, y: 7.81), controlPoint1: CGPoint(x: 2.29, y: 7.79), controlPoint2: CGPoint(x: 2.29, y: 7.79))
        delete.addCurve(to: CGPoint(x: 2.22, y: 7.86), controlPoint1: CGPoint(x: 2.24, y: 7.83), controlPoint2: CGPoint(x: 2.24, y: 7.83))
        delete.addCurve(to: CGPoint(x: 2.12, y: 7.96), controlPoint1: CGPoint(x: 2.17, y: 7.91), controlPoint2: CGPoint(x: 2.14, y: 7.94))
        delete.addCurve(to: CGPoint(x: 1.98, y: 8.1), controlPoint1: CGPoint(x: 2.04, y: 8.04), controlPoint2: CGPoint(x: 2.01, y: 8.07))
        delete.addCurve(to: CGPoint(x: 1.55, y: 8.58), controlPoint1: CGPoint(x: 1.8, y: 8.28), controlPoint2: CGPoint(x: 1.67, y: 8.43))
        delete.addLine(to: CGPoint(x: 1.5, y: 8.64))
        delete.addCurve(to: CGPoint(x: 1.42, y: 8.74), controlPoint1: CGPoint(x: 1.47, y: 8.67), controlPoint2: CGPoint(x: 1.44, y: 8.7))
        delete.addCurve(to: CGPoint(x: 1.42, y: 9.26), controlPoint1: CGPoint(x: 1.37, y: 8.91), controlPoint2: CGPoint(x: 1.37, y: 9.09))
        delete.addCurve(to: CGPoint(x: 1.5, y: 9.38), controlPoint1: CGPoint(x: 1.44, y: 9.3), controlPoint2: CGPoint(x: 1.47, y: 9.34))
        delete.addCurve(to: CGPoint(x: 1.96, y: 9.88), controlPoint1: CGPoint(x: 1.67, y: 9.57), controlPoint2: CGPoint(x: 1.81, y: 9.73))
        delete.addCurve(to: CGPoint(x: 2, y: 9.92), controlPoint1: CGPoint(x: 1.98, y: 9.9), controlPoint2: CGPoint(x: 1.98, y: 9.9))
        delete.addCurve(to: CGPoint(x: 2.04, y: 9.96), controlPoint1: CGPoint(x: 2.02, y: 9.94), controlPoint2: CGPoint(x: 2.02, y: 9.94))
        delete.addCurve(to: CGPoint(x: 2.12, y: 10.04), controlPoint1: CGPoint(x: 2.08, y: 10), controlPoint2: CGPoint(x: 2.09, y: 10.01))
        delete.addCurve(to: CGPoint(x: 2.22, y: 10.14), controlPoint1: CGPoint(x: 2.15, y: 10.07), controlPoint2: CGPoint(x: 2.17, y: 10.09))
        delete.addCurve(to: CGPoint(x: 2.32, y: 10.24), controlPoint1: CGPoint(x: 2.27, y: 10.19), controlPoint2: CGPoint(x: 2.29, y: 10.21))
        delete.addLine(to: CGPoint(x: 4.37, y: 12.3))
        delete.addLine(to: CGPoint(x: 4.58, y: 12.5))
        delete.addLine(to: CGPoint(x: 4.71, y: 12.63))
        delete.addCurve(to: CGPoint(x: 4.78, y: 12.69), controlPoint1: CGPoint(x: 4.73, y: 12.65), controlPoint2: CGPoint(x: 4.76, y: 12.67))
        delete.addLine(to: CGPoint(x: 7.07, y: 14.98))
        delete.close()
        delete.move(to: CGPoint(x: 10.99, y: 5.56))
        delete.addCurve(to: CGPoint(x: 10.91, y: 5.46), controlPoint1: CGPoint(x: 10.96, y: 5.52), controlPoint2: CGPoint(x: 10.94, y: 5.49))
        delete.addLine(to: CGPoint(x: 10.91, y: 5.46))
        delete.addCurve(to: CGPoint(x: 10.49, y: 5.28), controlPoint1: CGPoint(x: 10.8, y: 5.35), controlPoint2: CGPoint(x: 10.64, y: 5.28))
        delete.addCurve(to: CGPoint(x: 10.06, y: 5.46), controlPoint1: CGPoint(x: 10.33, y: 5.28), controlPoint2: CGPoint(x: 10.18, y: 5.35))
        delete.addCurve(to: CGPoint(x: 10.06, y: 6.3), controlPoint1: CGPoint(x: 9.83, y: 5.69), controlPoint2: CGPoint(x: 9.83, y: 6.07))
        delete.addLine(to: CGPoint(x: 10.05, y: 6.31))
        delete.addLine(to: CGPoint(x: 12.74, y: 9))
        delete.addLine(to: CGPoint(x: 10.15, y: 11.59))
        delete.addCurve(to: CGPoint(x: 10.05, y: 11.67), controlPoint1: CGPoint(x: 10.12, y: 11.61), controlPoint2: CGPoint(x: 10.08, y: 11.64))
        delete.addCurve(to: CGPoint(x: 10.05, y: 12.51), controlPoint1: CGPoint(x: 9.82, y: 11.9), controlPoint2: CGPoint(x: 9.82, y: 12.28))
        delete.addCurve(to: CGPoint(x: 10.89, y: 12.52), controlPoint1: CGPoint(x: 10.28, y: 12.74), controlPoint2: CGPoint(x: 10.66, y: 12.74))
        delete.addLine(to: CGPoint(x: 10.9, y: 12.53))
        delete.addLine(to: CGPoint(x: 13.59, y: 9.84))
        delete.addLine(to: CGPoint(x: 16.28, y: 12.52))
        delete.addLine(to: CGPoint(x: 16.28, y: 12.51))
        delete.addCurve(to: CGPoint(x: 17.12, y: 12.51), controlPoint1: CGPoint(x: 16.52, y: 12.75), controlPoint2: CGPoint(x: 16.89, y: 12.75))
        delete.addCurve(to: CGPoint(x: 17.13, y: 11.67), controlPoint1: CGPoint(x: 17.36, y: 12.28), controlPoint2: CGPoint(x: 17.36, y: 11.91))
        delete.addLine(to: CGPoint(x: 17.13, y: 11.67))
        delete.addCurve(to: CGPoint(x: 17.04, y: 11.6), controlPoint1: CGPoint(x: 17.1, y: 11.65), controlPoint2: CGPoint(x: 17.07, y: 11.62))
        delete.addLine(to: CGPoint(x: 14.43, y: 9))
        delete.addLine(to: CGPoint(x: 17.12, y: 6.3))
        delete.addLine(to: CGPoint(x: 17.12, y: 6.3))
        delete.addCurve(to: CGPoint(x: 17.11, y: 5.46), controlPoint1: CGPoint(x: 17.35, y: 6.06), controlPoint2: CGPoint(x: 17.35, y: 5.69))
        delete.addCurve(to: CGPoint(x: 16.27, y: 5.46), controlPoint1: CGPoint(x: 16.88, y: 5.22), controlPoint2: CGPoint(x: 16.5, y: 5.22))
        delete.addLine(to: CGPoint(x: 16.27, y: 5.46))
        delete.addCurve(to: CGPoint(x: 16.2, y: 5.53), controlPoint1: CGPoint(x: 16.25, y: 5.48), controlPoint2: CGPoint(x: 16.22, y: 5.51))
        delete.addLine(to: CGPoint(x: 13.59, y: 8.15))
        delete.addLine(to: CGPoint(x: 10.99, y: 5.56))
        delete.close()
        delete.move(to: CGPoint(x: 3.77, y: 13.65))
        delete.addLine(to: CGPoint(x: 3.61, y: 13.48))
        delete.addLine(to: CGPoint(x: 3.4, y: 13.28))
        delete.addLine(to: CGPoint(x: 1.34, y: 11.22))
        delete.addCurve(to: CGPoint(x: 1.23, y: 11.11), controlPoint1: CGPoint(x: 1.31, y: 11.19), controlPoint2: CGPoint(x: 1.28, y: 11.16))
        delete.addCurve(to: CGPoint(x: 1.14, y: 11.02), controlPoint1: CGPoint(x: 1.19, y: 11.06), controlPoint2: CGPoint(x: 1.17, y: 11.04))
        delete.addCurve(to: CGPoint(x: 1.05, y: 10.93), controlPoint1: CGPoint(x: 1.11, y: 10.99), controlPoint2: CGPoint(x: 1.09, y: 10.97))
        delete.addCurve(to: CGPoint(x: 0.98, y: 10.85), controlPoint1: CGPoint(x: 0.99, y: 10.87), controlPoint2: CGPoint(x: 0.99, y: 10.87))
        delete.addCurve(to: CGPoint(x: 0.48, y: 10.31), controlPoint1: CGPoint(x: 0.8, y: 10.68), controlPoint2: CGPoint(x: 0.64, y: 10.5))
        delete.addCurve(to: CGPoint(x: 0.14, y: 9.79), controlPoint1: CGPoint(x: 0.34, y: 10.16), controlPoint2: CGPoint(x: 0.22, y: 9.98))
        delete.addLine(to: CGPoint(x: 0.11, y: 9.72))
        delete.addCurve(to: CGPoint(x: 0.11, y: 8.28), controlPoint1: CGPoint(x: -0.04, y: 9.25), controlPoint2: CGPoint(x: -0.04, y: 8.75))
        delete.addLine(to: CGPoint(x: 0.14, y: 8.22))
        delete.addCurve(to: CGPoint(x: 0.48, y: 7.69), controlPoint1: CGPoint(x: 0.22, y: 8.02), controlPoint2: CGPoint(x: 0.34, y: 7.85))
        delete.addCurve(to: CGPoint(x: 0.96, y: 7.16), controlPoint1: CGPoint(x: 0.63, y: 7.51), controlPoint2: CGPoint(x: 0.79, y: 7.33))
        delete.addCurve(to: CGPoint(x: 1.14, y: 6.98), controlPoint1: CGPoint(x: 1.01, y: 7.11), controlPoint2: CGPoint(x: 1.05, y: 7.07))
        delete.addCurve(to: CGPoint(x: 1.23, y: 6.89), controlPoint1: CGPoint(x: 1.16, y: 6.96), controlPoint2: CGPoint(x: 1.18, y: 6.94))
        delete.addCurve(to: CGPoint(x: 1.28, y: 6.83), controlPoint1: CGPoint(x: 1.26, y: 6.86), controlPoint2: CGPoint(x: 1.26, y: 6.86))
        delete.addCurve(to: CGPoint(x: 1.33, y: 6.78), controlPoint1: CGPoint(x: 1.31, y: 6.81), controlPoint2: CGPoint(x: 1.31, y: 6.81))
        delete.addLine(to: CGPoint(x: 3.39, y: 4.73))
        delete.addCurve(to: CGPoint(x: 3.6, y: 4.52), controlPoint1: CGPoint(x: 3.45, y: 4.67), controlPoint2: CGPoint(x: 3.51, y: 4.61))
        delete.addCurve(to: CGPoint(x: 3.68, y: 4.44), controlPoint1: CGPoint(x: 3.66, y: 4.47), controlPoint2: CGPoint(x: 3.66, y: 4.47))
        delete.addCurve(to: CGPoint(x: 3.78, y: 4.35), controlPoint1: CGPoint(x: 3.72, y: 4.4), controlPoint2: CGPoint(x: 3.75, y: 4.37))
        delete.addLine(to: CGPoint(x: 6.08, y: 2.05))
        delete.addCurve(to: CGPoint(x: 6.42, y: 1.71), controlPoint1: CGPoint(x: 6.18, y: 1.95), controlPoint2: CGPoint(x: 6.27, y: 1.86))
        delete.addCurve(to: CGPoint(x: 6.72, y: 1.41), controlPoint1: CGPoint(x: 6.51, y: 1.62), controlPoint2: CGPoint(x: 6.61, y: 1.52))
        delete.addCurve(to: CGPoint(x: 6.84, y: 1.29), controlPoint1: CGPoint(x: 6.81, y: 1.32), controlPoint2: CGPoint(x: 6.83, y: 1.3))
        delete.addCurve(to: CGPoint(x: 7.9, y: 0.52), controlPoint1: CGPoint(x: 7.15, y: 0.98), controlPoint2: CGPoint(x: 7.5, y: 0.72))
        delete.addCurve(to: CGPoint(x: 9.13, y: 0.12), controlPoint1: CGPoint(x: 8.29, y: 0.32), controlPoint2: CGPoint(x: 8.7, y: 0.19))
        delete.addCurve(to: CGPoint(x: 10.32, y: 0.01), controlPoint1: CGPoint(x: 9.53, y: 0.05), controlPoint2: CGPoint(x: 9.93, y: 0.01))
        delete.addCurve(to: CGPoint(x: 10.52, y: 0), controlPoint1: CGPoint(x: 10.42, y: 0.01), controlPoint2: CGPoint(x: 10.47, y: 0.01))
        delete.addCurve(to: CGPoint(x: 10.84, y: 0), controlPoint1: CGPoint(x: 10.64, y: 0), controlPoint2: CGPoint(x: 10.74, y: 0))
        delete.addLine(to: CGPoint(x: 17.33, y: 0))
        delete.addCurve(to: CGPoint(x: 17.83, y: 0.01), controlPoint1: CGPoint(x: 17.47, y: 0), controlPoint2: CGPoint(x: 17.59, y: 0))
        delete.addCurve(to: CGPoint(x: 19.03, y: 0.12), controlPoint1: CGPoint(x: 18.23, y: 0.01), controlPoint2: CGPoint(x: 18.64, y: 0.05))
        delete.addCurve(to: CGPoint(x: 20.27, y: 0.52), controlPoint1: CGPoint(x: 19.46, y: 0.19), controlPoint2: CGPoint(x: 19.88, y: 0.32))
        delete.addCurve(to: CGPoint(x: 21.33, y: 1.29), controlPoint1: CGPoint(x: 20.66, y: 0.72), controlPoint2: CGPoint(x: 21.02, y: 0.98))
        delete.addCurve(to: CGPoint(x: 22.1, y: 2.35), controlPoint1: CGPoint(x: 21.64, y: 1.6), controlPoint2: CGPoint(x: 21.9, y: 1.96))
        delete.addCurve(to: CGPoint(x: 22.51, y: 3.59), controlPoint1: CGPoint(x: 22.29, y: 2.74), controlPoint2: CGPoint(x: 22.43, y: 3.16))
        delete.addCurve(to: CGPoint(x: 22.61, y: 4.77), controlPoint1: CGPoint(x: 22.57, y: 3.98), controlPoint2: CGPoint(x: 22.6, y: 4.38))
        delete.addCurve(to: CGPoint(x: 22.62, y: 5.16), controlPoint1: CGPoint(x: 22.61, y: 4.88), controlPoint2: CGPoint(x: 22.61, y: 4.97))
        delete.addCurve(to: CGPoint(x: 22.62, y: 5.29), controlPoint1: CGPoint(x: 22.62, y: 5.22), controlPoint2: CGPoint(x: 22.62, y: 5.22))
        delete.addLine(to: CGPoint(x: 22.62, y: 12.71))
        delete.addCurve(to: CGPoint(x: 22.61, y: 13.22), controlPoint1: CGPoint(x: 22.62, y: 12.87), controlPoint2: CGPoint(x: 22.61, y: 13.04))
        delete.addCurve(to: CGPoint(x: 22.5, y: 14.42), controlPoint1: CGPoint(x: 22.6, y: 13.62), controlPoint2: CGPoint(x: 22.57, y: 14.02))
        delete.addCurve(to: CGPoint(x: 22.1, y: 15.66), controlPoint1: CGPoint(x: 22.43, y: 14.84), controlPoint2: CGPoint(x: 22.29, y: 15.26))
        delete.addCurve(to: CGPoint(x: 21.33, y: 16.71), controlPoint1: CGPoint(x: 21.9, y: 16.04), controlPoint2: CGPoint(x: 21.64, y: 16.4))
        delete.addCurve(to: CGPoint(x: 20.27, y: 17.48), controlPoint1: CGPoint(x: 21.02, y: 17.02), controlPoint2: CGPoint(x: 20.66, y: 17.28))
        delete.addCurve(to: CGPoint(x: 19.03, y: 17.88), controlPoint1: CGPoint(x: 19.88, y: 17.68), controlPoint2: CGPoint(x: 19.46, y: 17.81))
        delete.addCurve(to: CGPoint(x: 17.85, y: 17.99), controlPoint1: CGPoint(x: 18.64, y: 17.95), controlPoint2: CGPoint(x: 18.24, y: 17.99))
        delete.addCurve(to: CGPoint(x: 17.33, y: 18), controlPoint1: CGPoint(x: 17.59, y: 18), controlPoint2: CGPoint(x: 17.47, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 16.73, y: 16.62))
        delete.addLine(to: CGPoint(x: 16.73, y: 17.31))
        delete.addLine(to: CGPoint(x: 16.73, y: 18))
        delete.addLine(to: CGPoint(x: 10.84, y: 18))
        delete.addCurve(to: CGPoint(x: 10.52, y: 18), controlPoint1: CGPoint(x: 10.74, y: 18), controlPoint2: CGPoint(x: 10.64, y: 18))
        delete.addCurve(to: CGPoint(x: 10.33, y: 17.99), controlPoint1: CGPoint(x: 10.47, y: 17.99), controlPoint2: CGPoint(x: 10.42, y: 17.99))
        delete.addCurve(to: CGPoint(x: 9.14, y: 17.88), controlPoint1: CGPoint(x: 9.93, y: 17.99), controlPoint2: CGPoint(x: 9.53, y: 17.95))
        delete.addCurve(to: CGPoint(x: 7.9, y: 17.48), controlPoint1: CGPoint(x: 8.71, y: 17.81), controlPoint2: CGPoint(x: 8.29, y: 17.68))
        delete.addCurve(to: CGPoint(x: 6.85, y: 16.72), controlPoint1: CGPoint(x: 7.51, y: 17.28), controlPoint2: CGPoint(x: 7.15, y: 17.02))
        delete.addCurve(to: CGPoint(x: 6.76, y: 16.63), controlPoint1: CGPoint(x: 6.83, y: 16.7), controlPoint2: CGPoint(x: 6.82, y: 16.68))
        delete.addCurve(to: CGPoint(x: 6.72, y: 16.58), controlPoint1: CGPoint(x: 6.75, y: 16.61), controlPoint2: CGPoint(x: 6.72, y: 16.59))
        delete.addCurve(to: CGPoint(x: 6.43, y: 16.3), controlPoint1: CGPoint(x: 6.59, y: 16.46), controlPoint2: CGPoint(x: 6.51, y: 16.38))
        delete.addCurve(to: CGPoint(x: 6.08, y: 15.96), controlPoint1: CGPoint(x: 6.28, y: 16.16), controlPoint2: CGPoint(x: 6.18, y: 16.06))
        delete.addLine(to: CGPoint(x: 3.85, y: 13.72))
        delete.addLine(to: CGPoint(x: 3.77, y: 13.65))
        delete.close()
        delete.move(to: CGPoint(x: 3.77, y: 13.65))
        context.saveGState()
        context.translateBy(x: 301.88, y: 180)
        UIColor.white.setFill()
        delete.fill()
        context.restoreGState()
        /// 0
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 167)
            
            /// Key Background
            let keyBackground = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground.cgPath)
            context.addRect(keyBackground.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground.fill()
            context.restoreGState()
            
            /// #
            let layer = NSMutableAttributedString(string: "0")
            layer.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
            layer.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
            }
            context.saveGState()
            layer.draw(in: CGRect(x: 0, y: 8, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 9
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 113)
            
            /// Key Background
            let keyBackground2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground2.cgPath)
            context.addRect(keyBackground2.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground2.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground2.fill()
            context.restoreGState()
            
            /// ABC
            let aBC = NSMutableAttributedString(string: "WXYZ")
            aBC.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC.length))
            aBC.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC.length))
            aBC.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC.length))
            }
            context.saveGState()
            aBC.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer2 = NSMutableAttributedString(string: "9")
            layer2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer2.length))
            layer2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer2.length))
            layer2.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
            }
            context.saveGState()
            layer2.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 8
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 113)
            
            /// Key Background
            let keyBackground3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground3.cgPath)
            context.addRect(keyBackground3.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground3.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground3.fill()
            context.restoreGState()
            
            /// ABC
            let aBC2 = NSMutableAttributedString(string: "TUV")
            aBC2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC2.length))
            aBC2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC2.length))
            aBC2.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC2.length))
            }
            context.saveGState()
            aBC2.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer3 = NSMutableAttributedString(string: "8")
            layer3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer3.length))
            layer3.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer3.length))
            layer3.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer3.length))
            }
            context.saveGState()
            layer3.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 7
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 113)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// ABC
            let aBC3 = NSMutableAttributedString(string: "PGRS")
            aBC3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC3.length))
            aBC3.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC3.length))
            aBC3.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC3.length))
            }
            context.saveGState()
            aBC3.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer4 = NSMutableAttributedString(string: "7")
            layer4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer4.length))
            layer4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer4.length))
            layer4.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer4.length))
            }
            context.saveGState()
            layer4.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 6
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 59)
            
            /// Key Background
            let keyBackground4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground4.cgPath)
            context.addRect(keyBackground4.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground4.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground4.fill()
            context.restoreGState()
            
            /// ABC
            let aBC4 = NSMutableAttributedString(string: "MNO")
            aBC4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC4.length))
            aBC4.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC4.length))
            aBC4.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC4.length))
            }
            context.saveGState()
            aBC4.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer5 = NSMutableAttributedString(string: "6")
            layer5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer5.length))
            layer5.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer5.length))
            layer5.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer5.length))
            }
            context.saveGState()
            layer5.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 5
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 59)
            
            /// Key Background
            let keyBackground5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground5.cgPath)
            context.addRect(keyBackground5.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground5.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground5.fill()
            context.restoreGState()
            
            /// ABC
            let aBC5 = NSMutableAttributedString(string: "JKL")
            aBC5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC5.length))
            aBC5.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC5.length))
            aBC5.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC5.length))
            }
            context.saveGState()
            aBC5.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer6 = NSMutableAttributedString(string: "5")
            layer6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer6.length))
            layer6.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer6.length))
            layer6.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer6.length))
            }
            context.saveGState()
            layer6.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 4
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 59)
            
            /// Key Background
            let keyBackground6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 47), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground6.cgPath)
            context.addRect(keyBackground6.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground6.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground6.fill()
            context.restoreGState()
            
            /// ABC
            let aBC6 = NSMutableAttributedString(string: "GHI")
            aBC6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC6.length))
            aBC6.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC6.length))
            aBC6.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC6.length))
            }
            context.saveGState()
            aBC6.draw(in: CGRect(x: 0, y: 30, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer7 = NSMutableAttributedString(string: "4")
            layer7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer7.length))
            layer7.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer7.length))
            layer7.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer7.length))
            }
            context.saveGState()
            layer7.draw(in: CGRect(x: 0, y: 1.5, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 3
        do {
            context.saveGState()
            context.translateBy(x: 252, y: 6)
            
            /// Key Background
            let keyBackground7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground7.cgPath)
            context.addRect(keyBackground7.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground7.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground7.fill()
            context.restoreGState()
            
            /// ABC
            let aBC7 = NSMutableAttributedString(string: "DEF")
            aBC7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC7.length))
            aBC7.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC7.length))
            aBC7.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: aBC7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC7.length))
            }
            context.saveGState()
            aBC7.draw(in: CGRect(x: 0, y: 29, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer8 = NSMutableAttributedString(string: "3")
            layer8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer8.length))
            layer8.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer8.length))
            layer8.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer8.length))
            }
            context.saveGState()
            layer8.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 2
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 6)
            
            /// Key Background
            let keyBackground8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground8.cgPath)
            context.addRect(keyBackground8.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground8.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground8.fill()
            context.restoreGState()
            
            /// ABC
            let aBC8 = NSMutableAttributedString(string: "ABC")
            aBC8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Bold", size: 10)!, range: NSRange(location: 0, length: aBC8.length))
            aBC8.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: aBC8.length))
            aBC8.addAttribute(NSKernAttributeName, value: 2, range: NSRange(location: 0, length: 2))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                aBC8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: aBC8.length))
            }
            context.saveGState()
            aBC8.draw(in: CGRect(x: 0, y: 29, width: 117, height: 14))
            context.restoreGState()
            
            /// #
            let layer9 = NSMutableAttributedString(string: "2")
            layer9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer9.length))
            layer9.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer9.length))
            layer9.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer9.length))
            }
            context.saveGState()
            layer9.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 1
        do {
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            
            /// Key Background
            let keyBackground9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 117, height: 46), cornerRadius: 5)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(keyBackground9.cgPath)
            context.addRect(keyBackground9.bounds.insetBy(dx: 0, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -118, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 118, y: 1)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
            }
            UIColor.black.setFill()
            keyBackground9.fill()
            context.restoreGState()
            UIColor(white: 0.267, alpha: 1).setFill()
            keyBackground9.fill()
            context.restoreGState()
            
            /// #
            let layer10 = NSMutableAttributedString(string: "1")
            layer10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 25)!, range: NSRange(location: 0, length: layer10.length))
            layer10.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: layer10.length))
            layer10.addAttribute(NSKernAttributeName, value: 0.29, range: NSRange(location: 0, length: layer10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer10.length))
            }
            context.saveGState()
            layer10.draw(in: CGRect(x: 0, y: 1, width: 117, height: 33))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSystemLightDictation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(hue: 0.6, saturation: 0.057, brightness: 0.686, alpha: 0.9).setFill()
        background.fill()
        context.restoreGState()
        /// Done
        let done = NSMutableAttributedString(string: "Done")
        done.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 18)!, range: NSRange(location: 0, length: done.length))
        done.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: done.length))
        done.addAttribute(NSKernAttributeName, value: -0.45, range: NSRange(location: 0, length: done.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            done.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: done.length))
        }
        context.saveGState()
        done.draw(in: CGRect(x: 5, y: 172, width: 366, height: 24))
        context.restoreGState()
        /// audio waves
        let audioWaves = UIBezierPath()
        audioWaves.move(to: CGPoint(x: 6, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 6, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 6, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29), controlPoint1: CGPoint(x: 6, y: 29.19), controlPoint2: CGPoint(x: 6, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 6, y: 28.72), controlPoint1: CGPoint(x: 6, y: 28.91), controlPoint2: CGPoint(x: 6, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 6, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 8.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 8, y: 27.76), controlPoint1: CGPoint(x: 8.36, y: 28.18), controlPoint2: CGPoint(x: 8.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 7.25, y: 27.5), controlPoint1: CGPoint(x: 7.78, y: 27.59), controlPoint2: CGPoint(x: 7.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 6.51, y: 27.76), controlPoint1: CGPoint(x: 6.98, y: 27.5), controlPoint2: CGPoint(x: 6.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 6.06, y: 28.45), controlPoint1: CGPoint(x: 6.29, y: 27.94), controlPoint2: CGPoint(x: 6.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 28.84), controlPoint1: CGPoint(x: 6.03, y: 28.58), controlPoint2: CGPoint(x: 6.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29), controlPoint1: CGPoint(x: 6, y: 28.9), controlPoint2: CGPoint(x: 6.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29.16), controlPoint1: CGPoint(x: 6.01, y: 29.05), controlPoint2: CGPoint(x: 6, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 6.06, y: 29.55), controlPoint1: CGPoint(x: 6.02, y: 29.29), controlPoint2: CGPoint(x: 6.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 6.51, y: 30.24), controlPoint1: CGPoint(x: 6.14, y: 29.82), controlPoint2: CGPoint(x: 6.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 7.25, y: 30.5), controlPoint1: CGPoint(x: 6.72, y: 30.41), controlPoint2: CGPoint(x: 6.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 8, y: 30.24), controlPoint1: CGPoint(x: 7.52, y: 30.5), controlPoint2: CGPoint(x: 7.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 8.44, y: 29.55), controlPoint1: CGPoint(x: 8.21, y: 30.06), controlPoint2: CGPoint(x: 8.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29.16), controlPoint1: CGPoint(x: 8.47, y: 29.42), controlPoint2: CGPoint(x: 8.48, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29), controlPoint1: CGPoint(x: 8.5, y: 29.11), controlPoint2: CGPoint(x: 8.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 28.84), controlPoint1: CGPoint(x: 8.49, y: 28.95), controlPoint2: CGPoint(x: 8.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 8.44, y: 28.45), controlPoint1: CGPoint(x: 8.48, y: 28.71), controlPoint2: CGPoint(x: 8.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 8.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 8.49, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 8.5, y: 29.28), controlPoint1: CGPoint(x: 8.5, y: 29.09), controlPoint2: CGPoint(x: 8.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29), controlPoint1: CGPoint(x: 8.5, y: 28.81), controlPoint2: CGPoint(x: 8.5, y: 28.91))
        audioWaves.addLine(to: CGPoint(x: 8.49, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 14.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 14, y: 27.76), controlPoint1: CGPoint(x: 14.36, y: 28.18), controlPoint2: CGPoint(x: 14.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 13.25, y: 27.5), controlPoint1: CGPoint(x: 13.78, y: 27.59), controlPoint2: CGPoint(x: 13.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 12.5, y: 27.76), controlPoint1: CGPoint(x: 12.98, y: 27.5), controlPoint2: CGPoint(x: 12.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 12.07, y: 28.45), controlPoint1: CGPoint(x: 12.29, y: 27.94), controlPoint2: CGPoint(x: 12.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 12.01, y: 28.84), controlPoint1: CGPoint(x: 12.03, y: 28.58), controlPoint2: CGPoint(x: 12.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 29), controlPoint1: CGPoint(x: 12, y: 28.9), controlPoint2: CGPoint(x: 12.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 12.01, y: 29.16), controlPoint1: CGPoint(x: 12.01, y: 29.05), controlPoint2: CGPoint(x: 12, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 12.07, y: 29.55), controlPoint1: CGPoint(x: 12.02, y: 29.29), controlPoint2: CGPoint(x: 12.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 12.5, y: 30.24), controlPoint1: CGPoint(x: 12.14, y: 29.82), controlPoint2: CGPoint(x: 12.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 13.25, y: 30.5), controlPoint1: CGPoint(x: 12.72, y: 30.41), controlPoint2: CGPoint(x: 12.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 14, y: 30.24), controlPoint1: CGPoint(x: 13.52, y: 30.5), controlPoint2: CGPoint(x: 13.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 14.44, y: 29.55), controlPoint1: CGPoint(x: 14.21, y: 30.06), controlPoint2: CGPoint(x: 14.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 14.49, y: 29.16), controlPoint1: CGPoint(x: 14.47, y: 29.42), controlPoint2: CGPoint(x: 14.49, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29), controlPoint1: CGPoint(x: 14.5, y: 29.11), controlPoint2: CGPoint(x: 14.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 14.49, y: 28.84), controlPoint1: CGPoint(x: 14.49, y: 28.95), controlPoint2: CGPoint(x: 14.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 14.44, y: 28.45), controlPoint1: CGPoint(x: 14.49, y: 28.71), controlPoint2: CGPoint(x: 14.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 14.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 14.5, y: 29.28))
        audioWaves.addLine(to: CGPoint(x: 14.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29), controlPoint1: CGPoint(x: 14.5, y: 28.81), controlPoint2: CGPoint(x: 14.5, y: 28.91))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29.28), controlPoint1: CGPoint(x: 14.5, y: 29.09), controlPoint2: CGPoint(x: 14.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 14.5, y: 29.28))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 12, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 12, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 12, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 29), controlPoint1: CGPoint(x: 12, y: 29.19), controlPoint2: CGPoint(x: 12, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 28.72), controlPoint1: CGPoint(x: 12, y: 28.91), controlPoint2: CGPoint(x: 12, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 12, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 20.49, y: 27.84))
        audioWaves.addCurve(to: CGPoint(x: 20.43, y: 27.45), controlPoint1: CGPoint(x: 20.49, y: 27.71), controlPoint2: CGPoint(x: 20.47, y: 27.58))
        audioWaves.addCurve(to: CGPoint(x: 20, y: 26.76), controlPoint1: CGPoint(x: 20.36, y: 27.18), controlPoint2: CGPoint(x: 20.21, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 19.25, y: 26.5), controlPoint1: CGPoint(x: 19.78, y: 26.59), controlPoint2: CGPoint(x: 19.52, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 18.5, y: 26.76), controlPoint1: CGPoint(x: 18.98, y: 26.5), controlPoint2: CGPoint(x: 18.72, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 18.07, y: 27.45), controlPoint1: CGPoint(x: 18.29, y: 26.94), controlPoint2: CGPoint(x: 18.14, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 18.01, y: 27.84), controlPoint1: CGPoint(x: 18.03, y: 27.58), controlPoint2: CGPoint(x: 18.02, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 18, y: 28.28), controlPoint1: CGPoint(x: 18, y: 27.99), controlPoint2: CGPoint(x: 18, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 18, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 18, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 18, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 18.01, y: 30.16), controlPoint1: CGPoint(x: 18, y: 29.86), controlPoint2: CGPoint(x: 18, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 18.07, y: 30.55), controlPoint1: CGPoint(x: 18.02, y: 30.29), controlPoint2: CGPoint(x: 18.03, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 18.5, y: 31.24), controlPoint1: CGPoint(x: 18.14, y: 30.82), controlPoint2: CGPoint(x: 18.29, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 19.25, y: 31.5), controlPoint1: CGPoint(x: 18.72, y: 31.41), controlPoint2: CGPoint(x: 18.98, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 20, y: 31.24), controlPoint1: CGPoint(x: 19.52, y: 31.5), controlPoint2: CGPoint(x: 19.78, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 20.43, y: 30.55), controlPoint1: CGPoint(x: 20.21, y: 31.06), controlPoint2: CGPoint(x: 20.36, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 20.49, y: 30.16), controlPoint1: CGPoint(x: 20.47, y: 30.42), controlPoint2: CGPoint(x: 20.49, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 20.5, y: 29.72), controlPoint1: CGPoint(x: 20.5, y: 30.01), controlPoint2: CGPoint(x: 20.5, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 20.49, y: 27.84), controlPoint1: CGPoint(x: 20.5, y: 28.14), controlPoint2: CGPoint(x: 20.5, y: 27.99))
        audioWaves.addLine(to: CGPoint(x: 20.49, y: 27.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 24, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 24, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 24.01, y: 29.34), controlPoint1: CGPoint(x: 24, y: 29.64), controlPoint2: CGPoint(x: 24, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 24.06, y: 29), controlPoint1: CGPoint(x: 24.01, y: 29.23), controlPoint2: CGPoint(x: 24.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 24.01, y: 28.66), controlPoint1: CGPoint(x: 24.03, y: 28.89), controlPoint2: CGPoint(x: 24.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 24, y: 28.22), controlPoint1: CGPoint(x: 24, y: 28.51), controlPoint2: CGPoint(x: 24, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 24, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 26, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 25.25, y: 28), controlPoint1: CGPoint(x: 25.78, y: 28.09), controlPoint2: CGPoint(x: 25.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 24.51, y: 28.26), controlPoint1: CGPoint(x: 24.98, y: 28), controlPoint2: CGPoint(x: 24.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 24.07, y: 28.95), controlPoint1: CGPoint(x: 24.29, y: 28.44), controlPoint2: CGPoint(x: 24.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 24.06, y: 29), controlPoint1: CGPoint(x: 24.06, y: 28.97), controlPoint2: CGPoint(x: 24.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 24.07, y: 29.05), controlPoint1: CGPoint(x: 24.06, y: 29.02), controlPoint2: CGPoint(x: 24.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 24.51, y: 29.74), controlPoint1: CGPoint(x: 24.14, y: 29.32), controlPoint2: CGPoint(x: 24.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 25.25, y: 30), controlPoint1: CGPoint(x: 24.72, y: 29.91), controlPoint2: CGPoint(x: 24.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 26, y: 29.74), controlPoint1: CGPoint(x: 25.52, y: 30), controlPoint2: CGPoint(x: 25.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29.05), controlPoint1: CGPoint(x: 26.21, y: 29.56), controlPoint2: CGPoint(x: 26.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29), controlPoint1: CGPoint(x: 26.44, y: 29.03), controlPoint2: CGPoint(x: 26.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 28.95), controlPoint1: CGPoint(x: 26.44, y: 28.98), controlPoint2: CGPoint(x: 26.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 26, y: 28.26), controlPoint1: CGPoint(x: 26.36, y: 28.68), controlPoint2: CGPoint(x: 26.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 26, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 26.44, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 26.49, y: 29.34), controlPoint1: CGPoint(x: 26.47, y: 29.11), controlPoint2: CGPoint(x: 26.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 26.5, y: 29.78), controlPoint1: CGPoint(x: 26.5, y: 29.49), controlPoint2: CGPoint(x: 26.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 26.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 26.49, y: 28.66), controlPoint1: CGPoint(x: 26.5, y: 28.36), controlPoint2: CGPoint(x: 26.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29), controlPoint1: CGPoint(x: 26.49, y: 28.77), controlPoint2: CGPoint(x: 26.47, y: 28.89))
        audioWaves.addLine(to: CGPoint(x: 26.44, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 31.94, y: 27.45))
        audioWaves.addCurve(to: CGPoint(x: 31.5, y: 26.76), controlPoint1: CGPoint(x: 31.86, y: 27.18), controlPoint2: CGPoint(x: 31.71, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 30.75, y: 26.5), controlPoint1: CGPoint(x: 31.28, y: 26.59), controlPoint2: CGPoint(x: 31.02, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 30.01, y: 26.76), controlPoint1: CGPoint(x: 30.48, y: 26.5), controlPoint2: CGPoint(x: 30.22, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 29.56, y: 27.45), controlPoint1: CGPoint(x: 29.79, y: 26.94), controlPoint2: CGPoint(x: 29.64, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 29.51, y: 27.84), controlPoint1: CGPoint(x: 29.53, y: 27.58), controlPoint2: CGPoint(x: 29.52, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 29.5, y: 28.28), controlPoint1: CGPoint(x: 29.5, y: 27.99), controlPoint2: CGPoint(x: 29.5, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 29.5, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 29.51, y: 30.16), controlPoint1: CGPoint(x: 29.5, y: 29.86), controlPoint2: CGPoint(x: 29.5, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 29.56, y: 30.55), controlPoint1: CGPoint(x: 29.52, y: 30.29), controlPoint2: CGPoint(x: 29.53, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 30.01, y: 31.24), controlPoint1: CGPoint(x: 29.64, y: 30.82), controlPoint2: CGPoint(x: 29.79, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 30.75, y: 31.5), controlPoint1: CGPoint(x: 30.22, y: 31.41), controlPoint2: CGPoint(x: 30.48, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 31.5, y: 31.24), controlPoint1: CGPoint(x: 31.02, y: 31.5), controlPoint2: CGPoint(x: 31.28, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 31.94, y: 30.55), controlPoint1: CGPoint(x: 31.71, y: 31.06), controlPoint2: CGPoint(x: 31.86, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 31.99, y: 30.16), controlPoint1: CGPoint(x: 31.97, y: 30.42), controlPoint2: CGPoint(x: 31.99, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 32, y: 29.72), controlPoint1: CGPoint(x: 32, y: 30.01), controlPoint2: CGPoint(x: 32, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 32, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 31.99, y: 27.84), controlPoint1: CGPoint(x: 32, y: 28.14), controlPoint2: CGPoint(x: 32, y: 27.99))
        audioWaves.addCurve(to: CGPoint(x: 31.94, y: 27.45), controlPoint1: CGPoint(x: 31.99, y: 27.71), controlPoint2: CGPoint(x: 31.97, y: 27.58))
        audioWaves.addLine(to: CGPoint(x: 31.94, y: 27.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 37.99, y: 27.34))
        audioWaves.addCurve(to: CGPoint(x: 37.94, y: 26.95), controlPoint1: CGPoint(x: 37.99, y: 27.21), controlPoint2: CGPoint(x: 37.97, y: 27.08))
        audioWaves.addCurve(to: CGPoint(x: 37.49, y: 26.26), controlPoint1: CGPoint(x: 37.86, y: 26.68), controlPoint2: CGPoint(x: 37.71, y: 26.44))
        audioWaves.addCurve(to: CGPoint(x: 36.75, y: 26), controlPoint1: CGPoint(x: 37.28, y: 26.09), controlPoint2: CGPoint(x: 37.02, y: 26))
        audioWaves.addCurve(to: CGPoint(x: 36.01, y: 26.26), controlPoint1: CGPoint(x: 36.48, y: 26), controlPoint2: CGPoint(x: 36.22, y: 26.09))
        audioWaves.addCurve(to: CGPoint(x: 35.56, y: 26.95), controlPoint1: CGPoint(x: 35.79, y: 26.44), controlPoint2: CGPoint(x: 35.64, y: 26.68))
        audioWaves.addCurve(to: CGPoint(x: 35.51, y: 27.34), controlPoint1: CGPoint(x: 35.53, y: 27.08), controlPoint2: CGPoint(x: 35.52, y: 27.21))
        audioWaves.addCurve(to: CGPoint(x: 35.5, y: 27.78), controlPoint1: CGPoint(x: 35.5, y: 27.49), controlPoint2: CGPoint(x: 35.5, y: 27.64))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 30.22))
        audioWaves.addCurve(to: CGPoint(x: 35.51, y: 30.66), controlPoint1: CGPoint(x: 35.5, y: 30.36), controlPoint2: CGPoint(x: 35.5, y: 30.51))
        audioWaves.addCurve(to: CGPoint(x: 35.56, y: 31.05), controlPoint1: CGPoint(x: 35.52, y: 30.79), controlPoint2: CGPoint(x: 35.53, y: 30.92))
        audioWaves.addCurve(to: CGPoint(x: 36.01, y: 31.74), controlPoint1: CGPoint(x: 35.64, y: 31.32), controlPoint2: CGPoint(x: 35.79, y: 31.56))
        audioWaves.addCurve(to: CGPoint(x: 36.75, y: 32), controlPoint1: CGPoint(x: 36.22, y: 31.91), controlPoint2: CGPoint(x: 36.48, y: 32))
        audioWaves.addCurve(to: CGPoint(x: 37.49, y: 31.74), controlPoint1: CGPoint(x: 37.02, y: 32), controlPoint2: CGPoint(x: 37.28, y: 31.91))
        audioWaves.addCurve(to: CGPoint(x: 37.94, y: 31.05), controlPoint1: CGPoint(x: 37.71, y: 31.56), controlPoint2: CGPoint(x: 37.86, y: 31.32))
        audioWaves.addCurve(to: CGPoint(x: 37.99, y: 30.66), controlPoint1: CGPoint(x: 37.97, y: 30.92), controlPoint2: CGPoint(x: 37.99, y: 30.79))
        audioWaves.addCurve(to: CGPoint(x: 38, y: 30.22), controlPoint1: CGPoint(x: 38, y: 30.51), controlPoint2: CGPoint(x: 38, y: 30.36))
        audioWaves.addLine(to: CGPoint(x: 38, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 38, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 38, y: 27.78))
        audioWaves.addCurve(to: CGPoint(x: 37.99, y: 27.34), controlPoint1: CGPoint(x: 38, y: 27.64), controlPoint2: CGPoint(x: 38, y: 27.49))
        audioWaves.addLine(to: CGPoint(x: 37.99, y: 27.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 43.94, y: 21.45))
        audioWaves.addCurve(to: CGPoint(x: 43.5, y: 20.76), controlPoint1: CGPoint(x: 43.86, y: 21.18), controlPoint2: CGPoint(x: 43.71, y: 20.94))
        audioWaves.addCurve(to: CGPoint(x: 42.75, y: 20.5), controlPoint1: CGPoint(x: 43.28, y: 20.59), controlPoint2: CGPoint(x: 43.02, y: 20.5))
        audioWaves.addCurve(to: CGPoint(x: 42.01, y: 20.76), controlPoint1: CGPoint(x: 42.48, y: 20.5), controlPoint2: CGPoint(x: 42.22, y: 20.59))
        audioWaves.addCurve(to: CGPoint(x: 41.57, y: 21.45), controlPoint1: CGPoint(x: 41.79, y: 20.94), controlPoint2: CGPoint(x: 41.64, y: 21.18))
        audioWaves.addCurve(to: CGPoint(x: 41.51, y: 21.84), controlPoint1: CGPoint(x: 41.53, y: 21.58), controlPoint2: CGPoint(x: 41.52, y: 21.71))
        audioWaves.addCurve(to: CGPoint(x: 41.5, y: 22.28), controlPoint1: CGPoint(x: 41.5, y: 21.99), controlPoint2: CGPoint(x: 41.5, y: 22.14))
        audioWaves.addLine(to: CGPoint(x: 41.5, y: 35.71))
        audioWaves.addCurve(to: CGPoint(x: 41.51, y: 36.16), controlPoint1: CGPoint(x: 41.5, y: 35.86), controlPoint2: CGPoint(x: 41.5, y: 36.01))
        audioWaves.addCurve(to: CGPoint(x: 41.57, y: 36.55), controlPoint1: CGPoint(x: 41.52, y: 36.29), controlPoint2: CGPoint(x: 41.53, y: 36.42))
        audioWaves.addCurve(to: CGPoint(x: 42.01, y: 37.24), controlPoint1: CGPoint(x: 41.64, y: 36.82), controlPoint2: CGPoint(x: 41.79, y: 37.06))
        audioWaves.addCurve(to: CGPoint(x: 42.75, y: 37.5), controlPoint1: CGPoint(x: 42.22, y: 37.41), controlPoint2: CGPoint(x: 42.48, y: 37.5))
        audioWaves.addCurve(to: CGPoint(x: 43.5, y: 37.24), controlPoint1: CGPoint(x: 43.02, y: 37.5), controlPoint2: CGPoint(x: 43.28, y: 37.41))
        audioWaves.addCurve(to: CGPoint(x: 43.94, y: 36.55), controlPoint1: CGPoint(x: 43.71, y: 37.06), controlPoint2: CGPoint(x: 43.86, y: 36.82))
        audioWaves.addCurve(to: CGPoint(x: 43.99, y: 36.16), controlPoint1: CGPoint(x: 43.97, y: 36.42), controlPoint2: CGPoint(x: 43.99, y: 36.29))
        audioWaves.addCurve(to: CGPoint(x: 44, y: 35.71), controlPoint1: CGPoint(x: 44, y: 36.01), controlPoint2: CGPoint(x: 44, y: 35.86))
        audioWaves.addLine(to: CGPoint(x: 44, y: 22.28))
        audioWaves.addCurve(to: CGPoint(x: 43.99, y: 21.84), controlPoint1: CGPoint(x: 44, y: 22.14), controlPoint2: CGPoint(x: 44, y: 21.99))
        audioWaves.addCurve(to: CGPoint(x: 43.94, y: 21.45), controlPoint1: CGPoint(x: 43.99, y: 21.71), controlPoint2: CGPoint(x: 43.97, y: 21.58))
        audioWaves.addLine(to: CGPoint(x: 43.94, y: 21.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 49.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 49.94, y: 25.95), controlPoint1: CGPoint(x: 49.99, y: 26.21), controlPoint2: CGPoint(x: 49.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 49.5, y: 25.26), controlPoint1: CGPoint(x: 49.86, y: 25.68), controlPoint2: CGPoint(x: 49.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 48.75, y: 25), controlPoint1: CGPoint(x: 49.28, y: 25.09), controlPoint2: CGPoint(x: 49.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 48.01, y: 25.26), controlPoint1: CGPoint(x: 48.48, y: 25), controlPoint2: CGPoint(x: 48.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 47.57, y: 25.95), controlPoint1: CGPoint(x: 47.79, y: 25.44), controlPoint2: CGPoint(x: 47.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 47.51, y: 26.34), controlPoint1: CGPoint(x: 47.53, y: 26.08), controlPoint2: CGPoint(x: 47.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 47.5, y: 26.78), controlPoint1: CGPoint(x: 47.5, y: 26.49), controlPoint2: CGPoint(x: 47.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 30.71))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 30.72))
        audioWaves.addCurve(to: CGPoint(x: 47.51, y: 31.66), controlPoint1: CGPoint(x: 47.5, y: 30.86), controlPoint2: CGPoint(x: 47.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 47.57, y: 32.05), controlPoint1: CGPoint(x: 47.52, y: 31.79), controlPoint2: CGPoint(x: 47.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 48.01, y: 32.74), controlPoint1: CGPoint(x: 47.64, y: 32.32), controlPoint2: CGPoint(x: 47.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 48.75, y: 33), controlPoint1: CGPoint(x: 48.22, y: 32.91), controlPoint2: CGPoint(x: 48.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 49.5, y: 32.74), controlPoint1: CGPoint(x: 49.02, y: 33), controlPoint2: CGPoint(x: 49.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 49.94, y: 32.05), controlPoint1: CGPoint(x: 49.71, y: 32.56), controlPoint2: CGPoint(x: 49.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 49.99, y: 31.66), controlPoint1: CGPoint(x: 49.97, y: 31.92), controlPoint2: CGPoint(x: 49.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 50, y: 30.72), controlPoint1: CGPoint(x: 50, y: 31.51), controlPoint2: CGPoint(x: 50, y: 30.86))
        audioWaves.addLine(to: CGPoint(x: 50, y: 30.71))
        audioWaves.addLine(to: CGPoint(x: 50, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 50, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 49.99, y: 26.34), controlPoint1: CGPoint(x: 50, y: 26.64), controlPoint2: CGPoint(x: 50, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 49.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 55.99, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 55.94, y: 19.95), controlPoint1: CGPoint(x: 55.99, y: 20.21), controlPoint2: CGPoint(x: 55.97, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 55.5, y: 19.26), controlPoint1: CGPoint(x: 55.86, y: 19.68), controlPoint2: CGPoint(x: 55.71, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 54.75, y: 19), controlPoint1: CGPoint(x: 55.28, y: 19.09), controlPoint2: CGPoint(x: 55.02, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 54, y: 19.26), controlPoint1: CGPoint(x: 54.48, y: 19), controlPoint2: CGPoint(x: 54.22, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 53.57, y: 19.95), controlPoint1: CGPoint(x: 53.79, y: 19.44), controlPoint2: CGPoint(x: 53.64, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 53.51, y: 20.34), controlPoint1: CGPoint(x: 53.53, y: 20.08), controlPoint2: CGPoint(x: 53.52, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 53.5, y: 20.78), controlPoint1: CGPoint(x: 53.5, y: 20.49), controlPoint2: CGPoint(x: 53.5, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 53.51, y: 37.66), controlPoint1: CGPoint(x: 53.5, y: 37.36), controlPoint2: CGPoint(x: 53.5, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 53.57, y: 38.05), controlPoint1: CGPoint(x: 53.52, y: 37.79), controlPoint2: CGPoint(x: 53.53, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 54, y: 38.74), controlPoint1: CGPoint(x: 53.64, y: 38.32), controlPoint2: CGPoint(x: 53.79, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 54.75, y: 39), controlPoint1: CGPoint(x: 54.22, y: 38.91), controlPoint2: CGPoint(x: 54.48, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 55.5, y: 38.74), controlPoint1: CGPoint(x: 55.02, y: 39), controlPoint2: CGPoint(x: 55.28, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 55.94, y: 38.05), controlPoint1: CGPoint(x: 55.71, y: 38.56), controlPoint2: CGPoint(x: 55.86, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 55.99, y: 37.66), controlPoint1: CGPoint(x: 55.97, y: 37.92), controlPoint2: CGPoint(x: 55.99, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 56, y: 37.21), controlPoint1: CGPoint(x: 56, y: 37.51), controlPoint2: CGPoint(x: 56, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 56, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 56, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 56, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 55.99, y: 20.34), controlPoint1: CGPoint(x: 56, y: 20.64), controlPoint2: CGPoint(x: 56, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 55.99, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 61.99, y: 18.84))
        audioWaves.addCurve(to: CGPoint(x: 61.94, y: 18.45), controlPoint1: CGPoint(x: 61.99, y: 18.71), controlPoint2: CGPoint(x: 61.97, y: 18.58))
        audioWaves.addCurve(to: CGPoint(x: 61.5, y: 17.76), controlPoint1: CGPoint(x: 61.86, y: 18.18), controlPoint2: CGPoint(x: 61.71, y: 17.94))
        audioWaves.addCurve(to: CGPoint(x: 60.75, y: 17.5), controlPoint1: CGPoint(x: 61.28, y: 17.59), controlPoint2: CGPoint(x: 61.02, y: 17.5))
        audioWaves.addCurve(to: CGPoint(x: 60, y: 17.76), controlPoint1: CGPoint(x: 60.48, y: 17.5), controlPoint2: CGPoint(x: 60.22, y: 17.59))
        audioWaves.addCurve(to: CGPoint(x: 59.57, y: 18.45), controlPoint1: CGPoint(x: 59.79, y: 17.94), controlPoint2: CGPoint(x: 59.64, y: 18.18))
        audioWaves.addCurve(to: CGPoint(x: 59.51, y: 18.84), controlPoint1: CGPoint(x: 59.53, y: 18.58), controlPoint2: CGPoint(x: 59.52, y: 18.71))
        audioWaves.addCurve(to: CGPoint(x: 59.5, y: 19.28), controlPoint1: CGPoint(x: 59.5, y: 18.99), controlPoint2: CGPoint(x: 59.5, y: 19.14))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 19.29))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 38.71))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 38.71))
        audioWaves.addCurve(to: CGPoint(x: 59.51, y: 39.16), controlPoint1: CGPoint(x: 59.5, y: 38.86), controlPoint2: CGPoint(x: 59.5, y: 39.01))
        audioWaves.addCurve(to: CGPoint(x: 59.57, y: 39.55), controlPoint1: CGPoint(x: 59.52, y: 39.29), controlPoint2: CGPoint(x: 59.53, y: 39.42))
        audioWaves.addCurve(to: CGPoint(x: 60, y: 40.24), controlPoint1: CGPoint(x: 59.64, y: 39.82), controlPoint2: CGPoint(x: 59.79, y: 40.06))
        audioWaves.addCurve(to: CGPoint(x: 60.75, y: 40.5), controlPoint1: CGPoint(x: 60.22, y: 40.41), controlPoint2: CGPoint(x: 60.48, y: 40.5))
        audioWaves.addCurve(to: CGPoint(x: 61.5, y: 40.24), controlPoint1: CGPoint(x: 61.02, y: 40.5), controlPoint2: CGPoint(x: 61.28, y: 40.41))
        audioWaves.addCurve(to: CGPoint(x: 61.94, y: 39.55), controlPoint1: CGPoint(x: 61.71, y: 40.06), controlPoint2: CGPoint(x: 61.86, y: 39.82))
        audioWaves.addCurve(to: CGPoint(x: 61.99, y: 39.16), controlPoint1: CGPoint(x: 61.97, y: 39.42), controlPoint2: CGPoint(x: 61.99, y: 39.29))
        audioWaves.addCurve(to: CGPoint(x: 62, y: 38.71), controlPoint1: CGPoint(x: 62, y: 39.01), controlPoint2: CGPoint(x: 62, y: 38.86))
        audioWaves.addLine(to: CGPoint(x: 62, y: 38.71))
        audioWaves.addLine(to: CGPoint(x: 62, y: 19.29))
        audioWaves.addLine(to: CGPoint(x: 62, y: 19.28))
        audioWaves.addCurve(to: CGPoint(x: 61.99, y: 18.84), controlPoint1: CGPoint(x: 62, y: 19.14), controlPoint2: CGPoint(x: 62, y: 18.99))
        audioWaves.addLine(to: CGPoint(x: 61.99, y: 18.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 67.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 67.94, y: 25.95), controlPoint1: CGPoint(x: 67.99, y: 26.21), controlPoint2: CGPoint(x: 67.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 67.5, y: 25.26), controlPoint1: CGPoint(x: 67.86, y: 25.68), controlPoint2: CGPoint(x: 67.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 66.75, y: 25), controlPoint1: CGPoint(x: 67.28, y: 25.09), controlPoint2: CGPoint(x: 67.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 66, y: 25.26), controlPoint1: CGPoint(x: 66.48, y: 25), controlPoint2: CGPoint(x: 66.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 65.57, y: 25.95), controlPoint1: CGPoint(x: 65.79, y: 25.44), controlPoint2: CGPoint(x: 65.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 65.51, y: 26.34), controlPoint1: CGPoint(x: 65.53, y: 26.08), controlPoint2: CGPoint(x: 65.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 65.5, y: 26.78), controlPoint1: CGPoint(x: 65.5, y: 26.49), controlPoint2: CGPoint(x: 65.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 65.51, y: 31.66), controlPoint1: CGPoint(x: 65.5, y: 31.36), controlPoint2: CGPoint(x: 65.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 65.57, y: 32.05), controlPoint1: CGPoint(x: 65.52, y: 31.79), controlPoint2: CGPoint(x: 65.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 66, y: 32.74), controlPoint1: CGPoint(x: 65.64, y: 32.32), controlPoint2: CGPoint(x: 65.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 66.75, y: 33), controlPoint1: CGPoint(x: 66.22, y: 32.91), controlPoint2: CGPoint(x: 66.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 67.5, y: 32.74), controlPoint1: CGPoint(x: 67.02, y: 33), controlPoint2: CGPoint(x: 67.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 67.94, y: 32.05), controlPoint1: CGPoint(x: 67.71, y: 32.56), controlPoint2: CGPoint(x: 67.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 67.99, y: 31.66), controlPoint1: CGPoint(x: 67.97, y: 31.92), controlPoint2: CGPoint(x: 67.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 68, y: 31.22), controlPoint1: CGPoint(x: 68, y: 31.51), controlPoint2: CGPoint(x: 68, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 68, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 68, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 68, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 67.99, y: 26.34), controlPoint1: CGPoint(x: 68, y: 26.64), controlPoint2: CGPoint(x: 68, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 67.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 73.94, y: 14.45))
        audioWaves.addCurve(to: CGPoint(x: 73.5, y: 13.76), controlPoint1: CGPoint(x: 73.86, y: 14.17), controlPoint2: CGPoint(x: 73.71, y: 13.94))
        audioWaves.addCurve(to: CGPoint(x: 72.75, y: 13.5), controlPoint1: CGPoint(x: 73.28, y: 13.59), controlPoint2: CGPoint(x: 73.02, y: 13.5))
        audioWaves.addCurve(to: CGPoint(x: 72, y: 13.76), controlPoint1: CGPoint(x: 72.48, y: 13.5), controlPoint2: CGPoint(x: 72.22, y: 13.59))
        audioWaves.addCurve(to: CGPoint(x: 71.57, y: 14.45), controlPoint1: CGPoint(x: 71.79, y: 13.94), controlPoint2: CGPoint(x: 71.64, y: 14.17))
        audioWaves.addCurve(to: CGPoint(x: 71.51, y: 14.84), controlPoint1: CGPoint(x: 71.53, y: 14.58), controlPoint2: CGPoint(x: 71.52, y: 14.71))
        audioWaves.addCurve(to: CGPoint(x: 71.5, y: 15.28), controlPoint1: CGPoint(x: 71.5, y: 14.99), controlPoint2: CGPoint(x: 71.5, y: 15.14))
        audioWaves.addLine(to: CGPoint(x: 71.5, y: 42.71))
        audioWaves.addCurve(to: CGPoint(x: 71.51, y: 43.16), controlPoint1: CGPoint(x: 71.5, y: 42.86), controlPoint2: CGPoint(x: 71.5, y: 43.01))
        audioWaves.addCurve(to: CGPoint(x: 71.57, y: 43.55), controlPoint1: CGPoint(x: 71.52, y: 43.29), controlPoint2: CGPoint(x: 71.53, y: 43.42))
        audioWaves.addCurve(to: CGPoint(x: 72, y: 44.24), controlPoint1: CGPoint(x: 71.64, y: 43.82), controlPoint2: CGPoint(x: 71.79, y: 44.06))
        audioWaves.addCurve(to: CGPoint(x: 72.75, y: 44.5), controlPoint1: CGPoint(x: 72.22, y: 44.41), controlPoint2: CGPoint(x: 72.48, y: 44.5))
        audioWaves.addCurve(to: CGPoint(x: 73.5, y: 44.24), controlPoint1: CGPoint(x: 73.02, y: 44.5), controlPoint2: CGPoint(x: 73.28, y: 44.41))
        audioWaves.addCurve(to: CGPoint(x: 73.94, y: 43.55), controlPoint1: CGPoint(x: 73.71, y: 44.06), controlPoint2: CGPoint(x: 73.86, y: 43.82))
        audioWaves.addCurve(to: CGPoint(x: 73.99, y: 43.16), controlPoint1: CGPoint(x: 73.97, y: 43.42), controlPoint2: CGPoint(x: 73.99, y: 43.29))
        audioWaves.addCurve(to: CGPoint(x: 74, y: 42.71), controlPoint1: CGPoint(x: 74, y: 43.01), controlPoint2: CGPoint(x: 74, y: 42.86))
        audioWaves.addLine(to: CGPoint(x: 74, y: 15.28))
        audioWaves.addCurve(to: CGPoint(x: 73.99, y: 14.84), controlPoint1: CGPoint(x: 74, y: 15.14), controlPoint2: CGPoint(x: 74, y: 14.99))
        audioWaves.addCurve(to: CGPoint(x: 73.94, y: 14.45), controlPoint1: CGPoint(x: 73.99, y: 14.71), controlPoint2: CGPoint(x: 73.97, y: 14.58))
        audioWaves.addLine(to: CGPoint(x: 73.94, y: 14.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 79.99, y: 24.34))
        audioWaves.addCurve(to: CGPoint(x: 79.94, y: 23.95), controlPoint1: CGPoint(x: 79.99, y: 24.21), controlPoint2: CGPoint(x: 79.97, y: 24.08))
        audioWaves.addCurve(to: CGPoint(x: 79.5, y: 23.26), controlPoint1: CGPoint(x: 79.86, y: 23.68), controlPoint2: CGPoint(x: 79.71, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 78.75, y: 23), controlPoint1: CGPoint(x: 79.28, y: 23.09), controlPoint2: CGPoint(x: 79.02, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 78, y: 23.26), controlPoint1: CGPoint(x: 78.48, y: 23), controlPoint2: CGPoint(x: 78.22, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 77.57, y: 23.95), controlPoint1: CGPoint(x: 77.79, y: 23.44), controlPoint2: CGPoint(x: 77.64, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 77.51, y: 24.34), controlPoint1: CGPoint(x: 77.53, y: 24.08), controlPoint2: CGPoint(x: 77.52, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 77.5, y: 24.78), controlPoint1: CGPoint(x: 77.5, y: 24.49), controlPoint2: CGPoint(x: 77.5, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 77.51, y: 33.66), controlPoint1: CGPoint(x: 77.5, y: 33.36), controlPoint2: CGPoint(x: 77.5, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 77.57, y: 34.05), controlPoint1: CGPoint(x: 77.52, y: 33.79), controlPoint2: CGPoint(x: 77.53, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 78, y: 34.74), controlPoint1: CGPoint(x: 77.64, y: 34.32), controlPoint2: CGPoint(x: 77.79, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 78.75, y: 35), controlPoint1: CGPoint(x: 78.22, y: 34.91), controlPoint2: CGPoint(x: 78.48, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 79.5, y: 34.74), controlPoint1: CGPoint(x: 79.02, y: 35), controlPoint2: CGPoint(x: 79.28, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 79.94, y: 34.05), controlPoint1: CGPoint(x: 79.71, y: 34.56), controlPoint2: CGPoint(x: 79.86, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 79.99, y: 33.66), controlPoint1: CGPoint(x: 79.97, y: 33.92), controlPoint2: CGPoint(x: 79.99, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 80, y: 33.21), controlPoint1: CGPoint(x: 80, y: 33.51), controlPoint2: CGPoint(x: 80, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 80, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 80, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 80, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 79.99, y: 24.34), controlPoint1: CGPoint(x: 80, y: 24.64), controlPoint2: CGPoint(x: 80, y: 24.49))
        audioWaves.addLine(to: CGPoint(x: 79.99, y: 24.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 85.94, y: 20.45))
        audioWaves.addCurve(to: CGPoint(x: 85.5, y: 19.76), controlPoint1: CGPoint(x: 85.86, y: 20.18), controlPoint2: CGPoint(x: 85.71, y: 19.94))
        audioWaves.addCurve(to: CGPoint(x: 84.75, y: 19.5), controlPoint1: CGPoint(x: 85.28, y: 19.59), controlPoint2: CGPoint(x: 85.02, y: 19.5))
        audioWaves.addCurve(to: CGPoint(x: 84.01, y: 19.76), controlPoint1: CGPoint(x: 84.48, y: 19.5), controlPoint2: CGPoint(x: 84.22, y: 19.59))
        audioWaves.addCurve(to: CGPoint(x: 83.57, y: 20.45), controlPoint1: CGPoint(x: 83.79, y: 19.94), controlPoint2: CGPoint(x: 83.64, y: 20.18))
        audioWaves.addCurve(to: CGPoint(x: 83.51, y: 20.84), controlPoint1: CGPoint(x: 83.53, y: 20.58), controlPoint2: CGPoint(x: 83.52, y: 20.71))
        audioWaves.addCurve(to: CGPoint(x: 83.5, y: 21.28), controlPoint1: CGPoint(x: 83.5, y: 20.99), controlPoint2: CGPoint(x: 83.5, y: 21.14))
        audioWaves.addLine(to: CGPoint(x: 83.5, y: 36.71))
        audioWaves.addCurve(to: CGPoint(x: 83.51, y: 37.16), controlPoint1: CGPoint(x: 83.5, y: 36.86), controlPoint2: CGPoint(x: 83.5, y: 37.01))
        audioWaves.addCurve(to: CGPoint(x: 83.57, y: 37.55), controlPoint1: CGPoint(x: 83.52, y: 37.29), controlPoint2: CGPoint(x: 83.53, y: 37.42))
        audioWaves.addCurve(to: CGPoint(x: 84.01, y: 38.24), controlPoint1: CGPoint(x: 83.64, y: 37.82), controlPoint2: CGPoint(x: 83.79, y: 38.06))
        audioWaves.addCurve(to: CGPoint(x: 84.75, y: 38.5), controlPoint1: CGPoint(x: 84.22, y: 38.41), controlPoint2: CGPoint(x: 84.48, y: 38.5))
        audioWaves.addCurve(to: CGPoint(x: 85.5, y: 38.24), controlPoint1: CGPoint(x: 85.02, y: 38.5), controlPoint2: CGPoint(x: 85.28, y: 38.41))
        audioWaves.addCurve(to: CGPoint(x: 85.94, y: 37.55), controlPoint1: CGPoint(x: 85.71, y: 38.06), controlPoint2: CGPoint(x: 85.86, y: 37.82))
        audioWaves.addCurve(to: CGPoint(x: 85.99, y: 37.16), controlPoint1: CGPoint(x: 85.97, y: 37.42), controlPoint2: CGPoint(x: 85.99, y: 37.29))
        audioWaves.addCurve(to: CGPoint(x: 86, y: 36.71), controlPoint1: CGPoint(x: 86, y: 37.01), controlPoint2: CGPoint(x: 86, y: 36.86))
        audioWaves.addLine(to: CGPoint(x: 86, y: 21.28))
        audioWaves.addCurve(to: CGPoint(x: 85.99, y: 20.84), controlPoint1: CGPoint(x: 86, y: 21.14), controlPoint2: CGPoint(x: 86, y: 20.99))
        audioWaves.addCurve(to: CGPoint(x: 85.94, y: 20.45), controlPoint1: CGPoint(x: 85.99, y: 20.71), controlPoint2: CGPoint(x: 85.97, y: 20.58))
        audioWaves.addLine(to: CGPoint(x: 85.94, y: 20.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 91.44, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 91, y: 27.26), controlPoint1: CGPoint(x: 91.36, y: 27.68), controlPoint2: CGPoint(x: 91.21, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 90.25, y: 27), controlPoint1: CGPoint(x: 90.78, y: 27.09), controlPoint2: CGPoint(x: 90.52, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 89.51, y: 27.26), controlPoint1: CGPoint(x: 89.98, y: 27), controlPoint2: CGPoint(x: 89.72, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 89.07, y: 27.95), controlPoint1: CGPoint(x: 89.29, y: 27.44), controlPoint2: CGPoint(x: 89.14, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 89.01, y: 28.34), controlPoint1: CGPoint(x: 89.03, y: 28.08), controlPoint2: CGPoint(x: 89.02, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 89, y: 28.78), controlPoint1: CGPoint(x: 89, y: 28.49), controlPoint2: CGPoint(x: 89, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 89, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 89.01, y: 29.66), controlPoint1: CGPoint(x: 89, y: 29.36), controlPoint2: CGPoint(x: 89, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 89.07, y: 30.05), controlPoint1: CGPoint(x: 89.02, y: 29.79), controlPoint2: CGPoint(x: 89.03, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 89.51, y: 30.74), controlPoint1: CGPoint(x: 89.14, y: 30.32), controlPoint2: CGPoint(x: 89.29, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 90.25, y: 31), controlPoint1: CGPoint(x: 89.72, y: 30.91), controlPoint2: CGPoint(x: 89.98, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 91, y: 30.74), controlPoint1: CGPoint(x: 90.52, y: 31), controlPoint2: CGPoint(x: 90.78, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 91.44, y: 30.05), controlPoint1: CGPoint(x: 91.21, y: 30.56), controlPoint2: CGPoint(x: 91.36, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 91.49, y: 29.66), controlPoint1: CGPoint(x: 91.47, y: 29.92), controlPoint2: CGPoint(x: 91.49, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 91.5, y: 29.22), controlPoint1: CGPoint(x: 91.5, y: 29.51), controlPoint2: CGPoint(x: 91.5, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 91.5, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 91.49, y: 28.34), controlPoint1: CGPoint(x: 91.5, y: 28.64), controlPoint2: CGPoint(x: 91.5, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 91.44, y: 27.95), controlPoint1: CGPoint(x: 91.49, y: 28.21), controlPoint2: CGPoint(x: 91.47, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 91.44, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 97.49, y: 16.34))
        audioWaves.addCurve(to: CGPoint(x: 97.44, y: 15.95), controlPoint1: CGPoint(x: 97.49, y: 16.21), controlPoint2: CGPoint(x: 97.47, y: 16.08))
        audioWaves.addCurve(to: CGPoint(x: 97, y: 15.26), controlPoint1: CGPoint(x: 97.36, y: 15.67), controlPoint2: CGPoint(x: 97.21, y: 15.44))
        audioWaves.addCurve(to: CGPoint(x: 96.25, y: 15), controlPoint1: CGPoint(x: 96.78, y: 15.09), controlPoint2: CGPoint(x: 96.52, y: 15))
        audioWaves.addCurve(to: CGPoint(x: 95.51, y: 15.26), controlPoint1: CGPoint(x: 95.98, y: 15), controlPoint2: CGPoint(x: 95.72, y: 15.09))
        audioWaves.addCurve(to: CGPoint(x: 95.07, y: 15.95), controlPoint1: CGPoint(x: 95.29, y: 15.44), controlPoint2: CGPoint(x: 95.14, y: 15.67))
        audioWaves.addCurve(to: CGPoint(x: 95.01, y: 16.34), controlPoint1: CGPoint(x: 95.03, y: 16.08), controlPoint2: CGPoint(x: 95.02, y: 16.21))
        audioWaves.addCurve(to: CGPoint(x: 95, y: 16.78), controlPoint1: CGPoint(x: 95, y: 16.49), controlPoint2: CGPoint(x: 95, y: 16.64))
        audioWaves.addLine(to: CGPoint(x: 95, y: 16.79))
        audioWaves.addLine(to: CGPoint(x: 95, y: 41.21))
        audioWaves.addLine(to: CGPoint(x: 95, y: 41.21))
        audioWaves.addCurve(to: CGPoint(x: 95.01, y: 41.66), controlPoint1: CGPoint(x: 95, y: 41.36), controlPoint2: CGPoint(x: 95, y: 41.51))
        audioWaves.addCurve(to: CGPoint(x: 95.07, y: 42.05), controlPoint1: CGPoint(x: 95.02, y: 41.79), controlPoint2: CGPoint(x: 95.03, y: 41.92))
        audioWaves.addCurve(to: CGPoint(x: 95.51, y: 42.74), controlPoint1: CGPoint(x: 95.14, y: 42.32), controlPoint2: CGPoint(x: 95.29, y: 42.56))
        audioWaves.addCurve(to: CGPoint(x: 96.25, y: 43), controlPoint1: CGPoint(x: 95.72, y: 42.91), controlPoint2: CGPoint(x: 95.98, y: 43))
        audioWaves.addCurve(to: CGPoint(x: 97, y: 42.74), controlPoint1: CGPoint(x: 96.52, y: 43), controlPoint2: CGPoint(x: 96.78, y: 42.91))
        audioWaves.addCurve(to: CGPoint(x: 97.44, y: 42.05), controlPoint1: CGPoint(x: 97.21, y: 42.56), controlPoint2: CGPoint(x: 97.36, y: 42.32))
        audioWaves.addCurve(to: CGPoint(x: 97.49, y: 41.66), controlPoint1: CGPoint(x: 97.47, y: 41.92), controlPoint2: CGPoint(x: 97.49, y: 41.79))
        audioWaves.addCurve(to: CGPoint(x: 97.5, y: 41.21), controlPoint1: CGPoint(x: 97.5, y: 41.51), controlPoint2: CGPoint(x: 97.5, y: 41.36))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 41.21))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 16.79))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 16.78))
        audioWaves.addCurve(to: CGPoint(x: 97.49, y: 16.34), controlPoint1: CGPoint(x: 97.5, y: 16.64), controlPoint2: CGPoint(x: 97.5, y: 16.49))
        audioWaves.addLine(to: CGPoint(x: 97.49, y: 16.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 103.44, y: 9.95))
        audioWaves.addCurve(to: CGPoint(x: 103, y: 9.26), controlPoint1: CGPoint(x: 103.36, y: 9.67), controlPoint2: CGPoint(x: 103.21, y: 9.44))
        audioWaves.addCurve(to: CGPoint(x: 102.25, y: 9), controlPoint1: CGPoint(x: 102.78, y: 9.09), controlPoint2: CGPoint(x: 102.52, y: 9))
        audioWaves.addCurve(to: CGPoint(x: 101.51, y: 9.26), controlPoint1: CGPoint(x: 101.98, y: 9), controlPoint2: CGPoint(x: 101.72, y: 9.09))
        audioWaves.addCurve(to: CGPoint(x: 101.07, y: 9.95), controlPoint1: CGPoint(x: 101.29, y: 9.44), controlPoint2: CGPoint(x: 101.14, y: 9.67))
        audioWaves.addCurve(to: CGPoint(x: 101.01, y: 10.34), controlPoint1: CGPoint(x: 101.03, y: 10.08), controlPoint2: CGPoint(x: 101.02, y: 10.21))
        audioWaves.addCurve(to: CGPoint(x: 101, y: 10.78), controlPoint1: CGPoint(x: 101, y: 10.49), controlPoint2: CGPoint(x: 101, y: 10.64))
        audioWaves.addLine(to: CGPoint(x: 101, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 101, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 101, y: 47.21))
        audioWaves.addCurve(to: CGPoint(x: 101.01, y: 47.66), controlPoint1: CGPoint(x: 101, y: 47.36), controlPoint2: CGPoint(x: 101, y: 47.51))
        audioWaves.addCurve(to: CGPoint(x: 101.07, y: 48.05), controlPoint1: CGPoint(x: 101.02, y: 47.79), controlPoint2: CGPoint(x: 101.03, y: 47.92))
        audioWaves.addCurve(to: CGPoint(x: 101.51, y: 48.74), controlPoint1: CGPoint(x: 101.14, y: 48.32), controlPoint2: CGPoint(x: 101.29, y: 48.56))
        audioWaves.addCurve(to: CGPoint(x: 102.25, y: 49), controlPoint1: CGPoint(x: 101.72, y: 48.91), controlPoint2: CGPoint(x: 101.98, y: 49))
        audioWaves.addCurve(to: CGPoint(x: 103, y: 48.74), controlPoint1: CGPoint(x: 102.52, y: 49), controlPoint2: CGPoint(x: 102.78, y: 48.91))
        audioWaves.addCurve(to: CGPoint(x: 103.44, y: 48.05), controlPoint1: CGPoint(x: 103.21, y: 48.56), controlPoint2: CGPoint(x: 103.36, y: 48.32))
        audioWaves.addCurve(to: CGPoint(x: 103.49, y: 47.66), controlPoint1: CGPoint(x: 103.47, y: 47.92), controlPoint2: CGPoint(x: 103.49, y: 47.79))
        audioWaves.addCurve(to: CGPoint(x: 103.5, y: 47.21), controlPoint1: CGPoint(x: 103.5, y: 47.51), controlPoint2: CGPoint(x: 103.5, y: 47.36))
        audioWaves.addLine(to: CGPoint(x: 103.5, y: 10.78))
        audioWaves.addCurve(to: CGPoint(x: 103.49, y: 10.34), controlPoint1: CGPoint(x: 103.5, y: 10.64), controlPoint2: CGPoint(x: 103.5, y: 10.49))
        audioWaves.addCurve(to: CGPoint(x: 103.44, y: 9.95), controlPoint1: CGPoint(x: 103.49, y: 10.21), controlPoint2: CGPoint(x: 103.47, y: 10.08))
        audioWaves.addLine(to: CGPoint(x: 103.44, y: 9.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 109.49, y: 13.34))
        audioWaves.addCurve(to: CGPoint(x: 109.44, y: 12.95), controlPoint1: CGPoint(x: 109.49, y: 13.21), controlPoint2: CGPoint(x: 109.47, y: 13.08))
        audioWaves.addCurve(to: CGPoint(x: 109, y: 12.26), controlPoint1: CGPoint(x: 109.36, y: 12.67), controlPoint2: CGPoint(x: 109.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 108.25, y: 12), controlPoint1: CGPoint(x: 108.78, y: 12.09), controlPoint2: CGPoint(x: 108.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 107.51, y: 12.26), controlPoint1: CGPoint(x: 107.98, y: 12), controlPoint2: CGPoint(x: 107.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 107.07, y: 12.95), controlPoint1: CGPoint(x: 107.29, y: 12.44), controlPoint2: CGPoint(x: 107.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 107.01, y: 13.34), controlPoint1: CGPoint(x: 107.03, y: 13.08), controlPoint2: CGPoint(x: 107.02, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 107, y: 13.78), controlPoint1: CGPoint(x: 107, y: 13.49), controlPoint2: CGPoint(x: 107, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 107, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 107, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 107, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 107.01, y: 44.66), controlPoint1: CGPoint(x: 107, y: 44.36), controlPoint2: CGPoint(x: 107, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 107.07, y: 45.05), controlPoint1: CGPoint(x: 107.02, y: 44.79), controlPoint2: CGPoint(x: 107.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 107.51, y: 45.74), controlPoint1: CGPoint(x: 107.14, y: 45.32), controlPoint2: CGPoint(x: 107.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 108.25, y: 46), controlPoint1: CGPoint(x: 107.72, y: 45.91), controlPoint2: CGPoint(x: 107.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 109, y: 45.74), controlPoint1: CGPoint(x: 108.52, y: 46), controlPoint2: CGPoint(x: 108.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 109.44, y: 45.05), controlPoint1: CGPoint(x: 109.21, y: 45.56), controlPoint2: CGPoint(x: 109.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 109.49, y: 44.66), controlPoint1: CGPoint(x: 109.47, y: 44.92), controlPoint2: CGPoint(x: 109.49, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 109.5, y: 44.21), controlPoint1: CGPoint(x: 109.5, y: 44.51), controlPoint2: CGPoint(x: 109.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 109.49, y: 13.34), controlPoint1: CGPoint(x: 109.5, y: 13.64), controlPoint2: CGPoint(x: 109.5, y: 13.49))
        audioWaves.addLine(to: CGPoint(x: 109.49, y: 13.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 115.49, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 115.44, y: 19.95), controlPoint1: CGPoint(x: 115.49, y: 20.21), controlPoint2: CGPoint(x: 115.47, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 115, y: 19.26), controlPoint1: CGPoint(x: 115.36, y: 19.68), controlPoint2: CGPoint(x: 115.21, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 114.25, y: 19), controlPoint1: CGPoint(x: 114.78, y: 19.09), controlPoint2: CGPoint(x: 114.52, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 113.51, y: 19.26), controlPoint1: CGPoint(x: 113.98, y: 19), controlPoint2: CGPoint(x: 113.72, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 113.07, y: 19.95), controlPoint1: CGPoint(x: 113.29, y: 19.44), controlPoint2: CGPoint(x: 113.14, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 113.01, y: 20.34), controlPoint1: CGPoint(x: 113.03, y: 20.08), controlPoint2: CGPoint(x: 113.02, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 113, y: 20.78), controlPoint1: CGPoint(x: 113, y: 20.49), controlPoint2: CGPoint(x: 113, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 113, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 113, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 113, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 113.01, y: 37.66), controlPoint1: CGPoint(x: 113, y: 37.36), controlPoint2: CGPoint(x: 113, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 113.07, y: 38.05), controlPoint1: CGPoint(x: 113.02, y: 37.79), controlPoint2: CGPoint(x: 113.03, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 113.51, y: 38.74), controlPoint1: CGPoint(x: 113.14, y: 38.32), controlPoint2: CGPoint(x: 113.29, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 114.25, y: 39), controlPoint1: CGPoint(x: 113.72, y: 38.91), controlPoint2: CGPoint(x: 113.98, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 115, y: 38.74), controlPoint1: CGPoint(x: 114.52, y: 39), controlPoint2: CGPoint(x: 114.78, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 115.44, y: 38.05), controlPoint1: CGPoint(x: 115.21, y: 38.56), controlPoint2: CGPoint(x: 115.36, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 115.49, y: 37.66), controlPoint1: CGPoint(x: 115.47, y: 37.92), controlPoint2: CGPoint(x: 115.49, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 115.5, y: 37.21), controlPoint1: CGPoint(x: 115.5, y: 37.51), controlPoint2: CGPoint(x: 115.5, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 115.49, y: 20.34), controlPoint1: CGPoint(x: 115.5, y: 20.64), controlPoint2: CGPoint(x: 115.5, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 115.49, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 121.44, y: 12.95))
        audioWaves.addCurve(to: CGPoint(x: 121, y: 12.26), controlPoint1: CGPoint(x: 121.36, y: 12.67), controlPoint2: CGPoint(x: 121.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 120.25, y: 12), controlPoint1: CGPoint(x: 120.78, y: 12.09), controlPoint2: CGPoint(x: 120.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 119.51, y: 12.26), controlPoint1: CGPoint(x: 119.98, y: 12), controlPoint2: CGPoint(x: 119.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 119.07, y: 12.95), controlPoint1: CGPoint(x: 119.29, y: 12.44), controlPoint2: CGPoint(x: 119.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 119.01, y: 13.34), controlPoint1: CGPoint(x: 119.03, y: 13.08), controlPoint2: CGPoint(x: 119.02, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 119, y: 13.78), controlPoint1: CGPoint(x: 119, y: 13.49), controlPoint2: CGPoint(x: 119, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 119, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 119, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 119, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 119.01, y: 44.66), controlPoint1: CGPoint(x: 119, y: 44.36), controlPoint2: CGPoint(x: 119, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 119.07, y: 45.05), controlPoint1: CGPoint(x: 119.02, y: 44.79), controlPoint2: CGPoint(x: 119.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 119.51, y: 45.74), controlPoint1: CGPoint(x: 119.14, y: 45.32), controlPoint2: CGPoint(x: 119.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 120.25, y: 46), controlPoint1: CGPoint(x: 119.72, y: 45.91), controlPoint2: CGPoint(x: 119.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 121, y: 45.74), controlPoint1: CGPoint(x: 120.52, y: 46), controlPoint2: CGPoint(x: 120.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 121.44, y: 45.05), controlPoint1: CGPoint(x: 121.21, y: 45.56), controlPoint2: CGPoint(x: 121.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 121.49, y: 44.66), controlPoint1: CGPoint(x: 121.47, y: 44.92), controlPoint2: CGPoint(x: 121.49, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 121.5, y: 44.21), controlPoint1: CGPoint(x: 121.5, y: 44.51), controlPoint2: CGPoint(x: 121.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 121.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 121.49, y: 13.34), controlPoint1: CGPoint(x: 121.5, y: 13.64), controlPoint2: CGPoint(x: 121.5, y: 13.49))
        audioWaves.addCurve(to: CGPoint(x: 121.44, y: 12.95), controlPoint1: CGPoint(x: 121.49, y: 13.21), controlPoint2: CGPoint(x: 121.47, y: 13.08))
        audioWaves.addLine(to: CGPoint(x: 121.44, y: 12.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 127.49, y: 15.34))
        audioWaves.addCurve(to: CGPoint(x: 127.44, y: 14.95), controlPoint1: CGPoint(x: 127.49, y: 15.21), controlPoint2: CGPoint(x: 127.47, y: 15.08))
        audioWaves.addCurve(to: CGPoint(x: 127, y: 14.26), controlPoint1: CGPoint(x: 127.36, y: 14.67), controlPoint2: CGPoint(x: 127.21, y: 14.44))
        audioWaves.addCurve(to: CGPoint(x: 126.25, y: 14), controlPoint1: CGPoint(x: 126.78, y: 14.09), controlPoint2: CGPoint(x: 126.52, y: 14))
        audioWaves.addCurve(to: CGPoint(x: 125.51, y: 14.26), controlPoint1: CGPoint(x: 125.98, y: 14), controlPoint2: CGPoint(x: 125.72, y: 14.09))
        audioWaves.addCurve(to: CGPoint(x: 125.07, y: 14.95), controlPoint1: CGPoint(x: 125.29, y: 14.44), controlPoint2: CGPoint(x: 125.14, y: 14.67))
        audioWaves.addCurve(to: CGPoint(x: 125.01, y: 15.34), controlPoint1: CGPoint(x: 125.03, y: 15.08), controlPoint2: CGPoint(x: 125.02, y: 15.21))
        audioWaves.addCurve(to: CGPoint(x: 125, y: 15.78), controlPoint1: CGPoint(x: 125, y: 15.49), controlPoint2: CGPoint(x: 125, y: 15.64))
        audioWaves.addLine(to: CGPoint(x: 125, y: 15.79))
        audioWaves.addLine(to: CGPoint(x: 125, y: 42.21))
        audioWaves.addLine(to: CGPoint(x: 125, y: 42.21))
        audioWaves.addCurve(to: CGPoint(x: 125.01, y: 42.66), controlPoint1: CGPoint(x: 125, y: 42.36), controlPoint2: CGPoint(x: 125, y: 42.51))
        audioWaves.addCurve(to: CGPoint(x: 125.07, y: 43.05), controlPoint1: CGPoint(x: 125.02, y: 42.79), controlPoint2: CGPoint(x: 125.03, y: 42.92))
        audioWaves.addCurve(to: CGPoint(x: 125.51, y: 43.74), controlPoint1: CGPoint(x: 125.14, y: 43.32), controlPoint2: CGPoint(x: 125.29, y: 43.56))
        audioWaves.addCurve(to: CGPoint(x: 126.25, y: 44), controlPoint1: CGPoint(x: 125.72, y: 43.91), controlPoint2: CGPoint(x: 125.98, y: 44))
        audioWaves.addCurve(to: CGPoint(x: 127, y: 43.74), controlPoint1: CGPoint(x: 126.52, y: 44), controlPoint2: CGPoint(x: 126.78, y: 43.91))
        audioWaves.addCurve(to: CGPoint(x: 127.44, y: 43.05), controlPoint1: CGPoint(x: 127.21, y: 43.56), controlPoint2: CGPoint(x: 127.36, y: 43.32))
        audioWaves.addCurve(to: CGPoint(x: 127.49, y: 42.66), controlPoint1: CGPoint(x: 127.47, y: 42.92), controlPoint2: CGPoint(x: 127.49, y: 42.79))
        audioWaves.addCurve(to: CGPoint(x: 127.5, y: 42.21), controlPoint1: CGPoint(x: 127.5, y: 42.51), controlPoint2: CGPoint(x: 127.5, y: 42.36))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 42.21))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 15.79))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 15.78))
        audioWaves.addCurve(to: CGPoint(x: 127.49, y: 15.34), controlPoint1: CGPoint(x: 127.5, y: 15.64), controlPoint2: CGPoint(x: 127.5, y: 15.49))
        audioWaves.addLine(to: CGPoint(x: 127.49, y: 15.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 133.44, y: 23.95))
        audioWaves.addCurve(to: CGPoint(x: 133, y: 23.26), controlPoint1: CGPoint(x: 133.36, y: 23.68), controlPoint2: CGPoint(x: 133.21, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 132.25, y: 23), controlPoint1: CGPoint(x: 132.78, y: 23.09), controlPoint2: CGPoint(x: 132.52, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 131.51, y: 23.26), controlPoint1: CGPoint(x: 131.98, y: 23), controlPoint2: CGPoint(x: 131.72, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 131.07, y: 23.95), controlPoint1: CGPoint(x: 131.29, y: 23.44), controlPoint2: CGPoint(x: 131.14, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 131.01, y: 24.34), controlPoint1: CGPoint(x: 131.03, y: 24.08), controlPoint2: CGPoint(x: 131.01, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 131, y: 24.78), controlPoint1: CGPoint(x: 131, y: 24.49), controlPoint2: CGPoint(x: 131, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 131, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 131.01, y: 33.66), controlPoint1: CGPoint(x: 131, y: 33.36), controlPoint2: CGPoint(x: 131, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 131.07, y: 34.05), controlPoint1: CGPoint(x: 131.01, y: 33.79), controlPoint2: CGPoint(x: 131.03, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 131.51, y: 34.74), controlPoint1: CGPoint(x: 131.14, y: 34.32), controlPoint2: CGPoint(x: 131.29, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 132.25, y: 35), controlPoint1: CGPoint(x: 131.72, y: 34.91), controlPoint2: CGPoint(x: 131.98, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 133, y: 34.74), controlPoint1: CGPoint(x: 132.52, y: 35), controlPoint2: CGPoint(x: 132.78, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 133.44, y: 34.05), controlPoint1: CGPoint(x: 133.21, y: 34.56), controlPoint2: CGPoint(x: 133.36, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 133.49, y: 33.66), controlPoint1: CGPoint(x: 133.47, y: 33.92), controlPoint2: CGPoint(x: 133.48, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 133.5, y: 33.21), controlPoint1: CGPoint(x: 133.5, y: 33.51), controlPoint2: CGPoint(x: 133.5, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 133.5, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 133.49, y: 24.34), controlPoint1: CGPoint(x: 133.5, y: 24.64), controlPoint2: CGPoint(x: 133.5, y: 24.49))
        audioWaves.addCurve(to: CGPoint(x: 133.44, y: 23.95), controlPoint1: CGPoint(x: 133.48, y: 24.21), controlPoint2: CGPoint(x: 133.47, y: 24.08))
        audioWaves.addLine(to: CGPoint(x: 133.44, y: 23.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 139.49, y: 22.34))
        audioWaves.addCurve(to: CGPoint(x: 139.44, y: 21.95), controlPoint1: CGPoint(x: 139.48, y: 22.21), controlPoint2: CGPoint(x: 139.47, y: 22.08))
        audioWaves.addCurve(to: CGPoint(x: 139, y: 21.26), controlPoint1: CGPoint(x: 139.36, y: 21.68), controlPoint2: CGPoint(x: 139.21, y: 21.44))
        audioWaves.addCurve(to: CGPoint(x: 138.25, y: 21), controlPoint1: CGPoint(x: 138.78, y: 21.09), controlPoint2: CGPoint(x: 138.52, y: 21))
        audioWaves.addCurve(to: CGPoint(x: 137.51, y: 21.26), controlPoint1: CGPoint(x: 137.98, y: 21), controlPoint2: CGPoint(x: 137.72, y: 21.09))
        audioWaves.addCurve(to: CGPoint(x: 137.07, y: 21.95), controlPoint1: CGPoint(x: 137.29, y: 21.44), controlPoint2: CGPoint(x: 137.14, y: 21.68))
        audioWaves.addCurve(to: CGPoint(x: 137.01, y: 22.34), controlPoint1: CGPoint(x: 137.03, y: 22.08), controlPoint2: CGPoint(x: 137.01, y: 22.21))
        audioWaves.addCurve(to: CGPoint(x: 137, y: 22.78), controlPoint1: CGPoint(x: 137, y: 22.49), controlPoint2: CGPoint(x: 137, y: 22.64))
        audioWaves.addLine(to: CGPoint(x: 137, y: 22.79))
        audioWaves.addLine(to: CGPoint(x: 137, y: 35.21))
        audioWaves.addLine(to: CGPoint(x: 137, y: 35.21))
        audioWaves.addCurve(to: CGPoint(x: 137.01, y: 35.66), controlPoint1: CGPoint(x: 137, y: 35.36), controlPoint2: CGPoint(x: 137, y: 35.51))
        audioWaves.addCurve(to: CGPoint(x: 137.07, y: 36.05), controlPoint1: CGPoint(x: 137.01, y: 35.79), controlPoint2: CGPoint(x: 137.03, y: 35.92))
        audioWaves.addCurve(to: CGPoint(x: 137.51, y: 36.74), controlPoint1: CGPoint(x: 137.14, y: 36.32), controlPoint2: CGPoint(x: 137.29, y: 36.56))
        audioWaves.addCurve(to: CGPoint(x: 138.25, y: 37), controlPoint1: CGPoint(x: 137.72, y: 36.91), controlPoint2: CGPoint(x: 137.98, y: 37))
        audioWaves.addCurve(to: CGPoint(x: 139, y: 36.74), controlPoint1: CGPoint(x: 138.52, y: 37), controlPoint2: CGPoint(x: 138.78, y: 36.91))
        audioWaves.addCurve(to: CGPoint(x: 139.44, y: 36.05), controlPoint1: CGPoint(x: 139.21, y: 36.56), controlPoint2: CGPoint(x: 139.36, y: 36.32))
        audioWaves.addCurve(to: CGPoint(x: 139.49, y: 35.66), controlPoint1: CGPoint(x: 139.47, y: 35.92), controlPoint2: CGPoint(x: 139.48, y: 35.79))
        audioWaves.addCurve(to: CGPoint(x: 139.5, y: 35.21), controlPoint1: CGPoint(x: 139.5, y: 35.51), controlPoint2: CGPoint(x: 139.5, y: 35.36))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 35.21))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 22.79))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 22.78))
        audioWaves.addCurve(to: CGPoint(x: 139.49, y: 22.34), controlPoint1: CGPoint(x: 139.5, y: 22.64), controlPoint2: CGPoint(x: 139.5, y: 22.49))
        audioWaves.addLine(to: CGPoint(x: 139.49, y: 22.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 145.44, y: 24.95))
        audioWaves.addCurve(to: CGPoint(x: 145, y: 24.26), controlPoint1: CGPoint(x: 145.36, y: 24.68), controlPoint2: CGPoint(x: 145.21, y: 24.44))
        audioWaves.addCurve(to: CGPoint(x: 144.25, y: 24), controlPoint1: CGPoint(x: 144.78, y: 24.09), controlPoint2: CGPoint(x: 144.52, y: 24))
        audioWaves.addCurve(to: CGPoint(x: 143.51, y: 24.26), controlPoint1: CGPoint(x: 143.98, y: 24), controlPoint2: CGPoint(x: 143.72, y: 24.09))
        audioWaves.addCurve(to: CGPoint(x: 143.07, y: 24.95), controlPoint1: CGPoint(x: 143.29, y: 24.44), controlPoint2: CGPoint(x: 143.14, y: 24.68))
        audioWaves.addCurve(to: CGPoint(x: 143.01, y: 25.34), controlPoint1: CGPoint(x: 143.03, y: 25.08), controlPoint2: CGPoint(x: 143.01, y: 25.21))
        audioWaves.addCurve(to: CGPoint(x: 143, y: 25.78), controlPoint1: CGPoint(x: 143, y: 25.49), controlPoint2: CGPoint(x: 143, y: 25.64))
        audioWaves.addLine(to: CGPoint(x: 143, y: 32.21))
        audioWaves.addCurve(to: CGPoint(x: 143.01, y: 32.66), controlPoint1: CGPoint(x: 143, y: 32.36), controlPoint2: CGPoint(x: 143, y: 32.51))
        audioWaves.addCurve(to: CGPoint(x: 143.07, y: 33.05), controlPoint1: CGPoint(x: 143.01, y: 32.79), controlPoint2: CGPoint(x: 143.03, y: 32.92))
        audioWaves.addCurve(to: CGPoint(x: 143.51, y: 33.74), controlPoint1: CGPoint(x: 143.14, y: 33.32), controlPoint2: CGPoint(x: 143.29, y: 33.56))
        audioWaves.addCurve(to: CGPoint(x: 144.25, y: 34), controlPoint1: CGPoint(x: 143.72, y: 33.91), controlPoint2: CGPoint(x: 143.98, y: 34))
        audioWaves.addCurve(to: CGPoint(x: 145, y: 33.74), controlPoint1: CGPoint(x: 144.52, y: 34), controlPoint2: CGPoint(x: 144.78, y: 33.91))
        audioWaves.addCurve(to: CGPoint(x: 145.44, y: 33.05), controlPoint1: CGPoint(x: 145.21, y: 33.56), controlPoint2: CGPoint(x: 145.36, y: 33.32))
        audioWaves.addCurve(to: CGPoint(x: 145.49, y: 32.66), controlPoint1: CGPoint(x: 145.47, y: 32.92), controlPoint2: CGPoint(x: 145.48, y: 32.79))
        audioWaves.addCurve(to: CGPoint(x: 145.5, y: 32.21), controlPoint1: CGPoint(x: 145.5, y: 32.51), controlPoint2: CGPoint(x: 145.5, y: 32.36))
        audioWaves.addLine(to: CGPoint(x: 145.5, y: 25.78))
        audioWaves.addCurve(to: CGPoint(x: 145.49, y: 25.34), controlPoint1: CGPoint(x: 145.5, y: 25.64), controlPoint2: CGPoint(x: 145.5, y: 25.49))
        audioWaves.addCurve(to: CGPoint(x: 145.44, y: 24.95), controlPoint1: CGPoint(x: 145.48, y: 25.21), controlPoint2: CGPoint(x: 145.47, y: 25.08))
        audioWaves.addLine(to: CGPoint(x: 145.44, y: 24.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 151.49, y: 27.34))
        audioWaves.addCurve(to: CGPoint(x: 151.44, y: 26.95), controlPoint1: CGPoint(x: 151.48, y: 27.21), controlPoint2: CGPoint(x: 151.47, y: 27.08))
        audioWaves.addCurve(to: CGPoint(x: 151, y: 26.26), controlPoint1: CGPoint(x: 151.36, y: 26.68), controlPoint2: CGPoint(x: 151.21, y: 26.44))
        audioWaves.addCurve(to: CGPoint(x: 150.25, y: 26), controlPoint1: CGPoint(x: 150.78, y: 26.09), controlPoint2: CGPoint(x: 150.52, y: 26))
        audioWaves.addCurve(to: CGPoint(x: 149.51, y: 26.26), controlPoint1: CGPoint(x: 149.98, y: 26), controlPoint2: CGPoint(x: 149.72, y: 26.09))
        audioWaves.addCurve(to: CGPoint(x: 149.07, y: 26.95), controlPoint1: CGPoint(x: 149.29, y: 26.44), controlPoint2: CGPoint(x: 149.14, y: 26.68))
        audioWaves.addCurve(to: CGPoint(x: 149.01, y: 27.34), controlPoint1: CGPoint(x: 149.03, y: 27.08), controlPoint2: CGPoint(x: 149.01, y: 27.21))
        audioWaves.addCurve(to: CGPoint(x: 149, y: 27.78), controlPoint1: CGPoint(x: 149, y: 27.49), controlPoint2: CGPoint(x: 149, y: 27.64))
        audioWaves.addLine(to: CGPoint(x: 149, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 149, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 149, y: 30.22))
        audioWaves.addCurve(to: CGPoint(x: 149.01, y: 30.66), controlPoint1: CGPoint(x: 149, y: 30.36), controlPoint2: CGPoint(x: 149, y: 30.51))
        audioWaves.addCurve(to: CGPoint(x: 149.07, y: 31.05), controlPoint1: CGPoint(x: 149.01, y: 30.79), controlPoint2: CGPoint(x: 149.03, y: 30.92))
        audioWaves.addCurve(to: CGPoint(x: 149.51, y: 31.74), controlPoint1: CGPoint(x: 149.14, y: 31.32), controlPoint2: CGPoint(x: 149.29, y: 31.56))
        audioWaves.addCurve(to: CGPoint(x: 150.25, y: 32), controlPoint1: CGPoint(x: 149.72, y: 31.91), controlPoint2: CGPoint(x: 149.98, y: 32))
        audioWaves.addCurve(to: CGPoint(x: 151, y: 31.74), controlPoint1: CGPoint(x: 150.52, y: 32), controlPoint2: CGPoint(x: 150.78, y: 31.91))
        audioWaves.addCurve(to: CGPoint(x: 151.44, y: 31.05), controlPoint1: CGPoint(x: 151.21, y: 31.56), controlPoint2: CGPoint(x: 151.36, y: 31.32))
        audioWaves.addCurve(to: CGPoint(x: 151.49, y: 30.66), controlPoint1: CGPoint(x: 151.47, y: 30.92), controlPoint2: CGPoint(x: 151.48, y: 30.79))
        audioWaves.addCurve(to: CGPoint(x: 151.5, y: 30.22), controlPoint1: CGPoint(x: 151.5, y: 30.51), controlPoint2: CGPoint(x: 151.5, y: 30.36))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 27.78))
        audioWaves.addCurve(to: CGPoint(x: 151.49, y: 27.34), controlPoint1: CGPoint(x: 151.5, y: 27.64), controlPoint2: CGPoint(x: 151.5, y: 27.49))
        audioWaves.addLine(to: CGPoint(x: 151.49, y: 27.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 156.99, y: 10.34))
        audioWaves.addCurve(to: CGPoint(x: 156.94, y: 9.95), controlPoint1: CGPoint(x: 156.98, y: 10.21), controlPoint2: CGPoint(x: 156.97, y: 10.08))
        audioWaves.addCurve(to: CGPoint(x: 156.5, y: 9.26), controlPoint1: CGPoint(x: 156.86, y: 9.67), controlPoint2: CGPoint(x: 156.71, y: 9.44))
        audioWaves.addCurve(to: CGPoint(x: 155.75, y: 9), controlPoint1: CGPoint(x: 156.28, y: 9.09), controlPoint2: CGPoint(x: 156.02, y: 9))
        audioWaves.addCurve(to: CGPoint(x: 155.01, y: 9.26), controlPoint1: CGPoint(x: 155.48, y: 9), controlPoint2: CGPoint(x: 155.22, y: 9.09))
        audioWaves.addCurve(to: CGPoint(x: 154.57, y: 9.95), controlPoint1: CGPoint(x: 154.79, y: 9.44), controlPoint2: CGPoint(x: 154.64, y: 9.67))
        audioWaves.addCurve(to: CGPoint(x: 154.51, y: 10.34), controlPoint1: CGPoint(x: 154.53, y: 10.08), controlPoint2: CGPoint(x: 154.51, y: 10.21))
        audioWaves.addCurve(to: CGPoint(x: 154.5, y: 10.78), controlPoint1: CGPoint(x: 154.5, y: 10.49), controlPoint2: CGPoint(x: 154.5, y: 10.64))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 47.21))
        audioWaves.addCurve(to: CGPoint(x: 154.51, y: 47.66), controlPoint1: CGPoint(x: 154.5, y: 47.36), controlPoint2: CGPoint(x: 154.5, y: 47.51))
        audioWaves.addCurve(to: CGPoint(x: 154.57, y: 48.05), controlPoint1: CGPoint(x: 154.51, y: 47.79), controlPoint2: CGPoint(x: 154.53, y: 47.92))
        audioWaves.addCurve(to: CGPoint(x: 155.01, y: 48.74), controlPoint1: CGPoint(x: 154.64, y: 48.32), controlPoint2: CGPoint(x: 154.79, y: 48.56))
        audioWaves.addCurve(to: CGPoint(x: 155.75, y: 49), controlPoint1: CGPoint(x: 155.22, y: 48.91), controlPoint2: CGPoint(x: 155.48, y: 49))
        audioWaves.addCurve(to: CGPoint(x: 156.5, y: 48.74), controlPoint1: CGPoint(x: 156.02, y: 49), controlPoint2: CGPoint(x: 156.28, y: 48.91))
        audioWaves.addCurve(to: CGPoint(x: 156.94, y: 48.05), controlPoint1: CGPoint(x: 156.71, y: 48.56), controlPoint2: CGPoint(x: 156.86, y: 48.32))
        audioWaves.addCurve(to: CGPoint(x: 156.99, y: 47.66), controlPoint1: CGPoint(x: 156.97, y: 47.92), controlPoint2: CGPoint(x: 156.98, y: 47.79))
        audioWaves.addCurve(to: CGPoint(x: 157, y: 47.21), controlPoint1: CGPoint(x: 157, y: 47.51), controlPoint2: CGPoint(x: 157, y: 47.36))
        audioWaves.addLine(to: CGPoint(x: 157, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 157, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 157, y: 10.78))
        audioWaves.addCurve(to: CGPoint(x: 156.99, y: 10.34), controlPoint1: CGPoint(x: 157, y: 10.64), controlPoint2: CGPoint(x: 157, y: 10.49))
        audioWaves.addLine(to: CGPoint(x: 156.99, y: 10.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 162.99, y: 3.34))
        audioWaves.addCurve(to: CGPoint(x: 162.94, y: 2.95), controlPoint1: CGPoint(x: 162.98, y: 3.21), controlPoint2: CGPoint(x: 162.97, y: 3.08))
        audioWaves.addCurve(to: CGPoint(x: 162.5, y: 2.26), controlPoint1: CGPoint(x: 162.86, y: 2.68), controlPoint2: CGPoint(x: 162.71, y: 2.44))
        audioWaves.addCurve(to: CGPoint(x: 161.75, y: 2), controlPoint1: CGPoint(x: 162.28, y: 2.09), controlPoint2: CGPoint(x: 162.02, y: 2))
        audioWaves.addCurve(to: CGPoint(x: 161.01, y: 2.26), controlPoint1: CGPoint(x: 161.48, y: 2), controlPoint2: CGPoint(x: 161.22, y: 2.09))
        audioWaves.addCurve(to: CGPoint(x: 160.57, y: 2.95), controlPoint1: CGPoint(x: 160.79, y: 2.44), controlPoint2: CGPoint(x: 160.64, y: 2.68))
        audioWaves.addCurve(to: CGPoint(x: 160.51, y: 3.34), controlPoint1: CGPoint(x: 160.53, y: 3.08), controlPoint2: CGPoint(x: 160.51, y: 3.21))
        audioWaves.addCurve(to: CGPoint(x: 160.5, y: 3.78), controlPoint1: CGPoint(x: 160.5, y: 3.49), controlPoint2: CGPoint(x: 160.5, y: 3.64))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 54.21))
        audioWaves.addCurve(to: CGPoint(x: 160.51, y: 54.66), controlPoint1: CGPoint(x: 160.5, y: 54.36), controlPoint2: CGPoint(x: 160.5, y: 54.51))
        audioWaves.addCurve(to: CGPoint(x: 160.57, y: 55.05), controlPoint1: CGPoint(x: 160.51, y: 54.79), controlPoint2: CGPoint(x: 160.53, y: 54.92))
        audioWaves.addCurve(to: CGPoint(x: 161.01, y: 55.74), controlPoint1: CGPoint(x: 160.64, y: 55.32), controlPoint2: CGPoint(x: 160.79, y: 55.56))
        audioWaves.addCurve(to: CGPoint(x: 161.75, y: 56), controlPoint1: CGPoint(x: 161.22, y: 55.91), controlPoint2: CGPoint(x: 161.48, y: 56))
        audioWaves.addCurve(to: CGPoint(x: 162.5, y: 55.74), controlPoint1: CGPoint(x: 162.02, y: 56), controlPoint2: CGPoint(x: 162.28, y: 55.91))
        audioWaves.addCurve(to: CGPoint(x: 162.94, y: 55.05), controlPoint1: CGPoint(x: 162.71, y: 55.56), controlPoint2: CGPoint(x: 162.86, y: 55.32))
        audioWaves.addCurve(to: CGPoint(x: 162.99, y: 54.66), controlPoint1: CGPoint(x: 162.97, y: 54.92), controlPoint2: CGPoint(x: 162.98, y: 54.79))
        audioWaves.addCurve(to: CGPoint(x: 163, y: 54.21), controlPoint1: CGPoint(x: 163, y: 54.51), controlPoint2: CGPoint(x: 163, y: 54.36))
        audioWaves.addLine(to: CGPoint(x: 163, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 163, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 163, y: 3.78))
        audioWaves.addCurve(to: CGPoint(x: 162.99, y: 3.34), controlPoint1: CGPoint(x: 163, y: 3.64), controlPoint2: CGPoint(x: 163, y: 3.49))
        audioWaves.addLine(to: CGPoint(x: 162.99, y: 3.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 168.94, y: 12.45))
        audioWaves.addCurve(to: CGPoint(x: 168.5, y: 11.76), controlPoint1: CGPoint(x: 168.86, y: 12.17), controlPoint2: CGPoint(x: 168.71, y: 11.94))
        audioWaves.addCurve(to: CGPoint(x: 167.75, y: 11.5), controlPoint1: CGPoint(x: 168.28, y: 11.59), controlPoint2: CGPoint(x: 168.02, y: 11.5))
        audioWaves.addCurve(to: CGPoint(x: 167.01, y: 11.76), controlPoint1: CGPoint(x: 167.48, y: 11.5), controlPoint2: CGPoint(x: 167.22, y: 11.59))
        audioWaves.addCurve(to: CGPoint(x: 166.57, y: 12.45), controlPoint1: CGPoint(x: 166.79, y: 11.94), controlPoint2: CGPoint(x: 166.64, y: 12.17))
        audioWaves.addCurve(to: CGPoint(x: 166.51, y: 12.84), controlPoint1: CGPoint(x: 166.53, y: 12.58), controlPoint2: CGPoint(x: 166.52, y: 12.71))
        audioWaves.addCurve(to: CGPoint(x: 166.5, y: 13.28), controlPoint1: CGPoint(x: 166.5, y: 12.99), controlPoint2: CGPoint(x: 166.5, y: 13.14))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 13.29))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 44.71))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 44.71))
        audioWaves.addCurve(to: CGPoint(x: 166.51, y: 45.16), controlPoint1: CGPoint(x: 166.5, y: 44.86), controlPoint2: CGPoint(x: 166.5, y: 45.01))
        audioWaves.addCurve(to: CGPoint(x: 166.57, y: 45.55), controlPoint1: CGPoint(x: 166.52, y: 45.29), controlPoint2: CGPoint(x: 166.53, y: 45.42))
        audioWaves.addCurve(to: CGPoint(x: 167.01, y: 46.24), controlPoint1: CGPoint(x: 166.64, y: 45.82), controlPoint2: CGPoint(x: 166.79, y: 46.06))
        audioWaves.addCurve(to: CGPoint(x: 167.75, y: 46.5), controlPoint1: CGPoint(x: 167.22, y: 46.41), controlPoint2: CGPoint(x: 167.48, y: 46.5))
        audioWaves.addCurve(to: CGPoint(x: 168.5, y: 46.24), controlPoint1: CGPoint(x: 168.02, y: 46.5), controlPoint2: CGPoint(x: 168.28, y: 46.41))
        audioWaves.addCurve(to: CGPoint(x: 168.94, y: 45.55), controlPoint1: CGPoint(x: 168.71, y: 46.06), controlPoint2: CGPoint(x: 168.86, y: 45.82))
        audioWaves.addCurve(to: CGPoint(x: 168.99, y: 45.16), controlPoint1: CGPoint(x: 168.97, y: 45.42), controlPoint2: CGPoint(x: 168.98, y: 45.29))
        audioWaves.addCurve(to: CGPoint(x: 169, y: 44.71), controlPoint1: CGPoint(x: 169, y: 45.01), controlPoint2: CGPoint(x: 169, y: 44.86))
        audioWaves.addLine(to: CGPoint(x: 169, y: 13.28))
        audioWaves.addCurve(to: CGPoint(x: 168.99, y: 12.84), controlPoint1: CGPoint(x: 169, y: 13.14), controlPoint2: CGPoint(x: 169, y: 12.99))
        audioWaves.addCurve(to: CGPoint(x: 168.94, y: 12.45), controlPoint1: CGPoint(x: 168.98, y: 12.71), controlPoint2: CGPoint(x: 168.97, y: 12.58))
        audioWaves.addLine(to: CGPoint(x: 168.94, y: 12.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 174.99, y: 15.84))
        audioWaves.addCurve(to: CGPoint(x: 174.94, y: 15.45), controlPoint1: CGPoint(x: 174.98, y: 15.71), controlPoint2: CGPoint(x: 174.97, y: 15.58))
        audioWaves.addCurve(to: CGPoint(x: 174.5, y: 14.76), controlPoint1: CGPoint(x: 174.86, y: 15.17), controlPoint2: CGPoint(x: 174.71, y: 14.94))
        audioWaves.addCurve(to: CGPoint(x: 173.75, y: 14.5), controlPoint1: CGPoint(x: 174.28, y: 14.59), controlPoint2: CGPoint(x: 174.02, y: 14.5))
        audioWaves.addCurve(to: CGPoint(x: 173.01, y: 14.76), controlPoint1: CGPoint(x: 173.48, y: 14.5), controlPoint2: CGPoint(x: 173.22, y: 14.59))
        audioWaves.addCurve(to: CGPoint(x: 172.57, y: 15.45), controlPoint1: CGPoint(x: 172.79, y: 14.94), controlPoint2: CGPoint(x: 172.64, y: 15.17))
        audioWaves.addCurve(to: CGPoint(x: 172.51, y: 15.84), controlPoint1: CGPoint(x: 172.53, y: 15.58), controlPoint2: CGPoint(x: 172.52, y: 15.71))
        audioWaves.addCurve(to: CGPoint(x: 172.5, y: 16.28), controlPoint1: CGPoint(x: 172.5, y: 15.99), controlPoint2: CGPoint(x: 172.5, y: 16.14))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 16.29))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 41.71))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 41.71))
        audioWaves.addCurve(to: CGPoint(x: 172.51, y: 42.16), controlPoint1: CGPoint(x: 172.5, y: 41.86), controlPoint2: CGPoint(x: 172.5, y: 42.01))
        audioWaves.addCurve(to: CGPoint(x: 172.57, y: 42.55), controlPoint1: CGPoint(x: 172.52, y: 42.29), controlPoint2: CGPoint(x: 172.53, y: 42.42))
        audioWaves.addCurve(to: CGPoint(x: 173.01, y: 43.24), controlPoint1: CGPoint(x: 172.64, y: 42.82), controlPoint2: CGPoint(x: 172.79, y: 43.06))
        audioWaves.addCurve(to: CGPoint(x: 173.75, y: 43.5), controlPoint1: CGPoint(x: 173.22, y: 43.41), controlPoint2: CGPoint(x: 173.48, y: 43.5))
        audioWaves.addCurve(to: CGPoint(x: 174.5, y: 43.24), controlPoint1: CGPoint(x: 174.02, y: 43.5), controlPoint2: CGPoint(x: 174.28, y: 43.41))
        audioWaves.addCurve(to: CGPoint(x: 174.94, y: 42.55), controlPoint1: CGPoint(x: 174.71, y: 43.06), controlPoint2: CGPoint(x: 174.86, y: 42.82))
        audioWaves.addCurve(to: CGPoint(x: 174.99, y: 42.16), controlPoint1: CGPoint(x: 174.97, y: 42.42), controlPoint2: CGPoint(x: 174.98, y: 42.29))
        audioWaves.addCurve(to: CGPoint(x: 175, y: 41.71), controlPoint1: CGPoint(x: 175, y: 42.01), controlPoint2: CGPoint(x: 175, y: 41.86))
        audioWaves.addLine(to: CGPoint(x: 175, y: 41.71))
        audioWaves.addLine(to: CGPoint(x: 175, y: 16.29))
        audioWaves.addLine(to: CGPoint(x: 175, y: 16.28))
        audioWaves.addCurve(to: CGPoint(x: 174.99, y: 15.84), controlPoint1: CGPoint(x: 175, y: 16.14), controlPoint2: CGPoint(x: 175, y: 15.99))
        audioWaves.addLine(to: CGPoint(x: 174.99, y: 15.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 180.94, y: 3.95))
        audioWaves.addCurve(to: CGPoint(x: 180.5, y: 3.26), controlPoint1: CGPoint(x: 180.86, y: 3.68), controlPoint2: CGPoint(x: 180.71, y: 3.44))
        audioWaves.addCurve(to: CGPoint(x: 179.75, y: 3), controlPoint1: CGPoint(x: 180.28, y: 3.09), controlPoint2: CGPoint(x: 180.02, y: 3))
        audioWaves.addCurve(to: CGPoint(x: 179.01, y: 3.26), controlPoint1: CGPoint(x: 179.48, y: 3), controlPoint2: CGPoint(x: 179.22, y: 3.09))
        audioWaves.addCurve(to: CGPoint(x: 178.57, y: 3.95), controlPoint1: CGPoint(x: 178.79, y: 3.44), controlPoint2: CGPoint(x: 178.64, y: 3.68))
        audioWaves.addCurve(to: CGPoint(x: 178.51, y: 4.34), controlPoint1: CGPoint(x: 178.53, y: 4.08), controlPoint2: CGPoint(x: 178.52, y: 4.21))
        audioWaves.addCurve(to: CGPoint(x: 178.5, y: 4.78), controlPoint1: CGPoint(x: 178.5, y: 4.49), controlPoint2: CGPoint(x: 178.5, y: 4.64))
        audioWaves.addLine(to: CGPoint(x: 178.5, y: 53.21))
        audioWaves.addCurve(to: CGPoint(x: 178.51, y: 53.66), controlPoint1: CGPoint(x: 178.5, y: 53.36), controlPoint2: CGPoint(x: 178.5, y: 53.51))
        audioWaves.addCurve(to: CGPoint(x: 178.57, y: 54.05), controlPoint1: CGPoint(x: 178.52, y: 53.79), controlPoint2: CGPoint(x: 178.53, y: 53.92))
        audioWaves.addCurve(to: CGPoint(x: 179.01, y: 54.74), controlPoint1: CGPoint(x: 178.64, y: 54.32), controlPoint2: CGPoint(x: 178.79, y: 54.56))
        audioWaves.addCurve(to: CGPoint(x: 179.75, y: 55), controlPoint1: CGPoint(x: 179.22, y: 54.91), controlPoint2: CGPoint(x: 179.48, y: 55))
        audioWaves.addCurve(to: CGPoint(x: 180.5, y: 54.74), controlPoint1: CGPoint(x: 180.02, y: 55), controlPoint2: CGPoint(x: 180.28, y: 54.91))
        audioWaves.addCurve(to: CGPoint(x: 180.94, y: 54.05), controlPoint1: CGPoint(x: 180.71, y: 54.56), controlPoint2: CGPoint(x: 180.86, y: 54.32))
        audioWaves.addCurve(to: CGPoint(x: 180.99, y: 53.66), controlPoint1: CGPoint(x: 180.97, y: 53.92), controlPoint2: CGPoint(x: 180.98, y: 53.79))
        audioWaves.addCurve(to: CGPoint(x: 181, y: 53.21), controlPoint1: CGPoint(x: 181, y: 53.51), controlPoint2: CGPoint(x: 181, y: 53.36))
        audioWaves.addLine(to: CGPoint(x: 181, y: 4.78))
        audioWaves.addCurve(to: CGPoint(x: 180.99, y: 4.34), controlPoint1: CGPoint(x: 181, y: 4.64), controlPoint2: CGPoint(x: 181, y: 4.49))
        audioWaves.addCurve(to: CGPoint(x: 180.94, y: 3.95), controlPoint1: CGPoint(x: 180.98, y: 4.21), controlPoint2: CGPoint(x: 180.97, y: 4.08))
        audioWaves.addLine(to: CGPoint(x: 180.94, y: 3.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 186.99, y: 3.34))
        audioWaves.addCurve(to: CGPoint(x: 186.94, y: 2.95), controlPoint1: CGPoint(x: 186.98, y: 3.21), controlPoint2: CGPoint(x: 186.97, y: 3.08))
        audioWaves.addCurve(to: CGPoint(x: 186.5, y: 2.26), controlPoint1: CGPoint(x: 186.86, y: 2.68), controlPoint2: CGPoint(x: 186.71, y: 2.44))
        audioWaves.addCurve(to: CGPoint(x: 185.75, y: 2), controlPoint1: CGPoint(x: 186.28, y: 2.09), controlPoint2: CGPoint(x: 186.02, y: 2))
        audioWaves.addCurve(to: CGPoint(x: 185.01, y: 2.26), controlPoint1: CGPoint(x: 185.48, y: 2), controlPoint2: CGPoint(x: 185.22, y: 2.09))
        audioWaves.addCurve(to: CGPoint(x: 184.57, y: 2.95), controlPoint1: CGPoint(x: 184.79, y: 2.44), controlPoint2: CGPoint(x: 184.64, y: 2.68))
        audioWaves.addCurve(to: CGPoint(x: 184.51, y: 3.34), controlPoint1: CGPoint(x: 184.53, y: 3.08), controlPoint2: CGPoint(x: 184.52, y: 3.21))
        audioWaves.addCurve(to: CGPoint(x: 184.5, y: 3.78), controlPoint1: CGPoint(x: 184.5, y: 3.49), controlPoint2: CGPoint(x: 184.5, y: 3.64))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 54.21))
        audioWaves.addCurve(to: CGPoint(x: 184.51, y: 54.66), controlPoint1: CGPoint(x: 184.5, y: 54.36), controlPoint2: CGPoint(x: 184.5, y: 54.51))
        audioWaves.addCurve(to: CGPoint(x: 184.57, y: 55.05), controlPoint1: CGPoint(x: 184.52, y: 54.79), controlPoint2: CGPoint(x: 184.53, y: 54.92))
        audioWaves.addCurve(to: CGPoint(x: 185.01, y: 55.74), controlPoint1: CGPoint(x: 184.64, y: 55.32), controlPoint2: CGPoint(x: 184.79, y: 55.56))
        audioWaves.addCurve(to: CGPoint(x: 185.75, y: 56), controlPoint1: CGPoint(x: 185.22, y: 55.91), controlPoint2: CGPoint(x: 185.48, y: 56))
        audioWaves.addCurve(to: CGPoint(x: 186.5, y: 55.74), controlPoint1: CGPoint(x: 186.02, y: 56), controlPoint2: CGPoint(x: 186.28, y: 55.91))
        audioWaves.addCurve(to: CGPoint(x: 186.94, y: 55.05), controlPoint1: CGPoint(x: 186.71, y: 55.56), controlPoint2: CGPoint(x: 186.86, y: 55.32))
        audioWaves.addCurve(to: CGPoint(x: 186.99, y: 54.66), controlPoint1: CGPoint(x: 186.97, y: 54.92), controlPoint2: CGPoint(x: 186.98, y: 54.79))
        audioWaves.addCurve(to: CGPoint(x: 187, y: 54.21), controlPoint1: CGPoint(x: 187, y: 54.51), controlPoint2: CGPoint(x: 187, y: 54.36))
        audioWaves.addLine(to: CGPoint(x: 187, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 187, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 187, y: 3.78))
        audioWaves.addCurve(to: CGPoint(x: 186.99, y: 3.34), controlPoint1: CGPoint(x: 187, y: 3.64), controlPoint2: CGPoint(x: 187, y: 3.49))
        audioWaves.addLine(to: CGPoint(x: 186.99, y: 3.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 192.94, y: 21.45))
        audioWaves.addCurve(to: CGPoint(x: 192.5, y: 20.76), controlPoint1: CGPoint(x: 192.86, y: 21.18), controlPoint2: CGPoint(x: 192.71, y: 20.94))
        audioWaves.addCurve(to: CGPoint(x: 191.75, y: 20.5), controlPoint1: CGPoint(x: 192.28, y: 20.59), controlPoint2: CGPoint(x: 192.02, y: 20.5))
        audioWaves.addCurve(to: CGPoint(x: 191.01, y: 20.76), controlPoint1: CGPoint(x: 191.48, y: 20.5), controlPoint2: CGPoint(x: 191.22, y: 20.59))
        audioWaves.addCurve(to: CGPoint(x: 190.57, y: 21.45), controlPoint1: CGPoint(x: 190.79, y: 20.94), controlPoint2: CGPoint(x: 190.64, y: 21.18))
        audioWaves.addCurve(to: CGPoint(x: 190.51, y: 21.84), controlPoint1: CGPoint(x: 190.53, y: 21.58), controlPoint2: CGPoint(x: 190.52, y: 21.71))
        audioWaves.addCurve(to: CGPoint(x: 190.5, y: 22.28), controlPoint1: CGPoint(x: 190.5, y: 21.99), controlPoint2: CGPoint(x: 190.5, y: 22.14))
        audioWaves.addLine(to: CGPoint(x: 190.5, y: 35.71))
        audioWaves.addCurve(to: CGPoint(x: 190.51, y: 36.16), controlPoint1: CGPoint(x: 190.5, y: 35.86), controlPoint2: CGPoint(x: 190.5, y: 36.01))
        audioWaves.addCurve(to: CGPoint(x: 190.57, y: 36.55), controlPoint1: CGPoint(x: 190.52, y: 36.29), controlPoint2: CGPoint(x: 190.53, y: 36.42))
        audioWaves.addCurve(to: CGPoint(x: 191.01, y: 37.24), controlPoint1: CGPoint(x: 190.64, y: 36.82), controlPoint2: CGPoint(x: 190.79, y: 37.06))
        audioWaves.addCurve(to: CGPoint(x: 191.75, y: 37.5), controlPoint1: CGPoint(x: 191.22, y: 37.41), controlPoint2: CGPoint(x: 191.48, y: 37.5))
        audioWaves.addCurve(to: CGPoint(x: 192.5, y: 37.24), controlPoint1: CGPoint(x: 192.02, y: 37.5), controlPoint2: CGPoint(x: 192.28, y: 37.41))
        audioWaves.addCurve(to: CGPoint(x: 192.94, y: 36.55), controlPoint1: CGPoint(x: 192.71, y: 37.06), controlPoint2: CGPoint(x: 192.86, y: 36.82))
        audioWaves.addCurve(to: CGPoint(x: 192.99, y: 36.16), controlPoint1: CGPoint(x: 192.97, y: 36.42), controlPoint2: CGPoint(x: 192.98, y: 36.29))
        audioWaves.addCurve(to: CGPoint(x: 193, y: 35.71), controlPoint1: CGPoint(x: 193, y: 36.01), controlPoint2: CGPoint(x: 193, y: 35.86))
        audioWaves.addLine(to: CGPoint(x: 193, y: 22.28))
        audioWaves.addCurve(to: CGPoint(x: 192.99, y: 21.84), controlPoint1: CGPoint(x: 193, y: 22.14), controlPoint2: CGPoint(x: 193, y: 21.99))
        audioWaves.addCurve(to: CGPoint(x: 192.94, y: 21.45), controlPoint1: CGPoint(x: 192.98, y: 21.71), controlPoint2: CGPoint(x: 192.97, y: 21.58))
        audioWaves.addLine(to: CGPoint(x: 192.94, y: 21.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 198.99, y: 6.84))
        audioWaves.addCurve(to: CGPoint(x: 198.94, y: 6.45), controlPoint1: CGPoint(x: 198.98, y: 6.71), controlPoint2: CGPoint(x: 198.97, y: 6.58))
        audioWaves.addCurve(to: CGPoint(x: 198.5, y: 5.76), controlPoint1: CGPoint(x: 198.86, y: 6.18), controlPoint2: CGPoint(x: 198.71, y: 5.94))
        audioWaves.addCurve(to: CGPoint(x: 197.75, y: 5.5), controlPoint1: CGPoint(x: 198.28, y: 5.59), controlPoint2: CGPoint(x: 198.02, y: 5.5))
        audioWaves.addCurve(to: CGPoint(x: 197.01, y: 5.76), controlPoint1: CGPoint(x: 197.48, y: 5.5), controlPoint2: CGPoint(x: 197.22, y: 5.59))
        audioWaves.addCurve(to: CGPoint(x: 196.57, y: 6.45), controlPoint1: CGPoint(x: 196.79, y: 5.94), controlPoint2: CGPoint(x: 196.64, y: 6.18))
        audioWaves.addCurve(to: CGPoint(x: 196.51, y: 6.84), controlPoint1: CGPoint(x: 196.53, y: 6.58), controlPoint2: CGPoint(x: 196.52, y: 6.71))
        audioWaves.addCurve(to: CGPoint(x: 196.5, y: 7.28), controlPoint1: CGPoint(x: 196.5, y: 6.99), controlPoint2: CGPoint(x: 196.5, y: 7.14))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 7.29))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 50.71))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 50.71))
        audioWaves.addCurve(to: CGPoint(x: 196.51, y: 51.16), controlPoint1: CGPoint(x: 196.5, y: 50.86), controlPoint2: CGPoint(x: 196.5, y: 51.01))
        audioWaves.addCurve(to: CGPoint(x: 196.57, y: 51.55), controlPoint1: CGPoint(x: 196.52, y: 51.29), controlPoint2: CGPoint(x: 196.53, y: 51.42))
        audioWaves.addCurve(to: CGPoint(x: 197.01, y: 52.24), controlPoint1: CGPoint(x: 196.64, y: 51.82), controlPoint2: CGPoint(x: 196.79, y: 52.06))
        audioWaves.addCurve(to: CGPoint(x: 197.75, y: 52.5), controlPoint1: CGPoint(x: 197.22, y: 52.41), controlPoint2: CGPoint(x: 197.48, y: 52.5))
        audioWaves.addCurve(to: CGPoint(x: 198.5, y: 52.24), controlPoint1: CGPoint(x: 198.02, y: 52.5), controlPoint2: CGPoint(x: 198.28, y: 52.41))
        audioWaves.addCurve(to: CGPoint(x: 198.94, y: 51.55), controlPoint1: CGPoint(x: 198.71, y: 52.06), controlPoint2: CGPoint(x: 198.86, y: 51.82))
        audioWaves.addCurve(to: CGPoint(x: 198.99, y: 51.16), controlPoint1: CGPoint(x: 198.97, y: 51.42), controlPoint2: CGPoint(x: 198.98, y: 51.29))
        audioWaves.addCurve(to: CGPoint(x: 199, y: 50.71), controlPoint1: CGPoint(x: 199, y: 51.01), controlPoint2: CGPoint(x: 199, y: 50.86))
        audioWaves.addLine(to: CGPoint(x: 199, y: 50.71))
        audioWaves.addLine(to: CGPoint(x: 199, y: 7.29))
        audioWaves.addLine(to: CGPoint(x: 199, y: 7.28))
        audioWaves.addCurve(to: CGPoint(x: 198.99, y: 6.84), controlPoint1: CGPoint(x: 199, y: 7.14), controlPoint2: CGPoint(x: 199, y: 6.99))
        audioWaves.addLine(to: CGPoint(x: 198.99, y: 6.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 204.94, y: 19.45))
        audioWaves.addCurve(to: CGPoint(x: 204.5, y: 18.76), controlPoint1: CGPoint(x: 204.86, y: 19.18), controlPoint2: CGPoint(x: 204.71, y: 18.94))
        audioWaves.addCurve(to: CGPoint(x: 203.75, y: 18.5), controlPoint1: CGPoint(x: 204.28, y: 18.59), controlPoint2: CGPoint(x: 204.02, y: 18.5))
        audioWaves.addCurve(to: CGPoint(x: 203.01, y: 18.76), controlPoint1: CGPoint(x: 203.48, y: 18.5), controlPoint2: CGPoint(x: 203.22, y: 18.59))
        audioWaves.addCurve(to: CGPoint(x: 202.57, y: 19.45), controlPoint1: CGPoint(x: 202.79, y: 18.94), controlPoint2: CGPoint(x: 202.64, y: 19.18))
        audioWaves.addCurve(to: CGPoint(x: 202.51, y: 19.84), controlPoint1: CGPoint(x: 202.53, y: 19.58), controlPoint2: CGPoint(x: 202.52, y: 19.71))
        audioWaves.addCurve(to: CGPoint(x: 202.5, y: 20.28), controlPoint1: CGPoint(x: 202.5, y: 19.99), controlPoint2: CGPoint(x: 202.5, y: 20.14))
        audioWaves.addLine(to: CGPoint(x: 202.5, y: 37.71))
        audioWaves.addCurve(to: CGPoint(x: 202.51, y: 38.16), controlPoint1: CGPoint(x: 202.5, y: 37.86), controlPoint2: CGPoint(x: 202.5, y: 38.01))
        audioWaves.addCurve(to: CGPoint(x: 202.57, y: 38.55), controlPoint1: CGPoint(x: 202.52, y: 38.29), controlPoint2: CGPoint(x: 202.53, y: 38.42))
        audioWaves.addCurve(to: CGPoint(x: 203.01, y: 39.24), controlPoint1: CGPoint(x: 202.64, y: 38.82), controlPoint2: CGPoint(x: 202.79, y: 39.06))
        audioWaves.addCurve(to: CGPoint(x: 203.75, y: 39.5), controlPoint1: CGPoint(x: 203.22, y: 39.41), controlPoint2: CGPoint(x: 203.48, y: 39.5))
        audioWaves.addCurve(to: CGPoint(x: 204.5, y: 39.24), controlPoint1: CGPoint(x: 204.02, y: 39.5), controlPoint2: CGPoint(x: 204.28, y: 39.41))
        audioWaves.addCurve(to: CGPoint(x: 204.94, y: 38.55), controlPoint1: CGPoint(x: 204.71, y: 39.06), controlPoint2: CGPoint(x: 204.86, y: 38.82))
        audioWaves.addCurve(to: CGPoint(x: 204.99, y: 38.16), controlPoint1: CGPoint(x: 204.97, y: 38.42), controlPoint2: CGPoint(x: 204.98, y: 38.29))
        audioWaves.addCurve(to: CGPoint(x: 205, y: 37.71), controlPoint1: CGPoint(x: 205, y: 38.01), controlPoint2: CGPoint(x: 205, y: 37.86))
        audioWaves.addLine(to: CGPoint(x: 205, y: 20.28))
        audioWaves.addCurve(to: CGPoint(x: 204.99, y: 19.84), controlPoint1: CGPoint(x: 205, y: 20.14), controlPoint2: CGPoint(x: 205, y: 19.99))
        audioWaves.addCurve(to: CGPoint(x: 204.94, y: 19.45), controlPoint1: CGPoint(x: 204.98, y: 19.71), controlPoint2: CGPoint(x: 204.97, y: 19.58))
        audioWaves.addLine(to: CGPoint(x: 204.94, y: 19.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 210.99, y: 21.34))
        audioWaves.addCurve(to: CGPoint(x: 210.94, y: 20.95), controlPoint1: CGPoint(x: 210.98, y: 21.21), controlPoint2: CGPoint(x: 210.97, y: 21.08))
        audioWaves.addCurve(to: CGPoint(x: 210.5, y: 20.26), controlPoint1: CGPoint(x: 210.86, y: 20.68), controlPoint2: CGPoint(x: 210.71, y: 20.44))
        audioWaves.addCurve(to: CGPoint(x: 209.75, y: 20), controlPoint1: CGPoint(x: 210.28, y: 20.09), controlPoint2: CGPoint(x: 210.02, y: 20))
        audioWaves.addCurve(to: CGPoint(x: 209.01, y: 20.26), controlPoint1: CGPoint(x: 209.48, y: 20), controlPoint2: CGPoint(x: 209.22, y: 20.09))
        audioWaves.addCurve(to: CGPoint(x: 208.57, y: 20.95), controlPoint1: CGPoint(x: 208.79, y: 20.44), controlPoint2: CGPoint(x: 208.64, y: 20.68))
        audioWaves.addCurve(to: CGPoint(x: 208.51, y: 21.34), controlPoint1: CGPoint(x: 208.53, y: 21.08), controlPoint2: CGPoint(x: 208.52, y: 21.21))
        audioWaves.addCurve(to: CGPoint(x: 208.5, y: 21.78), controlPoint1: CGPoint(x: 208.5, y: 21.49), controlPoint2: CGPoint(x: 208.5, y: 21.64))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 21.79))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 36.21))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 36.21))
        audioWaves.addCurve(to: CGPoint(x: 208.51, y: 36.66), controlPoint1: CGPoint(x: 208.5, y: 36.36), controlPoint2: CGPoint(x: 208.5, y: 36.51))
        audioWaves.addCurve(to: CGPoint(x: 208.57, y: 37.05), controlPoint1: CGPoint(x: 208.52, y: 36.79), controlPoint2: CGPoint(x: 208.53, y: 36.92))
        audioWaves.addCurve(to: CGPoint(x: 209.01, y: 37.74), controlPoint1: CGPoint(x: 208.64, y: 37.32), controlPoint2: CGPoint(x: 208.79, y: 37.56))
        audioWaves.addCurve(to: CGPoint(x: 209.75, y: 38), controlPoint1: CGPoint(x: 209.22, y: 37.91), controlPoint2: CGPoint(x: 209.48, y: 38))
        audioWaves.addCurve(to: CGPoint(x: 210.5, y: 37.74), controlPoint1: CGPoint(x: 210.02, y: 38), controlPoint2: CGPoint(x: 210.28, y: 37.91))
        audioWaves.addCurve(to: CGPoint(x: 210.94, y: 37.05), controlPoint1: CGPoint(x: 210.71, y: 37.56), controlPoint2: CGPoint(x: 210.86, y: 37.32))
        audioWaves.addCurve(to: CGPoint(x: 210.99, y: 36.66), controlPoint1: CGPoint(x: 210.97, y: 36.92), controlPoint2: CGPoint(x: 210.98, y: 36.79))
        audioWaves.addCurve(to: CGPoint(x: 211, y: 36.21), controlPoint1: CGPoint(x: 211, y: 36.51), controlPoint2: CGPoint(x: 211, y: 36.36))
        audioWaves.addLine(to: CGPoint(x: 211, y: 36.21))
        audioWaves.addLine(to: CGPoint(x: 211, y: 21.79))
        audioWaves.addLine(to: CGPoint(x: 211, y: 21.78))
        audioWaves.addCurve(to: CGPoint(x: 210.99, y: 21.34), controlPoint1: CGPoint(x: 211, y: 21.64), controlPoint2: CGPoint(x: 211, y: 21.49))
        audioWaves.addLine(to: CGPoint(x: 210.99, y: 21.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 216.49, y: 12.34))
        audioWaves.addCurve(to: CGPoint(x: 216.44, y: 11.95), controlPoint1: CGPoint(x: 216.48, y: 12.21), controlPoint2: CGPoint(x: 216.47, y: 12.08))
        audioWaves.addCurve(to: CGPoint(x: 216, y: 11.26), controlPoint1: CGPoint(x: 216.36, y: 11.67), controlPoint2: CGPoint(x: 216.21, y: 11.44))
        audioWaves.addCurve(to: CGPoint(x: 215.25, y: 11), controlPoint1: CGPoint(x: 215.78, y: 11.09), controlPoint2: CGPoint(x: 215.52, y: 11))
        audioWaves.addCurve(to: CGPoint(x: 214.51, y: 11.26), controlPoint1: CGPoint(x: 214.98, y: 11), controlPoint2: CGPoint(x: 214.72, y: 11.09))
        audioWaves.addCurve(to: CGPoint(x: 214.07, y: 11.95), controlPoint1: CGPoint(x: 214.29, y: 11.44), controlPoint2: CGPoint(x: 214.14, y: 11.67))
        audioWaves.addCurve(to: CGPoint(x: 214.01, y: 12.34), controlPoint1: CGPoint(x: 214.03, y: 12.08), controlPoint2: CGPoint(x: 214.02, y: 12.21))
        audioWaves.addCurve(to: CGPoint(x: 214, y: 12.78), controlPoint1: CGPoint(x: 214, y: 12.49), controlPoint2: CGPoint(x: 214, y: 12.64))
        audioWaves.addLine(to: CGPoint(x: 214, y: 12.79))
        audioWaves.addLine(to: CGPoint(x: 214, y: 45.21))
        audioWaves.addLine(to: CGPoint(x: 214, y: 45.21))
        audioWaves.addCurve(to: CGPoint(x: 214.01, y: 45.66), controlPoint1: CGPoint(x: 214, y: 45.36), controlPoint2: CGPoint(x: 214, y: 45.51))
        audioWaves.addCurve(to: CGPoint(x: 214.07, y: 46.05), controlPoint1: CGPoint(x: 214.02, y: 45.79), controlPoint2: CGPoint(x: 214.03, y: 45.92))
        audioWaves.addCurve(to: CGPoint(x: 214.51, y: 46.74), controlPoint1: CGPoint(x: 214.14, y: 46.32), controlPoint2: CGPoint(x: 214.29, y: 46.56))
        audioWaves.addCurve(to: CGPoint(x: 215.25, y: 47), controlPoint1: CGPoint(x: 214.72, y: 46.91), controlPoint2: CGPoint(x: 214.98, y: 47))
        audioWaves.addCurve(to: CGPoint(x: 216, y: 46.74), controlPoint1: CGPoint(x: 215.52, y: 47), controlPoint2: CGPoint(x: 215.78, y: 46.91))
        audioWaves.addCurve(to: CGPoint(x: 216.44, y: 46.05), controlPoint1: CGPoint(x: 216.21, y: 46.56), controlPoint2: CGPoint(x: 216.36, y: 46.32))
        audioWaves.addCurve(to: CGPoint(x: 216.49, y: 45.66), controlPoint1: CGPoint(x: 216.47, y: 45.92), controlPoint2: CGPoint(x: 216.48, y: 45.79))
        audioWaves.addCurve(to: CGPoint(x: 216.5, y: 45.21), controlPoint1: CGPoint(x: 216.5, y: 45.51), controlPoint2: CGPoint(x: 216.5, y: 45.36))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 45.21))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 12.79))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 12.78))
        audioWaves.addCurve(to: CGPoint(x: 216.49, y: 12.34), controlPoint1: CGPoint(x: 216.5, y: 12.64), controlPoint2: CGPoint(x: 216.5, y: 12.49))
        audioWaves.addLine(to: CGPoint(x: 216.49, y: 12.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 222.49, y: 13.34))
        audioWaves.addCurve(to: CGPoint(x: 222.44, y: 12.95), controlPoint1: CGPoint(x: 222.48, y: 13.21), controlPoint2: CGPoint(x: 222.47, y: 13.08))
        audioWaves.addCurve(to: CGPoint(x: 222, y: 12.26), controlPoint1: CGPoint(x: 222.36, y: 12.67), controlPoint2: CGPoint(x: 222.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 221.25, y: 12), controlPoint1: CGPoint(x: 221.78, y: 12.09), controlPoint2: CGPoint(x: 221.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 220.51, y: 12.26), controlPoint1: CGPoint(x: 220.98, y: 12), controlPoint2: CGPoint(x: 220.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 220.07, y: 12.95), controlPoint1: CGPoint(x: 220.29, y: 12.44), controlPoint2: CGPoint(x: 220.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 220.01, y: 13.34), controlPoint1: CGPoint(x: 220.03, y: 13.08), controlPoint2: CGPoint(x: 220.01, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 220, y: 13.78), controlPoint1: CGPoint(x: 220, y: 13.49), controlPoint2: CGPoint(x: 220, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 220, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 220, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 220, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 220.01, y: 44.66), controlPoint1: CGPoint(x: 220, y: 44.36), controlPoint2: CGPoint(x: 220, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 220.07, y: 45.05), controlPoint1: CGPoint(x: 220.01, y: 44.79), controlPoint2: CGPoint(x: 220.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 220.51, y: 45.74), controlPoint1: CGPoint(x: 220.14, y: 45.32), controlPoint2: CGPoint(x: 220.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 221.25, y: 46), controlPoint1: CGPoint(x: 220.72, y: 45.91), controlPoint2: CGPoint(x: 220.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 222, y: 45.74), controlPoint1: CGPoint(x: 221.52, y: 46), controlPoint2: CGPoint(x: 221.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 222.44, y: 45.05), controlPoint1: CGPoint(x: 222.21, y: 45.56), controlPoint2: CGPoint(x: 222.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 222.49, y: 44.66), controlPoint1: CGPoint(x: 222.47, y: 44.92), controlPoint2: CGPoint(x: 222.48, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 222.5, y: 44.21), controlPoint1: CGPoint(x: 222.5, y: 44.51), controlPoint2: CGPoint(x: 222.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 222.49, y: 13.34), controlPoint1: CGPoint(x: 222.5, y: 13.64), controlPoint2: CGPoint(x: 222.5, y: 13.49))
        audioWaves.addLine(to: CGPoint(x: 222.49, y: 13.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 228.44, y: 19.95))
        audioWaves.addCurve(to: CGPoint(x: 228, y: 19.26), controlPoint1: CGPoint(x: 228.36, y: 19.68), controlPoint2: CGPoint(x: 228.21, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 227.25, y: 19), controlPoint1: CGPoint(x: 227.78, y: 19.09), controlPoint2: CGPoint(x: 227.52, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 226.51, y: 19.26), controlPoint1: CGPoint(x: 226.98, y: 19), controlPoint2: CGPoint(x: 226.72, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 226.07, y: 19.95), controlPoint1: CGPoint(x: 226.29, y: 19.44), controlPoint2: CGPoint(x: 226.14, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 226.01, y: 20.34), controlPoint1: CGPoint(x: 226.03, y: 20.08), controlPoint2: CGPoint(x: 226.01, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 226, y: 20.78), controlPoint1: CGPoint(x: 226, y: 20.49), controlPoint2: CGPoint(x: 226, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 226, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 226.01, y: 37.66), controlPoint1: CGPoint(x: 226, y: 37.36), controlPoint2: CGPoint(x: 226, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 226.07, y: 38.05), controlPoint1: CGPoint(x: 226.01, y: 37.79), controlPoint2: CGPoint(x: 226.03, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 226.51, y: 38.74), controlPoint1: CGPoint(x: 226.14, y: 38.32), controlPoint2: CGPoint(x: 226.29, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 227.25, y: 39), controlPoint1: CGPoint(x: 226.72, y: 38.91), controlPoint2: CGPoint(x: 226.98, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 228, y: 38.74), controlPoint1: CGPoint(x: 227.52, y: 39), controlPoint2: CGPoint(x: 227.78, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 228.44, y: 38.05), controlPoint1: CGPoint(x: 228.21, y: 38.56), controlPoint2: CGPoint(x: 228.36, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 228.49, y: 37.66), controlPoint1: CGPoint(x: 228.47, y: 37.92), controlPoint2: CGPoint(x: 228.48, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 228.5, y: 37.21), controlPoint1: CGPoint(x: 228.5, y: 37.51), controlPoint2: CGPoint(x: 228.5, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 228.5, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 228.49, y: 20.34), controlPoint1: CGPoint(x: 228.5, y: 20.64), controlPoint2: CGPoint(x: 228.5, y: 20.49))
        audioWaves.addCurve(to: CGPoint(x: 228.44, y: 19.95), controlPoint1: CGPoint(x: 228.48, y: 20.21), controlPoint2: CGPoint(x: 228.47, y: 20.08))
        audioWaves.addLine(to: CGPoint(x: 228.44, y: 19.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 234.49, y: 14.34))
        audioWaves.addCurve(to: CGPoint(x: 234.44, y: 13.95), controlPoint1: CGPoint(x: 234.48, y: 14.21), controlPoint2: CGPoint(x: 234.47, y: 14.08))
        audioWaves.addCurve(to: CGPoint(x: 234, y: 13.26), controlPoint1: CGPoint(x: 234.36, y: 13.67), controlPoint2: CGPoint(x: 234.21, y: 13.44))
        audioWaves.addCurve(to: CGPoint(x: 233.25, y: 13), controlPoint1: CGPoint(x: 233.78, y: 13.09), controlPoint2: CGPoint(x: 233.52, y: 13))
        audioWaves.addCurve(to: CGPoint(x: 232.51, y: 13.26), controlPoint1: CGPoint(x: 232.98, y: 13), controlPoint2: CGPoint(x: 232.72, y: 13.09))
        audioWaves.addCurve(to: CGPoint(x: 232.07, y: 13.95), controlPoint1: CGPoint(x: 232.29, y: 13.44), controlPoint2: CGPoint(x: 232.14, y: 13.67))
        audioWaves.addCurve(to: CGPoint(x: 232.01, y: 14.34), controlPoint1: CGPoint(x: 232.03, y: 14.08), controlPoint2: CGPoint(x: 232.01, y: 14.21))
        audioWaves.addCurve(to: CGPoint(x: 232, y: 14.78), controlPoint1: CGPoint(x: 232, y: 14.49), controlPoint2: CGPoint(x: 232, y: 14.64))
        audioWaves.addLine(to: CGPoint(x: 232, y: 14.79))
        audioWaves.addLine(to: CGPoint(x: 232, y: 43.21))
        audioWaves.addLine(to: CGPoint(x: 232, y: 43.21))
        audioWaves.addCurve(to: CGPoint(x: 232.01, y: 43.66), controlPoint1: CGPoint(x: 232, y: 43.36), controlPoint2: CGPoint(x: 232, y: 43.51))
        audioWaves.addCurve(to: CGPoint(x: 232.07, y: 44.05), controlPoint1: CGPoint(x: 232.01, y: 43.79), controlPoint2: CGPoint(x: 232.03, y: 43.92))
        audioWaves.addCurve(to: CGPoint(x: 232.51, y: 44.74), controlPoint1: CGPoint(x: 232.14, y: 44.32), controlPoint2: CGPoint(x: 232.29, y: 44.56))
        audioWaves.addCurve(to: CGPoint(x: 233.25, y: 45), controlPoint1: CGPoint(x: 232.72, y: 44.91), controlPoint2: CGPoint(x: 232.98, y: 45))
        audioWaves.addCurve(to: CGPoint(x: 234, y: 44.74), controlPoint1: CGPoint(x: 233.52, y: 45), controlPoint2: CGPoint(x: 233.78, y: 44.91))
        audioWaves.addCurve(to: CGPoint(x: 234.44, y: 44.05), controlPoint1: CGPoint(x: 234.21, y: 44.56), controlPoint2: CGPoint(x: 234.36, y: 44.32))
        audioWaves.addCurve(to: CGPoint(x: 234.49, y: 43.66), controlPoint1: CGPoint(x: 234.47, y: 43.92), controlPoint2: CGPoint(x: 234.48, y: 43.79))
        audioWaves.addCurve(to: CGPoint(x: 234.5, y: 43.21), controlPoint1: CGPoint(x: 234.5, y: 43.51), controlPoint2: CGPoint(x: 234.5, y: 43.36))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 43.21))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 14.79))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 14.78))
        audioWaves.addCurve(to: CGPoint(x: 234.49, y: 14.34), controlPoint1: CGPoint(x: 234.5, y: 14.64), controlPoint2: CGPoint(x: 234.5, y: 14.49))
        audioWaves.addLine(to: CGPoint(x: 234.49, y: 14.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 240.44, y: 0.95))
        audioWaves.addCurve(to: CGPoint(x: 240, y: 0.26), controlPoint1: CGPoint(x: 240.36, y: 0.67), controlPoint2: CGPoint(x: 240.21, y: 0.44))
        audioWaves.addCurve(to: CGPoint(x: 239.25, y: 0), controlPoint1: CGPoint(x: 239.78, y: 0.09), controlPoint2: CGPoint(x: 239.52, y: 0))
        audioWaves.addCurve(to: CGPoint(x: 238.51, y: 0.26), controlPoint1: CGPoint(x: 238.98, y: 0), controlPoint2: CGPoint(x: 238.72, y: 0.09))
        audioWaves.addCurve(to: CGPoint(x: 238.07, y: 0.95), controlPoint1: CGPoint(x: 238.29, y: 0.44), controlPoint2: CGPoint(x: 238.14, y: 0.67))
        audioWaves.addCurve(to: CGPoint(x: 238.01, y: 1.34), controlPoint1: CGPoint(x: 238.03, y: 1.08), controlPoint2: CGPoint(x: 238.01, y: 1.21))
        audioWaves.addCurve(to: CGPoint(x: 238, y: 1.78), controlPoint1: CGPoint(x: 238, y: 1.49), controlPoint2: CGPoint(x: 238, y: 1.64))
        audioWaves.addLine(to: CGPoint(x: 238, y: 56.21))
        audioWaves.addCurve(to: CGPoint(x: 238.01, y: 56.66), controlPoint1: CGPoint(x: 238, y: 56.36), controlPoint2: CGPoint(x: 238, y: 56.51))
        audioWaves.addCurve(to: CGPoint(x: 238.07, y: 57.05), controlPoint1: CGPoint(x: 238.01, y: 56.79), controlPoint2: CGPoint(x: 238.03, y: 56.92))
        audioWaves.addCurve(to: CGPoint(x: 238.51, y: 57.74), controlPoint1: CGPoint(x: 238.14, y: 57.32), controlPoint2: CGPoint(x: 238.29, y: 57.56))
        audioWaves.addCurve(to: CGPoint(x: 239.25, y: 58), controlPoint1: CGPoint(x: 238.72, y: 57.91), controlPoint2: CGPoint(x: 238.98, y: 58))
        audioWaves.addCurve(to: CGPoint(x: 240, y: 57.74), controlPoint1: CGPoint(x: 239.52, y: 58), controlPoint2: CGPoint(x: 239.78, y: 57.91))
        audioWaves.addCurve(to: CGPoint(x: 240.44, y: 57.05), controlPoint1: CGPoint(x: 240.21, y: 57.56), controlPoint2: CGPoint(x: 240.36, y: 57.32))
        audioWaves.addCurve(to: CGPoint(x: 240.49, y: 56.66), controlPoint1: CGPoint(x: 240.47, y: 56.92), controlPoint2: CGPoint(x: 240.48, y: 56.79))
        audioWaves.addCurve(to: CGPoint(x: 240.5, y: 56.21), controlPoint1: CGPoint(x: 240.5, y: 56.51), controlPoint2: CGPoint(x: 240.5, y: 56.36))
        audioWaves.addLine(to: CGPoint(x: 240.5, y: 1.78))
        audioWaves.addCurve(to: CGPoint(x: 240.49, y: 1.34), controlPoint1: CGPoint(x: 240.5, y: 1.64), controlPoint2: CGPoint(x: 240.5, y: 1.49))
        audioWaves.addCurve(to: CGPoint(x: 240.44, y: 0.95), controlPoint1: CGPoint(x: 240.48, y: 1.21), controlPoint2: CGPoint(x: 240.47, y: 1.08))
        audioWaves.addLine(to: CGPoint(x: 240.44, y: 0.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 246.49, y: 19.34))
        audioWaves.addCurve(to: CGPoint(x: 246.44, y: 18.95), controlPoint1: CGPoint(x: 246.48, y: 19.21), controlPoint2: CGPoint(x: 246.47, y: 19.08))
        audioWaves.addCurve(to: CGPoint(x: 246, y: 18.26), controlPoint1: CGPoint(x: 246.36, y: 18.68), controlPoint2: CGPoint(x: 246.21, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 245.25, y: 18), controlPoint1: CGPoint(x: 245.78, y: 18.09), controlPoint2: CGPoint(x: 245.52, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 244.51, y: 18.26), controlPoint1: CGPoint(x: 244.98, y: 18), controlPoint2: CGPoint(x: 244.72, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 244.07, y: 18.95), controlPoint1: CGPoint(x: 244.29, y: 18.44), controlPoint2: CGPoint(x: 244.14, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 244.01, y: 19.34), controlPoint1: CGPoint(x: 244.03, y: 19.08), controlPoint2: CGPoint(x: 244.01, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 244, y: 19.78), controlPoint1: CGPoint(x: 244, y: 19.49), controlPoint2: CGPoint(x: 244, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 244, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 244, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 244, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 244.01, y: 38.66), controlPoint1: CGPoint(x: 244, y: 38.36), controlPoint2: CGPoint(x: 244, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 244.07, y: 39.05), controlPoint1: CGPoint(x: 244.01, y: 38.79), controlPoint2: CGPoint(x: 244.03, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 244.51, y: 39.74), controlPoint1: CGPoint(x: 244.14, y: 39.32), controlPoint2: CGPoint(x: 244.29, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 245.25, y: 40), controlPoint1: CGPoint(x: 244.72, y: 39.91), controlPoint2: CGPoint(x: 244.98, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 246, y: 39.74), controlPoint1: CGPoint(x: 245.52, y: 40), controlPoint2: CGPoint(x: 245.78, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 246.44, y: 39.05), controlPoint1: CGPoint(x: 246.21, y: 39.56), controlPoint2: CGPoint(x: 246.36, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 246.49, y: 38.66), controlPoint1: CGPoint(x: 246.47, y: 38.92), controlPoint2: CGPoint(x: 246.48, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 246.5, y: 38.21), controlPoint1: CGPoint(x: 246.5, y: 38.51), controlPoint2: CGPoint(x: 246.5, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 246.49, y: 19.34), controlPoint1: CGPoint(x: 246.5, y: 19.64), controlPoint2: CGPoint(x: 246.5, y: 19.49))
        audioWaves.addLine(to: CGPoint(x: 246.49, y: 19.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 252.44, y: 21.95))
        audioWaves.addCurve(to: CGPoint(x: 252, y: 21.26), controlPoint1: CGPoint(x: 252.36, y: 21.68), controlPoint2: CGPoint(x: 252.21, y: 21.44))
        audioWaves.addCurve(to: CGPoint(x: 251.25, y: 21), controlPoint1: CGPoint(x: 251.78, y: 21.09), controlPoint2: CGPoint(x: 251.52, y: 21))
        audioWaves.addCurve(to: CGPoint(x: 250.51, y: 21.26), controlPoint1: CGPoint(x: 250.98, y: 21), controlPoint2: CGPoint(x: 250.72, y: 21.09))
        audioWaves.addCurve(to: CGPoint(x: 250.07, y: 21.95), controlPoint1: CGPoint(x: 250.29, y: 21.44), controlPoint2: CGPoint(x: 250.14, y: 21.68))
        audioWaves.addCurve(to: CGPoint(x: 250.01, y: 22.34), controlPoint1: CGPoint(x: 250.03, y: 22.08), controlPoint2: CGPoint(x: 250.01, y: 22.21))
        audioWaves.addCurve(to: CGPoint(x: 250, y: 22.78), controlPoint1: CGPoint(x: 250, y: 22.49), controlPoint2: CGPoint(x: 250, y: 22.64))
        audioWaves.addLine(to: CGPoint(x: 250, y: 35.21))
        audioWaves.addCurve(to: CGPoint(x: 250.01, y: 35.66), controlPoint1: CGPoint(x: 250, y: 35.36), controlPoint2: CGPoint(x: 250, y: 35.51))
        audioWaves.addCurve(to: CGPoint(x: 250.07, y: 36.05), controlPoint1: CGPoint(x: 250.01, y: 35.79), controlPoint2: CGPoint(x: 250.03, y: 35.92))
        audioWaves.addCurve(to: CGPoint(x: 250.51, y: 36.74), controlPoint1: CGPoint(x: 250.14, y: 36.32), controlPoint2: CGPoint(x: 250.29, y: 36.56))
        audioWaves.addCurve(to: CGPoint(x: 251.25, y: 37), controlPoint1: CGPoint(x: 250.72, y: 36.91), controlPoint2: CGPoint(x: 250.98, y: 37))
        audioWaves.addCurve(to: CGPoint(x: 252, y: 36.74), controlPoint1: CGPoint(x: 251.52, y: 37), controlPoint2: CGPoint(x: 251.78, y: 36.91))
        audioWaves.addCurve(to: CGPoint(x: 252.44, y: 36.05), controlPoint1: CGPoint(x: 252.21, y: 36.56), controlPoint2: CGPoint(x: 252.36, y: 36.32))
        audioWaves.addCurve(to: CGPoint(x: 252.49, y: 35.66), controlPoint1: CGPoint(x: 252.47, y: 35.92), controlPoint2: CGPoint(x: 252.48, y: 35.79))
        audioWaves.addCurve(to: CGPoint(x: 252.5, y: 35.21), controlPoint1: CGPoint(x: 252.5, y: 35.51), controlPoint2: CGPoint(x: 252.5, y: 35.36))
        audioWaves.addLine(to: CGPoint(x: 252.5, y: 22.78))
        audioWaves.addCurve(to: CGPoint(x: 252.49, y: 22.34), controlPoint1: CGPoint(x: 252.5, y: 22.64), controlPoint2: CGPoint(x: 252.5, y: 22.49))
        audioWaves.addCurve(to: CGPoint(x: 252.44, y: 21.95), controlPoint1: CGPoint(x: 252.48, y: 22.21), controlPoint2: CGPoint(x: 252.47, y: 22.08))
        audioWaves.addLine(to: CGPoint(x: 252.44, y: 21.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 258.49, y: 19.34))
        audioWaves.addCurve(to: CGPoint(x: 258.44, y: 18.95), controlPoint1: CGPoint(x: 258.49, y: 19.21), controlPoint2: CGPoint(x: 258.47, y: 19.08))
        audioWaves.addCurve(to: CGPoint(x: 258, y: 18.26), controlPoint1: CGPoint(x: 258.36, y: 18.68), controlPoint2: CGPoint(x: 258.21, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 257.25, y: 18), controlPoint1: CGPoint(x: 257.78, y: 18.09), controlPoint2: CGPoint(x: 257.52, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 256.51, y: 18.26), controlPoint1: CGPoint(x: 256.98, y: 18), controlPoint2: CGPoint(x: 256.72, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 256.07, y: 18.95), controlPoint1: CGPoint(x: 256.29, y: 18.44), controlPoint2: CGPoint(x: 256.14, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 256.01, y: 19.34), controlPoint1: CGPoint(x: 256.03, y: 19.08), controlPoint2: CGPoint(x: 256.01, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 256, y: 19.78), controlPoint1: CGPoint(x: 256, y: 19.49), controlPoint2: CGPoint(x: 256, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 256, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 256, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 256, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 256.01, y: 38.66), controlPoint1: CGPoint(x: 256, y: 38.36), controlPoint2: CGPoint(x: 256, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 256.07, y: 39.05), controlPoint1: CGPoint(x: 256.01, y: 38.79), controlPoint2: CGPoint(x: 256.03, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 256.51, y: 39.74), controlPoint1: CGPoint(x: 256.14, y: 39.32), controlPoint2: CGPoint(x: 256.29, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 257.25, y: 40), controlPoint1: CGPoint(x: 256.72, y: 39.91), controlPoint2: CGPoint(x: 256.98, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 258, y: 39.74), controlPoint1: CGPoint(x: 257.52, y: 40), controlPoint2: CGPoint(x: 257.78, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 258.44, y: 39.05), controlPoint1: CGPoint(x: 258.21, y: 39.56), controlPoint2: CGPoint(x: 258.36, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 258.49, y: 38.66), controlPoint1: CGPoint(x: 258.47, y: 38.92), controlPoint2: CGPoint(x: 258.49, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 258.5, y: 38.21), controlPoint1: CGPoint(x: 258.5, y: 38.51), controlPoint2: CGPoint(x: 258.5, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 258.49, y: 19.34), controlPoint1: CGPoint(x: 258.5, y: 19.64), controlPoint2: CGPoint(x: 258.5, y: 19.49))
        audioWaves.addLine(to: CGPoint(x: 258.49, y: 19.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 264.44, y: 23.95))
        audioWaves.addCurve(to: CGPoint(x: 264, y: 23.26), controlPoint1: CGPoint(x: 264.36, y: 23.68), controlPoint2: CGPoint(x: 264.21, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 263.25, y: 23), controlPoint1: CGPoint(x: 263.78, y: 23.09), controlPoint2: CGPoint(x: 263.52, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 262.51, y: 23.26), controlPoint1: CGPoint(x: 262.98, y: 23), controlPoint2: CGPoint(x: 262.72, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 262.07, y: 23.95), controlPoint1: CGPoint(x: 262.29, y: 23.44), controlPoint2: CGPoint(x: 262.14, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 262.01, y: 24.34), controlPoint1: CGPoint(x: 262.03, y: 24.08), controlPoint2: CGPoint(x: 262.01, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 262, y: 24.78), controlPoint1: CGPoint(x: 262, y: 24.49), controlPoint2: CGPoint(x: 262, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 262, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 262.01, y: 33.66), controlPoint1: CGPoint(x: 262, y: 33.36), controlPoint2: CGPoint(x: 262, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 262.07, y: 34.05), controlPoint1: CGPoint(x: 262.01, y: 33.79), controlPoint2: CGPoint(x: 262.03, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 262.51, y: 34.74), controlPoint1: CGPoint(x: 262.14, y: 34.32), controlPoint2: CGPoint(x: 262.29, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 263.25, y: 35), controlPoint1: CGPoint(x: 262.72, y: 34.91), controlPoint2: CGPoint(x: 262.98, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 264, y: 34.74), controlPoint1: CGPoint(x: 263.52, y: 35), controlPoint2: CGPoint(x: 263.78, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 264.44, y: 34.05), controlPoint1: CGPoint(x: 264.21, y: 34.56), controlPoint2: CGPoint(x: 264.36, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 264.49, y: 33.66), controlPoint1: CGPoint(x: 264.47, y: 33.92), controlPoint2: CGPoint(x: 264.49, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 264.5, y: 33.21), controlPoint1: CGPoint(x: 264.5, y: 33.51), controlPoint2: CGPoint(x: 264.5, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 264.5, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 264.49, y: 24.34), controlPoint1: CGPoint(x: 264.5, y: 24.64), controlPoint2: CGPoint(x: 264.5, y: 24.49))
        audioWaves.addCurve(to: CGPoint(x: 264.44, y: 23.95), controlPoint1: CGPoint(x: 264.49, y: 24.21), controlPoint2: CGPoint(x: 264.47, y: 24.08))
        audioWaves.addLine(to: CGPoint(x: 264.44, y: 23.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 270.49, y: 5.34))
        audioWaves.addCurve(to: CGPoint(x: 270.44, y: 4.95), controlPoint1: CGPoint(x: 270.49, y: 5.21), controlPoint2: CGPoint(x: 270.47, y: 5.08))
        audioWaves.addCurve(to: CGPoint(x: 270, y: 4.26), controlPoint1: CGPoint(x: 270.36, y: 4.68), controlPoint2: CGPoint(x: 270.21, y: 4.44))
        audioWaves.addCurve(to: CGPoint(x: 269.25, y: 4), controlPoint1: CGPoint(x: 269.78, y: 4.09), controlPoint2: CGPoint(x: 269.52, y: 4))
        audioWaves.addCurve(to: CGPoint(x: 268.51, y: 4.26), controlPoint1: CGPoint(x: 268.98, y: 4), controlPoint2: CGPoint(x: 268.72, y: 4.09))
        audioWaves.addCurve(to: CGPoint(x: 268.07, y: 4.95), controlPoint1: CGPoint(x: 268.29, y: 4.44), controlPoint2: CGPoint(x: 268.14, y: 4.68))
        audioWaves.addCurve(to: CGPoint(x: 268.01, y: 5.34), controlPoint1: CGPoint(x: 268.03, y: 5.08), controlPoint2: CGPoint(x: 268.01, y: 5.21))
        audioWaves.addCurve(to: CGPoint(x: 268, y: 5.78), controlPoint1: CGPoint(x: 268, y: 5.49), controlPoint2: CGPoint(x: 268, y: 5.64))
        audioWaves.addLine(to: CGPoint(x: 268, y: 5.79))
        audioWaves.addLine(to: CGPoint(x: 268, y: 52.21))
        audioWaves.addLine(to: CGPoint(x: 268, y: 52.21))
        audioWaves.addCurve(to: CGPoint(x: 268.01, y: 52.66), controlPoint1: CGPoint(x: 268, y: 52.36), controlPoint2: CGPoint(x: 268, y: 52.51))
        audioWaves.addCurve(to: CGPoint(x: 268.07, y: 53.05), controlPoint1: CGPoint(x: 268.01, y: 52.79), controlPoint2: CGPoint(x: 268.03, y: 52.92))
        audioWaves.addCurve(to: CGPoint(x: 268.51, y: 53.74), controlPoint1: CGPoint(x: 268.14, y: 53.32), controlPoint2: CGPoint(x: 268.29, y: 53.56))
        audioWaves.addCurve(to: CGPoint(x: 269.25, y: 54), controlPoint1: CGPoint(x: 268.72, y: 53.91), controlPoint2: CGPoint(x: 268.98, y: 54))
        audioWaves.addCurve(to: CGPoint(x: 270, y: 53.74), controlPoint1: CGPoint(x: 269.52, y: 54), controlPoint2: CGPoint(x: 269.78, y: 53.91))
        audioWaves.addCurve(to: CGPoint(x: 270.44, y: 53.05), controlPoint1: CGPoint(x: 270.21, y: 53.56), controlPoint2: CGPoint(x: 270.36, y: 53.32))
        audioWaves.addCurve(to: CGPoint(x: 270.49, y: 52.66), controlPoint1: CGPoint(x: 270.47, y: 52.92), controlPoint2: CGPoint(x: 270.49, y: 52.79))
        audioWaves.addCurve(to: CGPoint(x: 270.5, y: 52.21), controlPoint1: CGPoint(x: 270.5, y: 52.51), controlPoint2: CGPoint(x: 270.5, y: 52.36))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 52.21))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 5.79))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 5.78))
        audioWaves.addCurve(to: CGPoint(x: 270.49, y: 5.34), controlPoint1: CGPoint(x: 270.5, y: 5.64), controlPoint2: CGPoint(x: 270.5, y: 5.49))
        audioWaves.addLine(to: CGPoint(x: 270.49, y: 5.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 276.44, y: 17.45))
        audioWaves.addCurve(to: CGPoint(x: 276, y: 16.76), controlPoint1: CGPoint(x: 276.36, y: 17.18), controlPoint2: CGPoint(x: 276.21, y: 16.94))
        audioWaves.addCurve(to: CGPoint(x: 275.25, y: 16.5), controlPoint1: CGPoint(x: 275.78, y: 16.59), controlPoint2: CGPoint(x: 275.52, y: 16.5))
        audioWaves.addCurve(to: CGPoint(x: 274.51, y: 16.76), controlPoint1: CGPoint(x: 274.98, y: 16.5), controlPoint2: CGPoint(x: 274.72, y: 16.59))
        audioWaves.addCurve(to: CGPoint(x: 274.07, y: 17.45), controlPoint1: CGPoint(x: 274.29, y: 16.94), controlPoint2: CGPoint(x: 274.14, y: 17.18))
        audioWaves.addCurve(to: CGPoint(x: 274.01, y: 17.84), controlPoint1: CGPoint(x: 274.03, y: 17.58), controlPoint2: CGPoint(x: 274.01, y: 17.71))
        audioWaves.addCurve(to: CGPoint(x: 274, y: 18.28), controlPoint1: CGPoint(x: 274, y: 17.99), controlPoint2: CGPoint(x: 274, y: 18.14))
        audioWaves.addLine(to: CGPoint(x: 274, y: 18.29))
        audioWaves.addLine(to: CGPoint(x: 274, y: 39.71))
        audioWaves.addLine(to: CGPoint(x: 274, y: 39.71))
        audioWaves.addCurve(to: CGPoint(x: 274.01, y: 40.16), controlPoint1: CGPoint(x: 274, y: 39.86), controlPoint2: CGPoint(x: 274, y: 40.01))
        audioWaves.addCurve(to: CGPoint(x: 274.07, y: 40.55), controlPoint1: CGPoint(x: 274.01, y: 40.29), controlPoint2: CGPoint(x: 274.03, y: 40.42))
        audioWaves.addCurve(to: CGPoint(x: 274.51, y: 41.24), controlPoint1: CGPoint(x: 274.14, y: 40.82), controlPoint2: CGPoint(x: 274.29, y: 41.06))
        audioWaves.addCurve(to: CGPoint(x: 275.25, y: 41.5), controlPoint1: CGPoint(x: 274.72, y: 41.41), controlPoint2: CGPoint(x: 274.98, y: 41.5))
        audioWaves.addCurve(to: CGPoint(x: 276, y: 41.24), controlPoint1: CGPoint(x: 275.52, y: 41.5), controlPoint2: CGPoint(x: 275.78, y: 41.41))
        audioWaves.addCurve(to: CGPoint(x: 276.44, y: 40.55), controlPoint1: CGPoint(x: 276.21, y: 41.06), controlPoint2: CGPoint(x: 276.36, y: 40.82))
        audioWaves.addCurve(to: CGPoint(x: 276.49, y: 40.16), controlPoint1: CGPoint(x: 276.47, y: 40.42), controlPoint2: CGPoint(x: 276.49, y: 40.29))
        audioWaves.addCurve(to: CGPoint(x: 276.5, y: 39.71), controlPoint1: CGPoint(x: 276.5, y: 40.01), controlPoint2: CGPoint(x: 276.5, y: 39.86))
        audioWaves.addLine(to: CGPoint(x: 276.5, y: 18.28))
        audioWaves.addCurve(to: CGPoint(x: 276.49, y: 17.84), controlPoint1: CGPoint(x: 276.5, y: 18.14), controlPoint2: CGPoint(x: 276.5, y: 17.99))
        audioWaves.addCurve(to: CGPoint(x: 276.44, y: 17.45), controlPoint1: CGPoint(x: 276.49, y: 17.71), controlPoint2: CGPoint(x: 276.47, y: 17.58))
        audioWaves.addLine(to: CGPoint(x: 276.44, y: 17.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 282.49, y: 25.34))
        audioWaves.addCurve(to: CGPoint(x: 282.44, y: 24.95), controlPoint1: CGPoint(x: 282.49, y: 25.21), controlPoint2: CGPoint(x: 282.47, y: 25.08))
        audioWaves.addCurve(to: CGPoint(x: 282, y: 24.26), controlPoint1: CGPoint(x: 282.36, y: 24.68), controlPoint2: CGPoint(x: 282.21, y: 24.44))
        audioWaves.addCurve(to: CGPoint(x: 281.25, y: 24), controlPoint1: CGPoint(x: 281.78, y: 24.09), controlPoint2: CGPoint(x: 281.52, y: 24))
        audioWaves.addCurve(to: CGPoint(x: 280.51, y: 24.26), controlPoint1: CGPoint(x: 280.98, y: 24), controlPoint2: CGPoint(x: 280.72, y: 24.09))
        audioWaves.addCurve(to: CGPoint(x: 280.07, y: 24.95), controlPoint1: CGPoint(x: 280.29, y: 24.44), controlPoint2: CGPoint(x: 280.14, y: 24.68))
        audioWaves.addCurve(to: CGPoint(x: 280.01, y: 25.34), controlPoint1: CGPoint(x: 280.03, y: 25.08), controlPoint2: CGPoint(x: 280.01, y: 25.21))
        audioWaves.addCurve(to: CGPoint(x: 280, y: 25.78), controlPoint1: CGPoint(x: 280, y: 25.49), controlPoint2: CGPoint(x: 280, y: 25.64))
        audioWaves.addLine(to: CGPoint(x: 280, y: 25.79))
        audioWaves.addLine(to: CGPoint(x: 280, y: 32.21))
        audioWaves.addLine(to: CGPoint(x: 280, y: 32.21))
        audioWaves.addCurve(to: CGPoint(x: 280.01, y: 32.66), controlPoint1: CGPoint(x: 280, y: 32.36), controlPoint2: CGPoint(x: 280, y: 32.51))
        audioWaves.addCurve(to: CGPoint(x: 280.07, y: 33.05), controlPoint1: CGPoint(x: 280.01, y: 32.79), controlPoint2: CGPoint(x: 280.03, y: 32.92))
        audioWaves.addCurve(to: CGPoint(x: 280.51, y: 33.74), controlPoint1: CGPoint(x: 280.14, y: 33.32), controlPoint2: CGPoint(x: 280.29, y: 33.56))
        audioWaves.addCurve(to: CGPoint(x: 281.25, y: 34), controlPoint1: CGPoint(x: 280.72, y: 33.91), controlPoint2: CGPoint(x: 280.98, y: 34))
        audioWaves.addCurve(to: CGPoint(x: 282, y: 33.74), controlPoint1: CGPoint(x: 281.52, y: 34), controlPoint2: CGPoint(x: 281.78, y: 33.91))
        audioWaves.addCurve(to: CGPoint(x: 282.44, y: 33.05), controlPoint1: CGPoint(x: 282.21, y: 33.56), controlPoint2: CGPoint(x: 282.36, y: 33.32))
        audioWaves.addCurve(to: CGPoint(x: 282.49, y: 32.66), controlPoint1: CGPoint(x: 282.47, y: 32.92), controlPoint2: CGPoint(x: 282.49, y: 32.79))
        audioWaves.addCurve(to: CGPoint(x: 282.5, y: 32.21), controlPoint1: CGPoint(x: 282.5, y: 32.51), controlPoint2: CGPoint(x: 282.5, y: 32.36))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 32.21))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 25.79))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 25.78))
        audioWaves.addCurve(to: CGPoint(x: 282.49, y: 25.34), controlPoint1: CGPoint(x: 282.5, y: 25.64), controlPoint2: CGPoint(x: 282.5, y: 25.49))
        audioWaves.addLine(to: CGPoint(x: 282.49, y: 25.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 287.94, y: 25.95))
        audioWaves.addCurve(to: CGPoint(x: 287.5, y: 25.26), controlPoint1: CGPoint(x: 287.86, y: 25.68), controlPoint2: CGPoint(x: 287.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 286.75, y: 25), controlPoint1: CGPoint(x: 287.28, y: 25.09), controlPoint2: CGPoint(x: 287.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 286.01, y: 25.26), controlPoint1: CGPoint(x: 286.48, y: 25), controlPoint2: CGPoint(x: 286.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 285.57, y: 25.95), controlPoint1: CGPoint(x: 285.79, y: 25.44), controlPoint2: CGPoint(x: 285.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 285.51, y: 26.34), controlPoint1: CGPoint(x: 285.53, y: 26.08), controlPoint2: CGPoint(x: 285.51, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 285.5, y: 26.78), controlPoint1: CGPoint(x: 285.5, y: 26.49), controlPoint2: CGPoint(x: 285.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 285.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 285.51, y: 31.66), controlPoint1: CGPoint(x: 285.5, y: 31.36), controlPoint2: CGPoint(x: 285.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 285.57, y: 32.05), controlPoint1: CGPoint(x: 285.51, y: 31.79), controlPoint2: CGPoint(x: 285.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 286.01, y: 32.74), controlPoint1: CGPoint(x: 285.64, y: 32.32), controlPoint2: CGPoint(x: 285.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 286.75, y: 33), controlPoint1: CGPoint(x: 286.22, y: 32.91), controlPoint2: CGPoint(x: 286.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 287.5, y: 32.74), controlPoint1: CGPoint(x: 287.02, y: 33), controlPoint2: CGPoint(x: 287.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 287.94, y: 32.05), controlPoint1: CGPoint(x: 287.71, y: 32.56), controlPoint2: CGPoint(x: 287.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 287.99, y: 31.66), controlPoint1: CGPoint(x: 287.97, y: 31.92), controlPoint2: CGPoint(x: 287.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 288, y: 31.22), controlPoint1: CGPoint(x: 288, y: 31.51), controlPoint2: CGPoint(x: 288, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 288, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 287.99, y: 26.34), controlPoint1: CGPoint(x: 288, y: 26.64), controlPoint2: CGPoint(x: 288, y: 26.49))
        audioWaves.addCurve(to: CGPoint(x: 287.94, y: 25.95), controlPoint1: CGPoint(x: 287.99, y: 26.21), controlPoint2: CGPoint(x: 287.97, y: 26.08))
        audioWaves.addLine(to: CGPoint(x: 287.94, y: 25.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 293.99, y: 17.34))
        audioWaves.addCurve(to: CGPoint(x: 293.94, y: 16.95), controlPoint1: CGPoint(x: 293.99, y: 17.21), controlPoint2: CGPoint(x: 293.97, y: 17.08))
        audioWaves.addCurve(to: CGPoint(x: 293.5, y: 16.26), controlPoint1: CGPoint(x: 293.86, y: 16.68), controlPoint2: CGPoint(x: 293.71, y: 16.44))
        audioWaves.addCurve(to: CGPoint(x: 292.75, y: 16), controlPoint1: CGPoint(x: 293.28, y: 16.09), controlPoint2: CGPoint(x: 293.02, y: 16))
        audioWaves.addCurve(to: CGPoint(x: 292.01, y: 16.26), controlPoint1: CGPoint(x: 292.48, y: 16), controlPoint2: CGPoint(x: 292.22, y: 16.09))
        audioWaves.addCurve(to: CGPoint(x: 291.57, y: 16.95), controlPoint1: CGPoint(x: 291.79, y: 16.44), controlPoint2: CGPoint(x: 291.64, y: 16.68))
        audioWaves.addCurve(to: CGPoint(x: 291.51, y: 17.34), controlPoint1: CGPoint(x: 291.53, y: 17.08), controlPoint2: CGPoint(x: 291.51, y: 17.21))
        audioWaves.addCurve(to: CGPoint(x: 291.5, y: 17.78), controlPoint1: CGPoint(x: 291.5, y: 17.49), controlPoint2: CGPoint(x: 291.5, y: 17.64))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 17.79))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 40.21))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 40.21))
        audioWaves.addCurve(to: CGPoint(x: 291.51, y: 40.66), controlPoint1: CGPoint(x: 291.5, y: 40.36), controlPoint2: CGPoint(x: 291.5, y: 40.51))
        audioWaves.addCurve(to: CGPoint(x: 291.57, y: 41.05), controlPoint1: CGPoint(x: 291.51, y: 40.79), controlPoint2: CGPoint(x: 291.53, y: 40.92))
        audioWaves.addCurve(to: CGPoint(x: 292.01, y: 41.74), controlPoint1: CGPoint(x: 291.64, y: 41.32), controlPoint2: CGPoint(x: 291.79, y: 41.56))
        audioWaves.addCurve(to: CGPoint(x: 292.75, y: 42), controlPoint1: CGPoint(x: 292.22, y: 41.91), controlPoint2: CGPoint(x: 292.48, y: 42))
        audioWaves.addCurve(to: CGPoint(x: 293.5, y: 41.74), controlPoint1: CGPoint(x: 293.02, y: 42), controlPoint2: CGPoint(x: 293.28, y: 41.91))
        audioWaves.addCurve(to: CGPoint(x: 293.94, y: 41.05), controlPoint1: CGPoint(x: 293.71, y: 41.56), controlPoint2: CGPoint(x: 293.86, y: 41.32))
        audioWaves.addCurve(to: CGPoint(x: 293.99, y: 40.66), controlPoint1: CGPoint(x: 293.97, y: 40.92), controlPoint2: CGPoint(x: 293.99, y: 40.79))
        audioWaves.addCurve(to: CGPoint(x: 294, y: 40.21), controlPoint1: CGPoint(x: 294, y: 40.51), controlPoint2: CGPoint(x: 294, y: 40.36))
        audioWaves.addLine(to: CGPoint(x: 294, y: 40.21))
        audioWaves.addLine(to: CGPoint(x: 294, y: 17.79))
        audioWaves.addLine(to: CGPoint(x: 294, y: 17.78))
        audioWaves.addCurve(to: CGPoint(x: 293.99, y: 17.34), controlPoint1: CGPoint(x: 294, y: 17.64), controlPoint2: CGPoint(x: 294, y: 17.49))
        audioWaves.addLine(to: CGPoint(x: 293.99, y: 17.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 299.94, y: 18.95))
        audioWaves.addCurve(to: CGPoint(x: 299.5, y: 18.26), controlPoint1: CGPoint(x: 299.86, y: 18.68), controlPoint2: CGPoint(x: 299.71, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 298.75, y: 18), controlPoint1: CGPoint(x: 299.28, y: 18.09), controlPoint2: CGPoint(x: 299.02, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 298.01, y: 18.26), controlPoint1: CGPoint(x: 298.48, y: 18), controlPoint2: CGPoint(x: 298.22, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 297.57, y: 18.95), controlPoint1: CGPoint(x: 297.79, y: 18.44), controlPoint2: CGPoint(x: 297.64, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 297.51, y: 19.34), controlPoint1: CGPoint(x: 297.53, y: 19.08), controlPoint2: CGPoint(x: 297.51, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 297.5, y: 19.78), controlPoint1: CGPoint(x: 297.5, y: 19.49), controlPoint2: CGPoint(x: 297.5, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 297.5, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 297.51, y: 38.66), controlPoint1: CGPoint(x: 297.5, y: 38.36), controlPoint2: CGPoint(x: 297.5, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 297.57, y: 39.05), controlPoint1: CGPoint(x: 297.51, y: 38.79), controlPoint2: CGPoint(x: 297.53, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 298.01, y: 39.74), controlPoint1: CGPoint(x: 297.64, y: 39.32), controlPoint2: CGPoint(x: 297.79, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 298.75, y: 40), controlPoint1: CGPoint(x: 298.22, y: 39.91), controlPoint2: CGPoint(x: 298.48, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 299.5, y: 39.74), controlPoint1: CGPoint(x: 299.02, y: 40), controlPoint2: CGPoint(x: 299.28, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 299.94, y: 39.05), controlPoint1: CGPoint(x: 299.71, y: 39.56), controlPoint2: CGPoint(x: 299.86, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 299.99, y: 38.66), controlPoint1: CGPoint(x: 299.97, y: 38.92), controlPoint2: CGPoint(x: 299.99, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 300, y: 38.21), controlPoint1: CGPoint(x: 300, y: 38.51), controlPoint2: CGPoint(x: 300, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 300, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 299.99, y: 19.34), controlPoint1: CGPoint(x: 300, y: 19.64), controlPoint2: CGPoint(x: 300, y: 19.49))
        audioWaves.addCurve(to: CGPoint(x: 299.94, y: 18.95), controlPoint1: CGPoint(x: 299.99, y: 19.21), controlPoint2: CGPoint(x: 299.97, y: 19.08))
        audioWaves.addLine(to: CGPoint(x: 299.94, y: 18.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 305.99, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 305.94, y: 19.95), controlPoint1: CGPoint(x: 305.99, y: 20.21), controlPoint2: CGPoint(x: 305.97, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 305.5, y: 19.26), controlPoint1: CGPoint(x: 305.86, y: 19.68), controlPoint2: CGPoint(x: 305.71, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 304.75, y: 19), controlPoint1: CGPoint(x: 305.28, y: 19.09), controlPoint2: CGPoint(x: 305.02, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 304.01, y: 19.26), controlPoint1: CGPoint(x: 304.48, y: 19), controlPoint2: CGPoint(x: 304.22, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 303.57, y: 19.95), controlPoint1: CGPoint(x: 303.79, y: 19.44), controlPoint2: CGPoint(x: 303.64, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 303.51, y: 20.34), controlPoint1: CGPoint(x: 303.53, y: 20.08), controlPoint2: CGPoint(x: 303.51, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 303.5, y: 20.78), controlPoint1: CGPoint(x: 303.5, y: 20.49), controlPoint2: CGPoint(x: 303.5, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 303.51, y: 37.66), controlPoint1: CGPoint(x: 303.5, y: 37.36), controlPoint2: CGPoint(x: 303.5, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 303.57, y: 38.05), controlPoint1: CGPoint(x: 303.51, y: 37.79), controlPoint2: CGPoint(x: 303.53, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 304.01, y: 38.74), controlPoint1: CGPoint(x: 303.64, y: 38.32), controlPoint2: CGPoint(x: 303.79, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 304.75, y: 39), controlPoint1: CGPoint(x: 304.22, y: 38.91), controlPoint2: CGPoint(x: 304.48, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 305.5, y: 38.74), controlPoint1: CGPoint(x: 305.02, y: 39), controlPoint2: CGPoint(x: 305.28, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 305.94, y: 38.05), controlPoint1: CGPoint(x: 305.71, y: 38.56), controlPoint2: CGPoint(x: 305.86, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 305.99, y: 37.66), controlPoint1: CGPoint(x: 305.97, y: 37.92), controlPoint2: CGPoint(x: 305.99, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 306, y: 37.21), controlPoint1: CGPoint(x: 306, y: 37.51), controlPoint2: CGPoint(x: 306, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 306, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 306, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 306, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 305.99, y: 20.34), controlPoint1: CGPoint(x: 306, y: 20.64), controlPoint2: CGPoint(x: 306, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 305.99, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 311.94, y: 22.45))
        audioWaves.addCurve(to: CGPoint(x: 311.5, y: 21.76), controlPoint1: CGPoint(x: 311.86, y: 22.18), controlPoint2: CGPoint(x: 311.71, y: 21.94))
        audioWaves.addCurve(to: CGPoint(x: 310.75, y: 21.5), controlPoint1: CGPoint(x: 311.28, y: 21.59), controlPoint2: CGPoint(x: 311.02, y: 21.5))
        audioWaves.addCurve(to: CGPoint(x: 310.01, y: 21.76), controlPoint1: CGPoint(x: 310.48, y: 21.5), controlPoint2: CGPoint(x: 310.22, y: 21.59))
        audioWaves.addCurve(to: CGPoint(x: 309.57, y: 22.45), controlPoint1: CGPoint(x: 309.79, y: 21.94), controlPoint2: CGPoint(x: 309.64, y: 22.18))
        audioWaves.addCurve(to: CGPoint(x: 309.51, y: 22.84), controlPoint1: CGPoint(x: 309.53, y: 22.58), controlPoint2: CGPoint(x: 309.51, y: 22.71))
        audioWaves.addCurve(to: CGPoint(x: 309.5, y: 23.28), controlPoint1: CGPoint(x: 309.5, y: 22.99), controlPoint2: CGPoint(x: 309.5, y: 23.14))
        audioWaves.addLine(to: CGPoint(x: 309.5, y: 34.71))
        audioWaves.addCurve(to: CGPoint(x: 309.51, y: 35.16), controlPoint1: CGPoint(x: 309.5, y: 34.86), controlPoint2: CGPoint(x: 309.5, y: 35.01))
        audioWaves.addCurve(to: CGPoint(x: 309.57, y: 35.55), controlPoint1: CGPoint(x: 309.51, y: 35.29), controlPoint2: CGPoint(x: 309.53, y: 35.42))
        audioWaves.addCurve(to: CGPoint(x: 310.01, y: 36.24), controlPoint1: CGPoint(x: 309.64, y: 35.82), controlPoint2: CGPoint(x: 309.79, y: 36.06))
        audioWaves.addCurve(to: CGPoint(x: 310.75, y: 36.5), controlPoint1: CGPoint(x: 310.22, y: 36.41), controlPoint2: CGPoint(x: 310.48, y: 36.5))
        audioWaves.addCurve(to: CGPoint(x: 311.5, y: 36.24), controlPoint1: CGPoint(x: 311.02, y: 36.5), controlPoint2: CGPoint(x: 311.28, y: 36.41))
        audioWaves.addCurve(to: CGPoint(x: 311.94, y: 35.55), controlPoint1: CGPoint(x: 311.71, y: 36.06), controlPoint2: CGPoint(x: 311.86, y: 35.82))
        audioWaves.addCurve(to: CGPoint(x: 311.99, y: 35.16), controlPoint1: CGPoint(x: 311.97, y: 35.42), controlPoint2: CGPoint(x: 311.99, y: 35.29))
        audioWaves.addCurve(to: CGPoint(x: 312, y: 34.71), controlPoint1: CGPoint(x: 312, y: 35.01), controlPoint2: CGPoint(x: 312, y: 34.86))
        audioWaves.addLine(to: CGPoint(x: 312, y: 23.28))
        audioWaves.addCurve(to: CGPoint(x: 311.99, y: 22.84), controlPoint1: CGPoint(x: 312, y: 23.14), controlPoint2: CGPoint(x: 312, y: 22.99))
        audioWaves.addCurve(to: CGPoint(x: 311.94, y: 22.45), controlPoint1: CGPoint(x: 311.99, y: 22.71), controlPoint2: CGPoint(x: 311.97, y: 22.58))
        audioWaves.addLine(to: CGPoint(x: 311.94, y: 22.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 317.99, y: 24.34))
        audioWaves.addCurve(to: CGPoint(x: 317.94, y: 23.95), controlPoint1: CGPoint(x: 317.99, y: 24.21), controlPoint2: CGPoint(x: 317.97, y: 24.08))
        audioWaves.addCurve(to: CGPoint(x: 317.5, y: 23.26), controlPoint1: CGPoint(x: 317.86, y: 23.68), controlPoint2: CGPoint(x: 317.71, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 316.75, y: 23), controlPoint1: CGPoint(x: 317.28, y: 23.09), controlPoint2: CGPoint(x: 317.02, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 316.01, y: 23.26), controlPoint1: CGPoint(x: 316.48, y: 23), controlPoint2: CGPoint(x: 316.22, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 315.57, y: 23.95), controlPoint1: CGPoint(x: 315.79, y: 23.44), controlPoint2: CGPoint(x: 315.64, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 315.51, y: 24.34), controlPoint1: CGPoint(x: 315.53, y: 24.08), controlPoint2: CGPoint(x: 315.51, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 315.5, y: 24.78), controlPoint1: CGPoint(x: 315.5, y: 24.49), controlPoint2: CGPoint(x: 315.5, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 315.51, y: 33.66), controlPoint1: CGPoint(x: 315.5, y: 33.36), controlPoint2: CGPoint(x: 315.5, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 315.57, y: 34.05), controlPoint1: CGPoint(x: 315.51, y: 33.79), controlPoint2: CGPoint(x: 315.53, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 316.01, y: 34.74), controlPoint1: CGPoint(x: 315.64, y: 34.32), controlPoint2: CGPoint(x: 315.79, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 316.75, y: 35), controlPoint1: CGPoint(x: 316.22, y: 34.91), controlPoint2: CGPoint(x: 316.48, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 317.5, y: 34.74), controlPoint1: CGPoint(x: 317.02, y: 35), controlPoint2: CGPoint(x: 317.28, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 317.94, y: 34.05), controlPoint1: CGPoint(x: 317.71, y: 34.56), controlPoint2: CGPoint(x: 317.86, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 317.99, y: 33.66), controlPoint1: CGPoint(x: 317.97, y: 33.92), controlPoint2: CGPoint(x: 317.99, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 318, y: 33.21), controlPoint1: CGPoint(x: 318, y: 33.51), controlPoint2: CGPoint(x: 318, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 318, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 318, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 318, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 317.99, y: 24.34), controlPoint1: CGPoint(x: 318, y: 24.64), controlPoint2: CGPoint(x: 318, y: 24.49))
        audioWaves.addLine(to: CGPoint(x: 317.99, y: 24.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 323.94, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 323.5, y: 27.26), controlPoint1: CGPoint(x: 323.86, y: 27.68), controlPoint2: CGPoint(x: 323.71, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 322.75, y: 27), controlPoint1: CGPoint(x: 323.28, y: 27.09), controlPoint2: CGPoint(x: 323.02, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 322.01, y: 27.26), controlPoint1: CGPoint(x: 322.48, y: 27), controlPoint2: CGPoint(x: 322.22, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 321.56, y: 27.95), controlPoint1: CGPoint(x: 321.79, y: 27.44), controlPoint2: CGPoint(x: 321.64, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 321.51, y: 28.34), controlPoint1: CGPoint(x: 321.53, y: 28.08), controlPoint2: CGPoint(x: 321.51, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 321.5, y: 28.78), controlPoint1: CGPoint(x: 321.5, y: 28.49), controlPoint2: CGPoint(x: 321.5, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 28.79))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 29.21))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 321.51, y: 29.66), controlPoint1: CGPoint(x: 321.5, y: 29.36), controlPoint2: CGPoint(x: 321.5, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 321.56, y: 30.05), controlPoint1: CGPoint(x: 321.51, y: 29.79), controlPoint2: CGPoint(x: 321.53, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 322.01, y: 30.74), controlPoint1: CGPoint(x: 321.64, y: 30.32), controlPoint2: CGPoint(x: 321.79, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 322.75, y: 31), controlPoint1: CGPoint(x: 322.22, y: 30.91), controlPoint2: CGPoint(x: 322.48, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 323.5, y: 30.74), controlPoint1: CGPoint(x: 323.02, y: 31), controlPoint2: CGPoint(x: 323.28, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 323.94, y: 30.05), controlPoint1: CGPoint(x: 323.71, y: 30.56), controlPoint2: CGPoint(x: 323.86, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 323.99, y: 29.66), controlPoint1: CGPoint(x: 323.97, y: 29.92), controlPoint2: CGPoint(x: 323.99, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 324, y: 29.22), controlPoint1: CGPoint(x: 324, y: 29.51), controlPoint2: CGPoint(x: 324, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 324, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 323.99, y: 28.34), controlPoint1: CGPoint(x: 324, y: 28.64), controlPoint2: CGPoint(x: 324, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 323.94, y: 27.95), controlPoint1: CGPoint(x: 323.99, y: 28.21), controlPoint2: CGPoint(x: 323.97, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 323.94, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 329.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 329.94, y: 25.95), controlPoint1: CGPoint(x: 329.99, y: 26.21), controlPoint2: CGPoint(x: 329.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 329.5, y: 25.26), controlPoint1: CGPoint(x: 329.86, y: 25.68), controlPoint2: CGPoint(x: 329.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 328.75, y: 25), controlPoint1: CGPoint(x: 329.28, y: 25.09), controlPoint2: CGPoint(x: 329.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 328.01, y: 25.26), controlPoint1: CGPoint(x: 328.48, y: 25), controlPoint2: CGPoint(x: 328.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 327.56, y: 25.95), controlPoint1: CGPoint(x: 327.79, y: 25.44), controlPoint2: CGPoint(x: 327.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 327.51, y: 26.34), controlPoint1: CGPoint(x: 327.53, y: 26.08), controlPoint2: CGPoint(x: 327.51, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 327.5, y: 26.78), controlPoint1: CGPoint(x: 327.5, y: 26.49), controlPoint2: CGPoint(x: 327.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 327.51, y: 31.66), controlPoint1: CGPoint(x: 327.5, y: 31.36), controlPoint2: CGPoint(x: 327.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 327.56, y: 32.05), controlPoint1: CGPoint(x: 327.51, y: 31.79), controlPoint2: CGPoint(x: 327.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 328.01, y: 32.74), controlPoint1: CGPoint(x: 327.64, y: 32.32), controlPoint2: CGPoint(x: 327.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 328.75, y: 33), controlPoint1: CGPoint(x: 328.22, y: 32.91), controlPoint2: CGPoint(x: 328.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 329.5, y: 32.74), controlPoint1: CGPoint(x: 329.02, y: 33), controlPoint2: CGPoint(x: 329.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 329.94, y: 32.05), controlPoint1: CGPoint(x: 329.71, y: 32.56), controlPoint2: CGPoint(x: 329.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 329.99, y: 31.66), controlPoint1: CGPoint(x: 329.97, y: 31.92), controlPoint2: CGPoint(x: 329.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 330, y: 31.22), controlPoint1: CGPoint(x: 330, y: 31.51), controlPoint2: CGPoint(x: 330, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 330, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 330, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 330, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 329.99, y: 26.34), controlPoint1: CGPoint(x: 330, y: 26.64), controlPoint2: CGPoint(x: 330, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 329.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 335.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 335.94, y: 25.95), controlPoint1: CGPoint(x: 335.99, y: 26.21), controlPoint2: CGPoint(x: 335.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 335.5, y: 25.26), controlPoint1: CGPoint(x: 335.86, y: 25.68), controlPoint2: CGPoint(x: 335.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 334.75, y: 25), controlPoint1: CGPoint(x: 335.28, y: 25.09), controlPoint2: CGPoint(x: 335.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 334.01, y: 25.26), controlPoint1: CGPoint(x: 334.48, y: 25), controlPoint2: CGPoint(x: 334.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 333.56, y: 25.95), controlPoint1: CGPoint(x: 333.79, y: 25.44), controlPoint2: CGPoint(x: 333.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 333.51, y: 26.34), controlPoint1: CGPoint(x: 333.53, y: 26.08), controlPoint2: CGPoint(x: 333.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 333.5, y: 26.78), controlPoint1: CGPoint(x: 333.5, y: 26.49), controlPoint2: CGPoint(x: 333.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 333.51, y: 31.66), controlPoint1: CGPoint(x: 333.5, y: 31.36), controlPoint2: CGPoint(x: 333.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 333.56, y: 32.05), controlPoint1: CGPoint(x: 333.52, y: 31.79), controlPoint2: CGPoint(x: 333.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 334.01, y: 32.74), controlPoint1: CGPoint(x: 333.64, y: 32.32), controlPoint2: CGPoint(x: 333.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 334.75, y: 33), controlPoint1: CGPoint(x: 334.22, y: 32.91), controlPoint2: CGPoint(x: 334.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 335.5, y: 32.74), controlPoint1: CGPoint(x: 335.02, y: 33), controlPoint2: CGPoint(x: 335.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 335.94, y: 32.05), controlPoint1: CGPoint(x: 335.71, y: 32.56), controlPoint2: CGPoint(x: 335.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 335.99, y: 31.66), controlPoint1: CGPoint(x: 335.97, y: 31.92), controlPoint2: CGPoint(x: 335.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 336, y: 31.22), controlPoint1: CGPoint(x: 336, y: 31.51), controlPoint2: CGPoint(x: 336, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 336, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 336, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 336, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 335.99, y: 26.34), controlPoint1: CGPoint(x: 336, y: 26.64), controlPoint2: CGPoint(x: 336, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 335.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 341.94, y: 27.45))
        audioWaves.addCurve(to: CGPoint(x: 341.5, y: 26.76), controlPoint1: CGPoint(x: 341.86, y: 27.18), controlPoint2: CGPoint(x: 341.71, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 340.75, y: 26.5), controlPoint1: CGPoint(x: 341.28, y: 26.59), controlPoint2: CGPoint(x: 341.02, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 340.01, y: 26.76), controlPoint1: CGPoint(x: 340.48, y: 26.5), controlPoint2: CGPoint(x: 340.22, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 339.56, y: 27.45), controlPoint1: CGPoint(x: 339.79, y: 26.94), controlPoint2: CGPoint(x: 339.64, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 339.51, y: 27.84), controlPoint1: CGPoint(x: 339.53, y: 27.58), controlPoint2: CGPoint(x: 339.52, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 339.5, y: 28.28), controlPoint1: CGPoint(x: 339.5, y: 27.99), controlPoint2: CGPoint(x: 339.5, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 339.51, y: 30.16), controlPoint1: CGPoint(x: 339.5, y: 29.86), controlPoint2: CGPoint(x: 339.5, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 339.56, y: 30.55), controlPoint1: CGPoint(x: 339.52, y: 30.29), controlPoint2: CGPoint(x: 339.53, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 340.01, y: 31.24), controlPoint1: CGPoint(x: 339.64, y: 30.82), controlPoint2: CGPoint(x: 339.79, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 340.75, y: 31.5), controlPoint1: CGPoint(x: 340.22, y: 31.41), controlPoint2: CGPoint(x: 340.48, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 341.5, y: 31.24), controlPoint1: CGPoint(x: 341.02, y: 31.5), controlPoint2: CGPoint(x: 341.28, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 341.94, y: 30.55), controlPoint1: CGPoint(x: 341.71, y: 31.06), controlPoint2: CGPoint(x: 341.86, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 341.99, y: 30.16), controlPoint1: CGPoint(x: 341.97, y: 30.42), controlPoint2: CGPoint(x: 341.99, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 342, y: 29.72), controlPoint1: CGPoint(x: 342, y: 30.01), controlPoint2: CGPoint(x: 342, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 342, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 341.99, y: 27.84), controlPoint1: CGPoint(x: 342, y: 28.14), controlPoint2: CGPoint(x: 342, y: 27.99))
        audioWaves.addCurve(to: CGPoint(x: 341.94, y: 27.45), controlPoint1: CGPoint(x: 341.99, y: 27.71), controlPoint2: CGPoint(x: 341.97, y: 27.58))
        audioWaves.addLine(to: CGPoint(x: 341.94, y: 27.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 347.44, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 347, y: 27.26), controlPoint1: CGPoint(x: 347.36, y: 27.68), controlPoint2: CGPoint(x: 347.21, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 346.25, y: 27), controlPoint1: CGPoint(x: 346.78, y: 27.09), controlPoint2: CGPoint(x: 346.52, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 345.51, y: 27.26), controlPoint1: CGPoint(x: 345.98, y: 27), controlPoint2: CGPoint(x: 345.72, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 345.06, y: 27.95), controlPoint1: CGPoint(x: 345.29, y: 27.44), controlPoint2: CGPoint(x: 345.14, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 345.01, y: 28.34), controlPoint1: CGPoint(x: 345.03, y: 28.08), controlPoint2: CGPoint(x: 345.02, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 345, y: 28.78), controlPoint1: CGPoint(x: 345, y: 28.49), controlPoint2: CGPoint(x: 345, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 345, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 345.01, y: 29.66), controlPoint1: CGPoint(x: 345, y: 29.36), controlPoint2: CGPoint(x: 345, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 345.06, y: 30.05), controlPoint1: CGPoint(x: 345.02, y: 29.79), controlPoint2: CGPoint(x: 345.03, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 345.51, y: 30.74), controlPoint1: CGPoint(x: 345.14, y: 30.32), controlPoint2: CGPoint(x: 345.29, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 346.25, y: 31), controlPoint1: CGPoint(x: 345.72, y: 30.91), controlPoint2: CGPoint(x: 345.98, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 347, y: 30.74), controlPoint1: CGPoint(x: 346.52, y: 31), controlPoint2: CGPoint(x: 346.78, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 347.44, y: 30.05), controlPoint1: CGPoint(x: 347.21, y: 30.56), controlPoint2: CGPoint(x: 347.36, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 347.49, y: 29.66), controlPoint1: CGPoint(x: 347.47, y: 29.92), controlPoint2: CGPoint(x: 347.49, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 347.5, y: 29.22), controlPoint1: CGPoint(x: 347.5, y: 29.51), controlPoint2: CGPoint(x: 347.5, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 347.5, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 347.49, y: 28.34), controlPoint1: CGPoint(x: 347.5, y: 28.64), controlPoint2: CGPoint(x: 347.5, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 347.44, y: 27.95), controlPoint1: CGPoint(x: 347.49, y: 28.21), controlPoint2: CGPoint(x: 347.47, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 347.44, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 353, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 352.25, y: 28), controlPoint1: CGPoint(x: 352.78, y: 28.09), controlPoint2: CGPoint(x: 352.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 351.51, y: 28.26), controlPoint1: CGPoint(x: 351.98, y: 28), controlPoint2: CGPoint(x: 351.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 28.95), controlPoint1: CGPoint(x: 351.29, y: 28.44), controlPoint2: CGPoint(x: 351.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29), controlPoint1: CGPoint(x: 351.06, y: 28.97), controlPoint2: CGPoint(x: 351.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29.05), controlPoint1: CGPoint(x: 351.06, y: 29.02), controlPoint2: CGPoint(x: 351.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 351.51, y: 29.74), controlPoint1: CGPoint(x: 351.14, y: 29.32), controlPoint2: CGPoint(x: 351.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 352.25, y: 30), controlPoint1: CGPoint(x: 351.72, y: 29.91), controlPoint2: CGPoint(x: 351.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 353, y: 29.74), controlPoint1: CGPoint(x: 352.52, y: 30), controlPoint2: CGPoint(x: 352.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29.05), controlPoint1: CGPoint(x: 353.21, y: 29.56), controlPoint2: CGPoint(x: 353.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29), controlPoint1: CGPoint(x: 353.44, y: 29.03), controlPoint2: CGPoint(x: 353.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 28.95), controlPoint1: CGPoint(x: 353.44, y: 28.98), controlPoint2: CGPoint(x: 353.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 353, y: 28.26), controlPoint1: CGPoint(x: 353.36, y: 28.68), controlPoint2: CGPoint(x: 353.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 353, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 351, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 351, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 351, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 351, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 351.01, y: 29.34), controlPoint1: CGPoint(x: 351, y: 29.64), controlPoint2: CGPoint(x: 351, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29), controlPoint1: CGPoint(x: 351.01, y: 29.23), controlPoint2: CGPoint(x: 351.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 351.01, y: 28.66), controlPoint1: CGPoint(x: 351.03, y: 28.89), controlPoint2: CGPoint(x: 351.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 351, y: 28.22), controlPoint1: CGPoint(x: 351, y: 28.51), controlPoint2: CGPoint(x: 351, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 351, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 353.49, y: 28.66))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29), controlPoint1: CGPoint(x: 353.49, y: 28.77), controlPoint2: CGPoint(x: 353.47, y: 28.89))
        audioWaves.addCurve(to: CGPoint(x: 353.49, y: 29.34), controlPoint1: CGPoint(x: 353.47, y: 29.11), controlPoint2: CGPoint(x: 353.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 353.5, y: 29.78), controlPoint1: CGPoint(x: 353.5, y: 29.49), controlPoint2: CGPoint(x: 353.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 353.49, y: 28.66), controlPoint1: CGPoint(x: 353.5, y: 28.36), controlPoint2: CGPoint(x: 353.5, y: 28.51))
        audioWaves.addLine(to: CGPoint(x: 353.49, y: 28.66))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 359, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 358.25, y: 28), controlPoint1: CGPoint(x: 358.78, y: 28.09), controlPoint2: CGPoint(x: 358.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 357.51, y: 28.26), controlPoint1: CGPoint(x: 357.98, y: 28), controlPoint2: CGPoint(x: 357.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 28.95), controlPoint1: CGPoint(x: 357.29, y: 28.44), controlPoint2: CGPoint(x: 357.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29), controlPoint1: CGPoint(x: 357.06, y: 28.97), controlPoint2: CGPoint(x: 357.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29.05), controlPoint1: CGPoint(x: 357.06, y: 29.02), controlPoint2: CGPoint(x: 357.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 357.51, y: 29.74), controlPoint1: CGPoint(x: 357.14, y: 29.32), controlPoint2: CGPoint(x: 357.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 358.25, y: 30), controlPoint1: CGPoint(x: 357.72, y: 29.91), controlPoint2: CGPoint(x: 357.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 359, y: 29.74), controlPoint1: CGPoint(x: 358.52, y: 30), controlPoint2: CGPoint(x: 358.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29.05), controlPoint1: CGPoint(x: 359.21, y: 29.56), controlPoint2: CGPoint(x: 359.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29), controlPoint1: CGPoint(x: 359.44, y: 29.03), controlPoint2: CGPoint(x: 359.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 28.95), controlPoint1: CGPoint(x: 359.44, y: 28.98), controlPoint2: CGPoint(x: 359.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 359, y: 28.26), controlPoint1: CGPoint(x: 359.36, y: 28.68), controlPoint2: CGPoint(x: 359.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 359, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 359.44, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 359.49, y: 29.34), controlPoint1: CGPoint(x: 359.47, y: 29.11), controlPoint2: CGPoint(x: 359.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 359.5, y: 29.78), controlPoint1: CGPoint(x: 359.5, y: 29.49), controlPoint2: CGPoint(x: 359.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 359.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 359.49, y: 28.66), controlPoint1: CGPoint(x: 359.5, y: 28.36), controlPoint2: CGPoint(x: 359.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29), controlPoint1: CGPoint(x: 359.49, y: 28.77), controlPoint2: CGPoint(x: 359.47, y: 28.89))
        audioWaves.addLine(to: CGPoint(x: 359.44, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 357, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 357, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 357.01, y: 29.34), controlPoint1: CGPoint(x: 357, y: 29.64), controlPoint2: CGPoint(x: 357, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29), controlPoint1: CGPoint(x: 357.01, y: 29.23), controlPoint2: CGPoint(x: 357.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 357.01, y: 28.66), controlPoint1: CGPoint(x: 357.03, y: 28.89), controlPoint2: CGPoint(x: 357.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 357, y: 28.22), controlPoint1: CGPoint(x: 357, y: 28.51), controlPoint2: CGPoint(x: 357, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 357, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 365, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 364.25, y: 28), controlPoint1: CGPoint(x: 364.78, y: 28.09), controlPoint2: CGPoint(x: 364.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 363.51, y: 28.26), controlPoint1: CGPoint(x: 363.98, y: 28), controlPoint2: CGPoint(x: 363.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 28.95), controlPoint1: CGPoint(x: 363.29, y: 28.44), controlPoint2: CGPoint(x: 363.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29), controlPoint1: CGPoint(x: 363.06, y: 28.97), controlPoint2: CGPoint(x: 363.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29.05), controlPoint1: CGPoint(x: 363.06, y: 29.02), controlPoint2: CGPoint(x: 363.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 363.51, y: 29.74), controlPoint1: CGPoint(x: 363.14, y: 29.32), controlPoint2: CGPoint(x: 363.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 364.25, y: 30), controlPoint1: CGPoint(x: 363.72, y: 29.91), controlPoint2: CGPoint(x: 363.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 365, y: 29.74), controlPoint1: CGPoint(x: 364.52, y: 30), controlPoint2: CGPoint(x: 364.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29.05), controlPoint1: CGPoint(x: 365.21, y: 29.56), controlPoint2: CGPoint(x: 365.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29), controlPoint1: CGPoint(x: 365.44, y: 29.03), controlPoint2: CGPoint(x: 365.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 28.95), controlPoint1: CGPoint(x: 365.44, y: 28.98), controlPoint2: CGPoint(x: 365.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 365, y: 28.26), controlPoint1: CGPoint(x: 365.36, y: 28.68), controlPoint2: CGPoint(x: 365.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 365, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 363, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 363, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 363, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 363, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 363.01, y: 29.34), controlPoint1: CGPoint(x: 363, y: 29.64), controlPoint2: CGPoint(x: 363, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29), controlPoint1: CGPoint(x: 363.01, y: 29.23), controlPoint2: CGPoint(x: 363.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 363.01, y: 28.66), controlPoint1: CGPoint(x: 363.03, y: 28.89), controlPoint2: CGPoint(x: 363.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 363, y: 28.22), controlPoint1: CGPoint(x: 363, y: 28.51), controlPoint2: CGPoint(x: 363, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 363, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 365.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 365.49, y: 28.66), controlPoint1: CGPoint(x: 365.5, y: 28.36), controlPoint2: CGPoint(x: 365.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29), controlPoint1: CGPoint(x: 365.49, y: 28.77), controlPoint2: CGPoint(x: 365.47, y: 28.89))
        audioWaves.addCurve(to: CGPoint(x: 365.49, y: 29.34), controlPoint1: CGPoint(x: 365.47, y: 29.11), controlPoint2: CGPoint(x: 365.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 365.5, y: 29.78), controlPoint1: CGPoint(x: 365.5, y: 29.49), controlPoint2: CGPoint(x: 365.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.5, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29.28), controlPoint1: CGPoint(x: 2.5, y: 29.09), controlPoint2: CGPoint(x: 2.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29), controlPoint1: CGPoint(x: 2.5, y: 28.81), controlPoint2: CGPoint(x: 2.5, y: 28.91))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 0, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 0, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 0, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29), controlPoint1: CGPoint(x: 0, y: 29.19), controlPoint2: CGPoint(x: 0, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 0, y: 28.72), controlPoint1: CGPoint(x: 0, y: 28.91), controlPoint2: CGPoint(x: 0, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 0, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 1.99, y: 27.76), controlPoint1: CGPoint(x: 2.36, y: 28.18), controlPoint2: CGPoint(x: 2.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 1.25, y: 27.5), controlPoint1: CGPoint(x: 1.78, y: 27.59), controlPoint2: CGPoint(x: 1.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 0.51, y: 27.76), controlPoint1: CGPoint(x: 0.98, y: 27.5), controlPoint2: CGPoint(x: 0.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 0.07, y: 28.45), controlPoint1: CGPoint(x: 0.29, y: 27.94), controlPoint2: CGPoint(x: 0.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 28.84), controlPoint1: CGPoint(x: 0.03, y: 28.58), controlPoint2: CGPoint(x: 0.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29), controlPoint1: CGPoint(x: 0, y: 28.9), controlPoint2: CGPoint(x: 0.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29.16), controlPoint1: CGPoint(x: 0.01, y: 29.05), controlPoint2: CGPoint(x: 0, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 0.07, y: 29.55), controlPoint1: CGPoint(x: 0.02, y: 29.29), controlPoint2: CGPoint(x: 0.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 0.51, y: 30.24), controlPoint1: CGPoint(x: 0.14, y: 29.82), controlPoint2: CGPoint(x: 0.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 1.25, y: 30.5), controlPoint1: CGPoint(x: 0.72, y: 30.41), controlPoint2: CGPoint(x: 0.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 1.99, y: 30.24), controlPoint1: CGPoint(x: 1.52, y: 30.5), controlPoint2: CGPoint(x: 1.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 2.44, y: 29.55), controlPoint1: CGPoint(x: 2.21, y: 30.06), controlPoint2: CGPoint(x: 2.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 2.49, y: 29.16), controlPoint1: CGPoint(x: 2.47, y: 29.42), controlPoint2: CGPoint(x: 2.48, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29), controlPoint1: CGPoint(x: 2.5, y: 29.11), controlPoint2: CGPoint(x: 2.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 2.49, y: 28.84), controlPoint1: CGPoint(x: 2.49, y: 28.95), controlPoint2: CGPoint(x: 2.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 2.44, y: 28.45), controlPoint1: CGPoint(x: 2.48, y: 28.71), controlPoint2: CGPoint(x: 2.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 2.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.44, y: 28.45))
        context.saveGState()
        context.translateBy(x: 5, y: 79)
        audioWaves.usesEvenOddFillRule = true
        UIColor.white.setFill()
        audioWaves.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSystemDarkDictation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 216), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 216), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 216)
        
        /// background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 216))
        context.saveGState()
        // Warning: Blur effects are not supported.
        UIColor(white: 0.11, alpha: 0.72).setFill()
        background.fill()
        context.restoreGState()
        /// Done
        let done = NSMutableAttributedString(string: "Done")
        done.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 18)!, range: NSRange(location: 0, length: done.length))
        done.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: done.length))
        done.addAttribute(NSKernAttributeName, value: -0.45, range: NSRange(location: 0, length: done.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            done.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: done.length))
        }
        context.saveGState()
        done.draw(in: CGRect(x: 5, y: 172, width: 366, height: 24))
        context.restoreGState()
        /// audio waves
        let audioWaves = UIBezierPath()
        audioWaves.move(to: CGPoint(x: 6, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 6, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 6, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29), controlPoint1: CGPoint(x: 6, y: 29.19), controlPoint2: CGPoint(x: 6, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 6, y: 28.72), controlPoint1: CGPoint(x: 6, y: 28.91), controlPoint2: CGPoint(x: 6, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 6, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 8.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 8, y: 27.76), controlPoint1: CGPoint(x: 8.36, y: 28.18), controlPoint2: CGPoint(x: 8.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 7.25, y: 27.5), controlPoint1: CGPoint(x: 7.78, y: 27.59), controlPoint2: CGPoint(x: 7.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 6.51, y: 27.76), controlPoint1: CGPoint(x: 6.98, y: 27.5), controlPoint2: CGPoint(x: 6.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 6.06, y: 28.45), controlPoint1: CGPoint(x: 6.29, y: 27.94), controlPoint2: CGPoint(x: 6.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 28.84), controlPoint1: CGPoint(x: 6.03, y: 28.58), controlPoint2: CGPoint(x: 6.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29), controlPoint1: CGPoint(x: 6, y: 28.9), controlPoint2: CGPoint(x: 6.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 6.01, y: 29.16), controlPoint1: CGPoint(x: 6.01, y: 29.05), controlPoint2: CGPoint(x: 6, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 6.06, y: 29.55), controlPoint1: CGPoint(x: 6.02, y: 29.29), controlPoint2: CGPoint(x: 6.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 6.51, y: 30.24), controlPoint1: CGPoint(x: 6.14, y: 29.82), controlPoint2: CGPoint(x: 6.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 7.25, y: 30.5), controlPoint1: CGPoint(x: 6.72, y: 30.41), controlPoint2: CGPoint(x: 6.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 8, y: 30.24), controlPoint1: CGPoint(x: 7.52, y: 30.5), controlPoint2: CGPoint(x: 7.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 8.44, y: 29.55), controlPoint1: CGPoint(x: 8.21, y: 30.06), controlPoint2: CGPoint(x: 8.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29.16), controlPoint1: CGPoint(x: 8.47, y: 29.42), controlPoint2: CGPoint(x: 8.48, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29), controlPoint1: CGPoint(x: 8.5, y: 29.11), controlPoint2: CGPoint(x: 8.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 28.84), controlPoint1: CGPoint(x: 8.49, y: 28.95), controlPoint2: CGPoint(x: 8.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 8.44, y: 28.45), controlPoint1: CGPoint(x: 8.48, y: 28.71), controlPoint2: CGPoint(x: 8.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 8.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 8.49, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 8.5, y: 29.28), controlPoint1: CGPoint(x: 8.5, y: 29.09), controlPoint2: CGPoint(x: 8.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 8.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 8.49, y: 29), controlPoint1: CGPoint(x: 8.5, y: 28.81), controlPoint2: CGPoint(x: 8.5, y: 28.91))
        audioWaves.addLine(to: CGPoint(x: 8.49, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 14.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 14, y: 27.76), controlPoint1: CGPoint(x: 14.36, y: 28.18), controlPoint2: CGPoint(x: 14.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 13.25, y: 27.5), controlPoint1: CGPoint(x: 13.78, y: 27.59), controlPoint2: CGPoint(x: 13.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 12.5, y: 27.76), controlPoint1: CGPoint(x: 12.98, y: 27.5), controlPoint2: CGPoint(x: 12.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 12.07, y: 28.45), controlPoint1: CGPoint(x: 12.29, y: 27.94), controlPoint2: CGPoint(x: 12.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 12.01, y: 28.84), controlPoint1: CGPoint(x: 12.03, y: 28.58), controlPoint2: CGPoint(x: 12.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 29), controlPoint1: CGPoint(x: 12, y: 28.9), controlPoint2: CGPoint(x: 12.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 12.01, y: 29.16), controlPoint1: CGPoint(x: 12.01, y: 29.05), controlPoint2: CGPoint(x: 12, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 12.07, y: 29.55), controlPoint1: CGPoint(x: 12.02, y: 29.29), controlPoint2: CGPoint(x: 12.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 12.5, y: 30.24), controlPoint1: CGPoint(x: 12.14, y: 29.82), controlPoint2: CGPoint(x: 12.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 13.25, y: 30.5), controlPoint1: CGPoint(x: 12.72, y: 30.41), controlPoint2: CGPoint(x: 12.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 14, y: 30.24), controlPoint1: CGPoint(x: 13.52, y: 30.5), controlPoint2: CGPoint(x: 13.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 14.44, y: 29.55), controlPoint1: CGPoint(x: 14.21, y: 30.06), controlPoint2: CGPoint(x: 14.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 14.49, y: 29.16), controlPoint1: CGPoint(x: 14.47, y: 29.42), controlPoint2: CGPoint(x: 14.49, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29), controlPoint1: CGPoint(x: 14.5, y: 29.11), controlPoint2: CGPoint(x: 14.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 14.49, y: 28.84), controlPoint1: CGPoint(x: 14.49, y: 28.95), controlPoint2: CGPoint(x: 14.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 14.44, y: 28.45), controlPoint1: CGPoint(x: 14.49, y: 28.71), controlPoint2: CGPoint(x: 14.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 14.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 14.5, y: 29.28))
        audioWaves.addLine(to: CGPoint(x: 14.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29), controlPoint1: CGPoint(x: 14.5, y: 28.81), controlPoint2: CGPoint(x: 14.5, y: 28.91))
        audioWaves.addCurve(to: CGPoint(x: 14.5, y: 29.28), controlPoint1: CGPoint(x: 14.5, y: 29.09), controlPoint2: CGPoint(x: 14.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 14.5, y: 29.28))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 12, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 12, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 12, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 29), controlPoint1: CGPoint(x: 12, y: 29.19), controlPoint2: CGPoint(x: 12, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 12, y: 28.72), controlPoint1: CGPoint(x: 12, y: 28.91), controlPoint2: CGPoint(x: 12, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 12, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 20.49, y: 27.84))
        audioWaves.addCurve(to: CGPoint(x: 20.43, y: 27.45), controlPoint1: CGPoint(x: 20.49, y: 27.71), controlPoint2: CGPoint(x: 20.47, y: 27.58))
        audioWaves.addCurve(to: CGPoint(x: 20, y: 26.76), controlPoint1: CGPoint(x: 20.36, y: 27.18), controlPoint2: CGPoint(x: 20.21, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 19.25, y: 26.5), controlPoint1: CGPoint(x: 19.78, y: 26.59), controlPoint2: CGPoint(x: 19.52, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 18.5, y: 26.76), controlPoint1: CGPoint(x: 18.98, y: 26.5), controlPoint2: CGPoint(x: 18.72, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 18.07, y: 27.45), controlPoint1: CGPoint(x: 18.29, y: 26.94), controlPoint2: CGPoint(x: 18.14, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 18.01, y: 27.84), controlPoint1: CGPoint(x: 18.03, y: 27.58), controlPoint2: CGPoint(x: 18.02, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 18, y: 28.28), controlPoint1: CGPoint(x: 18, y: 27.99), controlPoint2: CGPoint(x: 18, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 18, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 18, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 18, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 18.01, y: 30.16), controlPoint1: CGPoint(x: 18, y: 29.86), controlPoint2: CGPoint(x: 18, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 18.07, y: 30.55), controlPoint1: CGPoint(x: 18.02, y: 30.29), controlPoint2: CGPoint(x: 18.03, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 18.5, y: 31.24), controlPoint1: CGPoint(x: 18.14, y: 30.82), controlPoint2: CGPoint(x: 18.29, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 19.25, y: 31.5), controlPoint1: CGPoint(x: 18.72, y: 31.41), controlPoint2: CGPoint(x: 18.98, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 20, y: 31.24), controlPoint1: CGPoint(x: 19.52, y: 31.5), controlPoint2: CGPoint(x: 19.78, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 20.43, y: 30.55), controlPoint1: CGPoint(x: 20.21, y: 31.06), controlPoint2: CGPoint(x: 20.36, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 20.49, y: 30.16), controlPoint1: CGPoint(x: 20.47, y: 30.42), controlPoint2: CGPoint(x: 20.49, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 20.5, y: 29.72), controlPoint1: CGPoint(x: 20.5, y: 30.01), controlPoint2: CGPoint(x: 20.5, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 20.5, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 20.49, y: 27.84), controlPoint1: CGPoint(x: 20.5, y: 28.14), controlPoint2: CGPoint(x: 20.5, y: 27.99))
        audioWaves.addLine(to: CGPoint(x: 20.49, y: 27.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 24, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 24, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 24.01, y: 29.34), controlPoint1: CGPoint(x: 24, y: 29.64), controlPoint2: CGPoint(x: 24, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 24.06, y: 29), controlPoint1: CGPoint(x: 24.01, y: 29.23), controlPoint2: CGPoint(x: 24.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 24.01, y: 28.66), controlPoint1: CGPoint(x: 24.03, y: 28.89), controlPoint2: CGPoint(x: 24.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 24, y: 28.22), controlPoint1: CGPoint(x: 24, y: 28.51), controlPoint2: CGPoint(x: 24, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 24, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 26, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 25.25, y: 28), controlPoint1: CGPoint(x: 25.78, y: 28.09), controlPoint2: CGPoint(x: 25.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 24.51, y: 28.26), controlPoint1: CGPoint(x: 24.98, y: 28), controlPoint2: CGPoint(x: 24.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 24.07, y: 28.95), controlPoint1: CGPoint(x: 24.29, y: 28.44), controlPoint2: CGPoint(x: 24.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 24.06, y: 29), controlPoint1: CGPoint(x: 24.06, y: 28.97), controlPoint2: CGPoint(x: 24.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 24.07, y: 29.05), controlPoint1: CGPoint(x: 24.06, y: 29.02), controlPoint2: CGPoint(x: 24.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 24.51, y: 29.74), controlPoint1: CGPoint(x: 24.14, y: 29.32), controlPoint2: CGPoint(x: 24.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 25.25, y: 30), controlPoint1: CGPoint(x: 24.72, y: 29.91), controlPoint2: CGPoint(x: 24.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 26, y: 29.74), controlPoint1: CGPoint(x: 25.52, y: 30), controlPoint2: CGPoint(x: 25.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29.05), controlPoint1: CGPoint(x: 26.21, y: 29.56), controlPoint2: CGPoint(x: 26.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29), controlPoint1: CGPoint(x: 26.44, y: 29.03), controlPoint2: CGPoint(x: 26.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 28.95), controlPoint1: CGPoint(x: 26.44, y: 28.98), controlPoint2: CGPoint(x: 26.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 26, y: 28.26), controlPoint1: CGPoint(x: 26.36, y: 28.68), controlPoint2: CGPoint(x: 26.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 26, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 26.44, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 26.49, y: 29.34), controlPoint1: CGPoint(x: 26.47, y: 29.11), controlPoint2: CGPoint(x: 26.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 26.5, y: 29.78), controlPoint1: CGPoint(x: 26.5, y: 29.49), controlPoint2: CGPoint(x: 26.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 26.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 26.49, y: 28.66), controlPoint1: CGPoint(x: 26.5, y: 28.36), controlPoint2: CGPoint(x: 26.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 26.44, y: 29), controlPoint1: CGPoint(x: 26.49, y: 28.77), controlPoint2: CGPoint(x: 26.47, y: 28.89))
        audioWaves.addLine(to: CGPoint(x: 26.44, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 31.94, y: 27.45))
        audioWaves.addCurve(to: CGPoint(x: 31.5, y: 26.76), controlPoint1: CGPoint(x: 31.86, y: 27.18), controlPoint2: CGPoint(x: 31.71, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 30.75, y: 26.5), controlPoint1: CGPoint(x: 31.28, y: 26.59), controlPoint2: CGPoint(x: 31.02, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 30.01, y: 26.76), controlPoint1: CGPoint(x: 30.48, y: 26.5), controlPoint2: CGPoint(x: 30.22, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 29.56, y: 27.45), controlPoint1: CGPoint(x: 29.79, y: 26.94), controlPoint2: CGPoint(x: 29.64, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 29.51, y: 27.84), controlPoint1: CGPoint(x: 29.53, y: 27.58), controlPoint2: CGPoint(x: 29.52, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 29.5, y: 28.28), controlPoint1: CGPoint(x: 29.5, y: 27.99), controlPoint2: CGPoint(x: 29.5, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 29.5, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 29.51, y: 30.16), controlPoint1: CGPoint(x: 29.5, y: 29.86), controlPoint2: CGPoint(x: 29.5, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 29.56, y: 30.55), controlPoint1: CGPoint(x: 29.52, y: 30.29), controlPoint2: CGPoint(x: 29.53, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 30.01, y: 31.24), controlPoint1: CGPoint(x: 29.64, y: 30.82), controlPoint2: CGPoint(x: 29.79, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 30.75, y: 31.5), controlPoint1: CGPoint(x: 30.22, y: 31.41), controlPoint2: CGPoint(x: 30.48, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 31.5, y: 31.24), controlPoint1: CGPoint(x: 31.02, y: 31.5), controlPoint2: CGPoint(x: 31.28, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 31.94, y: 30.55), controlPoint1: CGPoint(x: 31.71, y: 31.06), controlPoint2: CGPoint(x: 31.86, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 31.99, y: 30.16), controlPoint1: CGPoint(x: 31.97, y: 30.42), controlPoint2: CGPoint(x: 31.99, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 32, y: 29.72), controlPoint1: CGPoint(x: 32, y: 30.01), controlPoint2: CGPoint(x: 32, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 32, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 31.99, y: 27.84), controlPoint1: CGPoint(x: 32, y: 28.14), controlPoint2: CGPoint(x: 32, y: 27.99))
        audioWaves.addCurve(to: CGPoint(x: 31.94, y: 27.45), controlPoint1: CGPoint(x: 31.99, y: 27.71), controlPoint2: CGPoint(x: 31.97, y: 27.58))
        audioWaves.addLine(to: CGPoint(x: 31.94, y: 27.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 37.99, y: 27.34))
        audioWaves.addCurve(to: CGPoint(x: 37.94, y: 26.95), controlPoint1: CGPoint(x: 37.99, y: 27.21), controlPoint2: CGPoint(x: 37.97, y: 27.08))
        audioWaves.addCurve(to: CGPoint(x: 37.49, y: 26.26), controlPoint1: CGPoint(x: 37.86, y: 26.68), controlPoint2: CGPoint(x: 37.71, y: 26.44))
        audioWaves.addCurve(to: CGPoint(x: 36.75, y: 26), controlPoint1: CGPoint(x: 37.28, y: 26.09), controlPoint2: CGPoint(x: 37.02, y: 26))
        audioWaves.addCurve(to: CGPoint(x: 36.01, y: 26.26), controlPoint1: CGPoint(x: 36.48, y: 26), controlPoint2: CGPoint(x: 36.22, y: 26.09))
        audioWaves.addCurve(to: CGPoint(x: 35.56, y: 26.95), controlPoint1: CGPoint(x: 35.79, y: 26.44), controlPoint2: CGPoint(x: 35.64, y: 26.68))
        audioWaves.addCurve(to: CGPoint(x: 35.51, y: 27.34), controlPoint1: CGPoint(x: 35.53, y: 27.08), controlPoint2: CGPoint(x: 35.52, y: 27.21))
        audioWaves.addCurve(to: CGPoint(x: 35.5, y: 27.78), controlPoint1: CGPoint(x: 35.5, y: 27.49), controlPoint2: CGPoint(x: 35.5, y: 27.64))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 35.5, y: 30.22))
        audioWaves.addCurve(to: CGPoint(x: 35.51, y: 30.66), controlPoint1: CGPoint(x: 35.5, y: 30.36), controlPoint2: CGPoint(x: 35.5, y: 30.51))
        audioWaves.addCurve(to: CGPoint(x: 35.56, y: 31.05), controlPoint1: CGPoint(x: 35.52, y: 30.79), controlPoint2: CGPoint(x: 35.53, y: 30.92))
        audioWaves.addCurve(to: CGPoint(x: 36.01, y: 31.74), controlPoint1: CGPoint(x: 35.64, y: 31.32), controlPoint2: CGPoint(x: 35.79, y: 31.56))
        audioWaves.addCurve(to: CGPoint(x: 36.75, y: 32), controlPoint1: CGPoint(x: 36.22, y: 31.91), controlPoint2: CGPoint(x: 36.48, y: 32))
        audioWaves.addCurve(to: CGPoint(x: 37.49, y: 31.74), controlPoint1: CGPoint(x: 37.02, y: 32), controlPoint2: CGPoint(x: 37.28, y: 31.91))
        audioWaves.addCurve(to: CGPoint(x: 37.94, y: 31.05), controlPoint1: CGPoint(x: 37.71, y: 31.56), controlPoint2: CGPoint(x: 37.86, y: 31.32))
        audioWaves.addCurve(to: CGPoint(x: 37.99, y: 30.66), controlPoint1: CGPoint(x: 37.97, y: 30.92), controlPoint2: CGPoint(x: 37.99, y: 30.79))
        audioWaves.addCurve(to: CGPoint(x: 38, y: 30.22), controlPoint1: CGPoint(x: 38, y: 30.51), controlPoint2: CGPoint(x: 38, y: 30.36))
        audioWaves.addLine(to: CGPoint(x: 38, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 38, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 38, y: 27.78))
        audioWaves.addCurve(to: CGPoint(x: 37.99, y: 27.34), controlPoint1: CGPoint(x: 38, y: 27.64), controlPoint2: CGPoint(x: 38, y: 27.49))
        audioWaves.addLine(to: CGPoint(x: 37.99, y: 27.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 43.94, y: 21.45))
        audioWaves.addCurve(to: CGPoint(x: 43.5, y: 20.76), controlPoint1: CGPoint(x: 43.86, y: 21.18), controlPoint2: CGPoint(x: 43.71, y: 20.94))
        audioWaves.addCurve(to: CGPoint(x: 42.75, y: 20.5), controlPoint1: CGPoint(x: 43.28, y: 20.59), controlPoint2: CGPoint(x: 43.02, y: 20.5))
        audioWaves.addCurve(to: CGPoint(x: 42.01, y: 20.76), controlPoint1: CGPoint(x: 42.48, y: 20.5), controlPoint2: CGPoint(x: 42.22, y: 20.59))
        audioWaves.addCurve(to: CGPoint(x: 41.57, y: 21.45), controlPoint1: CGPoint(x: 41.79, y: 20.94), controlPoint2: CGPoint(x: 41.64, y: 21.18))
        audioWaves.addCurve(to: CGPoint(x: 41.51, y: 21.84), controlPoint1: CGPoint(x: 41.53, y: 21.58), controlPoint2: CGPoint(x: 41.52, y: 21.71))
        audioWaves.addCurve(to: CGPoint(x: 41.5, y: 22.28), controlPoint1: CGPoint(x: 41.5, y: 21.99), controlPoint2: CGPoint(x: 41.5, y: 22.14))
        audioWaves.addLine(to: CGPoint(x: 41.5, y: 35.71))
        audioWaves.addCurve(to: CGPoint(x: 41.51, y: 36.16), controlPoint1: CGPoint(x: 41.5, y: 35.86), controlPoint2: CGPoint(x: 41.5, y: 36.01))
        audioWaves.addCurve(to: CGPoint(x: 41.57, y: 36.55), controlPoint1: CGPoint(x: 41.52, y: 36.29), controlPoint2: CGPoint(x: 41.53, y: 36.42))
        audioWaves.addCurve(to: CGPoint(x: 42.01, y: 37.24), controlPoint1: CGPoint(x: 41.64, y: 36.82), controlPoint2: CGPoint(x: 41.79, y: 37.06))
        audioWaves.addCurve(to: CGPoint(x: 42.75, y: 37.5), controlPoint1: CGPoint(x: 42.22, y: 37.41), controlPoint2: CGPoint(x: 42.48, y: 37.5))
        audioWaves.addCurve(to: CGPoint(x: 43.5, y: 37.24), controlPoint1: CGPoint(x: 43.02, y: 37.5), controlPoint2: CGPoint(x: 43.28, y: 37.41))
        audioWaves.addCurve(to: CGPoint(x: 43.94, y: 36.55), controlPoint1: CGPoint(x: 43.71, y: 37.06), controlPoint2: CGPoint(x: 43.86, y: 36.82))
        audioWaves.addCurve(to: CGPoint(x: 43.99, y: 36.16), controlPoint1: CGPoint(x: 43.97, y: 36.42), controlPoint2: CGPoint(x: 43.99, y: 36.29))
        audioWaves.addCurve(to: CGPoint(x: 44, y: 35.71), controlPoint1: CGPoint(x: 44, y: 36.01), controlPoint2: CGPoint(x: 44, y: 35.86))
        audioWaves.addLine(to: CGPoint(x: 44, y: 22.28))
        audioWaves.addCurve(to: CGPoint(x: 43.99, y: 21.84), controlPoint1: CGPoint(x: 44, y: 22.14), controlPoint2: CGPoint(x: 44, y: 21.99))
        audioWaves.addCurve(to: CGPoint(x: 43.94, y: 21.45), controlPoint1: CGPoint(x: 43.99, y: 21.71), controlPoint2: CGPoint(x: 43.97, y: 21.58))
        audioWaves.addLine(to: CGPoint(x: 43.94, y: 21.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 49.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 49.94, y: 25.95), controlPoint1: CGPoint(x: 49.99, y: 26.21), controlPoint2: CGPoint(x: 49.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 49.5, y: 25.26), controlPoint1: CGPoint(x: 49.86, y: 25.68), controlPoint2: CGPoint(x: 49.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 48.75, y: 25), controlPoint1: CGPoint(x: 49.28, y: 25.09), controlPoint2: CGPoint(x: 49.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 48.01, y: 25.26), controlPoint1: CGPoint(x: 48.48, y: 25), controlPoint2: CGPoint(x: 48.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 47.57, y: 25.95), controlPoint1: CGPoint(x: 47.79, y: 25.44), controlPoint2: CGPoint(x: 47.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 47.51, y: 26.34), controlPoint1: CGPoint(x: 47.53, y: 26.08), controlPoint2: CGPoint(x: 47.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 47.5, y: 26.78), controlPoint1: CGPoint(x: 47.5, y: 26.49), controlPoint2: CGPoint(x: 47.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 30.71))
        audioWaves.addLine(to: CGPoint(x: 47.5, y: 30.72))
        audioWaves.addCurve(to: CGPoint(x: 47.51, y: 31.66), controlPoint1: CGPoint(x: 47.5, y: 30.86), controlPoint2: CGPoint(x: 47.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 47.57, y: 32.05), controlPoint1: CGPoint(x: 47.52, y: 31.79), controlPoint2: CGPoint(x: 47.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 48.01, y: 32.74), controlPoint1: CGPoint(x: 47.64, y: 32.32), controlPoint2: CGPoint(x: 47.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 48.75, y: 33), controlPoint1: CGPoint(x: 48.22, y: 32.91), controlPoint2: CGPoint(x: 48.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 49.5, y: 32.74), controlPoint1: CGPoint(x: 49.02, y: 33), controlPoint2: CGPoint(x: 49.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 49.94, y: 32.05), controlPoint1: CGPoint(x: 49.71, y: 32.56), controlPoint2: CGPoint(x: 49.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 49.99, y: 31.66), controlPoint1: CGPoint(x: 49.97, y: 31.92), controlPoint2: CGPoint(x: 49.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 50, y: 30.72), controlPoint1: CGPoint(x: 50, y: 31.51), controlPoint2: CGPoint(x: 50, y: 30.86))
        audioWaves.addLine(to: CGPoint(x: 50, y: 30.71))
        audioWaves.addLine(to: CGPoint(x: 50, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 50, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 49.99, y: 26.34), controlPoint1: CGPoint(x: 50, y: 26.64), controlPoint2: CGPoint(x: 50, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 49.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 55.99, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 55.94, y: 19.95), controlPoint1: CGPoint(x: 55.99, y: 20.21), controlPoint2: CGPoint(x: 55.97, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 55.5, y: 19.26), controlPoint1: CGPoint(x: 55.86, y: 19.68), controlPoint2: CGPoint(x: 55.71, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 54.75, y: 19), controlPoint1: CGPoint(x: 55.28, y: 19.09), controlPoint2: CGPoint(x: 55.02, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 54, y: 19.26), controlPoint1: CGPoint(x: 54.48, y: 19), controlPoint2: CGPoint(x: 54.22, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 53.57, y: 19.95), controlPoint1: CGPoint(x: 53.79, y: 19.44), controlPoint2: CGPoint(x: 53.64, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 53.51, y: 20.34), controlPoint1: CGPoint(x: 53.53, y: 20.08), controlPoint2: CGPoint(x: 53.52, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 53.5, y: 20.78), controlPoint1: CGPoint(x: 53.5, y: 20.49), controlPoint2: CGPoint(x: 53.5, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 53.5, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 53.51, y: 37.66), controlPoint1: CGPoint(x: 53.5, y: 37.36), controlPoint2: CGPoint(x: 53.5, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 53.57, y: 38.05), controlPoint1: CGPoint(x: 53.52, y: 37.79), controlPoint2: CGPoint(x: 53.53, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 54, y: 38.74), controlPoint1: CGPoint(x: 53.64, y: 38.32), controlPoint2: CGPoint(x: 53.79, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 54.75, y: 39), controlPoint1: CGPoint(x: 54.22, y: 38.91), controlPoint2: CGPoint(x: 54.48, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 55.5, y: 38.74), controlPoint1: CGPoint(x: 55.02, y: 39), controlPoint2: CGPoint(x: 55.28, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 55.94, y: 38.05), controlPoint1: CGPoint(x: 55.71, y: 38.56), controlPoint2: CGPoint(x: 55.86, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 55.99, y: 37.66), controlPoint1: CGPoint(x: 55.97, y: 37.92), controlPoint2: CGPoint(x: 55.99, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 56, y: 37.21), controlPoint1: CGPoint(x: 56, y: 37.51), controlPoint2: CGPoint(x: 56, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 56, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 56, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 56, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 55.99, y: 20.34), controlPoint1: CGPoint(x: 56, y: 20.64), controlPoint2: CGPoint(x: 56, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 55.99, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 61.99, y: 18.84))
        audioWaves.addCurve(to: CGPoint(x: 61.94, y: 18.45), controlPoint1: CGPoint(x: 61.99, y: 18.71), controlPoint2: CGPoint(x: 61.97, y: 18.58))
        audioWaves.addCurve(to: CGPoint(x: 61.5, y: 17.76), controlPoint1: CGPoint(x: 61.86, y: 18.18), controlPoint2: CGPoint(x: 61.71, y: 17.94))
        audioWaves.addCurve(to: CGPoint(x: 60.75, y: 17.5), controlPoint1: CGPoint(x: 61.28, y: 17.59), controlPoint2: CGPoint(x: 61.02, y: 17.5))
        audioWaves.addCurve(to: CGPoint(x: 60, y: 17.76), controlPoint1: CGPoint(x: 60.48, y: 17.5), controlPoint2: CGPoint(x: 60.22, y: 17.59))
        audioWaves.addCurve(to: CGPoint(x: 59.57, y: 18.45), controlPoint1: CGPoint(x: 59.79, y: 17.94), controlPoint2: CGPoint(x: 59.64, y: 18.18))
        audioWaves.addCurve(to: CGPoint(x: 59.51, y: 18.84), controlPoint1: CGPoint(x: 59.53, y: 18.58), controlPoint2: CGPoint(x: 59.52, y: 18.71))
        audioWaves.addCurve(to: CGPoint(x: 59.5, y: 19.28), controlPoint1: CGPoint(x: 59.5, y: 18.99), controlPoint2: CGPoint(x: 59.5, y: 19.14))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 19.29))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 38.71))
        audioWaves.addLine(to: CGPoint(x: 59.5, y: 38.71))
        audioWaves.addCurve(to: CGPoint(x: 59.51, y: 39.16), controlPoint1: CGPoint(x: 59.5, y: 38.86), controlPoint2: CGPoint(x: 59.5, y: 39.01))
        audioWaves.addCurve(to: CGPoint(x: 59.57, y: 39.55), controlPoint1: CGPoint(x: 59.52, y: 39.29), controlPoint2: CGPoint(x: 59.53, y: 39.42))
        audioWaves.addCurve(to: CGPoint(x: 60, y: 40.24), controlPoint1: CGPoint(x: 59.64, y: 39.82), controlPoint2: CGPoint(x: 59.79, y: 40.06))
        audioWaves.addCurve(to: CGPoint(x: 60.75, y: 40.5), controlPoint1: CGPoint(x: 60.22, y: 40.41), controlPoint2: CGPoint(x: 60.48, y: 40.5))
        audioWaves.addCurve(to: CGPoint(x: 61.5, y: 40.24), controlPoint1: CGPoint(x: 61.02, y: 40.5), controlPoint2: CGPoint(x: 61.28, y: 40.41))
        audioWaves.addCurve(to: CGPoint(x: 61.94, y: 39.55), controlPoint1: CGPoint(x: 61.71, y: 40.06), controlPoint2: CGPoint(x: 61.86, y: 39.82))
        audioWaves.addCurve(to: CGPoint(x: 61.99, y: 39.16), controlPoint1: CGPoint(x: 61.97, y: 39.42), controlPoint2: CGPoint(x: 61.99, y: 39.29))
        audioWaves.addCurve(to: CGPoint(x: 62, y: 38.71), controlPoint1: CGPoint(x: 62, y: 39.01), controlPoint2: CGPoint(x: 62, y: 38.86))
        audioWaves.addLine(to: CGPoint(x: 62, y: 38.71))
        audioWaves.addLine(to: CGPoint(x: 62, y: 19.29))
        audioWaves.addLine(to: CGPoint(x: 62, y: 19.28))
        audioWaves.addCurve(to: CGPoint(x: 61.99, y: 18.84), controlPoint1: CGPoint(x: 62, y: 19.14), controlPoint2: CGPoint(x: 62, y: 18.99))
        audioWaves.addLine(to: CGPoint(x: 61.99, y: 18.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 67.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 67.94, y: 25.95), controlPoint1: CGPoint(x: 67.99, y: 26.21), controlPoint2: CGPoint(x: 67.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 67.5, y: 25.26), controlPoint1: CGPoint(x: 67.86, y: 25.68), controlPoint2: CGPoint(x: 67.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 66.75, y: 25), controlPoint1: CGPoint(x: 67.28, y: 25.09), controlPoint2: CGPoint(x: 67.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 66, y: 25.26), controlPoint1: CGPoint(x: 66.48, y: 25), controlPoint2: CGPoint(x: 66.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 65.57, y: 25.95), controlPoint1: CGPoint(x: 65.79, y: 25.44), controlPoint2: CGPoint(x: 65.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 65.51, y: 26.34), controlPoint1: CGPoint(x: 65.53, y: 26.08), controlPoint2: CGPoint(x: 65.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 65.5, y: 26.78), controlPoint1: CGPoint(x: 65.5, y: 26.49), controlPoint2: CGPoint(x: 65.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 65.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 65.51, y: 31.66), controlPoint1: CGPoint(x: 65.5, y: 31.36), controlPoint2: CGPoint(x: 65.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 65.57, y: 32.05), controlPoint1: CGPoint(x: 65.52, y: 31.79), controlPoint2: CGPoint(x: 65.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 66, y: 32.74), controlPoint1: CGPoint(x: 65.64, y: 32.32), controlPoint2: CGPoint(x: 65.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 66.75, y: 33), controlPoint1: CGPoint(x: 66.22, y: 32.91), controlPoint2: CGPoint(x: 66.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 67.5, y: 32.74), controlPoint1: CGPoint(x: 67.02, y: 33), controlPoint2: CGPoint(x: 67.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 67.94, y: 32.05), controlPoint1: CGPoint(x: 67.71, y: 32.56), controlPoint2: CGPoint(x: 67.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 67.99, y: 31.66), controlPoint1: CGPoint(x: 67.97, y: 31.92), controlPoint2: CGPoint(x: 67.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 68, y: 31.22), controlPoint1: CGPoint(x: 68, y: 31.51), controlPoint2: CGPoint(x: 68, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 68, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 68, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 68, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 67.99, y: 26.34), controlPoint1: CGPoint(x: 68, y: 26.64), controlPoint2: CGPoint(x: 68, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 67.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 73.94, y: 14.45))
        audioWaves.addCurve(to: CGPoint(x: 73.5, y: 13.76), controlPoint1: CGPoint(x: 73.86, y: 14.17), controlPoint2: CGPoint(x: 73.71, y: 13.94))
        audioWaves.addCurve(to: CGPoint(x: 72.75, y: 13.5), controlPoint1: CGPoint(x: 73.28, y: 13.59), controlPoint2: CGPoint(x: 73.02, y: 13.5))
        audioWaves.addCurve(to: CGPoint(x: 72, y: 13.76), controlPoint1: CGPoint(x: 72.48, y: 13.5), controlPoint2: CGPoint(x: 72.22, y: 13.59))
        audioWaves.addCurve(to: CGPoint(x: 71.57, y: 14.45), controlPoint1: CGPoint(x: 71.79, y: 13.94), controlPoint2: CGPoint(x: 71.64, y: 14.17))
        audioWaves.addCurve(to: CGPoint(x: 71.51, y: 14.84), controlPoint1: CGPoint(x: 71.53, y: 14.58), controlPoint2: CGPoint(x: 71.52, y: 14.71))
        audioWaves.addCurve(to: CGPoint(x: 71.5, y: 15.28), controlPoint1: CGPoint(x: 71.5, y: 14.99), controlPoint2: CGPoint(x: 71.5, y: 15.14))
        audioWaves.addLine(to: CGPoint(x: 71.5, y: 42.71))
        audioWaves.addCurve(to: CGPoint(x: 71.51, y: 43.16), controlPoint1: CGPoint(x: 71.5, y: 42.86), controlPoint2: CGPoint(x: 71.5, y: 43.01))
        audioWaves.addCurve(to: CGPoint(x: 71.57, y: 43.55), controlPoint1: CGPoint(x: 71.52, y: 43.29), controlPoint2: CGPoint(x: 71.53, y: 43.42))
        audioWaves.addCurve(to: CGPoint(x: 72, y: 44.24), controlPoint1: CGPoint(x: 71.64, y: 43.82), controlPoint2: CGPoint(x: 71.79, y: 44.06))
        audioWaves.addCurve(to: CGPoint(x: 72.75, y: 44.5), controlPoint1: CGPoint(x: 72.22, y: 44.41), controlPoint2: CGPoint(x: 72.48, y: 44.5))
        audioWaves.addCurve(to: CGPoint(x: 73.5, y: 44.24), controlPoint1: CGPoint(x: 73.02, y: 44.5), controlPoint2: CGPoint(x: 73.28, y: 44.41))
        audioWaves.addCurve(to: CGPoint(x: 73.94, y: 43.55), controlPoint1: CGPoint(x: 73.71, y: 44.06), controlPoint2: CGPoint(x: 73.86, y: 43.82))
        audioWaves.addCurve(to: CGPoint(x: 73.99, y: 43.16), controlPoint1: CGPoint(x: 73.97, y: 43.42), controlPoint2: CGPoint(x: 73.99, y: 43.29))
        audioWaves.addCurve(to: CGPoint(x: 74, y: 42.71), controlPoint1: CGPoint(x: 74, y: 43.01), controlPoint2: CGPoint(x: 74, y: 42.86))
        audioWaves.addLine(to: CGPoint(x: 74, y: 15.28))
        audioWaves.addCurve(to: CGPoint(x: 73.99, y: 14.84), controlPoint1: CGPoint(x: 74, y: 15.14), controlPoint2: CGPoint(x: 74, y: 14.99))
        audioWaves.addCurve(to: CGPoint(x: 73.94, y: 14.45), controlPoint1: CGPoint(x: 73.99, y: 14.71), controlPoint2: CGPoint(x: 73.97, y: 14.58))
        audioWaves.addLine(to: CGPoint(x: 73.94, y: 14.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 79.99, y: 24.34))
        audioWaves.addCurve(to: CGPoint(x: 79.94, y: 23.95), controlPoint1: CGPoint(x: 79.99, y: 24.21), controlPoint2: CGPoint(x: 79.97, y: 24.08))
        audioWaves.addCurve(to: CGPoint(x: 79.5, y: 23.26), controlPoint1: CGPoint(x: 79.86, y: 23.68), controlPoint2: CGPoint(x: 79.71, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 78.75, y: 23), controlPoint1: CGPoint(x: 79.28, y: 23.09), controlPoint2: CGPoint(x: 79.02, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 78, y: 23.26), controlPoint1: CGPoint(x: 78.48, y: 23), controlPoint2: CGPoint(x: 78.22, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 77.57, y: 23.95), controlPoint1: CGPoint(x: 77.79, y: 23.44), controlPoint2: CGPoint(x: 77.64, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 77.51, y: 24.34), controlPoint1: CGPoint(x: 77.53, y: 24.08), controlPoint2: CGPoint(x: 77.52, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 77.5, y: 24.78), controlPoint1: CGPoint(x: 77.5, y: 24.49), controlPoint2: CGPoint(x: 77.5, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 77.5, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 77.51, y: 33.66), controlPoint1: CGPoint(x: 77.5, y: 33.36), controlPoint2: CGPoint(x: 77.5, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 77.57, y: 34.05), controlPoint1: CGPoint(x: 77.52, y: 33.79), controlPoint2: CGPoint(x: 77.53, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 78, y: 34.74), controlPoint1: CGPoint(x: 77.64, y: 34.32), controlPoint2: CGPoint(x: 77.79, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 78.75, y: 35), controlPoint1: CGPoint(x: 78.22, y: 34.91), controlPoint2: CGPoint(x: 78.48, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 79.5, y: 34.74), controlPoint1: CGPoint(x: 79.02, y: 35), controlPoint2: CGPoint(x: 79.28, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 79.94, y: 34.05), controlPoint1: CGPoint(x: 79.71, y: 34.56), controlPoint2: CGPoint(x: 79.86, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 79.99, y: 33.66), controlPoint1: CGPoint(x: 79.97, y: 33.92), controlPoint2: CGPoint(x: 79.99, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 80, y: 33.21), controlPoint1: CGPoint(x: 80, y: 33.51), controlPoint2: CGPoint(x: 80, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 80, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 80, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 80, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 79.99, y: 24.34), controlPoint1: CGPoint(x: 80, y: 24.64), controlPoint2: CGPoint(x: 80, y: 24.49))
        audioWaves.addLine(to: CGPoint(x: 79.99, y: 24.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 85.94, y: 20.45))
        audioWaves.addCurve(to: CGPoint(x: 85.5, y: 19.76), controlPoint1: CGPoint(x: 85.86, y: 20.18), controlPoint2: CGPoint(x: 85.71, y: 19.94))
        audioWaves.addCurve(to: CGPoint(x: 84.75, y: 19.5), controlPoint1: CGPoint(x: 85.28, y: 19.59), controlPoint2: CGPoint(x: 85.02, y: 19.5))
        audioWaves.addCurve(to: CGPoint(x: 84.01, y: 19.76), controlPoint1: CGPoint(x: 84.48, y: 19.5), controlPoint2: CGPoint(x: 84.22, y: 19.59))
        audioWaves.addCurve(to: CGPoint(x: 83.57, y: 20.45), controlPoint1: CGPoint(x: 83.79, y: 19.94), controlPoint2: CGPoint(x: 83.64, y: 20.18))
        audioWaves.addCurve(to: CGPoint(x: 83.51, y: 20.84), controlPoint1: CGPoint(x: 83.53, y: 20.58), controlPoint2: CGPoint(x: 83.52, y: 20.71))
        audioWaves.addCurve(to: CGPoint(x: 83.5, y: 21.28), controlPoint1: CGPoint(x: 83.5, y: 20.99), controlPoint2: CGPoint(x: 83.5, y: 21.14))
        audioWaves.addLine(to: CGPoint(x: 83.5, y: 36.71))
        audioWaves.addCurve(to: CGPoint(x: 83.51, y: 37.16), controlPoint1: CGPoint(x: 83.5, y: 36.86), controlPoint2: CGPoint(x: 83.5, y: 37.01))
        audioWaves.addCurve(to: CGPoint(x: 83.57, y: 37.55), controlPoint1: CGPoint(x: 83.52, y: 37.29), controlPoint2: CGPoint(x: 83.53, y: 37.42))
        audioWaves.addCurve(to: CGPoint(x: 84.01, y: 38.24), controlPoint1: CGPoint(x: 83.64, y: 37.82), controlPoint2: CGPoint(x: 83.79, y: 38.06))
        audioWaves.addCurve(to: CGPoint(x: 84.75, y: 38.5), controlPoint1: CGPoint(x: 84.22, y: 38.41), controlPoint2: CGPoint(x: 84.48, y: 38.5))
        audioWaves.addCurve(to: CGPoint(x: 85.5, y: 38.24), controlPoint1: CGPoint(x: 85.02, y: 38.5), controlPoint2: CGPoint(x: 85.28, y: 38.41))
        audioWaves.addCurve(to: CGPoint(x: 85.94, y: 37.55), controlPoint1: CGPoint(x: 85.71, y: 38.06), controlPoint2: CGPoint(x: 85.86, y: 37.82))
        audioWaves.addCurve(to: CGPoint(x: 85.99, y: 37.16), controlPoint1: CGPoint(x: 85.97, y: 37.42), controlPoint2: CGPoint(x: 85.99, y: 37.29))
        audioWaves.addCurve(to: CGPoint(x: 86, y: 36.71), controlPoint1: CGPoint(x: 86, y: 37.01), controlPoint2: CGPoint(x: 86, y: 36.86))
        audioWaves.addLine(to: CGPoint(x: 86, y: 21.28))
        audioWaves.addCurve(to: CGPoint(x: 85.99, y: 20.84), controlPoint1: CGPoint(x: 86, y: 21.14), controlPoint2: CGPoint(x: 86, y: 20.99))
        audioWaves.addCurve(to: CGPoint(x: 85.94, y: 20.45), controlPoint1: CGPoint(x: 85.99, y: 20.71), controlPoint2: CGPoint(x: 85.97, y: 20.58))
        audioWaves.addLine(to: CGPoint(x: 85.94, y: 20.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 91.44, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 91, y: 27.26), controlPoint1: CGPoint(x: 91.36, y: 27.68), controlPoint2: CGPoint(x: 91.21, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 90.25, y: 27), controlPoint1: CGPoint(x: 90.78, y: 27.09), controlPoint2: CGPoint(x: 90.52, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 89.51, y: 27.26), controlPoint1: CGPoint(x: 89.98, y: 27), controlPoint2: CGPoint(x: 89.72, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 89.07, y: 27.95), controlPoint1: CGPoint(x: 89.29, y: 27.44), controlPoint2: CGPoint(x: 89.14, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 89.01, y: 28.34), controlPoint1: CGPoint(x: 89.03, y: 28.08), controlPoint2: CGPoint(x: 89.02, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 89, y: 28.78), controlPoint1: CGPoint(x: 89, y: 28.49), controlPoint2: CGPoint(x: 89, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 89, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 89.01, y: 29.66), controlPoint1: CGPoint(x: 89, y: 29.36), controlPoint2: CGPoint(x: 89, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 89.07, y: 30.05), controlPoint1: CGPoint(x: 89.02, y: 29.79), controlPoint2: CGPoint(x: 89.03, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 89.51, y: 30.74), controlPoint1: CGPoint(x: 89.14, y: 30.32), controlPoint2: CGPoint(x: 89.29, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 90.25, y: 31), controlPoint1: CGPoint(x: 89.72, y: 30.91), controlPoint2: CGPoint(x: 89.98, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 91, y: 30.74), controlPoint1: CGPoint(x: 90.52, y: 31), controlPoint2: CGPoint(x: 90.78, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 91.44, y: 30.05), controlPoint1: CGPoint(x: 91.21, y: 30.56), controlPoint2: CGPoint(x: 91.36, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 91.49, y: 29.66), controlPoint1: CGPoint(x: 91.47, y: 29.92), controlPoint2: CGPoint(x: 91.49, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 91.5, y: 29.22), controlPoint1: CGPoint(x: 91.5, y: 29.51), controlPoint2: CGPoint(x: 91.5, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 91.5, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 91.49, y: 28.34), controlPoint1: CGPoint(x: 91.5, y: 28.64), controlPoint2: CGPoint(x: 91.5, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 91.44, y: 27.95), controlPoint1: CGPoint(x: 91.49, y: 28.21), controlPoint2: CGPoint(x: 91.47, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 91.44, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 97.49, y: 16.34))
        audioWaves.addCurve(to: CGPoint(x: 97.44, y: 15.95), controlPoint1: CGPoint(x: 97.49, y: 16.21), controlPoint2: CGPoint(x: 97.47, y: 16.08))
        audioWaves.addCurve(to: CGPoint(x: 97, y: 15.26), controlPoint1: CGPoint(x: 97.36, y: 15.67), controlPoint2: CGPoint(x: 97.21, y: 15.44))
        audioWaves.addCurve(to: CGPoint(x: 96.25, y: 15), controlPoint1: CGPoint(x: 96.78, y: 15.09), controlPoint2: CGPoint(x: 96.52, y: 15))
        audioWaves.addCurve(to: CGPoint(x: 95.51, y: 15.26), controlPoint1: CGPoint(x: 95.98, y: 15), controlPoint2: CGPoint(x: 95.72, y: 15.09))
        audioWaves.addCurve(to: CGPoint(x: 95.07, y: 15.95), controlPoint1: CGPoint(x: 95.29, y: 15.44), controlPoint2: CGPoint(x: 95.14, y: 15.67))
        audioWaves.addCurve(to: CGPoint(x: 95.01, y: 16.34), controlPoint1: CGPoint(x: 95.03, y: 16.08), controlPoint2: CGPoint(x: 95.02, y: 16.21))
        audioWaves.addCurve(to: CGPoint(x: 95, y: 16.78), controlPoint1: CGPoint(x: 95, y: 16.49), controlPoint2: CGPoint(x: 95, y: 16.64))
        audioWaves.addLine(to: CGPoint(x: 95, y: 16.79))
        audioWaves.addLine(to: CGPoint(x: 95, y: 41.21))
        audioWaves.addLine(to: CGPoint(x: 95, y: 41.21))
        audioWaves.addCurve(to: CGPoint(x: 95.01, y: 41.66), controlPoint1: CGPoint(x: 95, y: 41.36), controlPoint2: CGPoint(x: 95, y: 41.51))
        audioWaves.addCurve(to: CGPoint(x: 95.07, y: 42.05), controlPoint1: CGPoint(x: 95.02, y: 41.79), controlPoint2: CGPoint(x: 95.03, y: 41.92))
        audioWaves.addCurve(to: CGPoint(x: 95.51, y: 42.74), controlPoint1: CGPoint(x: 95.14, y: 42.32), controlPoint2: CGPoint(x: 95.29, y: 42.56))
        audioWaves.addCurve(to: CGPoint(x: 96.25, y: 43), controlPoint1: CGPoint(x: 95.72, y: 42.91), controlPoint2: CGPoint(x: 95.98, y: 43))
        audioWaves.addCurve(to: CGPoint(x: 97, y: 42.74), controlPoint1: CGPoint(x: 96.52, y: 43), controlPoint2: CGPoint(x: 96.78, y: 42.91))
        audioWaves.addCurve(to: CGPoint(x: 97.44, y: 42.05), controlPoint1: CGPoint(x: 97.21, y: 42.56), controlPoint2: CGPoint(x: 97.36, y: 42.32))
        audioWaves.addCurve(to: CGPoint(x: 97.49, y: 41.66), controlPoint1: CGPoint(x: 97.47, y: 41.92), controlPoint2: CGPoint(x: 97.49, y: 41.79))
        audioWaves.addCurve(to: CGPoint(x: 97.5, y: 41.21), controlPoint1: CGPoint(x: 97.5, y: 41.51), controlPoint2: CGPoint(x: 97.5, y: 41.36))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 41.21))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 16.79))
        audioWaves.addLine(to: CGPoint(x: 97.5, y: 16.78))
        audioWaves.addCurve(to: CGPoint(x: 97.49, y: 16.34), controlPoint1: CGPoint(x: 97.5, y: 16.64), controlPoint2: CGPoint(x: 97.5, y: 16.49))
        audioWaves.addLine(to: CGPoint(x: 97.49, y: 16.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 103.44, y: 9.95))
        audioWaves.addCurve(to: CGPoint(x: 103, y: 9.26), controlPoint1: CGPoint(x: 103.36, y: 9.67), controlPoint2: CGPoint(x: 103.21, y: 9.44))
        audioWaves.addCurve(to: CGPoint(x: 102.25, y: 9), controlPoint1: CGPoint(x: 102.78, y: 9.09), controlPoint2: CGPoint(x: 102.52, y: 9))
        audioWaves.addCurve(to: CGPoint(x: 101.51, y: 9.26), controlPoint1: CGPoint(x: 101.98, y: 9), controlPoint2: CGPoint(x: 101.72, y: 9.09))
        audioWaves.addCurve(to: CGPoint(x: 101.07, y: 9.95), controlPoint1: CGPoint(x: 101.29, y: 9.44), controlPoint2: CGPoint(x: 101.14, y: 9.67))
        audioWaves.addCurve(to: CGPoint(x: 101.01, y: 10.34), controlPoint1: CGPoint(x: 101.03, y: 10.08), controlPoint2: CGPoint(x: 101.02, y: 10.21))
        audioWaves.addCurve(to: CGPoint(x: 101, y: 10.78), controlPoint1: CGPoint(x: 101, y: 10.49), controlPoint2: CGPoint(x: 101, y: 10.64))
        audioWaves.addLine(to: CGPoint(x: 101, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 101, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 101, y: 47.21))
        audioWaves.addCurve(to: CGPoint(x: 101.01, y: 47.66), controlPoint1: CGPoint(x: 101, y: 47.36), controlPoint2: CGPoint(x: 101, y: 47.51))
        audioWaves.addCurve(to: CGPoint(x: 101.07, y: 48.05), controlPoint1: CGPoint(x: 101.02, y: 47.79), controlPoint2: CGPoint(x: 101.03, y: 47.92))
        audioWaves.addCurve(to: CGPoint(x: 101.51, y: 48.74), controlPoint1: CGPoint(x: 101.14, y: 48.32), controlPoint2: CGPoint(x: 101.29, y: 48.56))
        audioWaves.addCurve(to: CGPoint(x: 102.25, y: 49), controlPoint1: CGPoint(x: 101.72, y: 48.91), controlPoint2: CGPoint(x: 101.98, y: 49))
        audioWaves.addCurve(to: CGPoint(x: 103, y: 48.74), controlPoint1: CGPoint(x: 102.52, y: 49), controlPoint2: CGPoint(x: 102.78, y: 48.91))
        audioWaves.addCurve(to: CGPoint(x: 103.44, y: 48.05), controlPoint1: CGPoint(x: 103.21, y: 48.56), controlPoint2: CGPoint(x: 103.36, y: 48.32))
        audioWaves.addCurve(to: CGPoint(x: 103.49, y: 47.66), controlPoint1: CGPoint(x: 103.47, y: 47.92), controlPoint2: CGPoint(x: 103.49, y: 47.79))
        audioWaves.addCurve(to: CGPoint(x: 103.5, y: 47.21), controlPoint1: CGPoint(x: 103.5, y: 47.51), controlPoint2: CGPoint(x: 103.5, y: 47.36))
        audioWaves.addLine(to: CGPoint(x: 103.5, y: 10.78))
        audioWaves.addCurve(to: CGPoint(x: 103.49, y: 10.34), controlPoint1: CGPoint(x: 103.5, y: 10.64), controlPoint2: CGPoint(x: 103.5, y: 10.49))
        audioWaves.addCurve(to: CGPoint(x: 103.44, y: 9.95), controlPoint1: CGPoint(x: 103.49, y: 10.21), controlPoint2: CGPoint(x: 103.47, y: 10.08))
        audioWaves.addLine(to: CGPoint(x: 103.44, y: 9.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 109.49, y: 13.34))
        audioWaves.addCurve(to: CGPoint(x: 109.44, y: 12.95), controlPoint1: CGPoint(x: 109.49, y: 13.21), controlPoint2: CGPoint(x: 109.47, y: 13.08))
        audioWaves.addCurve(to: CGPoint(x: 109, y: 12.26), controlPoint1: CGPoint(x: 109.36, y: 12.67), controlPoint2: CGPoint(x: 109.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 108.25, y: 12), controlPoint1: CGPoint(x: 108.78, y: 12.09), controlPoint2: CGPoint(x: 108.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 107.51, y: 12.26), controlPoint1: CGPoint(x: 107.98, y: 12), controlPoint2: CGPoint(x: 107.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 107.07, y: 12.95), controlPoint1: CGPoint(x: 107.29, y: 12.44), controlPoint2: CGPoint(x: 107.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 107.01, y: 13.34), controlPoint1: CGPoint(x: 107.03, y: 13.08), controlPoint2: CGPoint(x: 107.02, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 107, y: 13.78), controlPoint1: CGPoint(x: 107, y: 13.49), controlPoint2: CGPoint(x: 107, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 107, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 107, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 107, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 107.01, y: 44.66), controlPoint1: CGPoint(x: 107, y: 44.36), controlPoint2: CGPoint(x: 107, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 107.07, y: 45.05), controlPoint1: CGPoint(x: 107.02, y: 44.79), controlPoint2: CGPoint(x: 107.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 107.51, y: 45.74), controlPoint1: CGPoint(x: 107.14, y: 45.32), controlPoint2: CGPoint(x: 107.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 108.25, y: 46), controlPoint1: CGPoint(x: 107.72, y: 45.91), controlPoint2: CGPoint(x: 107.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 109, y: 45.74), controlPoint1: CGPoint(x: 108.52, y: 46), controlPoint2: CGPoint(x: 108.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 109.44, y: 45.05), controlPoint1: CGPoint(x: 109.21, y: 45.56), controlPoint2: CGPoint(x: 109.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 109.49, y: 44.66), controlPoint1: CGPoint(x: 109.47, y: 44.92), controlPoint2: CGPoint(x: 109.49, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 109.5, y: 44.21), controlPoint1: CGPoint(x: 109.5, y: 44.51), controlPoint2: CGPoint(x: 109.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 109.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 109.49, y: 13.34), controlPoint1: CGPoint(x: 109.5, y: 13.64), controlPoint2: CGPoint(x: 109.5, y: 13.49))
        audioWaves.addLine(to: CGPoint(x: 109.49, y: 13.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 115.49, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 115.44, y: 19.95), controlPoint1: CGPoint(x: 115.49, y: 20.21), controlPoint2: CGPoint(x: 115.47, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 115, y: 19.26), controlPoint1: CGPoint(x: 115.36, y: 19.68), controlPoint2: CGPoint(x: 115.21, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 114.25, y: 19), controlPoint1: CGPoint(x: 114.78, y: 19.09), controlPoint2: CGPoint(x: 114.52, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 113.51, y: 19.26), controlPoint1: CGPoint(x: 113.98, y: 19), controlPoint2: CGPoint(x: 113.72, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 113.07, y: 19.95), controlPoint1: CGPoint(x: 113.29, y: 19.44), controlPoint2: CGPoint(x: 113.14, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 113.01, y: 20.34), controlPoint1: CGPoint(x: 113.03, y: 20.08), controlPoint2: CGPoint(x: 113.02, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 113, y: 20.78), controlPoint1: CGPoint(x: 113, y: 20.49), controlPoint2: CGPoint(x: 113, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 113, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 113, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 113, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 113.01, y: 37.66), controlPoint1: CGPoint(x: 113, y: 37.36), controlPoint2: CGPoint(x: 113, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 113.07, y: 38.05), controlPoint1: CGPoint(x: 113.02, y: 37.79), controlPoint2: CGPoint(x: 113.03, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 113.51, y: 38.74), controlPoint1: CGPoint(x: 113.14, y: 38.32), controlPoint2: CGPoint(x: 113.29, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 114.25, y: 39), controlPoint1: CGPoint(x: 113.72, y: 38.91), controlPoint2: CGPoint(x: 113.98, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 115, y: 38.74), controlPoint1: CGPoint(x: 114.52, y: 39), controlPoint2: CGPoint(x: 114.78, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 115.44, y: 38.05), controlPoint1: CGPoint(x: 115.21, y: 38.56), controlPoint2: CGPoint(x: 115.36, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 115.49, y: 37.66), controlPoint1: CGPoint(x: 115.47, y: 37.92), controlPoint2: CGPoint(x: 115.49, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 115.5, y: 37.21), controlPoint1: CGPoint(x: 115.5, y: 37.51), controlPoint2: CGPoint(x: 115.5, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 115.5, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 115.49, y: 20.34), controlPoint1: CGPoint(x: 115.5, y: 20.64), controlPoint2: CGPoint(x: 115.5, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 115.49, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 121.44, y: 12.95))
        audioWaves.addCurve(to: CGPoint(x: 121, y: 12.26), controlPoint1: CGPoint(x: 121.36, y: 12.67), controlPoint2: CGPoint(x: 121.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 120.25, y: 12), controlPoint1: CGPoint(x: 120.78, y: 12.09), controlPoint2: CGPoint(x: 120.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 119.51, y: 12.26), controlPoint1: CGPoint(x: 119.98, y: 12), controlPoint2: CGPoint(x: 119.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 119.07, y: 12.95), controlPoint1: CGPoint(x: 119.29, y: 12.44), controlPoint2: CGPoint(x: 119.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 119.01, y: 13.34), controlPoint1: CGPoint(x: 119.03, y: 13.08), controlPoint2: CGPoint(x: 119.02, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 119, y: 13.78), controlPoint1: CGPoint(x: 119, y: 13.49), controlPoint2: CGPoint(x: 119, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 119, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 119, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 119, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 119.01, y: 44.66), controlPoint1: CGPoint(x: 119, y: 44.36), controlPoint2: CGPoint(x: 119, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 119.07, y: 45.05), controlPoint1: CGPoint(x: 119.02, y: 44.79), controlPoint2: CGPoint(x: 119.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 119.51, y: 45.74), controlPoint1: CGPoint(x: 119.14, y: 45.32), controlPoint2: CGPoint(x: 119.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 120.25, y: 46), controlPoint1: CGPoint(x: 119.72, y: 45.91), controlPoint2: CGPoint(x: 119.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 121, y: 45.74), controlPoint1: CGPoint(x: 120.52, y: 46), controlPoint2: CGPoint(x: 120.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 121.44, y: 45.05), controlPoint1: CGPoint(x: 121.21, y: 45.56), controlPoint2: CGPoint(x: 121.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 121.49, y: 44.66), controlPoint1: CGPoint(x: 121.47, y: 44.92), controlPoint2: CGPoint(x: 121.49, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 121.5, y: 44.21), controlPoint1: CGPoint(x: 121.5, y: 44.51), controlPoint2: CGPoint(x: 121.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 121.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 121.49, y: 13.34), controlPoint1: CGPoint(x: 121.5, y: 13.64), controlPoint2: CGPoint(x: 121.5, y: 13.49))
        audioWaves.addCurve(to: CGPoint(x: 121.44, y: 12.95), controlPoint1: CGPoint(x: 121.49, y: 13.21), controlPoint2: CGPoint(x: 121.47, y: 13.08))
        audioWaves.addLine(to: CGPoint(x: 121.44, y: 12.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 127.49, y: 15.34))
        audioWaves.addCurve(to: CGPoint(x: 127.44, y: 14.95), controlPoint1: CGPoint(x: 127.49, y: 15.21), controlPoint2: CGPoint(x: 127.47, y: 15.08))
        audioWaves.addCurve(to: CGPoint(x: 127, y: 14.26), controlPoint1: CGPoint(x: 127.36, y: 14.67), controlPoint2: CGPoint(x: 127.21, y: 14.44))
        audioWaves.addCurve(to: CGPoint(x: 126.25, y: 14), controlPoint1: CGPoint(x: 126.78, y: 14.09), controlPoint2: CGPoint(x: 126.52, y: 14))
        audioWaves.addCurve(to: CGPoint(x: 125.51, y: 14.26), controlPoint1: CGPoint(x: 125.98, y: 14), controlPoint2: CGPoint(x: 125.72, y: 14.09))
        audioWaves.addCurve(to: CGPoint(x: 125.07, y: 14.95), controlPoint1: CGPoint(x: 125.29, y: 14.44), controlPoint2: CGPoint(x: 125.14, y: 14.67))
        audioWaves.addCurve(to: CGPoint(x: 125.01, y: 15.34), controlPoint1: CGPoint(x: 125.03, y: 15.08), controlPoint2: CGPoint(x: 125.02, y: 15.21))
        audioWaves.addCurve(to: CGPoint(x: 125, y: 15.78), controlPoint1: CGPoint(x: 125, y: 15.49), controlPoint2: CGPoint(x: 125, y: 15.64))
        audioWaves.addLine(to: CGPoint(x: 125, y: 15.79))
        audioWaves.addLine(to: CGPoint(x: 125, y: 42.21))
        audioWaves.addLine(to: CGPoint(x: 125, y: 42.21))
        audioWaves.addCurve(to: CGPoint(x: 125.01, y: 42.66), controlPoint1: CGPoint(x: 125, y: 42.36), controlPoint2: CGPoint(x: 125, y: 42.51))
        audioWaves.addCurve(to: CGPoint(x: 125.07, y: 43.05), controlPoint1: CGPoint(x: 125.02, y: 42.79), controlPoint2: CGPoint(x: 125.03, y: 42.92))
        audioWaves.addCurve(to: CGPoint(x: 125.51, y: 43.74), controlPoint1: CGPoint(x: 125.14, y: 43.32), controlPoint2: CGPoint(x: 125.29, y: 43.56))
        audioWaves.addCurve(to: CGPoint(x: 126.25, y: 44), controlPoint1: CGPoint(x: 125.72, y: 43.91), controlPoint2: CGPoint(x: 125.98, y: 44))
        audioWaves.addCurve(to: CGPoint(x: 127, y: 43.74), controlPoint1: CGPoint(x: 126.52, y: 44), controlPoint2: CGPoint(x: 126.78, y: 43.91))
        audioWaves.addCurve(to: CGPoint(x: 127.44, y: 43.05), controlPoint1: CGPoint(x: 127.21, y: 43.56), controlPoint2: CGPoint(x: 127.36, y: 43.32))
        audioWaves.addCurve(to: CGPoint(x: 127.49, y: 42.66), controlPoint1: CGPoint(x: 127.47, y: 42.92), controlPoint2: CGPoint(x: 127.49, y: 42.79))
        audioWaves.addCurve(to: CGPoint(x: 127.5, y: 42.21), controlPoint1: CGPoint(x: 127.5, y: 42.51), controlPoint2: CGPoint(x: 127.5, y: 42.36))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 42.21))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 15.79))
        audioWaves.addLine(to: CGPoint(x: 127.5, y: 15.78))
        audioWaves.addCurve(to: CGPoint(x: 127.49, y: 15.34), controlPoint1: CGPoint(x: 127.5, y: 15.64), controlPoint2: CGPoint(x: 127.5, y: 15.49))
        audioWaves.addLine(to: CGPoint(x: 127.49, y: 15.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 133.44, y: 23.95))
        audioWaves.addCurve(to: CGPoint(x: 133, y: 23.26), controlPoint1: CGPoint(x: 133.36, y: 23.68), controlPoint2: CGPoint(x: 133.21, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 132.25, y: 23), controlPoint1: CGPoint(x: 132.78, y: 23.09), controlPoint2: CGPoint(x: 132.52, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 131.51, y: 23.26), controlPoint1: CGPoint(x: 131.98, y: 23), controlPoint2: CGPoint(x: 131.72, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 131.07, y: 23.95), controlPoint1: CGPoint(x: 131.29, y: 23.44), controlPoint2: CGPoint(x: 131.14, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 131.01, y: 24.34), controlPoint1: CGPoint(x: 131.03, y: 24.08), controlPoint2: CGPoint(x: 131.01, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 131, y: 24.78), controlPoint1: CGPoint(x: 131, y: 24.49), controlPoint2: CGPoint(x: 131, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 131, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 131.01, y: 33.66), controlPoint1: CGPoint(x: 131, y: 33.36), controlPoint2: CGPoint(x: 131, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 131.07, y: 34.05), controlPoint1: CGPoint(x: 131.01, y: 33.79), controlPoint2: CGPoint(x: 131.03, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 131.51, y: 34.74), controlPoint1: CGPoint(x: 131.14, y: 34.32), controlPoint2: CGPoint(x: 131.29, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 132.25, y: 35), controlPoint1: CGPoint(x: 131.72, y: 34.91), controlPoint2: CGPoint(x: 131.98, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 133, y: 34.74), controlPoint1: CGPoint(x: 132.52, y: 35), controlPoint2: CGPoint(x: 132.78, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 133.44, y: 34.05), controlPoint1: CGPoint(x: 133.21, y: 34.56), controlPoint2: CGPoint(x: 133.36, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 133.49, y: 33.66), controlPoint1: CGPoint(x: 133.47, y: 33.92), controlPoint2: CGPoint(x: 133.48, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 133.5, y: 33.21), controlPoint1: CGPoint(x: 133.5, y: 33.51), controlPoint2: CGPoint(x: 133.5, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 133.5, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 133.49, y: 24.34), controlPoint1: CGPoint(x: 133.5, y: 24.64), controlPoint2: CGPoint(x: 133.5, y: 24.49))
        audioWaves.addCurve(to: CGPoint(x: 133.44, y: 23.95), controlPoint1: CGPoint(x: 133.48, y: 24.21), controlPoint2: CGPoint(x: 133.47, y: 24.08))
        audioWaves.addLine(to: CGPoint(x: 133.44, y: 23.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 139.49, y: 22.34))
        audioWaves.addCurve(to: CGPoint(x: 139.44, y: 21.95), controlPoint1: CGPoint(x: 139.48, y: 22.21), controlPoint2: CGPoint(x: 139.47, y: 22.08))
        audioWaves.addCurve(to: CGPoint(x: 139, y: 21.26), controlPoint1: CGPoint(x: 139.36, y: 21.68), controlPoint2: CGPoint(x: 139.21, y: 21.44))
        audioWaves.addCurve(to: CGPoint(x: 138.25, y: 21), controlPoint1: CGPoint(x: 138.78, y: 21.09), controlPoint2: CGPoint(x: 138.52, y: 21))
        audioWaves.addCurve(to: CGPoint(x: 137.51, y: 21.26), controlPoint1: CGPoint(x: 137.98, y: 21), controlPoint2: CGPoint(x: 137.72, y: 21.09))
        audioWaves.addCurve(to: CGPoint(x: 137.07, y: 21.95), controlPoint1: CGPoint(x: 137.29, y: 21.44), controlPoint2: CGPoint(x: 137.14, y: 21.68))
        audioWaves.addCurve(to: CGPoint(x: 137.01, y: 22.34), controlPoint1: CGPoint(x: 137.03, y: 22.08), controlPoint2: CGPoint(x: 137.01, y: 22.21))
        audioWaves.addCurve(to: CGPoint(x: 137, y: 22.78), controlPoint1: CGPoint(x: 137, y: 22.49), controlPoint2: CGPoint(x: 137, y: 22.64))
        audioWaves.addLine(to: CGPoint(x: 137, y: 22.79))
        audioWaves.addLine(to: CGPoint(x: 137, y: 35.21))
        audioWaves.addLine(to: CGPoint(x: 137, y: 35.21))
        audioWaves.addCurve(to: CGPoint(x: 137.01, y: 35.66), controlPoint1: CGPoint(x: 137, y: 35.36), controlPoint2: CGPoint(x: 137, y: 35.51))
        audioWaves.addCurve(to: CGPoint(x: 137.07, y: 36.05), controlPoint1: CGPoint(x: 137.01, y: 35.79), controlPoint2: CGPoint(x: 137.03, y: 35.92))
        audioWaves.addCurve(to: CGPoint(x: 137.51, y: 36.74), controlPoint1: CGPoint(x: 137.14, y: 36.32), controlPoint2: CGPoint(x: 137.29, y: 36.56))
        audioWaves.addCurve(to: CGPoint(x: 138.25, y: 37), controlPoint1: CGPoint(x: 137.72, y: 36.91), controlPoint2: CGPoint(x: 137.98, y: 37))
        audioWaves.addCurve(to: CGPoint(x: 139, y: 36.74), controlPoint1: CGPoint(x: 138.52, y: 37), controlPoint2: CGPoint(x: 138.78, y: 36.91))
        audioWaves.addCurve(to: CGPoint(x: 139.44, y: 36.05), controlPoint1: CGPoint(x: 139.21, y: 36.56), controlPoint2: CGPoint(x: 139.36, y: 36.32))
        audioWaves.addCurve(to: CGPoint(x: 139.49, y: 35.66), controlPoint1: CGPoint(x: 139.47, y: 35.92), controlPoint2: CGPoint(x: 139.48, y: 35.79))
        audioWaves.addCurve(to: CGPoint(x: 139.5, y: 35.21), controlPoint1: CGPoint(x: 139.5, y: 35.51), controlPoint2: CGPoint(x: 139.5, y: 35.36))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 35.21))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 22.79))
        audioWaves.addLine(to: CGPoint(x: 139.5, y: 22.78))
        audioWaves.addCurve(to: CGPoint(x: 139.49, y: 22.34), controlPoint1: CGPoint(x: 139.5, y: 22.64), controlPoint2: CGPoint(x: 139.5, y: 22.49))
        audioWaves.addLine(to: CGPoint(x: 139.49, y: 22.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 145.44, y: 24.95))
        audioWaves.addCurve(to: CGPoint(x: 145, y: 24.26), controlPoint1: CGPoint(x: 145.36, y: 24.68), controlPoint2: CGPoint(x: 145.21, y: 24.44))
        audioWaves.addCurve(to: CGPoint(x: 144.25, y: 24), controlPoint1: CGPoint(x: 144.78, y: 24.09), controlPoint2: CGPoint(x: 144.52, y: 24))
        audioWaves.addCurve(to: CGPoint(x: 143.51, y: 24.26), controlPoint1: CGPoint(x: 143.98, y: 24), controlPoint2: CGPoint(x: 143.72, y: 24.09))
        audioWaves.addCurve(to: CGPoint(x: 143.07, y: 24.95), controlPoint1: CGPoint(x: 143.29, y: 24.44), controlPoint2: CGPoint(x: 143.14, y: 24.68))
        audioWaves.addCurve(to: CGPoint(x: 143.01, y: 25.34), controlPoint1: CGPoint(x: 143.03, y: 25.08), controlPoint2: CGPoint(x: 143.01, y: 25.21))
        audioWaves.addCurve(to: CGPoint(x: 143, y: 25.78), controlPoint1: CGPoint(x: 143, y: 25.49), controlPoint2: CGPoint(x: 143, y: 25.64))
        audioWaves.addLine(to: CGPoint(x: 143, y: 32.21))
        audioWaves.addCurve(to: CGPoint(x: 143.01, y: 32.66), controlPoint1: CGPoint(x: 143, y: 32.36), controlPoint2: CGPoint(x: 143, y: 32.51))
        audioWaves.addCurve(to: CGPoint(x: 143.07, y: 33.05), controlPoint1: CGPoint(x: 143.01, y: 32.79), controlPoint2: CGPoint(x: 143.03, y: 32.92))
        audioWaves.addCurve(to: CGPoint(x: 143.51, y: 33.74), controlPoint1: CGPoint(x: 143.14, y: 33.32), controlPoint2: CGPoint(x: 143.29, y: 33.56))
        audioWaves.addCurve(to: CGPoint(x: 144.25, y: 34), controlPoint1: CGPoint(x: 143.72, y: 33.91), controlPoint2: CGPoint(x: 143.98, y: 34))
        audioWaves.addCurve(to: CGPoint(x: 145, y: 33.74), controlPoint1: CGPoint(x: 144.52, y: 34), controlPoint2: CGPoint(x: 144.78, y: 33.91))
        audioWaves.addCurve(to: CGPoint(x: 145.44, y: 33.05), controlPoint1: CGPoint(x: 145.21, y: 33.56), controlPoint2: CGPoint(x: 145.36, y: 33.32))
        audioWaves.addCurve(to: CGPoint(x: 145.49, y: 32.66), controlPoint1: CGPoint(x: 145.47, y: 32.92), controlPoint2: CGPoint(x: 145.48, y: 32.79))
        audioWaves.addCurve(to: CGPoint(x: 145.5, y: 32.21), controlPoint1: CGPoint(x: 145.5, y: 32.51), controlPoint2: CGPoint(x: 145.5, y: 32.36))
        audioWaves.addLine(to: CGPoint(x: 145.5, y: 25.78))
        audioWaves.addCurve(to: CGPoint(x: 145.49, y: 25.34), controlPoint1: CGPoint(x: 145.5, y: 25.64), controlPoint2: CGPoint(x: 145.5, y: 25.49))
        audioWaves.addCurve(to: CGPoint(x: 145.44, y: 24.95), controlPoint1: CGPoint(x: 145.48, y: 25.21), controlPoint2: CGPoint(x: 145.47, y: 25.08))
        audioWaves.addLine(to: CGPoint(x: 145.44, y: 24.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 151.49, y: 27.34))
        audioWaves.addCurve(to: CGPoint(x: 151.44, y: 26.95), controlPoint1: CGPoint(x: 151.48, y: 27.21), controlPoint2: CGPoint(x: 151.47, y: 27.08))
        audioWaves.addCurve(to: CGPoint(x: 151, y: 26.26), controlPoint1: CGPoint(x: 151.36, y: 26.68), controlPoint2: CGPoint(x: 151.21, y: 26.44))
        audioWaves.addCurve(to: CGPoint(x: 150.25, y: 26), controlPoint1: CGPoint(x: 150.78, y: 26.09), controlPoint2: CGPoint(x: 150.52, y: 26))
        audioWaves.addCurve(to: CGPoint(x: 149.51, y: 26.26), controlPoint1: CGPoint(x: 149.98, y: 26), controlPoint2: CGPoint(x: 149.72, y: 26.09))
        audioWaves.addCurve(to: CGPoint(x: 149.07, y: 26.95), controlPoint1: CGPoint(x: 149.29, y: 26.44), controlPoint2: CGPoint(x: 149.14, y: 26.68))
        audioWaves.addCurve(to: CGPoint(x: 149.01, y: 27.34), controlPoint1: CGPoint(x: 149.03, y: 27.08), controlPoint2: CGPoint(x: 149.01, y: 27.21))
        audioWaves.addCurve(to: CGPoint(x: 149, y: 27.78), controlPoint1: CGPoint(x: 149, y: 27.49), controlPoint2: CGPoint(x: 149, y: 27.64))
        audioWaves.addLine(to: CGPoint(x: 149, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 149, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 149, y: 30.22))
        audioWaves.addCurve(to: CGPoint(x: 149.01, y: 30.66), controlPoint1: CGPoint(x: 149, y: 30.36), controlPoint2: CGPoint(x: 149, y: 30.51))
        audioWaves.addCurve(to: CGPoint(x: 149.07, y: 31.05), controlPoint1: CGPoint(x: 149.01, y: 30.79), controlPoint2: CGPoint(x: 149.03, y: 30.92))
        audioWaves.addCurve(to: CGPoint(x: 149.51, y: 31.74), controlPoint1: CGPoint(x: 149.14, y: 31.32), controlPoint2: CGPoint(x: 149.29, y: 31.56))
        audioWaves.addCurve(to: CGPoint(x: 150.25, y: 32), controlPoint1: CGPoint(x: 149.72, y: 31.91), controlPoint2: CGPoint(x: 149.98, y: 32))
        audioWaves.addCurve(to: CGPoint(x: 151, y: 31.74), controlPoint1: CGPoint(x: 150.52, y: 32), controlPoint2: CGPoint(x: 150.78, y: 31.91))
        audioWaves.addCurve(to: CGPoint(x: 151.44, y: 31.05), controlPoint1: CGPoint(x: 151.21, y: 31.56), controlPoint2: CGPoint(x: 151.36, y: 31.32))
        audioWaves.addCurve(to: CGPoint(x: 151.49, y: 30.66), controlPoint1: CGPoint(x: 151.47, y: 30.92), controlPoint2: CGPoint(x: 151.48, y: 30.79))
        audioWaves.addCurve(to: CGPoint(x: 151.5, y: 30.22), controlPoint1: CGPoint(x: 151.5, y: 30.51), controlPoint2: CGPoint(x: 151.5, y: 30.36))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 30.21))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 27.79))
        audioWaves.addLine(to: CGPoint(x: 151.5, y: 27.78))
        audioWaves.addCurve(to: CGPoint(x: 151.49, y: 27.34), controlPoint1: CGPoint(x: 151.5, y: 27.64), controlPoint2: CGPoint(x: 151.5, y: 27.49))
        audioWaves.addLine(to: CGPoint(x: 151.49, y: 27.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 156.99, y: 10.34))
        audioWaves.addCurve(to: CGPoint(x: 156.94, y: 9.95), controlPoint1: CGPoint(x: 156.98, y: 10.21), controlPoint2: CGPoint(x: 156.97, y: 10.08))
        audioWaves.addCurve(to: CGPoint(x: 156.5, y: 9.26), controlPoint1: CGPoint(x: 156.86, y: 9.67), controlPoint2: CGPoint(x: 156.71, y: 9.44))
        audioWaves.addCurve(to: CGPoint(x: 155.75, y: 9), controlPoint1: CGPoint(x: 156.28, y: 9.09), controlPoint2: CGPoint(x: 156.02, y: 9))
        audioWaves.addCurve(to: CGPoint(x: 155.01, y: 9.26), controlPoint1: CGPoint(x: 155.48, y: 9), controlPoint2: CGPoint(x: 155.22, y: 9.09))
        audioWaves.addCurve(to: CGPoint(x: 154.57, y: 9.95), controlPoint1: CGPoint(x: 154.79, y: 9.44), controlPoint2: CGPoint(x: 154.64, y: 9.67))
        audioWaves.addCurve(to: CGPoint(x: 154.51, y: 10.34), controlPoint1: CGPoint(x: 154.53, y: 10.08), controlPoint2: CGPoint(x: 154.51, y: 10.21))
        audioWaves.addCurve(to: CGPoint(x: 154.5, y: 10.78), controlPoint1: CGPoint(x: 154.5, y: 10.49), controlPoint2: CGPoint(x: 154.5, y: 10.64))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 154.5, y: 47.21))
        audioWaves.addCurve(to: CGPoint(x: 154.51, y: 47.66), controlPoint1: CGPoint(x: 154.5, y: 47.36), controlPoint2: CGPoint(x: 154.5, y: 47.51))
        audioWaves.addCurve(to: CGPoint(x: 154.57, y: 48.05), controlPoint1: CGPoint(x: 154.51, y: 47.79), controlPoint2: CGPoint(x: 154.53, y: 47.92))
        audioWaves.addCurve(to: CGPoint(x: 155.01, y: 48.74), controlPoint1: CGPoint(x: 154.64, y: 48.32), controlPoint2: CGPoint(x: 154.79, y: 48.56))
        audioWaves.addCurve(to: CGPoint(x: 155.75, y: 49), controlPoint1: CGPoint(x: 155.22, y: 48.91), controlPoint2: CGPoint(x: 155.48, y: 49))
        audioWaves.addCurve(to: CGPoint(x: 156.5, y: 48.74), controlPoint1: CGPoint(x: 156.02, y: 49), controlPoint2: CGPoint(x: 156.28, y: 48.91))
        audioWaves.addCurve(to: CGPoint(x: 156.94, y: 48.05), controlPoint1: CGPoint(x: 156.71, y: 48.56), controlPoint2: CGPoint(x: 156.86, y: 48.32))
        audioWaves.addCurve(to: CGPoint(x: 156.99, y: 47.66), controlPoint1: CGPoint(x: 156.97, y: 47.92), controlPoint2: CGPoint(x: 156.98, y: 47.79))
        audioWaves.addCurve(to: CGPoint(x: 157, y: 47.21), controlPoint1: CGPoint(x: 157, y: 47.51), controlPoint2: CGPoint(x: 157, y: 47.36))
        audioWaves.addLine(to: CGPoint(x: 157, y: 47.21))
        audioWaves.addLine(to: CGPoint(x: 157, y: 10.79))
        audioWaves.addLine(to: CGPoint(x: 157, y: 10.78))
        audioWaves.addCurve(to: CGPoint(x: 156.99, y: 10.34), controlPoint1: CGPoint(x: 157, y: 10.64), controlPoint2: CGPoint(x: 157, y: 10.49))
        audioWaves.addLine(to: CGPoint(x: 156.99, y: 10.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 162.99, y: 3.34))
        audioWaves.addCurve(to: CGPoint(x: 162.94, y: 2.95), controlPoint1: CGPoint(x: 162.98, y: 3.21), controlPoint2: CGPoint(x: 162.97, y: 3.08))
        audioWaves.addCurve(to: CGPoint(x: 162.5, y: 2.26), controlPoint1: CGPoint(x: 162.86, y: 2.68), controlPoint2: CGPoint(x: 162.71, y: 2.44))
        audioWaves.addCurve(to: CGPoint(x: 161.75, y: 2), controlPoint1: CGPoint(x: 162.28, y: 2.09), controlPoint2: CGPoint(x: 162.02, y: 2))
        audioWaves.addCurve(to: CGPoint(x: 161.01, y: 2.26), controlPoint1: CGPoint(x: 161.48, y: 2), controlPoint2: CGPoint(x: 161.22, y: 2.09))
        audioWaves.addCurve(to: CGPoint(x: 160.57, y: 2.95), controlPoint1: CGPoint(x: 160.79, y: 2.44), controlPoint2: CGPoint(x: 160.64, y: 2.68))
        audioWaves.addCurve(to: CGPoint(x: 160.51, y: 3.34), controlPoint1: CGPoint(x: 160.53, y: 3.08), controlPoint2: CGPoint(x: 160.51, y: 3.21))
        audioWaves.addCurve(to: CGPoint(x: 160.5, y: 3.78), controlPoint1: CGPoint(x: 160.5, y: 3.49), controlPoint2: CGPoint(x: 160.5, y: 3.64))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 160.5, y: 54.21))
        audioWaves.addCurve(to: CGPoint(x: 160.51, y: 54.66), controlPoint1: CGPoint(x: 160.5, y: 54.36), controlPoint2: CGPoint(x: 160.5, y: 54.51))
        audioWaves.addCurve(to: CGPoint(x: 160.57, y: 55.05), controlPoint1: CGPoint(x: 160.51, y: 54.79), controlPoint2: CGPoint(x: 160.53, y: 54.92))
        audioWaves.addCurve(to: CGPoint(x: 161.01, y: 55.74), controlPoint1: CGPoint(x: 160.64, y: 55.32), controlPoint2: CGPoint(x: 160.79, y: 55.56))
        audioWaves.addCurve(to: CGPoint(x: 161.75, y: 56), controlPoint1: CGPoint(x: 161.22, y: 55.91), controlPoint2: CGPoint(x: 161.48, y: 56))
        audioWaves.addCurve(to: CGPoint(x: 162.5, y: 55.74), controlPoint1: CGPoint(x: 162.02, y: 56), controlPoint2: CGPoint(x: 162.28, y: 55.91))
        audioWaves.addCurve(to: CGPoint(x: 162.94, y: 55.05), controlPoint1: CGPoint(x: 162.71, y: 55.56), controlPoint2: CGPoint(x: 162.86, y: 55.32))
        audioWaves.addCurve(to: CGPoint(x: 162.99, y: 54.66), controlPoint1: CGPoint(x: 162.97, y: 54.92), controlPoint2: CGPoint(x: 162.98, y: 54.79))
        audioWaves.addCurve(to: CGPoint(x: 163, y: 54.21), controlPoint1: CGPoint(x: 163, y: 54.51), controlPoint2: CGPoint(x: 163, y: 54.36))
        audioWaves.addLine(to: CGPoint(x: 163, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 163, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 163, y: 3.78))
        audioWaves.addCurve(to: CGPoint(x: 162.99, y: 3.34), controlPoint1: CGPoint(x: 163, y: 3.64), controlPoint2: CGPoint(x: 163, y: 3.49))
        audioWaves.addLine(to: CGPoint(x: 162.99, y: 3.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 168.94, y: 12.45))
        audioWaves.addCurve(to: CGPoint(x: 168.5, y: 11.76), controlPoint1: CGPoint(x: 168.86, y: 12.17), controlPoint2: CGPoint(x: 168.71, y: 11.94))
        audioWaves.addCurve(to: CGPoint(x: 167.75, y: 11.5), controlPoint1: CGPoint(x: 168.28, y: 11.59), controlPoint2: CGPoint(x: 168.02, y: 11.5))
        audioWaves.addCurve(to: CGPoint(x: 167.01, y: 11.76), controlPoint1: CGPoint(x: 167.48, y: 11.5), controlPoint2: CGPoint(x: 167.22, y: 11.59))
        audioWaves.addCurve(to: CGPoint(x: 166.57, y: 12.45), controlPoint1: CGPoint(x: 166.79, y: 11.94), controlPoint2: CGPoint(x: 166.64, y: 12.17))
        audioWaves.addCurve(to: CGPoint(x: 166.51, y: 12.84), controlPoint1: CGPoint(x: 166.53, y: 12.58), controlPoint2: CGPoint(x: 166.52, y: 12.71))
        audioWaves.addCurve(to: CGPoint(x: 166.5, y: 13.28), controlPoint1: CGPoint(x: 166.5, y: 12.99), controlPoint2: CGPoint(x: 166.5, y: 13.14))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 13.29))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 44.71))
        audioWaves.addLine(to: CGPoint(x: 166.5, y: 44.71))
        audioWaves.addCurve(to: CGPoint(x: 166.51, y: 45.16), controlPoint1: CGPoint(x: 166.5, y: 44.86), controlPoint2: CGPoint(x: 166.5, y: 45.01))
        audioWaves.addCurve(to: CGPoint(x: 166.57, y: 45.55), controlPoint1: CGPoint(x: 166.52, y: 45.29), controlPoint2: CGPoint(x: 166.53, y: 45.42))
        audioWaves.addCurve(to: CGPoint(x: 167.01, y: 46.24), controlPoint1: CGPoint(x: 166.64, y: 45.82), controlPoint2: CGPoint(x: 166.79, y: 46.06))
        audioWaves.addCurve(to: CGPoint(x: 167.75, y: 46.5), controlPoint1: CGPoint(x: 167.22, y: 46.41), controlPoint2: CGPoint(x: 167.48, y: 46.5))
        audioWaves.addCurve(to: CGPoint(x: 168.5, y: 46.24), controlPoint1: CGPoint(x: 168.02, y: 46.5), controlPoint2: CGPoint(x: 168.28, y: 46.41))
        audioWaves.addCurve(to: CGPoint(x: 168.94, y: 45.55), controlPoint1: CGPoint(x: 168.71, y: 46.06), controlPoint2: CGPoint(x: 168.86, y: 45.82))
        audioWaves.addCurve(to: CGPoint(x: 168.99, y: 45.16), controlPoint1: CGPoint(x: 168.97, y: 45.42), controlPoint2: CGPoint(x: 168.98, y: 45.29))
        audioWaves.addCurve(to: CGPoint(x: 169, y: 44.71), controlPoint1: CGPoint(x: 169, y: 45.01), controlPoint2: CGPoint(x: 169, y: 44.86))
        audioWaves.addLine(to: CGPoint(x: 169, y: 13.28))
        audioWaves.addCurve(to: CGPoint(x: 168.99, y: 12.84), controlPoint1: CGPoint(x: 169, y: 13.14), controlPoint2: CGPoint(x: 169, y: 12.99))
        audioWaves.addCurve(to: CGPoint(x: 168.94, y: 12.45), controlPoint1: CGPoint(x: 168.98, y: 12.71), controlPoint2: CGPoint(x: 168.97, y: 12.58))
        audioWaves.addLine(to: CGPoint(x: 168.94, y: 12.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 174.99, y: 15.84))
        audioWaves.addCurve(to: CGPoint(x: 174.94, y: 15.45), controlPoint1: CGPoint(x: 174.98, y: 15.71), controlPoint2: CGPoint(x: 174.97, y: 15.58))
        audioWaves.addCurve(to: CGPoint(x: 174.5, y: 14.76), controlPoint1: CGPoint(x: 174.86, y: 15.17), controlPoint2: CGPoint(x: 174.71, y: 14.94))
        audioWaves.addCurve(to: CGPoint(x: 173.75, y: 14.5), controlPoint1: CGPoint(x: 174.28, y: 14.59), controlPoint2: CGPoint(x: 174.02, y: 14.5))
        audioWaves.addCurve(to: CGPoint(x: 173.01, y: 14.76), controlPoint1: CGPoint(x: 173.48, y: 14.5), controlPoint2: CGPoint(x: 173.22, y: 14.59))
        audioWaves.addCurve(to: CGPoint(x: 172.57, y: 15.45), controlPoint1: CGPoint(x: 172.79, y: 14.94), controlPoint2: CGPoint(x: 172.64, y: 15.17))
        audioWaves.addCurve(to: CGPoint(x: 172.51, y: 15.84), controlPoint1: CGPoint(x: 172.53, y: 15.58), controlPoint2: CGPoint(x: 172.52, y: 15.71))
        audioWaves.addCurve(to: CGPoint(x: 172.5, y: 16.28), controlPoint1: CGPoint(x: 172.5, y: 15.99), controlPoint2: CGPoint(x: 172.5, y: 16.14))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 16.29))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 41.71))
        audioWaves.addLine(to: CGPoint(x: 172.5, y: 41.71))
        audioWaves.addCurve(to: CGPoint(x: 172.51, y: 42.16), controlPoint1: CGPoint(x: 172.5, y: 41.86), controlPoint2: CGPoint(x: 172.5, y: 42.01))
        audioWaves.addCurve(to: CGPoint(x: 172.57, y: 42.55), controlPoint1: CGPoint(x: 172.52, y: 42.29), controlPoint2: CGPoint(x: 172.53, y: 42.42))
        audioWaves.addCurve(to: CGPoint(x: 173.01, y: 43.24), controlPoint1: CGPoint(x: 172.64, y: 42.82), controlPoint2: CGPoint(x: 172.79, y: 43.06))
        audioWaves.addCurve(to: CGPoint(x: 173.75, y: 43.5), controlPoint1: CGPoint(x: 173.22, y: 43.41), controlPoint2: CGPoint(x: 173.48, y: 43.5))
        audioWaves.addCurve(to: CGPoint(x: 174.5, y: 43.24), controlPoint1: CGPoint(x: 174.02, y: 43.5), controlPoint2: CGPoint(x: 174.28, y: 43.41))
        audioWaves.addCurve(to: CGPoint(x: 174.94, y: 42.55), controlPoint1: CGPoint(x: 174.71, y: 43.06), controlPoint2: CGPoint(x: 174.86, y: 42.82))
        audioWaves.addCurve(to: CGPoint(x: 174.99, y: 42.16), controlPoint1: CGPoint(x: 174.97, y: 42.42), controlPoint2: CGPoint(x: 174.98, y: 42.29))
        audioWaves.addCurve(to: CGPoint(x: 175, y: 41.71), controlPoint1: CGPoint(x: 175, y: 42.01), controlPoint2: CGPoint(x: 175, y: 41.86))
        audioWaves.addLine(to: CGPoint(x: 175, y: 41.71))
        audioWaves.addLine(to: CGPoint(x: 175, y: 16.29))
        audioWaves.addLine(to: CGPoint(x: 175, y: 16.28))
        audioWaves.addCurve(to: CGPoint(x: 174.99, y: 15.84), controlPoint1: CGPoint(x: 175, y: 16.14), controlPoint2: CGPoint(x: 175, y: 15.99))
        audioWaves.addLine(to: CGPoint(x: 174.99, y: 15.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 180.94, y: 3.95))
        audioWaves.addCurve(to: CGPoint(x: 180.5, y: 3.26), controlPoint1: CGPoint(x: 180.86, y: 3.68), controlPoint2: CGPoint(x: 180.71, y: 3.44))
        audioWaves.addCurve(to: CGPoint(x: 179.75, y: 3), controlPoint1: CGPoint(x: 180.28, y: 3.09), controlPoint2: CGPoint(x: 180.02, y: 3))
        audioWaves.addCurve(to: CGPoint(x: 179.01, y: 3.26), controlPoint1: CGPoint(x: 179.48, y: 3), controlPoint2: CGPoint(x: 179.22, y: 3.09))
        audioWaves.addCurve(to: CGPoint(x: 178.57, y: 3.95), controlPoint1: CGPoint(x: 178.79, y: 3.44), controlPoint2: CGPoint(x: 178.64, y: 3.68))
        audioWaves.addCurve(to: CGPoint(x: 178.51, y: 4.34), controlPoint1: CGPoint(x: 178.53, y: 4.08), controlPoint2: CGPoint(x: 178.52, y: 4.21))
        audioWaves.addCurve(to: CGPoint(x: 178.5, y: 4.78), controlPoint1: CGPoint(x: 178.5, y: 4.49), controlPoint2: CGPoint(x: 178.5, y: 4.64))
        audioWaves.addLine(to: CGPoint(x: 178.5, y: 53.21))
        audioWaves.addCurve(to: CGPoint(x: 178.51, y: 53.66), controlPoint1: CGPoint(x: 178.5, y: 53.36), controlPoint2: CGPoint(x: 178.5, y: 53.51))
        audioWaves.addCurve(to: CGPoint(x: 178.57, y: 54.05), controlPoint1: CGPoint(x: 178.52, y: 53.79), controlPoint2: CGPoint(x: 178.53, y: 53.92))
        audioWaves.addCurve(to: CGPoint(x: 179.01, y: 54.74), controlPoint1: CGPoint(x: 178.64, y: 54.32), controlPoint2: CGPoint(x: 178.79, y: 54.56))
        audioWaves.addCurve(to: CGPoint(x: 179.75, y: 55), controlPoint1: CGPoint(x: 179.22, y: 54.91), controlPoint2: CGPoint(x: 179.48, y: 55))
        audioWaves.addCurve(to: CGPoint(x: 180.5, y: 54.74), controlPoint1: CGPoint(x: 180.02, y: 55), controlPoint2: CGPoint(x: 180.28, y: 54.91))
        audioWaves.addCurve(to: CGPoint(x: 180.94, y: 54.05), controlPoint1: CGPoint(x: 180.71, y: 54.56), controlPoint2: CGPoint(x: 180.86, y: 54.32))
        audioWaves.addCurve(to: CGPoint(x: 180.99, y: 53.66), controlPoint1: CGPoint(x: 180.97, y: 53.92), controlPoint2: CGPoint(x: 180.98, y: 53.79))
        audioWaves.addCurve(to: CGPoint(x: 181, y: 53.21), controlPoint1: CGPoint(x: 181, y: 53.51), controlPoint2: CGPoint(x: 181, y: 53.36))
        audioWaves.addLine(to: CGPoint(x: 181, y: 4.78))
        audioWaves.addCurve(to: CGPoint(x: 180.99, y: 4.34), controlPoint1: CGPoint(x: 181, y: 4.64), controlPoint2: CGPoint(x: 181, y: 4.49))
        audioWaves.addCurve(to: CGPoint(x: 180.94, y: 3.95), controlPoint1: CGPoint(x: 180.98, y: 4.21), controlPoint2: CGPoint(x: 180.97, y: 4.08))
        audioWaves.addLine(to: CGPoint(x: 180.94, y: 3.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 186.99, y: 3.34))
        audioWaves.addCurve(to: CGPoint(x: 186.94, y: 2.95), controlPoint1: CGPoint(x: 186.98, y: 3.21), controlPoint2: CGPoint(x: 186.97, y: 3.08))
        audioWaves.addCurve(to: CGPoint(x: 186.5, y: 2.26), controlPoint1: CGPoint(x: 186.86, y: 2.68), controlPoint2: CGPoint(x: 186.71, y: 2.44))
        audioWaves.addCurve(to: CGPoint(x: 185.75, y: 2), controlPoint1: CGPoint(x: 186.28, y: 2.09), controlPoint2: CGPoint(x: 186.02, y: 2))
        audioWaves.addCurve(to: CGPoint(x: 185.01, y: 2.26), controlPoint1: CGPoint(x: 185.48, y: 2), controlPoint2: CGPoint(x: 185.22, y: 2.09))
        audioWaves.addCurve(to: CGPoint(x: 184.57, y: 2.95), controlPoint1: CGPoint(x: 184.79, y: 2.44), controlPoint2: CGPoint(x: 184.64, y: 2.68))
        audioWaves.addCurve(to: CGPoint(x: 184.51, y: 3.34), controlPoint1: CGPoint(x: 184.53, y: 3.08), controlPoint2: CGPoint(x: 184.52, y: 3.21))
        audioWaves.addCurve(to: CGPoint(x: 184.5, y: 3.78), controlPoint1: CGPoint(x: 184.5, y: 3.49), controlPoint2: CGPoint(x: 184.5, y: 3.64))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 184.5, y: 54.21))
        audioWaves.addCurve(to: CGPoint(x: 184.51, y: 54.66), controlPoint1: CGPoint(x: 184.5, y: 54.36), controlPoint2: CGPoint(x: 184.5, y: 54.51))
        audioWaves.addCurve(to: CGPoint(x: 184.57, y: 55.05), controlPoint1: CGPoint(x: 184.52, y: 54.79), controlPoint2: CGPoint(x: 184.53, y: 54.92))
        audioWaves.addCurve(to: CGPoint(x: 185.01, y: 55.74), controlPoint1: CGPoint(x: 184.64, y: 55.32), controlPoint2: CGPoint(x: 184.79, y: 55.56))
        audioWaves.addCurve(to: CGPoint(x: 185.75, y: 56), controlPoint1: CGPoint(x: 185.22, y: 55.91), controlPoint2: CGPoint(x: 185.48, y: 56))
        audioWaves.addCurve(to: CGPoint(x: 186.5, y: 55.74), controlPoint1: CGPoint(x: 186.02, y: 56), controlPoint2: CGPoint(x: 186.28, y: 55.91))
        audioWaves.addCurve(to: CGPoint(x: 186.94, y: 55.05), controlPoint1: CGPoint(x: 186.71, y: 55.56), controlPoint2: CGPoint(x: 186.86, y: 55.32))
        audioWaves.addCurve(to: CGPoint(x: 186.99, y: 54.66), controlPoint1: CGPoint(x: 186.97, y: 54.92), controlPoint2: CGPoint(x: 186.98, y: 54.79))
        audioWaves.addCurve(to: CGPoint(x: 187, y: 54.21), controlPoint1: CGPoint(x: 187, y: 54.51), controlPoint2: CGPoint(x: 187, y: 54.36))
        audioWaves.addLine(to: CGPoint(x: 187, y: 54.21))
        audioWaves.addLine(to: CGPoint(x: 187, y: 3.79))
        audioWaves.addLine(to: CGPoint(x: 187, y: 3.78))
        audioWaves.addCurve(to: CGPoint(x: 186.99, y: 3.34), controlPoint1: CGPoint(x: 187, y: 3.64), controlPoint2: CGPoint(x: 187, y: 3.49))
        audioWaves.addLine(to: CGPoint(x: 186.99, y: 3.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 192.94, y: 21.45))
        audioWaves.addCurve(to: CGPoint(x: 192.5, y: 20.76), controlPoint1: CGPoint(x: 192.86, y: 21.18), controlPoint2: CGPoint(x: 192.71, y: 20.94))
        audioWaves.addCurve(to: CGPoint(x: 191.75, y: 20.5), controlPoint1: CGPoint(x: 192.28, y: 20.59), controlPoint2: CGPoint(x: 192.02, y: 20.5))
        audioWaves.addCurve(to: CGPoint(x: 191.01, y: 20.76), controlPoint1: CGPoint(x: 191.48, y: 20.5), controlPoint2: CGPoint(x: 191.22, y: 20.59))
        audioWaves.addCurve(to: CGPoint(x: 190.57, y: 21.45), controlPoint1: CGPoint(x: 190.79, y: 20.94), controlPoint2: CGPoint(x: 190.64, y: 21.18))
        audioWaves.addCurve(to: CGPoint(x: 190.51, y: 21.84), controlPoint1: CGPoint(x: 190.53, y: 21.58), controlPoint2: CGPoint(x: 190.52, y: 21.71))
        audioWaves.addCurve(to: CGPoint(x: 190.5, y: 22.28), controlPoint1: CGPoint(x: 190.5, y: 21.99), controlPoint2: CGPoint(x: 190.5, y: 22.14))
        audioWaves.addLine(to: CGPoint(x: 190.5, y: 35.71))
        audioWaves.addCurve(to: CGPoint(x: 190.51, y: 36.16), controlPoint1: CGPoint(x: 190.5, y: 35.86), controlPoint2: CGPoint(x: 190.5, y: 36.01))
        audioWaves.addCurve(to: CGPoint(x: 190.57, y: 36.55), controlPoint1: CGPoint(x: 190.52, y: 36.29), controlPoint2: CGPoint(x: 190.53, y: 36.42))
        audioWaves.addCurve(to: CGPoint(x: 191.01, y: 37.24), controlPoint1: CGPoint(x: 190.64, y: 36.82), controlPoint2: CGPoint(x: 190.79, y: 37.06))
        audioWaves.addCurve(to: CGPoint(x: 191.75, y: 37.5), controlPoint1: CGPoint(x: 191.22, y: 37.41), controlPoint2: CGPoint(x: 191.48, y: 37.5))
        audioWaves.addCurve(to: CGPoint(x: 192.5, y: 37.24), controlPoint1: CGPoint(x: 192.02, y: 37.5), controlPoint2: CGPoint(x: 192.28, y: 37.41))
        audioWaves.addCurve(to: CGPoint(x: 192.94, y: 36.55), controlPoint1: CGPoint(x: 192.71, y: 37.06), controlPoint2: CGPoint(x: 192.86, y: 36.82))
        audioWaves.addCurve(to: CGPoint(x: 192.99, y: 36.16), controlPoint1: CGPoint(x: 192.97, y: 36.42), controlPoint2: CGPoint(x: 192.98, y: 36.29))
        audioWaves.addCurve(to: CGPoint(x: 193, y: 35.71), controlPoint1: CGPoint(x: 193, y: 36.01), controlPoint2: CGPoint(x: 193, y: 35.86))
        audioWaves.addLine(to: CGPoint(x: 193, y: 22.28))
        audioWaves.addCurve(to: CGPoint(x: 192.99, y: 21.84), controlPoint1: CGPoint(x: 193, y: 22.14), controlPoint2: CGPoint(x: 193, y: 21.99))
        audioWaves.addCurve(to: CGPoint(x: 192.94, y: 21.45), controlPoint1: CGPoint(x: 192.98, y: 21.71), controlPoint2: CGPoint(x: 192.97, y: 21.58))
        audioWaves.addLine(to: CGPoint(x: 192.94, y: 21.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 198.99, y: 6.84))
        audioWaves.addCurve(to: CGPoint(x: 198.94, y: 6.45), controlPoint1: CGPoint(x: 198.98, y: 6.71), controlPoint2: CGPoint(x: 198.97, y: 6.58))
        audioWaves.addCurve(to: CGPoint(x: 198.5, y: 5.76), controlPoint1: CGPoint(x: 198.86, y: 6.18), controlPoint2: CGPoint(x: 198.71, y: 5.94))
        audioWaves.addCurve(to: CGPoint(x: 197.75, y: 5.5), controlPoint1: CGPoint(x: 198.28, y: 5.59), controlPoint2: CGPoint(x: 198.02, y: 5.5))
        audioWaves.addCurve(to: CGPoint(x: 197.01, y: 5.76), controlPoint1: CGPoint(x: 197.48, y: 5.5), controlPoint2: CGPoint(x: 197.22, y: 5.59))
        audioWaves.addCurve(to: CGPoint(x: 196.57, y: 6.45), controlPoint1: CGPoint(x: 196.79, y: 5.94), controlPoint2: CGPoint(x: 196.64, y: 6.18))
        audioWaves.addCurve(to: CGPoint(x: 196.51, y: 6.84), controlPoint1: CGPoint(x: 196.53, y: 6.58), controlPoint2: CGPoint(x: 196.52, y: 6.71))
        audioWaves.addCurve(to: CGPoint(x: 196.5, y: 7.28), controlPoint1: CGPoint(x: 196.5, y: 6.99), controlPoint2: CGPoint(x: 196.5, y: 7.14))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 7.29))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 50.71))
        audioWaves.addLine(to: CGPoint(x: 196.5, y: 50.71))
        audioWaves.addCurve(to: CGPoint(x: 196.51, y: 51.16), controlPoint1: CGPoint(x: 196.5, y: 50.86), controlPoint2: CGPoint(x: 196.5, y: 51.01))
        audioWaves.addCurve(to: CGPoint(x: 196.57, y: 51.55), controlPoint1: CGPoint(x: 196.52, y: 51.29), controlPoint2: CGPoint(x: 196.53, y: 51.42))
        audioWaves.addCurve(to: CGPoint(x: 197.01, y: 52.24), controlPoint1: CGPoint(x: 196.64, y: 51.82), controlPoint2: CGPoint(x: 196.79, y: 52.06))
        audioWaves.addCurve(to: CGPoint(x: 197.75, y: 52.5), controlPoint1: CGPoint(x: 197.22, y: 52.41), controlPoint2: CGPoint(x: 197.48, y: 52.5))
        audioWaves.addCurve(to: CGPoint(x: 198.5, y: 52.24), controlPoint1: CGPoint(x: 198.02, y: 52.5), controlPoint2: CGPoint(x: 198.28, y: 52.41))
        audioWaves.addCurve(to: CGPoint(x: 198.94, y: 51.55), controlPoint1: CGPoint(x: 198.71, y: 52.06), controlPoint2: CGPoint(x: 198.86, y: 51.82))
        audioWaves.addCurve(to: CGPoint(x: 198.99, y: 51.16), controlPoint1: CGPoint(x: 198.97, y: 51.42), controlPoint2: CGPoint(x: 198.98, y: 51.29))
        audioWaves.addCurve(to: CGPoint(x: 199, y: 50.71), controlPoint1: CGPoint(x: 199, y: 51.01), controlPoint2: CGPoint(x: 199, y: 50.86))
        audioWaves.addLine(to: CGPoint(x: 199, y: 50.71))
        audioWaves.addLine(to: CGPoint(x: 199, y: 7.29))
        audioWaves.addLine(to: CGPoint(x: 199, y: 7.28))
        audioWaves.addCurve(to: CGPoint(x: 198.99, y: 6.84), controlPoint1: CGPoint(x: 199, y: 7.14), controlPoint2: CGPoint(x: 199, y: 6.99))
        audioWaves.addLine(to: CGPoint(x: 198.99, y: 6.84))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 204.94, y: 19.45))
        audioWaves.addCurve(to: CGPoint(x: 204.5, y: 18.76), controlPoint1: CGPoint(x: 204.86, y: 19.18), controlPoint2: CGPoint(x: 204.71, y: 18.94))
        audioWaves.addCurve(to: CGPoint(x: 203.75, y: 18.5), controlPoint1: CGPoint(x: 204.28, y: 18.59), controlPoint2: CGPoint(x: 204.02, y: 18.5))
        audioWaves.addCurve(to: CGPoint(x: 203.01, y: 18.76), controlPoint1: CGPoint(x: 203.48, y: 18.5), controlPoint2: CGPoint(x: 203.22, y: 18.59))
        audioWaves.addCurve(to: CGPoint(x: 202.57, y: 19.45), controlPoint1: CGPoint(x: 202.79, y: 18.94), controlPoint2: CGPoint(x: 202.64, y: 19.18))
        audioWaves.addCurve(to: CGPoint(x: 202.51, y: 19.84), controlPoint1: CGPoint(x: 202.53, y: 19.58), controlPoint2: CGPoint(x: 202.52, y: 19.71))
        audioWaves.addCurve(to: CGPoint(x: 202.5, y: 20.28), controlPoint1: CGPoint(x: 202.5, y: 19.99), controlPoint2: CGPoint(x: 202.5, y: 20.14))
        audioWaves.addLine(to: CGPoint(x: 202.5, y: 37.71))
        audioWaves.addCurve(to: CGPoint(x: 202.51, y: 38.16), controlPoint1: CGPoint(x: 202.5, y: 37.86), controlPoint2: CGPoint(x: 202.5, y: 38.01))
        audioWaves.addCurve(to: CGPoint(x: 202.57, y: 38.55), controlPoint1: CGPoint(x: 202.52, y: 38.29), controlPoint2: CGPoint(x: 202.53, y: 38.42))
        audioWaves.addCurve(to: CGPoint(x: 203.01, y: 39.24), controlPoint1: CGPoint(x: 202.64, y: 38.82), controlPoint2: CGPoint(x: 202.79, y: 39.06))
        audioWaves.addCurve(to: CGPoint(x: 203.75, y: 39.5), controlPoint1: CGPoint(x: 203.22, y: 39.41), controlPoint2: CGPoint(x: 203.48, y: 39.5))
        audioWaves.addCurve(to: CGPoint(x: 204.5, y: 39.24), controlPoint1: CGPoint(x: 204.02, y: 39.5), controlPoint2: CGPoint(x: 204.28, y: 39.41))
        audioWaves.addCurve(to: CGPoint(x: 204.94, y: 38.55), controlPoint1: CGPoint(x: 204.71, y: 39.06), controlPoint2: CGPoint(x: 204.86, y: 38.82))
        audioWaves.addCurve(to: CGPoint(x: 204.99, y: 38.16), controlPoint1: CGPoint(x: 204.97, y: 38.42), controlPoint2: CGPoint(x: 204.98, y: 38.29))
        audioWaves.addCurve(to: CGPoint(x: 205, y: 37.71), controlPoint1: CGPoint(x: 205, y: 38.01), controlPoint2: CGPoint(x: 205, y: 37.86))
        audioWaves.addLine(to: CGPoint(x: 205, y: 20.28))
        audioWaves.addCurve(to: CGPoint(x: 204.99, y: 19.84), controlPoint1: CGPoint(x: 205, y: 20.14), controlPoint2: CGPoint(x: 205, y: 19.99))
        audioWaves.addCurve(to: CGPoint(x: 204.94, y: 19.45), controlPoint1: CGPoint(x: 204.98, y: 19.71), controlPoint2: CGPoint(x: 204.97, y: 19.58))
        audioWaves.addLine(to: CGPoint(x: 204.94, y: 19.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 210.99, y: 21.34))
        audioWaves.addCurve(to: CGPoint(x: 210.94, y: 20.95), controlPoint1: CGPoint(x: 210.98, y: 21.21), controlPoint2: CGPoint(x: 210.97, y: 21.08))
        audioWaves.addCurve(to: CGPoint(x: 210.5, y: 20.26), controlPoint1: CGPoint(x: 210.86, y: 20.68), controlPoint2: CGPoint(x: 210.71, y: 20.44))
        audioWaves.addCurve(to: CGPoint(x: 209.75, y: 20), controlPoint1: CGPoint(x: 210.28, y: 20.09), controlPoint2: CGPoint(x: 210.02, y: 20))
        audioWaves.addCurve(to: CGPoint(x: 209.01, y: 20.26), controlPoint1: CGPoint(x: 209.48, y: 20), controlPoint2: CGPoint(x: 209.22, y: 20.09))
        audioWaves.addCurve(to: CGPoint(x: 208.57, y: 20.95), controlPoint1: CGPoint(x: 208.79, y: 20.44), controlPoint2: CGPoint(x: 208.64, y: 20.68))
        audioWaves.addCurve(to: CGPoint(x: 208.51, y: 21.34), controlPoint1: CGPoint(x: 208.53, y: 21.08), controlPoint2: CGPoint(x: 208.52, y: 21.21))
        audioWaves.addCurve(to: CGPoint(x: 208.5, y: 21.78), controlPoint1: CGPoint(x: 208.5, y: 21.49), controlPoint2: CGPoint(x: 208.5, y: 21.64))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 21.79))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 36.21))
        audioWaves.addLine(to: CGPoint(x: 208.5, y: 36.21))
        audioWaves.addCurve(to: CGPoint(x: 208.51, y: 36.66), controlPoint1: CGPoint(x: 208.5, y: 36.36), controlPoint2: CGPoint(x: 208.5, y: 36.51))
        audioWaves.addCurve(to: CGPoint(x: 208.57, y: 37.05), controlPoint1: CGPoint(x: 208.52, y: 36.79), controlPoint2: CGPoint(x: 208.53, y: 36.92))
        audioWaves.addCurve(to: CGPoint(x: 209.01, y: 37.74), controlPoint1: CGPoint(x: 208.64, y: 37.32), controlPoint2: CGPoint(x: 208.79, y: 37.56))
        audioWaves.addCurve(to: CGPoint(x: 209.75, y: 38), controlPoint1: CGPoint(x: 209.22, y: 37.91), controlPoint2: CGPoint(x: 209.48, y: 38))
        audioWaves.addCurve(to: CGPoint(x: 210.5, y: 37.74), controlPoint1: CGPoint(x: 210.02, y: 38), controlPoint2: CGPoint(x: 210.28, y: 37.91))
        audioWaves.addCurve(to: CGPoint(x: 210.94, y: 37.05), controlPoint1: CGPoint(x: 210.71, y: 37.56), controlPoint2: CGPoint(x: 210.86, y: 37.32))
        audioWaves.addCurve(to: CGPoint(x: 210.99, y: 36.66), controlPoint1: CGPoint(x: 210.97, y: 36.92), controlPoint2: CGPoint(x: 210.98, y: 36.79))
        audioWaves.addCurve(to: CGPoint(x: 211, y: 36.21), controlPoint1: CGPoint(x: 211, y: 36.51), controlPoint2: CGPoint(x: 211, y: 36.36))
        audioWaves.addLine(to: CGPoint(x: 211, y: 36.21))
        audioWaves.addLine(to: CGPoint(x: 211, y: 21.79))
        audioWaves.addLine(to: CGPoint(x: 211, y: 21.78))
        audioWaves.addCurve(to: CGPoint(x: 210.99, y: 21.34), controlPoint1: CGPoint(x: 211, y: 21.64), controlPoint2: CGPoint(x: 211, y: 21.49))
        audioWaves.addLine(to: CGPoint(x: 210.99, y: 21.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 216.49, y: 12.34))
        audioWaves.addCurve(to: CGPoint(x: 216.44, y: 11.95), controlPoint1: CGPoint(x: 216.48, y: 12.21), controlPoint2: CGPoint(x: 216.47, y: 12.08))
        audioWaves.addCurve(to: CGPoint(x: 216, y: 11.26), controlPoint1: CGPoint(x: 216.36, y: 11.67), controlPoint2: CGPoint(x: 216.21, y: 11.44))
        audioWaves.addCurve(to: CGPoint(x: 215.25, y: 11), controlPoint1: CGPoint(x: 215.78, y: 11.09), controlPoint2: CGPoint(x: 215.52, y: 11))
        audioWaves.addCurve(to: CGPoint(x: 214.51, y: 11.26), controlPoint1: CGPoint(x: 214.98, y: 11), controlPoint2: CGPoint(x: 214.72, y: 11.09))
        audioWaves.addCurve(to: CGPoint(x: 214.07, y: 11.95), controlPoint1: CGPoint(x: 214.29, y: 11.44), controlPoint2: CGPoint(x: 214.14, y: 11.67))
        audioWaves.addCurve(to: CGPoint(x: 214.01, y: 12.34), controlPoint1: CGPoint(x: 214.03, y: 12.08), controlPoint2: CGPoint(x: 214.02, y: 12.21))
        audioWaves.addCurve(to: CGPoint(x: 214, y: 12.78), controlPoint1: CGPoint(x: 214, y: 12.49), controlPoint2: CGPoint(x: 214, y: 12.64))
        audioWaves.addLine(to: CGPoint(x: 214, y: 12.79))
        audioWaves.addLine(to: CGPoint(x: 214, y: 45.21))
        audioWaves.addLine(to: CGPoint(x: 214, y: 45.21))
        audioWaves.addCurve(to: CGPoint(x: 214.01, y: 45.66), controlPoint1: CGPoint(x: 214, y: 45.36), controlPoint2: CGPoint(x: 214, y: 45.51))
        audioWaves.addCurve(to: CGPoint(x: 214.07, y: 46.05), controlPoint1: CGPoint(x: 214.02, y: 45.79), controlPoint2: CGPoint(x: 214.03, y: 45.92))
        audioWaves.addCurve(to: CGPoint(x: 214.51, y: 46.74), controlPoint1: CGPoint(x: 214.14, y: 46.32), controlPoint2: CGPoint(x: 214.29, y: 46.56))
        audioWaves.addCurve(to: CGPoint(x: 215.25, y: 47), controlPoint1: CGPoint(x: 214.72, y: 46.91), controlPoint2: CGPoint(x: 214.98, y: 47))
        audioWaves.addCurve(to: CGPoint(x: 216, y: 46.74), controlPoint1: CGPoint(x: 215.52, y: 47), controlPoint2: CGPoint(x: 215.78, y: 46.91))
        audioWaves.addCurve(to: CGPoint(x: 216.44, y: 46.05), controlPoint1: CGPoint(x: 216.21, y: 46.56), controlPoint2: CGPoint(x: 216.36, y: 46.32))
        audioWaves.addCurve(to: CGPoint(x: 216.49, y: 45.66), controlPoint1: CGPoint(x: 216.47, y: 45.92), controlPoint2: CGPoint(x: 216.48, y: 45.79))
        audioWaves.addCurve(to: CGPoint(x: 216.5, y: 45.21), controlPoint1: CGPoint(x: 216.5, y: 45.51), controlPoint2: CGPoint(x: 216.5, y: 45.36))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 45.21))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 12.79))
        audioWaves.addLine(to: CGPoint(x: 216.5, y: 12.78))
        audioWaves.addCurve(to: CGPoint(x: 216.49, y: 12.34), controlPoint1: CGPoint(x: 216.5, y: 12.64), controlPoint2: CGPoint(x: 216.5, y: 12.49))
        audioWaves.addLine(to: CGPoint(x: 216.49, y: 12.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 222.49, y: 13.34))
        audioWaves.addCurve(to: CGPoint(x: 222.44, y: 12.95), controlPoint1: CGPoint(x: 222.48, y: 13.21), controlPoint2: CGPoint(x: 222.47, y: 13.08))
        audioWaves.addCurve(to: CGPoint(x: 222, y: 12.26), controlPoint1: CGPoint(x: 222.36, y: 12.67), controlPoint2: CGPoint(x: 222.21, y: 12.44))
        audioWaves.addCurve(to: CGPoint(x: 221.25, y: 12), controlPoint1: CGPoint(x: 221.78, y: 12.09), controlPoint2: CGPoint(x: 221.52, y: 12))
        audioWaves.addCurve(to: CGPoint(x: 220.51, y: 12.26), controlPoint1: CGPoint(x: 220.98, y: 12), controlPoint2: CGPoint(x: 220.72, y: 12.09))
        audioWaves.addCurve(to: CGPoint(x: 220.07, y: 12.95), controlPoint1: CGPoint(x: 220.29, y: 12.44), controlPoint2: CGPoint(x: 220.14, y: 12.67))
        audioWaves.addCurve(to: CGPoint(x: 220.01, y: 13.34), controlPoint1: CGPoint(x: 220.03, y: 13.08), controlPoint2: CGPoint(x: 220.01, y: 13.21))
        audioWaves.addCurve(to: CGPoint(x: 220, y: 13.78), controlPoint1: CGPoint(x: 220, y: 13.49), controlPoint2: CGPoint(x: 220, y: 13.64))
        audioWaves.addLine(to: CGPoint(x: 220, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 220, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 220, y: 44.21))
        audioWaves.addCurve(to: CGPoint(x: 220.01, y: 44.66), controlPoint1: CGPoint(x: 220, y: 44.36), controlPoint2: CGPoint(x: 220, y: 44.51))
        audioWaves.addCurve(to: CGPoint(x: 220.07, y: 45.05), controlPoint1: CGPoint(x: 220.01, y: 44.79), controlPoint2: CGPoint(x: 220.03, y: 44.92))
        audioWaves.addCurve(to: CGPoint(x: 220.51, y: 45.74), controlPoint1: CGPoint(x: 220.14, y: 45.32), controlPoint2: CGPoint(x: 220.29, y: 45.56))
        audioWaves.addCurve(to: CGPoint(x: 221.25, y: 46), controlPoint1: CGPoint(x: 220.72, y: 45.91), controlPoint2: CGPoint(x: 220.98, y: 46))
        audioWaves.addCurve(to: CGPoint(x: 222, y: 45.74), controlPoint1: CGPoint(x: 221.52, y: 46), controlPoint2: CGPoint(x: 221.78, y: 45.91))
        audioWaves.addCurve(to: CGPoint(x: 222.44, y: 45.05), controlPoint1: CGPoint(x: 222.21, y: 45.56), controlPoint2: CGPoint(x: 222.36, y: 45.32))
        audioWaves.addCurve(to: CGPoint(x: 222.49, y: 44.66), controlPoint1: CGPoint(x: 222.47, y: 44.92), controlPoint2: CGPoint(x: 222.48, y: 44.79))
        audioWaves.addCurve(to: CGPoint(x: 222.5, y: 44.21), controlPoint1: CGPoint(x: 222.5, y: 44.51), controlPoint2: CGPoint(x: 222.5, y: 44.36))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 44.21))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 13.79))
        audioWaves.addLine(to: CGPoint(x: 222.5, y: 13.78))
        audioWaves.addCurve(to: CGPoint(x: 222.49, y: 13.34), controlPoint1: CGPoint(x: 222.5, y: 13.64), controlPoint2: CGPoint(x: 222.5, y: 13.49))
        audioWaves.addLine(to: CGPoint(x: 222.49, y: 13.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 228.44, y: 19.95))
        audioWaves.addCurve(to: CGPoint(x: 228, y: 19.26), controlPoint1: CGPoint(x: 228.36, y: 19.68), controlPoint2: CGPoint(x: 228.21, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 227.25, y: 19), controlPoint1: CGPoint(x: 227.78, y: 19.09), controlPoint2: CGPoint(x: 227.52, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 226.51, y: 19.26), controlPoint1: CGPoint(x: 226.98, y: 19), controlPoint2: CGPoint(x: 226.72, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 226.07, y: 19.95), controlPoint1: CGPoint(x: 226.29, y: 19.44), controlPoint2: CGPoint(x: 226.14, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 226.01, y: 20.34), controlPoint1: CGPoint(x: 226.03, y: 20.08), controlPoint2: CGPoint(x: 226.01, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 226, y: 20.78), controlPoint1: CGPoint(x: 226, y: 20.49), controlPoint2: CGPoint(x: 226, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 226, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 226.01, y: 37.66), controlPoint1: CGPoint(x: 226, y: 37.36), controlPoint2: CGPoint(x: 226, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 226.07, y: 38.05), controlPoint1: CGPoint(x: 226.01, y: 37.79), controlPoint2: CGPoint(x: 226.03, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 226.51, y: 38.74), controlPoint1: CGPoint(x: 226.14, y: 38.32), controlPoint2: CGPoint(x: 226.29, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 227.25, y: 39), controlPoint1: CGPoint(x: 226.72, y: 38.91), controlPoint2: CGPoint(x: 226.98, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 228, y: 38.74), controlPoint1: CGPoint(x: 227.52, y: 39), controlPoint2: CGPoint(x: 227.78, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 228.44, y: 38.05), controlPoint1: CGPoint(x: 228.21, y: 38.56), controlPoint2: CGPoint(x: 228.36, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 228.49, y: 37.66), controlPoint1: CGPoint(x: 228.47, y: 37.92), controlPoint2: CGPoint(x: 228.48, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 228.5, y: 37.21), controlPoint1: CGPoint(x: 228.5, y: 37.51), controlPoint2: CGPoint(x: 228.5, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 228.5, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 228.49, y: 20.34), controlPoint1: CGPoint(x: 228.5, y: 20.64), controlPoint2: CGPoint(x: 228.5, y: 20.49))
        audioWaves.addCurve(to: CGPoint(x: 228.44, y: 19.95), controlPoint1: CGPoint(x: 228.48, y: 20.21), controlPoint2: CGPoint(x: 228.47, y: 20.08))
        audioWaves.addLine(to: CGPoint(x: 228.44, y: 19.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 234.49, y: 14.34))
        audioWaves.addCurve(to: CGPoint(x: 234.44, y: 13.95), controlPoint1: CGPoint(x: 234.48, y: 14.21), controlPoint2: CGPoint(x: 234.47, y: 14.08))
        audioWaves.addCurve(to: CGPoint(x: 234, y: 13.26), controlPoint1: CGPoint(x: 234.36, y: 13.67), controlPoint2: CGPoint(x: 234.21, y: 13.44))
        audioWaves.addCurve(to: CGPoint(x: 233.25, y: 13), controlPoint1: CGPoint(x: 233.78, y: 13.09), controlPoint2: CGPoint(x: 233.52, y: 13))
        audioWaves.addCurve(to: CGPoint(x: 232.51, y: 13.26), controlPoint1: CGPoint(x: 232.98, y: 13), controlPoint2: CGPoint(x: 232.72, y: 13.09))
        audioWaves.addCurve(to: CGPoint(x: 232.07, y: 13.95), controlPoint1: CGPoint(x: 232.29, y: 13.44), controlPoint2: CGPoint(x: 232.14, y: 13.67))
        audioWaves.addCurve(to: CGPoint(x: 232.01, y: 14.34), controlPoint1: CGPoint(x: 232.03, y: 14.08), controlPoint2: CGPoint(x: 232.01, y: 14.21))
        audioWaves.addCurve(to: CGPoint(x: 232, y: 14.78), controlPoint1: CGPoint(x: 232, y: 14.49), controlPoint2: CGPoint(x: 232, y: 14.64))
        audioWaves.addLine(to: CGPoint(x: 232, y: 14.79))
        audioWaves.addLine(to: CGPoint(x: 232, y: 43.21))
        audioWaves.addLine(to: CGPoint(x: 232, y: 43.21))
        audioWaves.addCurve(to: CGPoint(x: 232.01, y: 43.66), controlPoint1: CGPoint(x: 232, y: 43.36), controlPoint2: CGPoint(x: 232, y: 43.51))
        audioWaves.addCurve(to: CGPoint(x: 232.07, y: 44.05), controlPoint1: CGPoint(x: 232.01, y: 43.79), controlPoint2: CGPoint(x: 232.03, y: 43.92))
        audioWaves.addCurve(to: CGPoint(x: 232.51, y: 44.74), controlPoint1: CGPoint(x: 232.14, y: 44.32), controlPoint2: CGPoint(x: 232.29, y: 44.56))
        audioWaves.addCurve(to: CGPoint(x: 233.25, y: 45), controlPoint1: CGPoint(x: 232.72, y: 44.91), controlPoint2: CGPoint(x: 232.98, y: 45))
        audioWaves.addCurve(to: CGPoint(x: 234, y: 44.74), controlPoint1: CGPoint(x: 233.52, y: 45), controlPoint2: CGPoint(x: 233.78, y: 44.91))
        audioWaves.addCurve(to: CGPoint(x: 234.44, y: 44.05), controlPoint1: CGPoint(x: 234.21, y: 44.56), controlPoint2: CGPoint(x: 234.36, y: 44.32))
        audioWaves.addCurve(to: CGPoint(x: 234.49, y: 43.66), controlPoint1: CGPoint(x: 234.47, y: 43.92), controlPoint2: CGPoint(x: 234.48, y: 43.79))
        audioWaves.addCurve(to: CGPoint(x: 234.5, y: 43.21), controlPoint1: CGPoint(x: 234.5, y: 43.51), controlPoint2: CGPoint(x: 234.5, y: 43.36))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 43.21))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 14.79))
        audioWaves.addLine(to: CGPoint(x: 234.5, y: 14.78))
        audioWaves.addCurve(to: CGPoint(x: 234.49, y: 14.34), controlPoint1: CGPoint(x: 234.5, y: 14.64), controlPoint2: CGPoint(x: 234.5, y: 14.49))
        audioWaves.addLine(to: CGPoint(x: 234.49, y: 14.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 240.44, y: 0.95))
        audioWaves.addCurve(to: CGPoint(x: 240, y: 0.26), controlPoint1: CGPoint(x: 240.36, y: 0.67), controlPoint2: CGPoint(x: 240.21, y: 0.44))
        audioWaves.addCurve(to: CGPoint(x: 239.25, y: 0), controlPoint1: CGPoint(x: 239.78, y: 0.09), controlPoint2: CGPoint(x: 239.52, y: 0))
        audioWaves.addCurve(to: CGPoint(x: 238.51, y: 0.26), controlPoint1: CGPoint(x: 238.98, y: 0), controlPoint2: CGPoint(x: 238.72, y: 0.09))
        audioWaves.addCurve(to: CGPoint(x: 238.07, y: 0.95), controlPoint1: CGPoint(x: 238.29, y: 0.44), controlPoint2: CGPoint(x: 238.14, y: 0.67))
        audioWaves.addCurve(to: CGPoint(x: 238.01, y: 1.34), controlPoint1: CGPoint(x: 238.03, y: 1.08), controlPoint2: CGPoint(x: 238.01, y: 1.21))
        audioWaves.addCurve(to: CGPoint(x: 238, y: 1.78), controlPoint1: CGPoint(x: 238, y: 1.49), controlPoint2: CGPoint(x: 238, y: 1.64))
        audioWaves.addLine(to: CGPoint(x: 238, y: 56.21))
        audioWaves.addCurve(to: CGPoint(x: 238.01, y: 56.66), controlPoint1: CGPoint(x: 238, y: 56.36), controlPoint2: CGPoint(x: 238, y: 56.51))
        audioWaves.addCurve(to: CGPoint(x: 238.07, y: 57.05), controlPoint1: CGPoint(x: 238.01, y: 56.79), controlPoint2: CGPoint(x: 238.03, y: 56.92))
        audioWaves.addCurve(to: CGPoint(x: 238.51, y: 57.74), controlPoint1: CGPoint(x: 238.14, y: 57.32), controlPoint2: CGPoint(x: 238.29, y: 57.56))
        audioWaves.addCurve(to: CGPoint(x: 239.25, y: 58), controlPoint1: CGPoint(x: 238.72, y: 57.91), controlPoint2: CGPoint(x: 238.98, y: 58))
        audioWaves.addCurve(to: CGPoint(x: 240, y: 57.74), controlPoint1: CGPoint(x: 239.52, y: 58), controlPoint2: CGPoint(x: 239.78, y: 57.91))
        audioWaves.addCurve(to: CGPoint(x: 240.44, y: 57.05), controlPoint1: CGPoint(x: 240.21, y: 57.56), controlPoint2: CGPoint(x: 240.36, y: 57.32))
        audioWaves.addCurve(to: CGPoint(x: 240.49, y: 56.66), controlPoint1: CGPoint(x: 240.47, y: 56.92), controlPoint2: CGPoint(x: 240.48, y: 56.79))
        audioWaves.addCurve(to: CGPoint(x: 240.5, y: 56.21), controlPoint1: CGPoint(x: 240.5, y: 56.51), controlPoint2: CGPoint(x: 240.5, y: 56.36))
        audioWaves.addLine(to: CGPoint(x: 240.5, y: 1.78))
        audioWaves.addCurve(to: CGPoint(x: 240.49, y: 1.34), controlPoint1: CGPoint(x: 240.5, y: 1.64), controlPoint2: CGPoint(x: 240.5, y: 1.49))
        audioWaves.addCurve(to: CGPoint(x: 240.44, y: 0.95), controlPoint1: CGPoint(x: 240.48, y: 1.21), controlPoint2: CGPoint(x: 240.47, y: 1.08))
        audioWaves.addLine(to: CGPoint(x: 240.44, y: 0.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 246.49, y: 19.34))
        audioWaves.addCurve(to: CGPoint(x: 246.44, y: 18.95), controlPoint1: CGPoint(x: 246.48, y: 19.21), controlPoint2: CGPoint(x: 246.47, y: 19.08))
        audioWaves.addCurve(to: CGPoint(x: 246, y: 18.26), controlPoint1: CGPoint(x: 246.36, y: 18.68), controlPoint2: CGPoint(x: 246.21, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 245.25, y: 18), controlPoint1: CGPoint(x: 245.78, y: 18.09), controlPoint2: CGPoint(x: 245.52, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 244.51, y: 18.26), controlPoint1: CGPoint(x: 244.98, y: 18), controlPoint2: CGPoint(x: 244.72, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 244.07, y: 18.95), controlPoint1: CGPoint(x: 244.29, y: 18.44), controlPoint2: CGPoint(x: 244.14, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 244.01, y: 19.34), controlPoint1: CGPoint(x: 244.03, y: 19.08), controlPoint2: CGPoint(x: 244.01, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 244, y: 19.78), controlPoint1: CGPoint(x: 244, y: 19.49), controlPoint2: CGPoint(x: 244, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 244, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 244, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 244, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 244.01, y: 38.66), controlPoint1: CGPoint(x: 244, y: 38.36), controlPoint2: CGPoint(x: 244, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 244.07, y: 39.05), controlPoint1: CGPoint(x: 244.01, y: 38.79), controlPoint2: CGPoint(x: 244.03, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 244.51, y: 39.74), controlPoint1: CGPoint(x: 244.14, y: 39.32), controlPoint2: CGPoint(x: 244.29, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 245.25, y: 40), controlPoint1: CGPoint(x: 244.72, y: 39.91), controlPoint2: CGPoint(x: 244.98, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 246, y: 39.74), controlPoint1: CGPoint(x: 245.52, y: 40), controlPoint2: CGPoint(x: 245.78, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 246.44, y: 39.05), controlPoint1: CGPoint(x: 246.21, y: 39.56), controlPoint2: CGPoint(x: 246.36, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 246.49, y: 38.66), controlPoint1: CGPoint(x: 246.47, y: 38.92), controlPoint2: CGPoint(x: 246.48, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 246.5, y: 38.21), controlPoint1: CGPoint(x: 246.5, y: 38.51), controlPoint2: CGPoint(x: 246.5, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 246.5, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 246.49, y: 19.34), controlPoint1: CGPoint(x: 246.5, y: 19.64), controlPoint2: CGPoint(x: 246.5, y: 19.49))
        audioWaves.addLine(to: CGPoint(x: 246.49, y: 19.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 252.44, y: 21.95))
        audioWaves.addCurve(to: CGPoint(x: 252, y: 21.26), controlPoint1: CGPoint(x: 252.36, y: 21.68), controlPoint2: CGPoint(x: 252.21, y: 21.44))
        audioWaves.addCurve(to: CGPoint(x: 251.25, y: 21), controlPoint1: CGPoint(x: 251.78, y: 21.09), controlPoint2: CGPoint(x: 251.52, y: 21))
        audioWaves.addCurve(to: CGPoint(x: 250.51, y: 21.26), controlPoint1: CGPoint(x: 250.98, y: 21), controlPoint2: CGPoint(x: 250.72, y: 21.09))
        audioWaves.addCurve(to: CGPoint(x: 250.07, y: 21.95), controlPoint1: CGPoint(x: 250.29, y: 21.44), controlPoint2: CGPoint(x: 250.14, y: 21.68))
        audioWaves.addCurve(to: CGPoint(x: 250.01, y: 22.34), controlPoint1: CGPoint(x: 250.03, y: 22.08), controlPoint2: CGPoint(x: 250.01, y: 22.21))
        audioWaves.addCurve(to: CGPoint(x: 250, y: 22.78), controlPoint1: CGPoint(x: 250, y: 22.49), controlPoint2: CGPoint(x: 250, y: 22.64))
        audioWaves.addLine(to: CGPoint(x: 250, y: 35.21))
        audioWaves.addCurve(to: CGPoint(x: 250.01, y: 35.66), controlPoint1: CGPoint(x: 250, y: 35.36), controlPoint2: CGPoint(x: 250, y: 35.51))
        audioWaves.addCurve(to: CGPoint(x: 250.07, y: 36.05), controlPoint1: CGPoint(x: 250.01, y: 35.79), controlPoint2: CGPoint(x: 250.03, y: 35.92))
        audioWaves.addCurve(to: CGPoint(x: 250.51, y: 36.74), controlPoint1: CGPoint(x: 250.14, y: 36.32), controlPoint2: CGPoint(x: 250.29, y: 36.56))
        audioWaves.addCurve(to: CGPoint(x: 251.25, y: 37), controlPoint1: CGPoint(x: 250.72, y: 36.91), controlPoint2: CGPoint(x: 250.98, y: 37))
        audioWaves.addCurve(to: CGPoint(x: 252, y: 36.74), controlPoint1: CGPoint(x: 251.52, y: 37), controlPoint2: CGPoint(x: 251.78, y: 36.91))
        audioWaves.addCurve(to: CGPoint(x: 252.44, y: 36.05), controlPoint1: CGPoint(x: 252.21, y: 36.56), controlPoint2: CGPoint(x: 252.36, y: 36.32))
        audioWaves.addCurve(to: CGPoint(x: 252.49, y: 35.66), controlPoint1: CGPoint(x: 252.47, y: 35.92), controlPoint2: CGPoint(x: 252.48, y: 35.79))
        audioWaves.addCurve(to: CGPoint(x: 252.5, y: 35.21), controlPoint1: CGPoint(x: 252.5, y: 35.51), controlPoint2: CGPoint(x: 252.5, y: 35.36))
        audioWaves.addLine(to: CGPoint(x: 252.5, y: 22.78))
        audioWaves.addCurve(to: CGPoint(x: 252.49, y: 22.34), controlPoint1: CGPoint(x: 252.5, y: 22.64), controlPoint2: CGPoint(x: 252.5, y: 22.49))
        audioWaves.addCurve(to: CGPoint(x: 252.44, y: 21.95), controlPoint1: CGPoint(x: 252.48, y: 22.21), controlPoint2: CGPoint(x: 252.47, y: 22.08))
        audioWaves.addLine(to: CGPoint(x: 252.44, y: 21.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 258.49, y: 19.34))
        audioWaves.addCurve(to: CGPoint(x: 258.44, y: 18.95), controlPoint1: CGPoint(x: 258.49, y: 19.21), controlPoint2: CGPoint(x: 258.47, y: 19.08))
        audioWaves.addCurve(to: CGPoint(x: 258, y: 18.26), controlPoint1: CGPoint(x: 258.36, y: 18.68), controlPoint2: CGPoint(x: 258.21, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 257.25, y: 18), controlPoint1: CGPoint(x: 257.78, y: 18.09), controlPoint2: CGPoint(x: 257.52, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 256.51, y: 18.26), controlPoint1: CGPoint(x: 256.98, y: 18), controlPoint2: CGPoint(x: 256.72, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 256.07, y: 18.95), controlPoint1: CGPoint(x: 256.29, y: 18.44), controlPoint2: CGPoint(x: 256.14, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 256.01, y: 19.34), controlPoint1: CGPoint(x: 256.03, y: 19.08), controlPoint2: CGPoint(x: 256.01, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 256, y: 19.78), controlPoint1: CGPoint(x: 256, y: 19.49), controlPoint2: CGPoint(x: 256, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 256, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 256, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 256, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 256.01, y: 38.66), controlPoint1: CGPoint(x: 256, y: 38.36), controlPoint2: CGPoint(x: 256, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 256.07, y: 39.05), controlPoint1: CGPoint(x: 256.01, y: 38.79), controlPoint2: CGPoint(x: 256.03, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 256.51, y: 39.74), controlPoint1: CGPoint(x: 256.14, y: 39.32), controlPoint2: CGPoint(x: 256.29, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 257.25, y: 40), controlPoint1: CGPoint(x: 256.72, y: 39.91), controlPoint2: CGPoint(x: 256.98, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 258, y: 39.74), controlPoint1: CGPoint(x: 257.52, y: 40), controlPoint2: CGPoint(x: 257.78, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 258.44, y: 39.05), controlPoint1: CGPoint(x: 258.21, y: 39.56), controlPoint2: CGPoint(x: 258.36, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 258.49, y: 38.66), controlPoint1: CGPoint(x: 258.47, y: 38.92), controlPoint2: CGPoint(x: 258.49, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 258.5, y: 38.21), controlPoint1: CGPoint(x: 258.5, y: 38.51), controlPoint2: CGPoint(x: 258.5, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 38.21))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 19.79))
        audioWaves.addLine(to: CGPoint(x: 258.5, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 258.49, y: 19.34), controlPoint1: CGPoint(x: 258.5, y: 19.64), controlPoint2: CGPoint(x: 258.5, y: 19.49))
        audioWaves.addLine(to: CGPoint(x: 258.49, y: 19.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 264.44, y: 23.95))
        audioWaves.addCurve(to: CGPoint(x: 264, y: 23.26), controlPoint1: CGPoint(x: 264.36, y: 23.68), controlPoint2: CGPoint(x: 264.21, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 263.25, y: 23), controlPoint1: CGPoint(x: 263.78, y: 23.09), controlPoint2: CGPoint(x: 263.52, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 262.51, y: 23.26), controlPoint1: CGPoint(x: 262.98, y: 23), controlPoint2: CGPoint(x: 262.72, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 262.07, y: 23.95), controlPoint1: CGPoint(x: 262.29, y: 23.44), controlPoint2: CGPoint(x: 262.14, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 262.01, y: 24.34), controlPoint1: CGPoint(x: 262.03, y: 24.08), controlPoint2: CGPoint(x: 262.01, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 262, y: 24.78), controlPoint1: CGPoint(x: 262, y: 24.49), controlPoint2: CGPoint(x: 262, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 262, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 262.01, y: 33.66), controlPoint1: CGPoint(x: 262, y: 33.36), controlPoint2: CGPoint(x: 262, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 262.07, y: 34.05), controlPoint1: CGPoint(x: 262.01, y: 33.79), controlPoint2: CGPoint(x: 262.03, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 262.51, y: 34.74), controlPoint1: CGPoint(x: 262.14, y: 34.32), controlPoint2: CGPoint(x: 262.29, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 263.25, y: 35), controlPoint1: CGPoint(x: 262.72, y: 34.91), controlPoint2: CGPoint(x: 262.98, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 264, y: 34.74), controlPoint1: CGPoint(x: 263.52, y: 35), controlPoint2: CGPoint(x: 263.78, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 264.44, y: 34.05), controlPoint1: CGPoint(x: 264.21, y: 34.56), controlPoint2: CGPoint(x: 264.36, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 264.49, y: 33.66), controlPoint1: CGPoint(x: 264.47, y: 33.92), controlPoint2: CGPoint(x: 264.49, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 264.5, y: 33.21), controlPoint1: CGPoint(x: 264.5, y: 33.51), controlPoint2: CGPoint(x: 264.5, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 264.5, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 264.49, y: 24.34), controlPoint1: CGPoint(x: 264.5, y: 24.64), controlPoint2: CGPoint(x: 264.5, y: 24.49))
        audioWaves.addCurve(to: CGPoint(x: 264.44, y: 23.95), controlPoint1: CGPoint(x: 264.49, y: 24.21), controlPoint2: CGPoint(x: 264.47, y: 24.08))
        audioWaves.addLine(to: CGPoint(x: 264.44, y: 23.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 270.49, y: 5.34))
        audioWaves.addCurve(to: CGPoint(x: 270.44, y: 4.95), controlPoint1: CGPoint(x: 270.49, y: 5.21), controlPoint2: CGPoint(x: 270.47, y: 5.08))
        audioWaves.addCurve(to: CGPoint(x: 270, y: 4.26), controlPoint1: CGPoint(x: 270.36, y: 4.68), controlPoint2: CGPoint(x: 270.21, y: 4.44))
        audioWaves.addCurve(to: CGPoint(x: 269.25, y: 4), controlPoint1: CGPoint(x: 269.78, y: 4.09), controlPoint2: CGPoint(x: 269.52, y: 4))
        audioWaves.addCurve(to: CGPoint(x: 268.51, y: 4.26), controlPoint1: CGPoint(x: 268.98, y: 4), controlPoint2: CGPoint(x: 268.72, y: 4.09))
        audioWaves.addCurve(to: CGPoint(x: 268.07, y: 4.95), controlPoint1: CGPoint(x: 268.29, y: 4.44), controlPoint2: CGPoint(x: 268.14, y: 4.68))
        audioWaves.addCurve(to: CGPoint(x: 268.01, y: 5.34), controlPoint1: CGPoint(x: 268.03, y: 5.08), controlPoint2: CGPoint(x: 268.01, y: 5.21))
        audioWaves.addCurve(to: CGPoint(x: 268, y: 5.78), controlPoint1: CGPoint(x: 268, y: 5.49), controlPoint2: CGPoint(x: 268, y: 5.64))
        audioWaves.addLine(to: CGPoint(x: 268, y: 5.79))
        audioWaves.addLine(to: CGPoint(x: 268, y: 52.21))
        audioWaves.addLine(to: CGPoint(x: 268, y: 52.21))
        audioWaves.addCurve(to: CGPoint(x: 268.01, y: 52.66), controlPoint1: CGPoint(x: 268, y: 52.36), controlPoint2: CGPoint(x: 268, y: 52.51))
        audioWaves.addCurve(to: CGPoint(x: 268.07, y: 53.05), controlPoint1: CGPoint(x: 268.01, y: 52.79), controlPoint2: CGPoint(x: 268.03, y: 52.92))
        audioWaves.addCurve(to: CGPoint(x: 268.51, y: 53.74), controlPoint1: CGPoint(x: 268.14, y: 53.32), controlPoint2: CGPoint(x: 268.29, y: 53.56))
        audioWaves.addCurve(to: CGPoint(x: 269.25, y: 54), controlPoint1: CGPoint(x: 268.72, y: 53.91), controlPoint2: CGPoint(x: 268.98, y: 54))
        audioWaves.addCurve(to: CGPoint(x: 270, y: 53.74), controlPoint1: CGPoint(x: 269.52, y: 54), controlPoint2: CGPoint(x: 269.78, y: 53.91))
        audioWaves.addCurve(to: CGPoint(x: 270.44, y: 53.05), controlPoint1: CGPoint(x: 270.21, y: 53.56), controlPoint2: CGPoint(x: 270.36, y: 53.32))
        audioWaves.addCurve(to: CGPoint(x: 270.49, y: 52.66), controlPoint1: CGPoint(x: 270.47, y: 52.92), controlPoint2: CGPoint(x: 270.49, y: 52.79))
        audioWaves.addCurve(to: CGPoint(x: 270.5, y: 52.21), controlPoint1: CGPoint(x: 270.5, y: 52.51), controlPoint2: CGPoint(x: 270.5, y: 52.36))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 52.21))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 5.79))
        audioWaves.addLine(to: CGPoint(x: 270.5, y: 5.78))
        audioWaves.addCurve(to: CGPoint(x: 270.49, y: 5.34), controlPoint1: CGPoint(x: 270.5, y: 5.64), controlPoint2: CGPoint(x: 270.5, y: 5.49))
        audioWaves.addLine(to: CGPoint(x: 270.49, y: 5.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 276.44, y: 17.45))
        audioWaves.addCurve(to: CGPoint(x: 276, y: 16.76), controlPoint1: CGPoint(x: 276.36, y: 17.18), controlPoint2: CGPoint(x: 276.21, y: 16.94))
        audioWaves.addCurve(to: CGPoint(x: 275.25, y: 16.5), controlPoint1: CGPoint(x: 275.78, y: 16.59), controlPoint2: CGPoint(x: 275.52, y: 16.5))
        audioWaves.addCurve(to: CGPoint(x: 274.51, y: 16.76), controlPoint1: CGPoint(x: 274.98, y: 16.5), controlPoint2: CGPoint(x: 274.72, y: 16.59))
        audioWaves.addCurve(to: CGPoint(x: 274.07, y: 17.45), controlPoint1: CGPoint(x: 274.29, y: 16.94), controlPoint2: CGPoint(x: 274.14, y: 17.18))
        audioWaves.addCurve(to: CGPoint(x: 274.01, y: 17.84), controlPoint1: CGPoint(x: 274.03, y: 17.58), controlPoint2: CGPoint(x: 274.01, y: 17.71))
        audioWaves.addCurve(to: CGPoint(x: 274, y: 18.28), controlPoint1: CGPoint(x: 274, y: 17.99), controlPoint2: CGPoint(x: 274, y: 18.14))
        audioWaves.addLine(to: CGPoint(x: 274, y: 18.29))
        audioWaves.addLine(to: CGPoint(x: 274, y: 39.71))
        audioWaves.addLine(to: CGPoint(x: 274, y: 39.71))
        audioWaves.addCurve(to: CGPoint(x: 274.01, y: 40.16), controlPoint1: CGPoint(x: 274, y: 39.86), controlPoint2: CGPoint(x: 274, y: 40.01))
        audioWaves.addCurve(to: CGPoint(x: 274.07, y: 40.55), controlPoint1: CGPoint(x: 274.01, y: 40.29), controlPoint2: CGPoint(x: 274.03, y: 40.42))
        audioWaves.addCurve(to: CGPoint(x: 274.51, y: 41.24), controlPoint1: CGPoint(x: 274.14, y: 40.82), controlPoint2: CGPoint(x: 274.29, y: 41.06))
        audioWaves.addCurve(to: CGPoint(x: 275.25, y: 41.5), controlPoint1: CGPoint(x: 274.72, y: 41.41), controlPoint2: CGPoint(x: 274.98, y: 41.5))
        audioWaves.addCurve(to: CGPoint(x: 276, y: 41.24), controlPoint1: CGPoint(x: 275.52, y: 41.5), controlPoint2: CGPoint(x: 275.78, y: 41.41))
        audioWaves.addCurve(to: CGPoint(x: 276.44, y: 40.55), controlPoint1: CGPoint(x: 276.21, y: 41.06), controlPoint2: CGPoint(x: 276.36, y: 40.82))
        audioWaves.addCurve(to: CGPoint(x: 276.49, y: 40.16), controlPoint1: CGPoint(x: 276.47, y: 40.42), controlPoint2: CGPoint(x: 276.49, y: 40.29))
        audioWaves.addCurve(to: CGPoint(x: 276.5, y: 39.71), controlPoint1: CGPoint(x: 276.5, y: 40.01), controlPoint2: CGPoint(x: 276.5, y: 39.86))
        audioWaves.addLine(to: CGPoint(x: 276.5, y: 18.28))
        audioWaves.addCurve(to: CGPoint(x: 276.49, y: 17.84), controlPoint1: CGPoint(x: 276.5, y: 18.14), controlPoint2: CGPoint(x: 276.5, y: 17.99))
        audioWaves.addCurve(to: CGPoint(x: 276.44, y: 17.45), controlPoint1: CGPoint(x: 276.49, y: 17.71), controlPoint2: CGPoint(x: 276.47, y: 17.58))
        audioWaves.addLine(to: CGPoint(x: 276.44, y: 17.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 282.49, y: 25.34))
        audioWaves.addCurve(to: CGPoint(x: 282.44, y: 24.95), controlPoint1: CGPoint(x: 282.49, y: 25.21), controlPoint2: CGPoint(x: 282.47, y: 25.08))
        audioWaves.addCurve(to: CGPoint(x: 282, y: 24.26), controlPoint1: CGPoint(x: 282.36, y: 24.68), controlPoint2: CGPoint(x: 282.21, y: 24.44))
        audioWaves.addCurve(to: CGPoint(x: 281.25, y: 24), controlPoint1: CGPoint(x: 281.78, y: 24.09), controlPoint2: CGPoint(x: 281.52, y: 24))
        audioWaves.addCurve(to: CGPoint(x: 280.51, y: 24.26), controlPoint1: CGPoint(x: 280.98, y: 24), controlPoint2: CGPoint(x: 280.72, y: 24.09))
        audioWaves.addCurve(to: CGPoint(x: 280.07, y: 24.95), controlPoint1: CGPoint(x: 280.29, y: 24.44), controlPoint2: CGPoint(x: 280.14, y: 24.68))
        audioWaves.addCurve(to: CGPoint(x: 280.01, y: 25.34), controlPoint1: CGPoint(x: 280.03, y: 25.08), controlPoint2: CGPoint(x: 280.01, y: 25.21))
        audioWaves.addCurve(to: CGPoint(x: 280, y: 25.78), controlPoint1: CGPoint(x: 280, y: 25.49), controlPoint2: CGPoint(x: 280, y: 25.64))
        audioWaves.addLine(to: CGPoint(x: 280, y: 25.79))
        audioWaves.addLine(to: CGPoint(x: 280, y: 32.21))
        audioWaves.addLine(to: CGPoint(x: 280, y: 32.21))
        audioWaves.addCurve(to: CGPoint(x: 280.01, y: 32.66), controlPoint1: CGPoint(x: 280, y: 32.36), controlPoint2: CGPoint(x: 280, y: 32.51))
        audioWaves.addCurve(to: CGPoint(x: 280.07, y: 33.05), controlPoint1: CGPoint(x: 280.01, y: 32.79), controlPoint2: CGPoint(x: 280.03, y: 32.92))
        audioWaves.addCurve(to: CGPoint(x: 280.51, y: 33.74), controlPoint1: CGPoint(x: 280.14, y: 33.32), controlPoint2: CGPoint(x: 280.29, y: 33.56))
        audioWaves.addCurve(to: CGPoint(x: 281.25, y: 34), controlPoint1: CGPoint(x: 280.72, y: 33.91), controlPoint2: CGPoint(x: 280.98, y: 34))
        audioWaves.addCurve(to: CGPoint(x: 282, y: 33.74), controlPoint1: CGPoint(x: 281.52, y: 34), controlPoint2: CGPoint(x: 281.78, y: 33.91))
        audioWaves.addCurve(to: CGPoint(x: 282.44, y: 33.05), controlPoint1: CGPoint(x: 282.21, y: 33.56), controlPoint2: CGPoint(x: 282.36, y: 33.32))
        audioWaves.addCurve(to: CGPoint(x: 282.49, y: 32.66), controlPoint1: CGPoint(x: 282.47, y: 32.92), controlPoint2: CGPoint(x: 282.49, y: 32.79))
        audioWaves.addCurve(to: CGPoint(x: 282.5, y: 32.21), controlPoint1: CGPoint(x: 282.5, y: 32.51), controlPoint2: CGPoint(x: 282.5, y: 32.36))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 32.21))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 25.79))
        audioWaves.addLine(to: CGPoint(x: 282.5, y: 25.78))
        audioWaves.addCurve(to: CGPoint(x: 282.49, y: 25.34), controlPoint1: CGPoint(x: 282.5, y: 25.64), controlPoint2: CGPoint(x: 282.5, y: 25.49))
        audioWaves.addLine(to: CGPoint(x: 282.49, y: 25.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 287.94, y: 25.95))
        audioWaves.addCurve(to: CGPoint(x: 287.5, y: 25.26), controlPoint1: CGPoint(x: 287.86, y: 25.68), controlPoint2: CGPoint(x: 287.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 286.75, y: 25), controlPoint1: CGPoint(x: 287.28, y: 25.09), controlPoint2: CGPoint(x: 287.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 286.01, y: 25.26), controlPoint1: CGPoint(x: 286.48, y: 25), controlPoint2: CGPoint(x: 286.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 285.57, y: 25.95), controlPoint1: CGPoint(x: 285.79, y: 25.44), controlPoint2: CGPoint(x: 285.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 285.51, y: 26.34), controlPoint1: CGPoint(x: 285.53, y: 26.08), controlPoint2: CGPoint(x: 285.51, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 285.5, y: 26.78), controlPoint1: CGPoint(x: 285.5, y: 26.49), controlPoint2: CGPoint(x: 285.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 285.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 285.51, y: 31.66), controlPoint1: CGPoint(x: 285.5, y: 31.36), controlPoint2: CGPoint(x: 285.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 285.57, y: 32.05), controlPoint1: CGPoint(x: 285.51, y: 31.79), controlPoint2: CGPoint(x: 285.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 286.01, y: 32.74), controlPoint1: CGPoint(x: 285.64, y: 32.32), controlPoint2: CGPoint(x: 285.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 286.75, y: 33), controlPoint1: CGPoint(x: 286.22, y: 32.91), controlPoint2: CGPoint(x: 286.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 287.5, y: 32.74), controlPoint1: CGPoint(x: 287.02, y: 33), controlPoint2: CGPoint(x: 287.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 287.94, y: 32.05), controlPoint1: CGPoint(x: 287.71, y: 32.56), controlPoint2: CGPoint(x: 287.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 287.99, y: 31.66), controlPoint1: CGPoint(x: 287.97, y: 31.92), controlPoint2: CGPoint(x: 287.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 288, y: 31.22), controlPoint1: CGPoint(x: 288, y: 31.51), controlPoint2: CGPoint(x: 288, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 288, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 287.99, y: 26.34), controlPoint1: CGPoint(x: 288, y: 26.64), controlPoint2: CGPoint(x: 288, y: 26.49))
        audioWaves.addCurve(to: CGPoint(x: 287.94, y: 25.95), controlPoint1: CGPoint(x: 287.99, y: 26.21), controlPoint2: CGPoint(x: 287.97, y: 26.08))
        audioWaves.addLine(to: CGPoint(x: 287.94, y: 25.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 293.99, y: 17.34))
        audioWaves.addCurve(to: CGPoint(x: 293.94, y: 16.95), controlPoint1: CGPoint(x: 293.99, y: 17.21), controlPoint2: CGPoint(x: 293.97, y: 17.08))
        audioWaves.addCurve(to: CGPoint(x: 293.5, y: 16.26), controlPoint1: CGPoint(x: 293.86, y: 16.68), controlPoint2: CGPoint(x: 293.71, y: 16.44))
        audioWaves.addCurve(to: CGPoint(x: 292.75, y: 16), controlPoint1: CGPoint(x: 293.28, y: 16.09), controlPoint2: CGPoint(x: 293.02, y: 16))
        audioWaves.addCurve(to: CGPoint(x: 292.01, y: 16.26), controlPoint1: CGPoint(x: 292.48, y: 16), controlPoint2: CGPoint(x: 292.22, y: 16.09))
        audioWaves.addCurve(to: CGPoint(x: 291.57, y: 16.95), controlPoint1: CGPoint(x: 291.79, y: 16.44), controlPoint2: CGPoint(x: 291.64, y: 16.68))
        audioWaves.addCurve(to: CGPoint(x: 291.51, y: 17.34), controlPoint1: CGPoint(x: 291.53, y: 17.08), controlPoint2: CGPoint(x: 291.51, y: 17.21))
        audioWaves.addCurve(to: CGPoint(x: 291.5, y: 17.78), controlPoint1: CGPoint(x: 291.5, y: 17.49), controlPoint2: CGPoint(x: 291.5, y: 17.64))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 17.79))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 40.21))
        audioWaves.addLine(to: CGPoint(x: 291.5, y: 40.21))
        audioWaves.addCurve(to: CGPoint(x: 291.51, y: 40.66), controlPoint1: CGPoint(x: 291.5, y: 40.36), controlPoint2: CGPoint(x: 291.5, y: 40.51))
        audioWaves.addCurve(to: CGPoint(x: 291.57, y: 41.05), controlPoint1: CGPoint(x: 291.51, y: 40.79), controlPoint2: CGPoint(x: 291.53, y: 40.92))
        audioWaves.addCurve(to: CGPoint(x: 292.01, y: 41.74), controlPoint1: CGPoint(x: 291.64, y: 41.32), controlPoint2: CGPoint(x: 291.79, y: 41.56))
        audioWaves.addCurve(to: CGPoint(x: 292.75, y: 42), controlPoint1: CGPoint(x: 292.22, y: 41.91), controlPoint2: CGPoint(x: 292.48, y: 42))
        audioWaves.addCurve(to: CGPoint(x: 293.5, y: 41.74), controlPoint1: CGPoint(x: 293.02, y: 42), controlPoint2: CGPoint(x: 293.28, y: 41.91))
        audioWaves.addCurve(to: CGPoint(x: 293.94, y: 41.05), controlPoint1: CGPoint(x: 293.71, y: 41.56), controlPoint2: CGPoint(x: 293.86, y: 41.32))
        audioWaves.addCurve(to: CGPoint(x: 293.99, y: 40.66), controlPoint1: CGPoint(x: 293.97, y: 40.92), controlPoint2: CGPoint(x: 293.99, y: 40.79))
        audioWaves.addCurve(to: CGPoint(x: 294, y: 40.21), controlPoint1: CGPoint(x: 294, y: 40.51), controlPoint2: CGPoint(x: 294, y: 40.36))
        audioWaves.addLine(to: CGPoint(x: 294, y: 40.21))
        audioWaves.addLine(to: CGPoint(x: 294, y: 17.79))
        audioWaves.addLine(to: CGPoint(x: 294, y: 17.78))
        audioWaves.addCurve(to: CGPoint(x: 293.99, y: 17.34), controlPoint1: CGPoint(x: 294, y: 17.64), controlPoint2: CGPoint(x: 294, y: 17.49))
        audioWaves.addLine(to: CGPoint(x: 293.99, y: 17.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 299.94, y: 18.95))
        audioWaves.addCurve(to: CGPoint(x: 299.5, y: 18.26), controlPoint1: CGPoint(x: 299.86, y: 18.68), controlPoint2: CGPoint(x: 299.71, y: 18.44))
        audioWaves.addCurve(to: CGPoint(x: 298.75, y: 18), controlPoint1: CGPoint(x: 299.28, y: 18.09), controlPoint2: CGPoint(x: 299.02, y: 18))
        audioWaves.addCurve(to: CGPoint(x: 298.01, y: 18.26), controlPoint1: CGPoint(x: 298.48, y: 18), controlPoint2: CGPoint(x: 298.22, y: 18.09))
        audioWaves.addCurve(to: CGPoint(x: 297.57, y: 18.95), controlPoint1: CGPoint(x: 297.79, y: 18.44), controlPoint2: CGPoint(x: 297.64, y: 18.68))
        audioWaves.addCurve(to: CGPoint(x: 297.51, y: 19.34), controlPoint1: CGPoint(x: 297.53, y: 19.08), controlPoint2: CGPoint(x: 297.51, y: 19.21))
        audioWaves.addCurve(to: CGPoint(x: 297.5, y: 19.78), controlPoint1: CGPoint(x: 297.5, y: 19.49), controlPoint2: CGPoint(x: 297.5, y: 19.64))
        audioWaves.addLine(to: CGPoint(x: 297.5, y: 38.21))
        audioWaves.addCurve(to: CGPoint(x: 297.51, y: 38.66), controlPoint1: CGPoint(x: 297.5, y: 38.36), controlPoint2: CGPoint(x: 297.5, y: 38.51))
        audioWaves.addCurve(to: CGPoint(x: 297.57, y: 39.05), controlPoint1: CGPoint(x: 297.51, y: 38.79), controlPoint2: CGPoint(x: 297.53, y: 38.92))
        audioWaves.addCurve(to: CGPoint(x: 298.01, y: 39.74), controlPoint1: CGPoint(x: 297.64, y: 39.32), controlPoint2: CGPoint(x: 297.79, y: 39.56))
        audioWaves.addCurve(to: CGPoint(x: 298.75, y: 40), controlPoint1: CGPoint(x: 298.22, y: 39.91), controlPoint2: CGPoint(x: 298.48, y: 40))
        audioWaves.addCurve(to: CGPoint(x: 299.5, y: 39.74), controlPoint1: CGPoint(x: 299.02, y: 40), controlPoint2: CGPoint(x: 299.28, y: 39.91))
        audioWaves.addCurve(to: CGPoint(x: 299.94, y: 39.05), controlPoint1: CGPoint(x: 299.71, y: 39.56), controlPoint2: CGPoint(x: 299.86, y: 39.32))
        audioWaves.addCurve(to: CGPoint(x: 299.99, y: 38.66), controlPoint1: CGPoint(x: 299.97, y: 38.92), controlPoint2: CGPoint(x: 299.99, y: 38.79))
        audioWaves.addCurve(to: CGPoint(x: 300, y: 38.21), controlPoint1: CGPoint(x: 300, y: 38.51), controlPoint2: CGPoint(x: 300, y: 38.36))
        audioWaves.addLine(to: CGPoint(x: 300, y: 19.78))
        audioWaves.addCurve(to: CGPoint(x: 299.99, y: 19.34), controlPoint1: CGPoint(x: 300, y: 19.64), controlPoint2: CGPoint(x: 300, y: 19.49))
        audioWaves.addCurve(to: CGPoint(x: 299.94, y: 18.95), controlPoint1: CGPoint(x: 299.99, y: 19.21), controlPoint2: CGPoint(x: 299.97, y: 19.08))
        audioWaves.addLine(to: CGPoint(x: 299.94, y: 18.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 305.99, y: 20.34))
        audioWaves.addCurve(to: CGPoint(x: 305.94, y: 19.95), controlPoint1: CGPoint(x: 305.99, y: 20.21), controlPoint2: CGPoint(x: 305.97, y: 20.08))
        audioWaves.addCurve(to: CGPoint(x: 305.5, y: 19.26), controlPoint1: CGPoint(x: 305.86, y: 19.68), controlPoint2: CGPoint(x: 305.71, y: 19.44))
        audioWaves.addCurve(to: CGPoint(x: 304.75, y: 19), controlPoint1: CGPoint(x: 305.28, y: 19.09), controlPoint2: CGPoint(x: 305.02, y: 19))
        audioWaves.addCurve(to: CGPoint(x: 304.01, y: 19.26), controlPoint1: CGPoint(x: 304.48, y: 19), controlPoint2: CGPoint(x: 304.22, y: 19.09))
        audioWaves.addCurve(to: CGPoint(x: 303.57, y: 19.95), controlPoint1: CGPoint(x: 303.79, y: 19.44), controlPoint2: CGPoint(x: 303.64, y: 19.68))
        audioWaves.addCurve(to: CGPoint(x: 303.51, y: 20.34), controlPoint1: CGPoint(x: 303.53, y: 20.08), controlPoint2: CGPoint(x: 303.51, y: 20.21))
        audioWaves.addCurve(to: CGPoint(x: 303.5, y: 20.78), controlPoint1: CGPoint(x: 303.5, y: 20.49), controlPoint2: CGPoint(x: 303.5, y: 20.64))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 303.5, y: 37.21))
        audioWaves.addCurve(to: CGPoint(x: 303.51, y: 37.66), controlPoint1: CGPoint(x: 303.5, y: 37.36), controlPoint2: CGPoint(x: 303.5, y: 37.51))
        audioWaves.addCurve(to: CGPoint(x: 303.57, y: 38.05), controlPoint1: CGPoint(x: 303.51, y: 37.79), controlPoint2: CGPoint(x: 303.53, y: 37.92))
        audioWaves.addCurve(to: CGPoint(x: 304.01, y: 38.74), controlPoint1: CGPoint(x: 303.64, y: 38.32), controlPoint2: CGPoint(x: 303.79, y: 38.56))
        audioWaves.addCurve(to: CGPoint(x: 304.75, y: 39), controlPoint1: CGPoint(x: 304.22, y: 38.91), controlPoint2: CGPoint(x: 304.48, y: 39))
        audioWaves.addCurve(to: CGPoint(x: 305.5, y: 38.74), controlPoint1: CGPoint(x: 305.02, y: 39), controlPoint2: CGPoint(x: 305.28, y: 38.91))
        audioWaves.addCurve(to: CGPoint(x: 305.94, y: 38.05), controlPoint1: CGPoint(x: 305.71, y: 38.56), controlPoint2: CGPoint(x: 305.86, y: 38.32))
        audioWaves.addCurve(to: CGPoint(x: 305.99, y: 37.66), controlPoint1: CGPoint(x: 305.97, y: 37.92), controlPoint2: CGPoint(x: 305.99, y: 37.79))
        audioWaves.addCurve(to: CGPoint(x: 306, y: 37.21), controlPoint1: CGPoint(x: 306, y: 37.51), controlPoint2: CGPoint(x: 306, y: 37.36))
        audioWaves.addLine(to: CGPoint(x: 306, y: 37.21))
        audioWaves.addLine(to: CGPoint(x: 306, y: 20.79))
        audioWaves.addLine(to: CGPoint(x: 306, y: 20.78))
        audioWaves.addCurve(to: CGPoint(x: 305.99, y: 20.34), controlPoint1: CGPoint(x: 306, y: 20.64), controlPoint2: CGPoint(x: 306, y: 20.49))
        audioWaves.addLine(to: CGPoint(x: 305.99, y: 20.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 311.94, y: 22.45))
        audioWaves.addCurve(to: CGPoint(x: 311.5, y: 21.76), controlPoint1: CGPoint(x: 311.86, y: 22.18), controlPoint2: CGPoint(x: 311.71, y: 21.94))
        audioWaves.addCurve(to: CGPoint(x: 310.75, y: 21.5), controlPoint1: CGPoint(x: 311.28, y: 21.59), controlPoint2: CGPoint(x: 311.02, y: 21.5))
        audioWaves.addCurve(to: CGPoint(x: 310.01, y: 21.76), controlPoint1: CGPoint(x: 310.48, y: 21.5), controlPoint2: CGPoint(x: 310.22, y: 21.59))
        audioWaves.addCurve(to: CGPoint(x: 309.57, y: 22.45), controlPoint1: CGPoint(x: 309.79, y: 21.94), controlPoint2: CGPoint(x: 309.64, y: 22.18))
        audioWaves.addCurve(to: CGPoint(x: 309.51, y: 22.84), controlPoint1: CGPoint(x: 309.53, y: 22.58), controlPoint2: CGPoint(x: 309.51, y: 22.71))
        audioWaves.addCurve(to: CGPoint(x: 309.5, y: 23.28), controlPoint1: CGPoint(x: 309.5, y: 22.99), controlPoint2: CGPoint(x: 309.5, y: 23.14))
        audioWaves.addLine(to: CGPoint(x: 309.5, y: 34.71))
        audioWaves.addCurve(to: CGPoint(x: 309.51, y: 35.16), controlPoint1: CGPoint(x: 309.5, y: 34.86), controlPoint2: CGPoint(x: 309.5, y: 35.01))
        audioWaves.addCurve(to: CGPoint(x: 309.57, y: 35.55), controlPoint1: CGPoint(x: 309.51, y: 35.29), controlPoint2: CGPoint(x: 309.53, y: 35.42))
        audioWaves.addCurve(to: CGPoint(x: 310.01, y: 36.24), controlPoint1: CGPoint(x: 309.64, y: 35.82), controlPoint2: CGPoint(x: 309.79, y: 36.06))
        audioWaves.addCurve(to: CGPoint(x: 310.75, y: 36.5), controlPoint1: CGPoint(x: 310.22, y: 36.41), controlPoint2: CGPoint(x: 310.48, y: 36.5))
        audioWaves.addCurve(to: CGPoint(x: 311.5, y: 36.24), controlPoint1: CGPoint(x: 311.02, y: 36.5), controlPoint2: CGPoint(x: 311.28, y: 36.41))
        audioWaves.addCurve(to: CGPoint(x: 311.94, y: 35.55), controlPoint1: CGPoint(x: 311.71, y: 36.06), controlPoint2: CGPoint(x: 311.86, y: 35.82))
        audioWaves.addCurve(to: CGPoint(x: 311.99, y: 35.16), controlPoint1: CGPoint(x: 311.97, y: 35.42), controlPoint2: CGPoint(x: 311.99, y: 35.29))
        audioWaves.addCurve(to: CGPoint(x: 312, y: 34.71), controlPoint1: CGPoint(x: 312, y: 35.01), controlPoint2: CGPoint(x: 312, y: 34.86))
        audioWaves.addLine(to: CGPoint(x: 312, y: 23.28))
        audioWaves.addCurve(to: CGPoint(x: 311.99, y: 22.84), controlPoint1: CGPoint(x: 312, y: 23.14), controlPoint2: CGPoint(x: 312, y: 22.99))
        audioWaves.addCurve(to: CGPoint(x: 311.94, y: 22.45), controlPoint1: CGPoint(x: 311.99, y: 22.71), controlPoint2: CGPoint(x: 311.97, y: 22.58))
        audioWaves.addLine(to: CGPoint(x: 311.94, y: 22.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 317.99, y: 24.34))
        audioWaves.addCurve(to: CGPoint(x: 317.94, y: 23.95), controlPoint1: CGPoint(x: 317.99, y: 24.21), controlPoint2: CGPoint(x: 317.97, y: 24.08))
        audioWaves.addCurve(to: CGPoint(x: 317.5, y: 23.26), controlPoint1: CGPoint(x: 317.86, y: 23.68), controlPoint2: CGPoint(x: 317.71, y: 23.44))
        audioWaves.addCurve(to: CGPoint(x: 316.75, y: 23), controlPoint1: CGPoint(x: 317.28, y: 23.09), controlPoint2: CGPoint(x: 317.02, y: 23))
        audioWaves.addCurve(to: CGPoint(x: 316.01, y: 23.26), controlPoint1: CGPoint(x: 316.48, y: 23), controlPoint2: CGPoint(x: 316.22, y: 23.09))
        audioWaves.addCurve(to: CGPoint(x: 315.57, y: 23.95), controlPoint1: CGPoint(x: 315.79, y: 23.44), controlPoint2: CGPoint(x: 315.64, y: 23.68))
        audioWaves.addCurve(to: CGPoint(x: 315.51, y: 24.34), controlPoint1: CGPoint(x: 315.53, y: 24.08), controlPoint2: CGPoint(x: 315.51, y: 24.21))
        audioWaves.addCurve(to: CGPoint(x: 315.5, y: 24.78), controlPoint1: CGPoint(x: 315.5, y: 24.49), controlPoint2: CGPoint(x: 315.5, y: 24.64))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 315.5, y: 33.21))
        audioWaves.addCurve(to: CGPoint(x: 315.51, y: 33.66), controlPoint1: CGPoint(x: 315.5, y: 33.36), controlPoint2: CGPoint(x: 315.5, y: 33.51))
        audioWaves.addCurve(to: CGPoint(x: 315.57, y: 34.05), controlPoint1: CGPoint(x: 315.51, y: 33.79), controlPoint2: CGPoint(x: 315.53, y: 33.92))
        audioWaves.addCurve(to: CGPoint(x: 316.01, y: 34.74), controlPoint1: CGPoint(x: 315.64, y: 34.32), controlPoint2: CGPoint(x: 315.79, y: 34.56))
        audioWaves.addCurve(to: CGPoint(x: 316.75, y: 35), controlPoint1: CGPoint(x: 316.22, y: 34.91), controlPoint2: CGPoint(x: 316.48, y: 35))
        audioWaves.addCurve(to: CGPoint(x: 317.5, y: 34.74), controlPoint1: CGPoint(x: 317.02, y: 35), controlPoint2: CGPoint(x: 317.28, y: 34.91))
        audioWaves.addCurve(to: CGPoint(x: 317.94, y: 34.05), controlPoint1: CGPoint(x: 317.71, y: 34.56), controlPoint2: CGPoint(x: 317.86, y: 34.32))
        audioWaves.addCurve(to: CGPoint(x: 317.99, y: 33.66), controlPoint1: CGPoint(x: 317.97, y: 33.92), controlPoint2: CGPoint(x: 317.99, y: 33.79))
        audioWaves.addCurve(to: CGPoint(x: 318, y: 33.21), controlPoint1: CGPoint(x: 318, y: 33.51), controlPoint2: CGPoint(x: 318, y: 33.36))
        audioWaves.addLine(to: CGPoint(x: 318, y: 33.21))
        audioWaves.addLine(to: CGPoint(x: 318, y: 24.79))
        audioWaves.addLine(to: CGPoint(x: 318, y: 24.78))
        audioWaves.addCurve(to: CGPoint(x: 317.99, y: 24.34), controlPoint1: CGPoint(x: 318, y: 24.64), controlPoint2: CGPoint(x: 318, y: 24.49))
        audioWaves.addLine(to: CGPoint(x: 317.99, y: 24.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 323.94, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 323.5, y: 27.26), controlPoint1: CGPoint(x: 323.86, y: 27.68), controlPoint2: CGPoint(x: 323.71, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 322.75, y: 27), controlPoint1: CGPoint(x: 323.28, y: 27.09), controlPoint2: CGPoint(x: 323.02, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 322.01, y: 27.26), controlPoint1: CGPoint(x: 322.48, y: 27), controlPoint2: CGPoint(x: 322.22, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 321.56, y: 27.95), controlPoint1: CGPoint(x: 321.79, y: 27.44), controlPoint2: CGPoint(x: 321.64, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 321.51, y: 28.34), controlPoint1: CGPoint(x: 321.53, y: 28.08), controlPoint2: CGPoint(x: 321.51, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 321.5, y: 28.78), controlPoint1: CGPoint(x: 321.5, y: 28.49), controlPoint2: CGPoint(x: 321.5, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 28.79))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 29.21))
        audioWaves.addLine(to: CGPoint(x: 321.5, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 321.51, y: 29.66), controlPoint1: CGPoint(x: 321.5, y: 29.36), controlPoint2: CGPoint(x: 321.5, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 321.56, y: 30.05), controlPoint1: CGPoint(x: 321.51, y: 29.79), controlPoint2: CGPoint(x: 321.53, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 322.01, y: 30.74), controlPoint1: CGPoint(x: 321.64, y: 30.32), controlPoint2: CGPoint(x: 321.79, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 322.75, y: 31), controlPoint1: CGPoint(x: 322.22, y: 30.91), controlPoint2: CGPoint(x: 322.48, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 323.5, y: 30.74), controlPoint1: CGPoint(x: 323.02, y: 31), controlPoint2: CGPoint(x: 323.28, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 323.94, y: 30.05), controlPoint1: CGPoint(x: 323.71, y: 30.56), controlPoint2: CGPoint(x: 323.86, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 323.99, y: 29.66), controlPoint1: CGPoint(x: 323.97, y: 29.92), controlPoint2: CGPoint(x: 323.99, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 324, y: 29.22), controlPoint1: CGPoint(x: 324, y: 29.51), controlPoint2: CGPoint(x: 324, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 324, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 323.99, y: 28.34), controlPoint1: CGPoint(x: 324, y: 28.64), controlPoint2: CGPoint(x: 324, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 323.94, y: 27.95), controlPoint1: CGPoint(x: 323.99, y: 28.21), controlPoint2: CGPoint(x: 323.97, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 323.94, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 329.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 329.94, y: 25.95), controlPoint1: CGPoint(x: 329.99, y: 26.21), controlPoint2: CGPoint(x: 329.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 329.5, y: 25.26), controlPoint1: CGPoint(x: 329.86, y: 25.68), controlPoint2: CGPoint(x: 329.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 328.75, y: 25), controlPoint1: CGPoint(x: 329.28, y: 25.09), controlPoint2: CGPoint(x: 329.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 328.01, y: 25.26), controlPoint1: CGPoint(x: 328.48, y: 25), controlPoint2: CGPoint(x: 328.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 327.56, y: 25.95), controlPoint1: CGPoint(x: 327.79, y: 25.44), controlPoint2: CGPoint(x: 327.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 327.51, y: 26.34), controlPoint1: CGPoint(x: 327.53, y: 26.08), controlPoint2: CGPoint(x: 327.51, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 327.5, y: 26.78), controlPoint1: CGPoint(x: 327.5, y: 26.49), controlPoint2: CGPoint(x: 327.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 327.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 327.51, y: 31.66), controlPoint1: CGPoint(x: 327.5, y: 31.36), controlPoint2: CGPoint(x: 327.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 327.56, y: 32.05), controlPoint1: CGPoint(x: 327.51, y: 31.79), controlPoint2: CGPoint(x: 327.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 328.01, y: 32.74), controlPoint1: CGPoint(x: 327.64, y: 32.32), controlPoint2: CGPoint(x: 327.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 328.75, y: 33), controlPoint1: CGPoint(x: 328.22, y: 32.91), controlPoint2: CGPoint(x: 328.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 329.5, y: 32.74), controlPoint1: CGPoint(x: 329.02, y: 33), controlPoint2: CGPoint(x: 329.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 329.94, y: 32.05), controlPoint1: CGPoint(x: 329.71, y: 32.56), controlPoint2: CGPoint(x: 329.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 329.99, y: 31.66), controlPoint1: CGPoint(x: 329.97, y: 31.92), controlPoint2: CGPoint(x: 329.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 330, y: 31.22), controlPoint1: CGPoint(x: 330, y: 31.51), controlPoint2: CGPoint(x: 330, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 330, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 330, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 330, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 329.99, y: 26.34), controlPoint1: CGPoint(x: 330, y: 26.64), controlPoint2: CGPoint(x: 330, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 329.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 335.99, y: 26.34))
        audioWaves.addCurve(to: CGPoint(x: 335.94, y: 25.95), controlPoint1: CGPoint(x: 335.99, y: 26.21), controlPoint2: CGPoint(x: 335.97, y: 26.08))
        audioWaves.addCurve(to: CGPoint(x: 335.5, y: 25.26), controlPoint1: CGPoint(x: 335.86, y: 25.68), controlPoint2: CGPoint(x: 335.71, y: 25.44))
        audioWaves.addCurve(to: CGPoint(x: 334.75, y: 25), controlPoint1: CGPoint(x: 335.28, y: 25.09), controlPoint2: CGPoint(x: 335.02, y: 25))
        audioWaves.addCurve(to: CGPoint(x: 334.01, y: 25.26), controlPoint1: CGPoint(x: 334.48, y: 25), controlPoint2: CGPoint(x: 334.22, y: 25.09))
        audioWaves.addCurve(to: CGPoint(x: 333.56, y: 25.95), controlPoint1: CGPoint(x: 333.79, y: 25.44), controlPoint2: CGPoint(x: 333.64, y: 25.68))
        audioWaves.addCurve(to: CGPoint(x: 333.51, y: 26.34), controlPoint1: CGPoint(x: 333.53, y: 26.08), controlPoint2: CGPoint(x: 333.52, y: 26.21))
        audioWaves.addCurve(to: CGPoint(x: 333.5, y: 26.78), controlPoint1: CGPoint(x: 333.5, y: 26.49), controlPoint2: CGPoint(x: 333.5, y: 26.64))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 333.5, y: 31.22))
        audioWaves.addCurve(to: CGPoint(x: 333.51, y: 31.66), controlPoint1: CGPoint(x: 333.5, y: 31.36), controlPoint2: CGPoint(x: 333.5, y: 31.51))
        audioWaves.addCurve(to: CGPoint(x: 333.56, y: 32.05), controlPoint1: CGPoint(x: 333.52, y: 31.79), controlPoint2: CGPoint(x: 333.53, y: 31.92))
        audioWaves.addCurve(to: CGPoint(x: 334.01, y: 32.74), controlPoint1: CGPoint(x: 333.64, y: 32.32), controlPoint2: CGPoint(x: 333.79, y: 32.56))
        audioWaves.addCurve(to: CGPoint(x: 334.75, y: 33), controlPoint1: CGPoint(x: 334.22, y: 32.91), controlPoint2: CGPoint(x: 334.48, y: 33))
        audioWaves.addCurve(to: CGPoint(x: 335.5, y: 32.74), controlPoint1: CGPoint(x: 335.02, y: 33), controlPoint2: CGPoint(x: 335.28, y: 32.91))
        audioWaves.addCurve(to: CGPoint(x: 335.94, y: 32.05), controlPoint1: CGPoint(x: 335.71, y: 32.56), controlPoint2: CGPoint(x: 335.86, y: 32.32))
        audioWaves.addCurve(to: CGPoint(x: 335.99, y: 31.66), controlPoint1: CGPoint(x: 335.97, y: 31.92), controlPoint2: CGPoint(x: 335.99, y: 31.79))
        audioWaves.addCurve(to: CGPoint(x: 336, y: 31.22), controlPoint1: CGPoint(x: 336, y: 31.51), controlPoint2: CGPoint(x: 336, y: 31.36))
        audioWaves.addLine(to: CGPoint(x: 336, y: 31.21))
        audioWaves.addLine(to: CGPoint(x: 336, y: 26.79))
        audioWaves.addLine(to: CGPoint(x: 336, y: 26.78))
        audioWaves.addCurve(to: CGPoint(x: 335.99, y: 26.34), controlPoint1: CGPoint(x: 336, y: 26.64), controlPoint2: CGPoint(x: 336, y: 26.49))
        audioWaves.addLine(to: CGPoint(x: 335.99, y: 26.34))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 341.94, y: 27.45))
        audioWaves.addCurve(to: CGPoint(x: 341.5, y: 26.76), controlPoint1: CGPoint(x: 341.86, y: 27.18), controlPoint2: CGPoint(x: 341.71, y: 26.94))
        audioWaves.addCurve(to: CGPoint(x: 340.75, y: 26.5), controlPoint1: CGPoint(x: 341.28, y: 26.59), controlPoint2: CGPoint(x: 341.02, y: 26.5))
        audioWaves.addCurve(to: CGPoint(x: 340.01, y: 26.76), controlPoint1: CGPoint(x: 340.48, y: 26.5), controlPoint2: CGPoint(x: 340.22, y: 26.59))
        audioWaves.addCurve(to: CGPoint(x: 339.56, y: 27.45), controlPoint1: CGPoint(x: 339.79, y: 26.94), controlPoint2: CGPoint(x: 339.64, y: 27.18))
        audioWaves.addCurve(to: CGPoint(x: 339.51, y: 27.84), controlPoint1: CGPoint(x: 339.53, y: 27.58), controlPoint2: CGPoint(x: 339.52, y: 27.71))
        audioWaves.addCurve(to: CGPoint(x: 339.5, y: 28.28), controlPoint1: CGPoint(x: 339.5, y: 27.99), controlPoint2: CGPoint(x: 339.5, y: 28.14))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 28.29))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 29.71))
        audioWaves.addLine(to: CGPoint(x: 339.5, y: 29.72))
        audioWaves.addCurve(to: CGPoint(x: 339.51, y: 30.16), controlPoint1: CGPoint(x: 339.5, y: 29.86), controlPoint2: CGPoint(x: 339.5, y: 30.01))
        audioWaves.addCurve(to: CGPoint(x: 339.56, y: 30.55), controlPoint1: CGPoint(x: 339.52, y: 30.29), controlPoint2: CGPoint(x: 339.53, y: 30.42))
        audioWaves.addCurve(to: CGPoint(x: 340.01, y: 31.24), controlPoint1: CGPoint(x: 339.64, y: 30.82), controlPoint2: CGPoint(x: 339.79, y: 31.06))
        audioWaves.addCurve(to: CGPoint(x: 340.75, y: 31.5), controlPoint1: CGPoint(x: 340.22, y: 31.41), controlPoint2: CGPoint(x: 340.48, y: 31.5))
        audioWaves.addCurve(to: CGPoint(x: 341.5, y: 31.24), controlPoint1: CGPoint(x: 341.02, y: 31.5), controlPoint2: CGPoint(x: 341.28, y: 31.41))
        audioWaves.addCurve(to: CGPoint(x: 341.94, y: 30.55), controlPoint1: CGPoint(x: 341.71, y: 31.06), controlPoint2: CGPoint(x: 341.86, y: 30.82))
        audioWaves.addCurve(to: CGPoint(x: 341.99, y: 30.16), controlPoint1: CGPoint(x: 341.97, y: 30.42), controlPoint2: CGPoint(x: 341.99, y: 30.29))
        audioWaves.addCurve(to: CGPoint(x: 342, y: 29.72), controlPoint1: CGPoint(x: 342, y: 30.01), controlPoint2: CGPoint(x: 342, y: 29.86))
        audioWaves.addLine(to: CGPoint(x: 342, y: 28.28))
        audioWaves.addCurve(to: CGPoint(x: 341.99, y: 27.84), controlPoint1: CGPoint(x: 342, y: 28.14), controlPoint2: CGPoint(x: 342, y: 27.99))
        audioWaves.addCurve(to: CGPoint(x: 341.94, y: 27.45), controlPoint1: CGPoint(x: 341.99, y: 27.71), controlPoint2: CGPoint(x: 341.97, y: 27.58))
        audioWaves.addLine(to: CGPoint(x: 341.94, y: 27.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 347.44, y: 27.95))
        audioWaves.addCurve(to: CGPoint(x: 347, y: 27.26), controlPoint1: CGPoint(x: 347.36, y: 27.68), controlPoint2: CGPoint(x: 347.21, y: 27.44))
        audioWaves.addCurve(to: CGPoint(x: 346.25, y: 27), controlPoint1: CGPoint(x: 346.78, y: 27.09), controlPoint2: CGPoint(x: 346.52, y: 27))
        audioWaves.addCurve(to: CGPoint(x: 345.51, y: 27.26), controlPoint1: CGPoint(x: 345.98, y: 27), controlPoint2: CGPoint(x: 345.72, y: 27.09))
        audioWaves.addCurve(to: CGPoint(x: 345.06, y: 27.95), controlPoint1: CGPoint(x: 345.29, y: 27.44), controlPoint2: CGPoint(x: 345.14, y: 27.68))
        audioWaves.addCurve(to: CGPoint(x: 345.01, y: 28.34), controlPoint1: CGPoint(x: 345.03, y: 28.08), controlPoint2: CGPoint(x: 345.02, y: 28.21))
        audioWaves.addCurve(to: CGPoint(x: 345, y: 28.78), controlPoint1: CGPoint(x: 345, y: 28.49), controlPoint2: CGPoint(x: 345, y: 28.64))
        audioWaves.addLine(to: CGPoint(x: 345, y: 29.22))
        audioWaves.addCurve(to: CGPoint(x: 345.01, y: 29.66), controlPoint1: CGPoint(x: 345, y: 29.36), controlPoint2: CGPoint(x: 345, y: 29.51))
        audioWaves.addCurve(to: CGPoint(x: 345.06, y: 30.05), controlPoint1: CGPoint(x: 345.02, y: 29.79), controlPoint2: CGPoint(x: 345.03, y: 29.92))
        audioWaves.addCurve(to: CGPoint(x: 345.51, y: 30.74), controlPoint1: CGPoint(x: 345.14, y: 30.32), controlPoint2: CGPoint(x: 345.29, y: 30.56))
        audioWaves.addCurve(to: CGPoint(x: 346.25, y: 31), controlPoint1: CGPoint(x: 345.72, y: 30.91), controlPoint2: CGPoint(x: 345.98, y: 31))
        audioWaves.addCurve(to: CGPoint(x: 347, y: 30.74), controlPoint1: CGPoint(x: 346.52, y: 31), controlPoint2: CGPoint(x: 346.78, y: 30.91))
        audioWaves.addCurve(to: CGPoint(x: 347.44, y: 30.05), controlPoint1: CGPoint(x: 347.21, y: 30.56), controlPoint2: CGPoint(x: 347.36, y: 30.32))
        audioWaves.addCurve(to: CGPoint(x: 347.49, y: 29.66), controlPoint1: CGPoint(x: 347.47, y: 29.92), controlPoint2: CGPoint(x: 347.49, y: 29.79))
        audioWaves.addCurve(to: CGPoint(x: 347.5, y: 29.22), controlPoint1: CGPoint(x: 347.5, y: 29.51), controlPoint2: CGPoint(x: 347.5, y: 29.36))
        audioWaves.addLine(to: CGPoint(x: 347.5, y: 28.78))
        audioWaves.addCurve(to: CGPoint(x: 347.49, y: 28.34), controlPoint1: CGPoint(x: 347.5, y: 28.64), controlPoint2: CGPoint(x: 347.5, y: 28.49))
        audioWaves.addCurve(to: CGPoint(x: 347.44, y: 27.95), controlPoint1: CGPoint(x: 347.49, y: 28.21), controlPoint2: CGPoint(x: 347.47, y: 28.08))
        audioWaves.addLine(to: CGPoint(x: 347.44, y: 27.95))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 353, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 352.25, y: 28), controlPoint1: CGPoint(x: 352.78, y: 28.09), controlPoint2: CGPoint(x: 352.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 351.51, y: 28.26), controlPoint1: CGPoint(x: 351.98, y: 28), controlPoint2: CGPoint(x: 351.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 28.95), controlPoint1: CGPoint(x: 351.29, y: 28.44), controlPoint2: CGPoint(x: 351.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29), controlPoint1: CGPoint(x: 351.06, y: 28.97), controlPoint2: CGPoint(x: 351.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29.05), controlPoint1: CGPoint(x: 351.06, y: 29.02), controlPoint2: CGPoint(x: 351.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 351.51, y: 29.74), controlPoint1: CGPoint(x: 351.14, y: 29.32), controlPoint2: CGPoint(x: 351.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 352.25, y: 30), controlPoint1: CGPoint(x: 351.72, y: 29.91), controlPoint2: CGPoint(x: 351.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 353, y: 29.74), controlPoint1: CGPoint(x: 352.52, y: 30), controlPoint2: CGPoint(x: 352.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29.05), controlPoint1: CGPoint(x: 353.21, y: 29.56), controlPoint2: CGPoint(x: 353.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29), controlPoint1: CGPoint(x: 353.44, y: 29.03), controlPoint2: CGPoint(x: 353.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 28.95), controlPoint1: CGPoint(x: 353.44, y: 28.98), controlPoint2: CGPoint(x: 353.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 353, y: 28.26), controlPoint1: CGPoint(x: 353.36, y: 28.68), controlPoint2: CGPoint(x: 353.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 353, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 351, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 351, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 351, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 351, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 351.01, y: 29.34), controlPoint1: CGPoint(x: 351, y: 29.64), controlPoint2: CGPoint(x: 351, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 351.06, y: 29), controlPoint1: CGPoint(x: 351.01, y: 29.23), controlPoint2: CGPoint(x: 351.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 351.01, y: 28.66), controlPoint1: CGPoint(x: 351.03, y: 28.89), controlPoint2: CGPoint(x: 351.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 351, y: 28.22), controlPoint1: CGPoint(x: 351, y: 28.51), controlPoint2: CGPoint(x: 351, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 351, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 353.49, y: 28.66))
        audioWaves.addCurve(to: CGPoint(x: 353.44, y: 29), controlPoint1: CGPoint(x: 353.49, y: 28.77), controlPoint2: CGPoint(x: 353.47, y: 28.89))
        audioWaves.addCurve(to: CGPoint(x: 353.49, y: 29.34), controlPoint1: CGPoint(x: 353.47, y: 29.11), controlPoint2: CGPoint(x: 353.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 353.5, y: 29.78), controlPoint1: CGPoint(x: 353.5, y: 29.49), controlPoint2: CGPoint(x: 353.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 353.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 353.49, y: 28.66), controlPoint1: CGPoint(x: 353.5, y: 28.36), controlPoint2: CGPoint(x: 353.5, y: 28.51))
        audioWaves.addLine(to: CGPoint(x: 353.49, y: 28.66))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 359, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 358.25, y: 28), controlPoint1: CGPoint(x: 358.78, y: 28.09), controlPoint2: CGPoint(x: 358.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 357.51, y: 28.26), controlPoint1: CGPoint(x: 357.98, y: 28), controlPoint2: CGPoint(x: 357.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 28.95), controlPoint1: CGPoint(x: 357.29, y: 28.44), controlPoint2: CGPoint(x: 357.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29), controlPoint1: CGPoint(x: 357.06, y: 28.97), controlPoint2: CGPoint(x: 357.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29.05), controlPoint1: CGPoint(x: 357.06, y: 29.02), controlPoint2: CGPoint(x: 357.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 357.51, y: 29.74), controlPoint1: CGPoint(x: 357.14, y: 29.32), controlPoint2: CGPoint(x: 357.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 358.25, y: 30), controlPoint1: CGPoint(x: 357.72, y: 29.91), controlPoint2: CGPoint(x: 357.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 359, y: 29.74), controlPoint1: CGPoint(x: 358.52, y: 30), controlPoint2: CGPoint(x: 358.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29.05), controlPoint1: CGPoint(x: 359.21, y: 29.56), controlPoint2: CGPoint(x: 359.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29), controlPoint1: CGPoint(x: 359.44, y: 29.03), controlPoint2: CGPoint(x: 359.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 28.95), controlPoint1: CGPoint(x: 359.44, y: 28.98), controlPoint2: CGPoint(x: 359.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 359, y: 28.26), controlPoint1: CGPoint(x: 359.36, y: 28.68), controlPoint2: CGPoint(x: 359.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 359, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 359.44, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 359.49, y: 29.34), controlPoint1: CGPoint(x: 359.47, y: 29.11), controlPoint2: CGPoint(x: 359.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 359.5, y: 29.78), controlPoint1: CGPoint(x: 359.5, y: 29.49), controlPoint2: CGPoint(x: 359.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 359.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 359.49, y: 28.66), controlPoint1: CGPoint(x: 359.5, y: 28.36), controlPoint2: CGPoint(x: 359.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 359.44, y: 29), controlPoint1: CGPoint(x: 359.49, y: 28.77), controlPoint2: CGPoint(x: 359.47, y: 28.89))
        audioWaves.addLine(to: CGPoint(x: 359.44, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 357, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 357, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 357.01, y: 29.34), controlPoint1: CGPoint(x: 357, y: 29.64), controlPoint2: CGPoint(x: 357, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 357.06, y: 29), controlPoint1: CGPoint(x: 357.01, y: 29.23), controlPoint2: CGPoint(x: 357.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 357.01, y: 28.66), controlPoint1: CGPoint(x: 357.03, y: 28.89), controlPoint2: CGPoint(x: 357.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 357, y: 28.22), controlPoint1: CGPoint(x: 357, y: 28.51), controlPoint2: CGPoint(x: 357, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 357, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 365, y: 28.26))
        audioWaves.addCurve(to: CGPoint(x: 364.25, y: 28), controlPoint1: CGPoint(x: 364.78, y: 28.09), controlPoint2: CGPoint(x: 364.52, y: 28))
        audioWaves.addCurve(to: CGPoint(x: 363.51, y: 28.26), controlPoint1: CGPoint(x: 363.98, y: 28), controlPoint2: CGPoint(x: 363.72, y: 28.09))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 28.95), controlPoint1: CGPoint(x: 363.29, y: 28.44), controlPoint2: CGPoint(x: 363.14, y: 28.68))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29), controlPoint1: CGPoint(x: 363.06, y: 28.97), controlPoint2: CGPoint(x: 363.06, y: 28.98))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29.05), controlPoint1: CGPoint(x: 363.06, y: 29.02), controlPoint2: CGPoint(x: 363.06, y: 29.03))
        audioWaves.addCurve(to: CGPoint(x: 363.51, y: 29.74), controlPoint1: CGPoint(x: 363.14, y: 29.32), controlPoint2: CGPoint(x: 363.29, y: 29.56))
        audioWaves.addCurve(to: CGPoint(x: 364.25, y: 30), controlPoint1: CGPoint(x: 363.72, y: 29.91), controlPoint2: CGPoint(x: 363.98, y: 30))
        audioWaves.addCurve(to: CGPoint(x: 365, y: 29.74), controlPoint1: CGPoint(x: 364.52, y: 30), controlPoint2: CGPoint(x: 364.78, y: 29.91))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29.05), controlPoint1: CGPoint(x: 365.21, y: 29.56), controlPoint2: CGPoint(x: 365.36, y: 29.32))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29), controlPoint1: CGPoint(x: 365.44, y: 29.03), controlPoint2: CGPoint(x: 365.44, y: 29.02))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 28.95), controlPoint1: CGPoint(x: 365.44, y: 28.98), controlPoint2: CGPoint(x: 365.44, y: 28.97))
        audioWaves.addCurve(to: CGPoint(x: 365, y: 28.26), controlPoint1: CGPoint(x: 365.36, y: 28.68), controlPoint2: CGPoint(x: 365.21, y: 28.44))
        audioWaves.addLine(to: CGPoint(x: 365, y: 28.26))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 363, y: 28.22))
        audioWaves.addLine(to: CGPoint(x: 363, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 363, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 363, y: 29.78))
        audioWaves.addCurve(to: CGPoint(x: 363.01, y: 29.34), controlPoint1: CGPoint(x: 363, y: 29.64), controlPoint2: CGPoint(x: 363, y: 29.49))
        audioWaves.addCurve(to: CGPoint(x: 363.06, y: 29), controlPoint1: CGPoint(x: 363.01, y: 29.23), controlPoint2: CGPoint(x: 363.03, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 363.01, y: 28.66), controlPoint1: CGPoint(x: 363.03, y: 28.89), controlPoint2: CGPoint(x: 363.01, y: 28.77))
        audioWaves.addCurve(to: CGPoint(x: 363, y: 28.22), controlPoint1: CGPoint(x: 363, y: 28.51), controlPoint2: CGPoint(x: 363, y: 28.36))
        audioWaves.addLine(to: CGPoint(x: 363, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 365.5, y: 28.22))
        audioWaves.addCurve(to: CGPoint(x: 365.49, y: 28.66), controlPoint1: CGPoint(x: 365.5, y: 28.36), controlPoint2: CGPoint(x: 365.5, y: 28.51))
        audioWaves.addCurve(to: CGPoint(x: 365.44, y: 29), controlPoint1: CGPoint(x: 365.49, y: 28.77), controlPoint2: CGPoint(x: 365.47, y: 28.89))
        audioWaves.addCurve(to: CGPoint(x: 365.49, y: 29.34), controlPoint1: CGPoint(x: 365.47, y: 29.11), controlPoint2: CGPoint(x: 365.49, y: 29.23))
        audioWaves.addCurve(to: CGPoint(x: 365.5, y: 29.78), controlPoint1: CGPoint(x: 365.5, y: 29.49), controlPoint2: CGPoint(x: 365.5, y: 29.64))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 29.79))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 28.21))
        audioWaves.addLine(to: CGPoint(x: 365.5, y: 28.22))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.5, y: 29))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29.28), controlPoint1: CGPoint(x: 2.5, y: 29.09), controlPoint2: CGPoint(x: 2.5, y: 29.19))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 28.72))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29), controlPoint1: CGPoint(x: 2.5, y: 28.81), controlPoint2: CGPoint(x: 2.5, y: 28.91))
        audioWaves.addLine(to: CGPoint(x: 2.5, y: 29))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 0, y: 28.71))
        audioWaves.addLine(to: CGPoint(x: 0, y: 29.29))
        audioWaves.addLine(to: CGPoint(x: 0, y: 29.28))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29), controlPoint1: CGPoint(x: 0, y: 29.19), controlPoint2: CGPoint(x: 0, y: 29.09))
        audioWaves.addCurve(to: CGPoint(x: 0, y: 28.72), controlPoint1: CGPoint(x: 0, y: 28.91), controlPoint2: CGPoint(x: 0, y: 28.81))
        audioWaves.addLine(to: CGPoint(x: 0, y: 28.71))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.44, y: 28.45))
        audioWaves.addCurve(to: CGPoint(x: 1.99, y: 27.76), controlPoint1: CGPoint(x: 2.36, y: 28.18), controlPoint2: CGPoint(x: 2.21, y: 27.94))
        audioWaves.addCurve(to: CGPoint(x: 1.25, y: 27.5), controlPoint1: CGPoint(x: 1.78, y: 27.59), controlPoint2: CGPoint(x: 1.52, y: 27.5))
        audioWaves.addCurve(to: CGPoint(x: 0.51, y: 27.76), controlPoint1: CGPoint(x: 0.98, y: 27.5), controlPoint2: CGPoint(x: 0.72, y: 27.59))
        audioWaves.addCurve(to: CGPoint(x: 0.07, y: 28.45), controlPoint1: CGPoint(x: 0.29, y: 27.94), controlPoint2: CGPoint(x: 0.14, y: 28.18))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 28.84), controlPoint1: CGPoint(x: 0.03, y: 28.58), controlPoint2: CGPoint(x: 0.02, y: 28.71))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29), controlPoint1: CGPoint(x: 0, y: 28.9), controlPoint2: CGPoint(x: 0.01, y: 28.95))
        audioWaves.addCurve(to: CGPoint(x: 0.01, y: 29.16), controlPoint1: CGPoint(x: 0.01, y: 29.05), controlPoint2: CGPoint(x: 0, y: 29.11))
        audioWaves.addCurve(to: CGPoint(x: 0.07, y: 29.55), controlPoint1: CGPoint(x: 0.02, y: 29.29), controlPoint2: CGPoint(x: 0.03, y: 29.42))
        audioWaves.addCurve(to: CGPoint(x: 0.51, y: 30.24), controlPoint1: CGPoint(x: 0.14, y: 29.82), controlPoint2: CGPoint(x: 0.29, y: 30.06))
        audioWaves.addCurve(to: CGPoint(x: 1.25, y: 30.5), controlPoint1: CGPoint(x: 0.72, y: 30.41), controlPoint2: CGPoint(x: 0.98, y: 30.5))
        audioWaves.addCurve(to: CGPoint(x: 1.99, y: 30.24), controlPoint1: CGPoint(x: 1.52, y: 30.5), controlPoint2: CGPoint(x: 1.78, y: 30.41))
        audioWaves.addCurve(to: CGPoint(x: 2.44, y: 29.55), controlPoint1: CGPoint(x: 2.21, y: 30.06), controlPoint2: CGPoint(x: 2.36, y: 29.82))
        audioWaves.addCurve(to: CGPoint(x: 2.49, y: 29.16), controlPoint1: CGPoint(x: 2.47, y: 29.42), controlPoint2: CGPoint(x: 2.48, y: 29.29))
        audioWaves.addCurve(to: CGPoint(x: 2.5, y: 29), controlPoint1: CGPoint(x: 2.5, y: 29.11), controlPoint2: CGPoint(x: 2.49, y: 29.05))
        audioWaves.addCurve(to: CGPoint(x: 2.49, y: 28.84), controlPoint1: CGPoint(x: 2.49, y: 28.95), controlPoint2: CGPoint(x: 2.5, y: 28.9))
        audioWaves.addCurve(to: CGPoint(x: 2.44, y: 28.45), controlPoint1: CGPoint(x: 2.48, y: 28.71), controlPoint2: CGPoint(x: 2.47, y: 28.58))
        audioWaves.addLine(to: CGPoint(x: 2.44, y: 28.45))
        audioWaves.close()
        audioWaves.move(to: CGPoint(x: 2.44, y: 28.45))
        context.saveGState()
        context.translateBy(x: 5, y: 79)
        audioWaves.usesEvenOddFillRule = true
        UIColor.white.setFill()
        audioWaves.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_OtherResourcesScreenDimmingOverlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Screen Dimming
        let screenDimming = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        context.setAlpha(0.4)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            screenDimming.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_OtherResourcesGuide2Across(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Guide: Large
        let guideLarge = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Large
        let guideLarge2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge2.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Large
        let guideLarge3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge3.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Large
        let guideLarge4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge4.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Large
        let guideLarge5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge5.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Large
        let guideLarge6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 178, height: 178))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideLarge6.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_OtherResourcesGuide3Across(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Guide: Medium
        let guideMedium = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium2.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 252, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium3.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 497)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium4.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 497)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium5.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 252, y: 497)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium6.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 251)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium7.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 251)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium8.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 252, y: 251)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium9.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 129)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium10.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 129)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium11.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 252, y: 129)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium12.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium13 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium13.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium14.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Medium
        let guideMedium15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 117, height: 117))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 252, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideMedium15.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_OtherResourcesGuide4Across(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Guide: Small
        let guideSmall = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall2.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall3.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 374)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall4.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 282)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall5.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 282)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall6.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 282)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall7.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 282)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall8.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 558)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall9.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 558)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall10.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 558)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall11.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 558)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall12.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall13 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 466)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall13.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 466)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall14.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 466)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall15.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall16 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 466)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall16.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall17 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall17.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall18 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall18.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall19 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall19.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall20 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 190)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall20.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall21 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 98)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall21.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall22 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 98)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall22.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall23 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 98)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall23.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall24 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 98)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall24.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall25 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 6.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall25.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall26 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 98.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall26.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall27 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 190.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall27.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Guide: Small
        let guideSmall28 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 282.5, y: 6)
            UIColor(hue: 0.009, saturation: 0.812, brightness: 1, alpha: 1).setFill()
            guideSmall28.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func draw_TemplateResourcesHeaderAndFooter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 2020, height: 1000), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 2020, height: 1000), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 2020, y: resizedFrame.height / 1000)
        
        /// Background Color
        UIColor(white: 0.918, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Copyright © 2016-201
        let copyrightC2016201 = NSMutableAttributedString(string: "Copyright © 2016-2017 Apple Inc. All rights reserved.")
        copyrightC2016201.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: copyrightC2016201.length))
        copyrightC2016201.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: copyrightC2016201.length))
        copyrightC2016201.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: copyrightC2016201.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            copyrightC2016201.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: copyrightC2016201.length))
        }
        context.saveGState()
        copyrightC2016201.draw(at: CGPoint(x: 20, y: 982))
        context.restoreGState()
        /// Subtitle
        let subtitle = NSMutableAttributedString(string: "Subtitle")
        subtitle.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 11)!, range: NSRange(location: 0, length: subtitle.length))
        subtitle.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.353, alpha: 1), range: NSRange(location: 0, length: subtitle.length))
        subtitle.addAttribute(NSKernAttributeName, value: 0.07, range: NSRange(location: 0, length: subtitle.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            subtitle.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: subtitle.length))
        }
        context.saveGState()
        subtitle.draw(in: CGRect(x: 20, y: 41, width: 1980, height: 15))
        context.restoreGState()
        /// OS
        let oS = NSMutableAttributedString(string: "OS")
        oS.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: oS.length))
        oS.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: oS.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            paragraphStyle.maximumLineHeight = 28
            paragraphStyle.minimumLineHeight = 28
            oS.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: oS.length))
        }
        context.saveGState()
        oS.draw(in: CGRect(x: 1769, y: 8, width: 231, height: 31))
        context.restoreGState()
        /// Title
        let title = NSMutableAttributedString(string: "Title")
        title.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Regular", size: 22)!, range: NSRange(location: 0, length: title.length))
        title.addAttribute(NSKernAttributeName, value: 0.35, range: NSRange(location: 0, length: title.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 28
            paragraphStyle.minimumLineHeight = 28
            title.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
        }
        context.saveGState()
        title.draw(in: CGRect(x: 20, y: 8, width: 1728, height: 31))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    /// Model
    
    class func drawTab10(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(NSFontAttributeName, value: UIFont(name: ".PingFangSC-Regular", size: 35)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSKernAttributeName, value: 0.6, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        context.saveGState()
        layer.draw(in: CGRect(x: 338, y: 22, width: 36.85, height: 39))
        context.restoreGState()
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 375, y: 0))
        background.addLine(to: CGPoint(x: 375, y: 667))
        background.addLine(to: CGPoint(x: 0, y: 667))
        background.addLine(to: CGPoint.zero)
        background.close()
        background.move(to: CGPoint.zero)
        context.saveGState()
        // Warning: Blur effects are not supported.
        background.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: 0, dy: -0.5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -376, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 376, y: 0.5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.3).cgColor)
        }
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        background.usesEvenOddFillRule = true
        UIColor(white: 0.973, alpha: 0.82).setFill()
        background.fill()
        context.restoreGState()
        /// ↳ Label
        let label = NSMutableAttributedString(string: "Maps")
        label.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProText-Regular", size: 17)!, range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: label.length))
        label.addAttribute(NSKernAttributeName, value: -0.41, range: NSRange(location: 0, length: label.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            label.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
        }
        context.saveGState()
        label.draw(at: CGPoint(x: 14, y: 34))
        context.restoreGState()
        /// Palo Alto, CA
        let paloAltoCA = NSMutableAttributedString(string: "Palo Alto, CA")
        paloAltoCA.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 34)!, range: NSRange(location: 0, length: paloAltoCA.length))
        paloAltoCA.addAttribute(NSKernAttributeName, value: 0.41, range: NSRange(location: 0, length: paloAltoCA.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            paloAltoCA.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: paloAltoCA.length))
        }
        context.saveGState()
        paloAltoCA.draw(at: CGPoint(x: 14, y: 66))
        context.restoreGState()
        /// Light Status Bar
        // Warning: New symbols are not supported.
        /// +
        let layer2 = NSMutableAttributedString(string: "+")
        layer2.addAttribute(NSFontAttributeName, value: UIFont(name: ".PingFangSC-Regular", size: 35)!, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(NSKernAttributeName, value: 0.6, range: NSRange(location: 0, length: layer2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
        }
        context.saveGState()
        layer2.draw(in: CGRect(x: 336, y: 23, width: 36.85, height: 39))
        context.restoreGState()
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 15, y: 123)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor.red.setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CHARITY
            let cHARITY = NSMutableAttributedString(string: "CHARITY")
            cHARITY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cHARITY.length))
            cHARITY.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.71), range: NSRange(location: 0, length: cHARITY.length))
            cHARITY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cHARITY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cHARITY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cHARITY.length))
            }
            context.saveGState()
            cHARITY.draw(at: CGPoint(x: 8, y: 0))
            context.restoreGState()
            
            /// DONATE.
            let dONATE = NSMutableAttributedString(string: "DONATE.")
            dONATE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: dONATE.length))
            dONATE.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: dONATE.length))
            dONATE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: dONATE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                dONATE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dONATE.length))
            }
            context.saveGState()
            dONATE.draw(at: CGPoint(x: 8, y: 25))
            context.restoreGState()
            
            /// School hall. Bring c
            let schoolHallBringC = NSMutableAttributedString(string: "School hall. Bring clothes/books u don’t need. Help those who are in trouble.")
            schoolHallBringC.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: schoolHallBringC.length))
            schoolHallBringC.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.85), range: NSRange(location: 0, length: schoolHallBringC.length))
            schoolHallBringC.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: schoolHallBringC.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                schoolHallBringC.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: schoolHallBringC.length))
            }
            context.saveGState()
            schoolHallBringC.draw(in: CGRect(x: 7, y: 66, width: 331.42, height: 36))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 15, y: 259)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 6)
                
                /// Combined Shape
                let combinedShape3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 315.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape3.cgPath)
                context.addRect(combinedShape3.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape3.fill()
                    context.saveGState()
                    combinedShape3.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape3.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape3.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape3.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 315.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape4.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape4.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape4.addClip()
                
                /// 19e2haukj70x6jpg
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CLUB EVENT
            let cLUBEVENT = NSMutableAttributedString(string: "CLUB EVENT")
            cLUBEVENT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cLUBEVENT.length))
            cLUBEVENT.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.67), range: NSRange(location: 0, length: cLUBEVENT.length))
            cLUBEVENT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cLUBEVENT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cLUBEVENT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cLUBEVENT.length))
            }
            context.saveGState()
            cLUBEVENT.draw(at: CGPoint(x: 12, y: 0))
            context.restoreGState()
            
            /// GEEK CLUB MEETING
            let gEEKCLUBMEETING = NSMutableAttributedString(string: "GEEK CLUB MEETING")
            gEEKCLUBMEETING.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            gEEKCLUBMEETING.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            gEEKCLUBMEETING.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                gEEKCLUBMEETING.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            }
            context.saveGState()
            gEEKCLUBMEETING.draw(at: CGPoint(x: 12, y: 26))
            context.restoreGState()
            
            /// Let’s talk about our
            let letsTalkAboutOur = NSMutableAttributedString(string: "Let’s talk about our latest iOS app this time. Designer&coder needed.")
            letsTalkAboutOur.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            letsTalkAboutOur.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: letsTalkAboutOur.length))
            letsTalkAboutOur.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                letsTalkAboutOur.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            }
            context.saveGState()
            letsTalkAboutOur.draw(in: CGRect(x: 7, y: 262, width: 331.42, height: 36))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 15, y: 595)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 6)
                
                /// Combined Shape
                let combinedShape5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 315.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape5.cgPath)
                context.addRect(combinedShape5.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape5.fill()
                    context.saveGState()
                    combinedShape5.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape5.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape5.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape5.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape5.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 315.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape6.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape6.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape6.addClip()
                
                /// stanford
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CLUB EVENT
            let cLUBEVENT2 = NSMutableAttributedString(string: "CLUB EVENT")
            cLUBEVENT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cLUBEVENT2.length))
            cLUBEVENT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.67), range: NSRange(location: 0, length: cLUBEVENT2.length))
            cLUBEVENT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cLUBEVENT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cLUBEVENT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cLUBEVENT2.length))
            }
            context.saveGState()
            cLUBEVENT2.draw(at: CGPoint(x: 12, y: 0))
            context.restoreGState()
            
            /// GEEK CLUB MEETING
            let gEEKCLUBMEETING2 = NSMutableAttributedString(string: "GEEK CLUB MEETING")
            gEEKCLUBMEETING2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: gEEKCLUBMEETING2.length))
            gEEKCLUBMEETING2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: gEEKCLUBMEETING2.length))
            gEEKCLUBMEETING2.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: gEEKCLUBMEETING2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                gEEKCLUBMEETING2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: gEEKCLUBMEETING2.length))
            }
            context.saveGState()
            gEEKCLUBMEETING2.draw(at: CGPoint(x: 12, y: 26))
            context.restoreGState()
            
            /// Let’s talk about our
            let letsTalkAboutOur2 = NSMutableAttributedString(string: "Let’s talk about our latest iOS app this time. Designer&coder needed.")
            letsTalkAboutOur2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: letsTalkAboutOur2.length))
            letsTalkAboutOur2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: letsTalkAboutOur2.length))
            letsTalkAboutOur2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: letsTalkAboutOur2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                letsTalkAboutOur2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: letsTalkAboutOur2.length))
            }
            context.saveGState()
            letsTalkAboutOur2.draw(in: CGRect(x: 7, y: 262, width: 331.42, height: 36))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTab9(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Screen Shot 2017-07-17 at 9.38.31 PM
        // Warning: Image layers are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Navigation Bar 1 Copy
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(NSFontAttributeName, value: UIFont(name: ".PingFangSC-Regular", size: 35)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSKernAttributeName, value: 0.6, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        context.saveGState()
        layer.draw(in: CGRect(x: 338, y: 22, width: 36.85, height: 39))
        context.restoreGState()
        /// Group 4
        context.saveGState()
        context.setAlpha(0.74)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: -487, y: 521)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 495, y: 22)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CLUB EVENT
            let cLUBEVENT = NSMutableAttributedString(string: "CLUB EVENT")
            cLUBEVENT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cLUBEVENT.length))
            cLUBEVENT.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 0, length: cLUBEVENT.length))
            cLUBEVENT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cLUBEVENT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cLUBEVENT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cLUBEVENT.length))
            }
            context.saveGState()
            cLUBEVENT.draw(at: CGPoint.zero)
            context.restoreGState()
            
            /// GEEK CLUB MEETING
            let gEEKCLUBMEETING = NSMutableAttributedString(string: "GEEK CLUB MEETING")
            gEEKCLUBMEETING.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            gEEKCLUBMEETING.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                gEEKCLUBMEETING.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: gEEKCLUBMEETING.length))
            }
            context.saveGState()
            gEEKCLUBMEETING.draw(at: CGPoint(x: 510, y: 48))
            context.restoreGState()
            
            /// Let’s talk about our
            let letsTalkAboutOur = NSMutableAttributedString(string: "Let’s talk about our latest iOS app this time. Designer&coder needed.")
            letsTalkAboutOur.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            letsTalkAboutOur.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: letsTalkAboutOur.length))
            letsTalkAboutOur.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                letsTalkAboutOur.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: letsTalkAboutOur.length))
            }
            context.saveGState()
            letsTalkAboutOur.draw(in: CGRect(x: 509, y: 89, width: 331.42, height: 36))
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// CLUB EVENT
        let cLUBEVENT2 = NSMutableAttributedString(string: "CLUB EVENT")
        cLUBEVENT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cLUBEVENT2.length))
        cLUBEVENT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 0, length: cLUBEVENT2.length))
        cLUBEVENT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cLUBEVENT2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 41
            paragraphStyle.minimumLineHeight = 41
            cLUBEVENT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cLUBEVENT2.length))
        }
        context.saveGState()
        cLUBEVENT2.draw(at: CGPoint(x: 24, y: 544))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTab8(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 82, y: 468)
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 209.93, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -486.93, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 486.93, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 225.09, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 82, y: 519)
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 209.93, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape3.cgPath)
                context.addRect(combinedShape3.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -486.93, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 486.93, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape3.fill()
                    context.saveGState()
                    combinedShape3.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape3.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape3.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape3.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 225.09, height: 35.02), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                combinedShape4.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape4.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape4.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// LOG IN
        let lOGIN = NSMutableAttributedString(string: "LOG IN")
        lOGIN.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: lOGIN.length))
        lOGIN.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: lOGIN.length))
        lOGIN.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: lOGIN.length))
        context.saveGState()
        lOGIN.draw(at: CGPoint(x: 165, y: 468))
        context.restoreGState()
        /// HITCH
        let hITCH = NSMutableAttributedString(string: "HITCH")
        hITCH.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: hITCH.length))
        hITCH.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: hITCH.length))
        context.saveGState()
        hITCH.draw(at: CGPoint(x: 142, y: 185))
        context.restoreGState()
        /// TAKE THE TOUR
        let tAKETHETOUR = NSMutableAttributedString(string: "TAKE THE TOUR")
        tAKETHETOUR.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: tAKETHETOUR.length))
        tAKETHETOUR.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tAKETHETOUR.length))
        tAKETHETOUR.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: tAKETHETOUR.length))
        context.saveGState()
        tAKETHETOUR.draw(at: CGPoint(x: 135, y: 519))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTab7(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// 20170601_183529(0)-01
        // Warning: Image layers are not supported.
        /// EXPLORE.
        let eXPLORE = NSMutableAttributedString(string: "EXPLORE.")
        eXPLORE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: eXPLORE.length))
        eXPLORE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: eXPLORE.length))
        context.saveGState()
        eXPLORE.draw(at: CGPoint(x: 117, y: 109))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTab6(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Screen Shot 2017-07-17 at 9.38.31 PM
        // Warning: Image layers are not supported.
        /// Navigation Bar 1
        // Warning: New symbols are not supported.
        /// Navigation Bar 1 Copy
        // Warning: New symbols are not supported.
        /// Light Status Bar
        // Warning: New symbols are not supported.
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(NSFontAttributeName, value: UIFont(name: ".PingFangSC-Regular", size: 35)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.587, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(NSKernAttributeName, value: 0.6, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        context.saveGState()
        layer.draw(in: CGRect(x: 338, y: 22, width: 36.85, height: 39))
        context.restoreGState()
        /// Group 4
        context.saveGState()
        context.setAlpha(0.74)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 8, y: 543)
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.56)
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.56))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CHARITY
            let cHARITY = NSMutableAttributedString(string: "CHARITY")
            cHARITY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cHARITY.length))
            cHARITY.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 0, length: cHARITY.length))
            cHARITY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cHARITY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cHARITY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cHARITY.length))
            }
            context.saveGState()
            cHARITY.draw(at: CGPoint(x: 15, y: 1))
            context.restoreGState()
            
            /// DONATE.
            let dONATE = NSMutableAttributedString(string: "DONATE.")
            dONATE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: 6))
            dONATE.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 30)!, range: NSRange(location: 6, length: 1))
            dONATE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: dONATE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                dONATE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dONATE.length))
            }
            context.saveGState()
            dONATE.draw(at: CGPoint(x: 15, y: 26))
            context.restoreGState()
            
            /// School hall. Bring c
            let schoolHallBringC = NSMutableAttributedString(string: "School hall. Bring clothes/books u don’t need. Help those who are in trouble.")
            schoolHallBringC.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: schoolHallBringC.length))
            schoolHallBringC.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: schoolHallBringC.length))
            schoolHallBringC.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: schoolHallBringC.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                schoolHallBringC.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: schoolHallBringC.length))
            }
            context.saveGState()
            schoolHallBringC.draw(in: CGRect(x: 14, y: 67, width: 331.42, height: 36))
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    /// KITs
    
    class func drawKITs() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 32, y: 31)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.addRect(combinedShape.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape.fill()
                    context.saveGState()
                    combinedShape.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape2.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape2.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY = NSMutableAttributedString(string: "CATAGORY")
            cATAGORY.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.71), range: NSRange(location: 0, length: cATAGORY.length))
            cATAGORY.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY.length))
            }
            context.saveGState()
            cATAGORY.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE = NSMutableAttributedString(string: "TITLE")
            tITLE.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: tITLE.length))
            tITLE.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE.length))
            }
            context.saveGState()
            tITLE.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL = NSMutableAttributedString(string: "DETAIL")
            dETAIL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.85), range: NSRange(location: 0, length: dETAIL.length))
            dETAIL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL.length))
            }
            context.saveGState()
            dETAIL.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 1192, y: 1310)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape3.cgPath)
                context.addRect(combinedShape3.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape3.fill()
                    context.saveGState()
                    combinedShape3.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape3.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape3.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape3.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
                combinedShape4.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape4.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape4.addClip()
                
                /// 19e2haukj70x6jpg
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY2 = NSMutableAttributedString(string: "CATAGORY")
            cATAGORY2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY2.length))
            cATAGORY2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.71), range: NSRange(location: 0, length: cATAGORY2.length))
            cATAGORY2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY2.length))
            }
            context.saveGState()
            cATAGORY2.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE2 = NSMutableAttributedString(string: "TITLE")
            tITLE2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE2.length))
            tITLE2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 1), range: NSRange(location: 0, length: tITLE2.length))
            tITLE2.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE2.length))
            }
            context.saveGState()
            tITLE2.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL2 = NSMutableAttributedString(string: "DETAIL")
            dETAIL2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL2.length))
            dETAIL2.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 1, alpha: 0.85), range: NSRange(location: 0, length: dETAIL2.length))
            dETAIL2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL2.length))
            }
            context.saveGState()
            dETAIL2.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 31, y: 175)
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 9)
                
                /// Combined Shape
                let combinedShape5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343.83, height: 103.49), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0, y: 0.16)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape5.cgPath)
                context.addRect(combinedShape5.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -620.83, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 620.83, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape5.fill()
                    context.saveGState()
                    combinedShape5.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape5.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape5.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape5.apply(CGAffineTransform(translationX: 0, y: 0.16))
                combinedShape5.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 112.66), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -8, y: -9)
                UIColor.white.setFill()
                combinedShape6.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape6.apply(CGAffineTransform(translationX: -8, y: -9))
                combinedShape6.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// CATAGORY
            let cATAGORY3 = NSMutableAttributedString(string: "CATAGORY\n")
            cATAGORY3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cATAGORY3.length))
            cATAGORY3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1), range: NSRange(location: 0, length: cATAGORY3.length))
            cATAGORY3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cATAGORY3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                cATAGORY3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cATAGORY3.length))
            }
            context.saveGState()
            cATAGORY3.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TITLE
            let tITLE3 = NSMutableAttributedString(string: "TITLE")
            tITLE3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tITLE3.length))
            tITLE3.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tITLE3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tITLE3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tITLE3.length))
            }
            context.saveGState()
            tITLE3.draw(at: CGPoint(x: 7, y: 25))
            context.restoreGState()
            
            /// DETAIL
            let dETAIL3 = NSMutableAttributedString(string: "DETAIL")
            dETAIL3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: dETAIL3.length))
            dETAIL3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: dETAIL3.length))
            dETAIL3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: dETAIL3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                dETAIL3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: dETAIL3.length))
            }
            context.saveGState()
            dETAIL3.draw(in: CGRect(x: 7, y: 66, width: 330.42, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Window
        let window = NSMutableAttributedString(string: "Window")
        window.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: window.length))
        window.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: window.length))
        window.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: window.length))
        context.saveGState()
        window.draw(at: CGPoint(x: 24, y: -28))
        context.restoreGState()
        /// Window-Dark
        let windowDark = NSMutableAttributedString(string: "Window-Dark")
        windowDark.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: windowDark.length))
        windowDark.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: windowDark.length))
        windowDark.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: windowDark.length))
        context.saveGState()
        windowDark.draw(at: CGPoint(x: 480, y: 31))
        context.restoreGState()
        /// Window-Light
        let windowLight = NSMutableAttributedString(string: "Window-Light")
        windowLight.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: windowLight.length))
        windowLight.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: windowLight.length))
        windowLight.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: windowLight.length))
        context.saveGState()
        windowLight.draw(at: CGPoint(x: 480, y: 175))
        context.restoreGState()
        /// Window-Picture
        let windowPicture = NSMutableAttributedString(string: "Window-Picture")
        windowPicture.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: windowPicture.length))
        windowPicture.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: windowPicture.length))
        windowPicture.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: windowPicture.length))
        context.saveGState()
        windowPicture.draw(at: CGPoint(x: 1636, y: 1310))
        context.restoreGState()
        /// Button
        let button = NSMutableAttributedString(string: "Button")
        button.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: button.length))
        button.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: button.length))
        button.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: button.length))
        context.saveGState()
        button.draw(at: CGPoint(x: 17, y: -440))
        context.restoreGState()
        /// Event Introduction P
        let eventIntroductionP = NSMutableAttributedString(string: "Event Introduction Page")
        eventIntroductionP.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: eventIntroductionP.length))
        eventIntroductionP.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: eventIntroductionP.length))
        eventIntroductionP.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: eventIntroductionP.length))
        context.saveGState()
        eventIntroductionP.draw(at: CGPoint(x: -35, y: 1264))
        context.restoreGState()
        /// Event Introduction P
        let eventIntroductionP2 = NSMutableAttributedString(string: "Event Introduction Page")
        eventIntroductionP2.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: eventIntroductionP2.length))
        eventIntroductionP2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: eventIntroductionP2.length))
        eventIntroductionP2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: eventIntroductionP2.length))
        context.saveGState()
        eventIntroductionP2.draw(at: CGPoint(x: 779, y: -460))
        context.restoreGState()
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: -35, y: 1310)
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape7.cgPath)
                context.addRect(combinedShape7.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape7.fill()
                    context.saveGState()
                    combinedShape7.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape7.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape7.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape7.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape7.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape8.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape8.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape8.addClip()
                
                /// 19e2haukj70x6jpg
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT = NSMutableAttributedString(string: " TEXT")
            tEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT.length))
            tEXT.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT.length))
            }
            context.saveGState()
            tEXT.draw(at: CGPoint(x: 7, y: 344))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            tEXTTEXTTEXTTEXTTEXT.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT.draw(in: CGRect(x: 7, y: 375, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT2 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT2.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT2.draw(in: CGRect(x: 7, y: 509, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT3 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT3.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT3.draw(in: CGRect(x: 7, y: 546, width: 331.42, height: 317))
            context.restoreGState()
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 258, y: 467)
                
                /// Group 4
                do {
                    context.saveGState()
                    
                    /// Group 2
                    do {
                        context.saveGState()
                        
                        /// Combined Shape
                        let combinedShape9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 59.48, height: 22.02), cornerRadius: 13)
                        context.saveGState()
                        context.translateBy(x: 0.66, y: 0.56)
                        context.saveGState()
                        context.beginPath()
                        context.addPath(combinedShape9.cgPath)
                        context.addRect(combinedShape9.bounds.insetBy(dx: -96, dy: -96))
                        context.clip(using: .evenOdd)
                        context.translateBy(x: -236.48, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 236.48, y: 0)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                        }
                        context.beginTransparencyLayer(auxiliaryInfo: nil)
                        do {
                            UIColor.black.setFill()
                            combinedShape9.fill()
                            context.saveGState()
                            combinedShape9.lineWidth = 16
                            UIColor.black.setStroke()
                            combinedShape9.stroke()
                            context.restoreGState()
                        }
                        context.endTransparencyLayer()
                        context.restoreGState()
                        UIColor(white: 0.898, alpha: 0.67).setFill()
                        combinedShape9.fill()
                        context.restoreGState()
                        
                        /// Combined Shape (Outline Mask)
                        context.saveGState()
                        combinedShape9.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                        combinedShape9.addClip()
                        
                        // Empty.
                        
                        context.restoreGState()
                        // End Combined Shape (Outline Mask)
                        
                        /// Combined Shape
                        let combinedShape10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 74.65, height: 22.02), cornerRadius: 13)
                        context.saveGState()
                        context.translateBy(x: -7, y: -1.44)
                        UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
                        combinedShape10.fill()
                        context.restoreGState()
                        
                        /// Combined Shape (Outline Mask)
                        context.saveGState()
                        combinedShape10.apply(CGAffineTransform(translationX: -7, y: -1.44))
                        combinedShape10.addClip()
                        
                        // Empty.
                        
                        context.restoreGState()
                        // End Combined Shape (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                /// REGISTER
                let rEGISTER = NSMutableAttributedString(string: "REGISTER")
                rEGISTER.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: rEGISTER.length))
                rEGISTER.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: rEGISTER.length))
                rEGISTER.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: rEGISTER.length))
                context.saveGState()
                rEGISTER.draw(at: CGPoint(x: 0, y: 2))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 779, y: -422)
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape11 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape11.cgPath)
                context.addRect(combinedShape11.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.422, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape11.fill()
                    context.saveGState()
                    combinedShape11.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape11.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape11.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape11.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape11.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape12 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape12.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape12.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape12.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT2 = NSMutableAttributedString(string: " TEXT")
            tEXT2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT2.length))
            tEXT2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT2.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT2.length))
            }
            context.saveGState()
            tEXT2.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT4 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT4.length))
            tEXTTEXTTEXTTEXTTEXT4.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT4.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT4.draw(in: CGRect(x: 7, y: 31, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT5 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT5.length))
            tEXTTEXTTEXTTEXTTEXT5.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT5.length))
            tEXTTEXTTEXTTEXTTEXT5.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT5.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT5.draw(in: CGRect(x: 7, y: 165, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT6 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT6.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT6.length))
            tEXTTEXTTEXTTEXTTEXT6.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT6.length))
            tEXTTEXTTEXTTEXTTEXT6.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT6.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT6.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT6.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT6.draw(in: CGRect(x: 7, y: 202, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 723, y: 1310)
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape13.cgPath)
                context.addRect(combinedShape13.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape13.fill()
                    context.saveGState()
                    combinedShape13.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape13.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape13.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape13.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape13.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape14 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape14.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape14.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape14.addClip()
                
                /// 19e2haukj70x6jpg
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT3 = NSMutableAttributedString(string: " TEXT")
            tEXT3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT3.length))
            tEXT3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT3.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT3.length))
            }
            context.saveGState()
            tEXT3.draw(at: CGPoint(x: 7, y: 344))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT7 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT7.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT7.length))
            tEXTTEXTTEXTTEXTTEXT7.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT7.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT7.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT7.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT7.draw(in: CGRect(x: 7, y: 375, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT8 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT8.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT8.length))
            tEXTTEXTTEXTTEXTTEXT8.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT8.length))
            tEXTTEXTTEXTTEXTTEXT8.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT8.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT8.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT8.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT8.draw(in: CGRect(x: 7, y: 509, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT9 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT9.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT9.length))
            tEXTTEXTTEXTTEXTTEXT9.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT9.length))
            tEXTTEXTTEXTTEXTTEXT9.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT9.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT9.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT9.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT9.draw(in: CGRect(x: 7, y: 546, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 344, y: 1310)
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                
                /// Combined Shape
                let combinedShape15 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.56)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape15.cgPath)
                context.addRect(combinedShape15.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.675, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape15.fill()
                    context.saveGState()
                    combinedShape15.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape15.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape15.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape15.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                combinedShape15.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape16 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 926.41), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -9.44)
                UIColor(white: 0.973, alpha: 1).setFill()
                combinedShape16.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape16.apply(CGAffineTransform(translationX: -7, y: -9.44))
                combinedShape16.addClip()
                
                /// 19e2haukj70x6jpg
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT4 = NSMutableAttributedString(string: " TEXT")
            tEXT4.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT4.length))
            tEXT4.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT4.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT4.length))
            }
            context.saveGState()
            tEXT4.draw(at: CGPoint(x: 7, y: 344))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT10 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT10.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT10.length))
            tEXTTEXTTEXTTEXTTEXT10.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT10.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT10.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT10.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT10.draw(in: CGRect(x: 7, y: 375, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT11 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT11.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT11.length))
            tEXTTEXTTEXTTEXTTEXT11.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT11.length))
            tEXTTEXTTEXTTEXTTEXT11.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT11.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT11.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT11.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT11.draw(in: CGRect(x: 7, y: 509, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT12 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT12.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT12.length))
            tEXTTEXTTEXTTEXTTEXT12.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.801, saturation: 0, brightness: 0.538, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT12.length))
            tEXTTEXTTEXTTEXTTEXT12.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT12.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT12.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT12.draw(in: CGRect(x: 7, y: 546, width: 331.42, height: 317))
            context.restoreGState()
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 269, y: 467)
                
                /// Group 4
                do {
                    context.saveGState()
                    
                    /// Group 2
                    do {
                        context.saveGState()
                        context.translateBy(x: 0.4, y: 0)
                        
                        /// Combined Shape
                        let combinedShape17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 48.22, height: 22.02), cornerRadius: 13)
                        context.saveGState()
                        context.translateBy(x: 0.66, y: 0.56)
                        context.saveGState()
                        context.beginPath()
                        context.addPath(combinedShape17.cgPath)
                        context.addRect(combinedShape17.bounds.insetBy(dx: -96, dy: -96))
                        context.clip(using: .evenOdd)
                        context.translateBy(x: -225.22, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 225.22, y: 0)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                        }
                        context.beginTransparencyLayer(auxiliaryInfo: nil)
                        do {
                            UIColor.black.setFill()
                            combinedShape17.fill()
                            context.saveGState()
                            combinedShape17.lineWidth = 16
                            UIColor.black.setStroke()
                            combinedShape17.stroke()
                            context.restoreGState()
                        }
                        context.endTransparencyLayer()
                        context.restoreGState()
                        UIColor(white: 0.898, alpha: 0.67).setFill()
                        combinedShape17.fill()
                        context.restoreGState()
                        
                        /// Combined Shape (Outline Mask)
                        context.saveGState()
                        combinedShape17.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                        combinedShape17.addClip()
                        
                        // Empty.
                        
                        context.restoreGState()
                        // End Combined Shape (Outline Mask)
                        
                        /// Combined Shape
                        let combinedShape18 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 63.39, height: 22.02), cornerRadius: 13)
                        context.saveGState()
                        context.translateBy(x: -7, y: -1.44)
                        UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                        combinedShape18.fill()
                        context.restoreGState()
                        
                        /// Combined Shape (Outline Mask)
                        context.saveGState()
                        combinedShape18.apply(CGAffineTransform(translationX: -7, y: -1.44))
                        combinedShape18.addClip()
                        
                        // Empty.
                        
                        context.restoreGState()
                        // End Combined Shape (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                /// CANCEL
                let cANCEL = NSMutableAttributedString(string: "CANCEL")
                cANCEL.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cANCEL.length))
                cANCEL.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: cANCEL.length))
                cANCEL.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cANCEL.length))
                context.saveGState()
                cANCEL.draw(at: CGPoint(x: 0, y: 2))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 7
        do {
            context.saveGState()
            context.translateBy(x: 17, y: -380)
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            /// close
            let close = UIBezierPath()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            close.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close.close()
            close.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close.fill()
            context.saveGState()
            close.lineWidth = 2
            context.beginPath()
            context.addPath(close.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.8, alpha: 1).setStroke()
            close.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 7
        do {
            context.saveGState()
            context.translateBy(x: 17, y: -341)
            
            /// Oval
            let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.064, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            /// close
            let close2 = UIBezierPath()
            close2.move(to: CGPoint(x: 5.07, y: 5.07))
            close2.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close2.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close2.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close2.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close2.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close2.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close2.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close2.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close2.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close2.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close2.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close2.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close2.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close2.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close2.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close2.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close2.close()
            close2.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            close2.fill()
            context.saveGState()
            close2.lineWidth = 2
            context.beginPath()
            context.addPath(close2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.508, alpha: 1).setStroke()
            close2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 284, y: 1313)
            
            /// Oval
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor.white.setFill()
            oval4.fill()
            context.restoreGState()
            
            /// close
            let close3 = UIBezierPath()
            close3.move(to: CGPoint(x: 5.07, y: 5.07))
            close3.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close3.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close3.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close3.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close3.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close3.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close3.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close3.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close3.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close3.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close3.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close3.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close3.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close3.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close3.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close3.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close3.close()
            close3.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close3.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close3.fill()
            context.saveGState()
            close3.lineWidth = 2
            context.beginPath()
            context.addPath(close3.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setStroke()
            close3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 663, y: 1313)
            
            /// Oval
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor.white.setFill()
            oval5.fill()
            context.restoreGState()
            
            /// close
            let close4 = UIBezierPath()
            close4.move(to: CGPoint(x: 5.07, y: 5.07))
            close4.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close4.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close4.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close4.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close4.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close4.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close4.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close4.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close4.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close4.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close4.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close4.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close4.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close4.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close4.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close4.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close4.close()
            close4.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close4.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close4.fill()
            context.saveGState()
            close4.lineWidth = 2
            context.beginPath()
            context.addPath(close4.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setStroke()
            close4.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 17, y: -302)
            
            /// Oval
            let oval6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor.white.setFill()
            oval6.fill()
            context.restoreGState()
            
            /// close
            let close5 = UIBezierPath()
            close5.move(to: CGPoint(x: 5.07, y: 5.07))
            close5.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close5.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close5.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close5.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close5.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close5.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close5.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close5.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close5.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close5.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close5.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close5.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close5.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close5.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close5.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close5.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close5.close()
            close5.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close5.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close5.fill()
            context.saveGState()
            close5.lineWidth = 2
            context.beginPath()
            context.addPath(close5.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setStroke()
            close5.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 17, y: -263)
            
            /// Oval
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 21, height: 21))
            context.saveGState()
            UIColor(white: 0.662, alpha: 1).setFill()
            oval7.fill()
            context.restoreGState()
            
            /// close
            let close6 = UIBezierPath()
            close6.move(to: CGPoint(x: 5.07, y: 5.07))
            close6.addLine(to: CGPoint(x: 0.72, y: 5.07))
            close6.addCurve(to: CGPoint(x: 0, y: 5.79), controlPoint1: CGPoint(x: 0.32, y: 5.07), controlPoint2: CGPoint(x: 0, y: 5.39))
            close6.addCurve(to: CGPoint(x: 0.72, y: 6.51), controlPoint1: CGPoint(x: 0, y: 6.19), controlPoint2: CGPoint(x: 0.32, y: 6.51))
            close6.addLine(to: CGPoint(x: 5.07, y: 6.51))
            close6.addLine(to: CGPoint(x: 5.07, y: 10.86))
            close6.addCurve(to: CGPoint(x: 5.79, y: 11.58), controlPoint1: CGPoint(x: 5.07, y: 11.26), controlPoint2: CGPoint(x: 5.39, y: 11.58))
            close6.addCurve(to: CGPoint(x: 6.51, y: 10.86), controlPoint1: CGPoint(x: 6.19, y: 11.58), controlPoint2: CGPoint(x: 6.51, y: 11.26))
            close6.addLine(to: CGPoint(x: 6.51, y: 6.51))
            close6.addLine(to: CGPoint(x: 10.86, y: 6.51))
            close6.addCurve(to: CGPoint(x: 11.58, y: 5.79), controlPoint1: CGPoint(x: 11.26, y: 6.51), controlPoint2: CGPoint(x: 11.58, y: 6.19))
            close6.addCurve(to: CGPoint(x: 10.86, y: 5.07), controlPoint1: CGPoint(x: 11.58, y: 5.39), controlPoint2: CGPoint(x: 11.26, y: 5.07))
            close6.addLine(to: CGPoint(x: 6.51, y: 5.07))
            close6.addLine(to: CGPoint(x: 6.51, y: 0.72))
            close6.addCurve(to: CGPoint(x: 5.79, y: 0), controlPoint1: CGPoint(x: 6.51, y: 0.32), controlPoint2: CGPoint(x: 6.19, y: 0))
            close6.addCurve(to: CGPoint(x: 5.07, y: 0.72), controlPoint1: CGPoint(x: 5.39, y: 0), controlPoint2: CGPoint(x: 5.07, y: 0.32))
            close6.addLine(to: CGPoint(x: 5.07, y: 5.07))
            close6.close()
            close6.move(to: CGPoint(x: 5.07, y: 5.07))
            context.saveGState()
            context.translateBy(x: 10.19, y: 10.19)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -5.79, y: -5.79)
            close6.usesEvenOddFillRule = true
            UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
            close6.fill()
            context.saveGState()
            close6.lineWidth = 2
            context.beginPath()
            context.addPath(close6.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.13, alpha: 1).setStroke()
            close6.stroke()
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Button-Black
        let buttonBlack = NSMutableAttributedString(string: "Button-Black")
        buttonBlack.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: buttonBlack.length))
        buttonBlack.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: buttonBlack.length))
        buttonBlack.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: buttonBlack.length))
        context.saveGState()
        buttonBlack.draw(at: CGPoint(x: 55, y: -377))
        context.restoreGState()
        /// Button-White
        let buttonWhite = NSMutableAttributedString(string: "Button-White")
        buttonWhite.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: buttonWhite.length))
        buttonWhite.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: buttonWhite.length))
        buttonWhite.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: buttonWhite.length))
        context.saveGState()
        buttonWhite.draw(at: CGPoint(x: 55, y: -302))
        context.restoreGState()
        /// Button-White-Pressed
        let buttonWhitePressed = NSMutableAttributedString(string: "Button-White-Pressed")
        buttonWhitePressed.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: buttonWhitePressed.length))
        buttonWhitePressed.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: buttonWhitePressed.length))
        buttonWhitePressed.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: buttonWhitePressed.length))
        context.saveGState()
        buttonWhitePressed.draw(at: CGPoint(x: 55, y: -263))
        context.restoreGState()
        /// Button-Black-Pressed
        let buttonBlackPressed = NSMutableAttributedString(string: "Button-Black-Pressed")
        buttonBlackPressed.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: buttonBlackPressed.length))
        buttonBlackPressed.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: buttonBlackPressed.length))
        buttonBlackPressed.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: buttonBlackPressed.length))
        context.saveGState()
        buttonBlackPressed.draw(at: CGPoint(x: 55, y: -338))
        context.restoreGState()
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 480, y: -382)
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape19 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 59.48, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.56)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape19.cgPath)
                    context.addRect(combinedShape19.bounds.insetBy(dx: -96, dy: -96))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -236.48, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 236.48, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape19.fill()
                        context.saveGState()
                        combinedShape19.lineWidth = 16
                        UIColor.black.setStroke()
                        combinedShape19.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape19.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape19.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                    combinedShape19.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape20 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 74.65, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: 0.56)
                    UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1).setFill()
                    combinedShape20.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape20.apply(CGAffineTransform(translationX: -7, y: 0.56))
                    combinedShape20.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// REGISTER
            let rEGISTER2 = NSMutableAttributedString(string: "REGISTER")
            rEGISTER2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: rEGISTER2.length))
            rEGISTER2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: rEGISTER2.length))
            rEGISTER2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: rEGISTER2.length))
            context.saveGState()
            rEGISTER2.draw(in: CGRect(x: 0, y: 3.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 583, y: -382)
            
            /// Group 4
            do {
                context.saveGState()
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape21 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 59.48, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.56)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape21.cgPath)
                    context.addRect(combinedShape21.bounds.insetBy(dx: -96, dy: -96))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -236.48, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 236.48, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape21.fill()
                        context.saveGState()
                        combinedShape21.lineWidth = 16
                        UIColor.black.setStroke()
                        combinedShape21.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape21.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape21.apply(CGAffineTransform(translationX: 0.66, y: 0.56))
                    combinedShape21.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape22 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 74.65, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: 0.56)
                    UIColor(hue: 0.59, saturation: 0.68, brightness: 0.725, alpha: 1).setFill()
                    combinedShape22.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape22.apply(CGAffineTransform(translationX: -7, y: 0.56))
                    combinedShape22.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// REGISTER
            let rEGISTER3 = NSMutableAttributedString(string: "REGISTER")
            rEGISTER3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: rEGISTER3.length))
            rEGISTER3.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.835, alpha: 1), range: NSRange(location: 0, length: rEGISTER3.length))
            rEGISTER3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: rEGISTER3.length))
            context.saveGState()
            rEGISTER3.draw(in: CGRect(x: 0, y: 3.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 480, y: -337)
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape23 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 51.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape23.cgPath)
                    context.addRect(combinedShape23.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -128.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape23.fill()
                        context.saveGState()
                        combinedShape23.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape23.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape23.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape23.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape23.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape24 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 67.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0, brightness: 0.608, alpha: 1).setFill()
                    combinedShape24.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape24.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape24.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// CANCEL
            let cANCEL2 = NSMutableAttributedString(string: "CANCEL")
            cANCEL2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cANCEL2.length))
            cANCEL2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: cANCEL2.length))
            cANCEL2.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cANCEL2.length))
            context.saveGState()
            cANCEL2.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 583, y: -337)
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                
                /// Group 2
                do {
                    context.saveGState()
                    
                    /// Combined Shape
                    let combinedShape25 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 51.2, height: 15.89), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.69)
                    context.saveGState()
                    context.beginPath()
                    context.addPath(combinedShape25.cgPath)
                    context.addRect(combinedShape25.bounds.insetBy(dx: -46, dy: -46))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -128.2, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 128.2, y: 0)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.559, alpha: 0.23).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        combinedShape25.fill()
                        context.saveGState()
                        combinedShape25.lineWidth = 6
                        UIColor.black.setStroke()
                        combinedShape25.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    UIColor(white: 0.898, alpha: 0.67).setFill()
                    combinedShape25.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape25.apply(CGAffineTransform(translationX: 0.66, y: 0.69))
                    combinedShape25.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    /// Combined Shape
                    let combinedShape26 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 67.14, height: 20.02), cornerRadius: 13)
                    context.saveGState()
                    context.translateBy(x: -7, y: -3.44)
                    UIColor(hue: 0.791, saturation: 0.012, brightness: 0.398, alpha: 1).setFill()
                    combinedShape26.fill()
                    context.restoreGState()
                    
                    /// Combined Shape (Outline Mask)
                    context.saveGState()
                    combinedShape26.apply(CGAffineTransform(translationX: -7, y: -3.44))
                    combinedShape26.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Combined Shape (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// CANCEL
            let cANCEL3 = NSMutableAttributedString(string: "CANCEL")
            cANCEL3.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: cANCEL3.length))
            cANCEL3.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.835, alpha: 1), range: NSRange(location: 0, length: cANCEL3.length))
            cANCEL3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: cANCEL3.length))
            context.saveGState()
            cANCEL3.draw(in: CGRect(x: 0, y: 0.17, width: 62, height: 17))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// LOG IN
        let lOGIN = NSMutableAttributedString(string: "LOG IN")
        lOGIN.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: lOGIN.length))
        lOGIN.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: lOGIN.length))
        lOGIN.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: lOGIN.length))
        context.saveGState()
        lOGIN.draw(at: CGPoint(x: 105, y: -200))
        context.restoreGState()
        /// TAKE THE TOUR
        let tAKETHETOUR = NSMutableAttributedString(string: "TAKE THE TOUR")
        tAKETHETOUR.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 14)!, range: NSRange(location: 0, length: tAKETHETOUR.length))
        tAKETHETOUR.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tAKETHETOUR.length))
        tAKETHETOUR.addAttribute(NSKernAttributeName, value: 0.17, range: NSRange(location: 0, length: tAKETHETOUR.length))
        context.saveGState()
        tAKETHETOUR.draw(at: CGPoint(x: 75, y: -149))
        context.restoreGState()
        /// Path 2
        let path2 = UIBezierPath()
        path2.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 851.83, y: -80.86)
        path2.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        path2.stroke()
        context.restoreGState()
        /// Event Introduction P
        let eventIntroductionP3 = NSMutableAttributedString(string: "Event Introduction Page")
        eventIntroductionP3.addAttribute(NSFontAttributeName, value: UIFont(name: "PingFangSC-Semibold", size: 13)!, range: NSRange(location: 0, length: eventIntroductionP3.length))
        eventIntroductionP3.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: eventIntroductionP3.length))
        eventIntroductionP3.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: eventIntroductionP3.length))
        context.saveGState()
        eventIntroductionP3.draw(at: CGPoint(x: 1209, y: -460))
        context.restoreGState()
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 1209, y: -422)
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Glyphs / Navigation or Toolbar / Placeholder 1 on Light
            // Warning: New symbols are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 2)
                
                /// Combined Shape
                let combinedShape27 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 351.34, height: 573.96), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: 0.66, y: 0.75)
                context.saveGState()
                context.beginPath()
                context.addPath(combinedShape27.cgPath)
                context.addRect(combinedShape27.bounds.insetBy(dx: -146, dy: -146))
                context.clip(using: .evenOdd)
                context.translateBy(x: -628.34, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 628.34, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 16 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.15).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    combinedShape27.fill()
                    context.saveGState()
                    combinedShape27.lineWidth = 26
                    UIColor.black.setStroke()
                    combinedShape27.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                UIColor(white: 0.898, alpha: 0.69).setFill()
                combinedShape27.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape27.apply(CGAffineTransform(translationX: 0.66, y: 0.75))
                combinedShape27.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                /// Combined Shape
                let combinedShape28 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 359, height: 580.22), cornerRadius: 13)
                context.saveGState()
                context.translateBy(x: -7, y: -5.51)
                UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).setFill()
                combinedShape28.fill()
                context.restoreGState()
                
                /// Combined Shape (Outline Mask)
                context.saveGState()
                combinedShape28.apply(CGAffineTransform(translationX: -7, y: -5.51))
                combinedShape28.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Combined Shape (Outline Mask)
                
                context.restoreGState()
            }
            
            /// TEXT
            let tEXT5 = NSMutableAttributedString(string: " TEXT")
            tEXT5.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXT5.length))
            tEXT5.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.933, alpha: 1), range: NSRange(location: 0, length: tEXT5.length))
            tEXT5.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXT5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXT5.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXT5.length))
            }
            context.saveGState()
            tEXT5.draw(at: CGPoint(x: 7, y: 0))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT13 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT13.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 30)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT13.length))
            tEXTTEXTTEXTTEXTTEXT13.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT13.length))
            tEXTTEXTTEXTTEXTTEXT13.addAttribute(NSKernAttributeName, value: 0.36, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT13.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 41
                paragraphStyle.minimumLineHeight = 41
                tEXTTEXTTEXTTEXTTEXT13.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT13.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT13.draw(in: CGRect(x: 7, y: 31, width: 326.42, height: 136))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT14 = NSMutableAttributedString(string: "TEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXTTEXT")
            tEXTTEXTTEXTTEXTTEXT14.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT14.length))
            tEXTTEXTTEXTTEXTTEXT14.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT14.length))
            tEXTTEXTTEXTTEXTTEXT14.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT14.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT14.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT14.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT14.draw(in: CGRect(x: 7, y: 165, width: 331.42, height: 36))
            context.restoreGState()
            
            /// TEXTTEXTTEXTTEXTTEXT
            let tEXTTEXTTEXTTEXTTEXT15 = NSMutableAttributedString(string
            tEXTTEXTTEXTTEXTTEXT15.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 13)!, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT15.length))
            tEXTTEXTTEXTTEXTTEXT15.addAttribute(NSForegroundColorAttributeName, value: UIColor(white: 0.849, alpha: 1), range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT15.length))
            tEXTTEXTTEXTTEXTTEXT15.addAttribute(NSKernAttributeName, value: 0.16, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT15.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                tEXTTEXTTEXTTEXTTEXT15.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: tEXTTEXTTEXTTEXTTEXT15.length))
            }
            context.saveGState()
            tEXTTEXTTEXTTEXTTEXT15.draw(in: CGRect(x: 7, y: 202, width: 331.42, height: 317))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Path 2
        let path9 = UIBezierPath()
        path9.move(to: CGPoint.zero)
        context.saveGState()
        context.translateBy(x: 1282, y: -81)
        path9.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        path9.stroke()
        context.restoreGState()
        /// Group 8
        do {
            context.saveGState()
            context.translateBy(x: 50, y: 661)
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(offset: CGSize(width: 0, height: 2), blur: 9, color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval2.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval8 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval8.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval9 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor.white.setFill()
                oval9.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval10 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor.white.setFill()
                oval10.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle43 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor.white.setFill()
                rectangle43.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// TAKE A TOUR
            let tAKEATOUR = NSMutableAttributedString(string: "TAKE A TOUR")
            tAKEATOUR.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: tAKEATOUR.length))
            tAKEATOUR.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: tAKEATOUR.length))
            context.saveGState()
            tAKEATOUR.draw(at: CGPoint(x: 82, y: 14))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 8
        do {
            context.saveGState()
            context.translateBy(x: 52, y: 584)
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Group 3
                context.saveGState()
                context.setAlpha(0.66)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.setShadow(offset: CGSize(width: 0, height: 2), blur: 9, color: UIColor(white: 0, alpha: 0.5).cgColor)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 1.27, y: 0.57)
                        
                        /// Oval 2
                        let oval11 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        UIColor.white.setFill()
                        oval11.fill()
                        context.restoreGState()
                        
                        /// Oval 2
                        let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52.41, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 236.32, y: 0)
                        UIColor.white.setFill()
                        oval12.fill()
                        context.restoreGState()
                        
                        /// Rectangle
                        let rectangle44 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 235.83, height: 52.41))
                        context.saveGState()
                        context.translateBy(x: 26.2, y: 0)
                        UIColor.white.setFill()
                        rectangle44.fill()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2
                let oval13 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 0, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval13.fill()
                context.restoreGState()
                
                /// Oval 2
                let oval14 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
                context.saveGState()
                context.translateBy(x: 239, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                oval14.fill()
                context.restoreGState()
                
                /// Rectangle
                let rectangle45 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 238.5, height: 53))
                context.saveGState()
                context.translateBy(x: 26.5, y: 1)
                UIColor(white: 0.29, alpha: 1).setFill()
                rectangle45.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// LOGIN
            let lOGIN2 = NSMutableAttributedString(string: "LOGIN")
            lOGIN2.addAttribute(NSFontAttributeName, value: UIFont(name: "SFProDisplay-Bold", size: 20)!, range: NSRange(location: 0, length: lOGIN2.length))
            lOGIN2.addAttribute(NSForegroundColorAttributeName, value: UIColor.white, range: NSRange(location: 0, length: lOGIN2.length))
            lOGIN2.addAttribute(NSKernAttributeName, value: 0.24, range: NSRange(location: 0, length: lOGIN2.length))
            context.saveGState()
            lOGIN2.draw(at: CGPoint(x: 116, y: 13))
            context.restoreGState()
            
            context.restoreGState()
        }
    }
    
    /// Kit 4 Use
    
    class func drawKit4Use() {
        /// Button-Black-Pressed
        // Warning: New symbols are not supported.
        /// Button-Black
        // Warning: New symbols are not supported.
        /// Button-White-Pressed
        // Warning: New symbols are not supported.
        /// Button-White
        // Warning: New symbols are not supported.
        /// Window-Dark
        // Warning: New symbols are not supported.
        /// Window-Light
        // Warning: New symbols are not supported.
        /// Cancel-Pressed
        // Warning: New symbols are not supported.
        /// Cancel
        // Warning: New symbols are not supported.
        /// Register-Pressed
        // Warning: New symbols are not supported.
        /// Register
        // Warning: New symbols are not supported.
        /// Window-Light
        // Warning: New symbols are not supported.
        /// Window-Dark
        // Warning: New symbols are not supported.
        /// TAKE-A-TOUR-Pressed
        // Warning: New symbols are not supported.
        /// TAKE-A-TOUR
        // Warning: New symbols are not supported.
        /// LOGIN-Pressed
        // Warning: New symbols are not supported.
        /// LOGIN
        // Warning: New symbols are not supported.
    }
    
    
    //MARK: - Canvas Images
    
    /// Template - Tabbed App
    
    class func imageOfTab1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab4() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab4()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab5() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab5()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Template - Parent and Child with Toolbar
    
    class func imageOfParentView() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawParentView()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfChildView() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawChildView()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Template - Modal Sheet
    
    class func imageOfModalSheet() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawModalSheet()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Template - Sticker Pack or iMessage App
    
    class func imageOfIMessageAppCollapsed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawIMessageAppCollapsed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIMessageAppExpanded() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawIMessageAppExpanded()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfTAKEATOURPressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UIKit.drawTAKEATOURPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLOGINPressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UIKit.drawLOGINPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTAKEATOUR() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UIKit.drawTAKEATOUR()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLOGIN2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 292, height: 54), false, 0)
        UIKit.drawLOGIN2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 352, height: 577), false, 0)
        UIKit.drawWindowDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight4() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 352, height: 577), false, 0)
        UIKit.drawWindowLight4()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCancelPressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UIKit.drawCancelPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegisterPressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 21), false, 0)
        UIKit.drawRegisterPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 344, height: 113), false, 0)
        UIKit.drawWindowLight3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 352, height: 583), false, 0)
        UIKit.drawWindowLight2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTAKETHETOUR() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 211, height: 36), false, 0)
        UIKit.drawTAKETHETOUR()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLOGIN() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 211, height: 36), false, 0)
        UIKit.drawLOGIN()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFilter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UIKit.drawFilter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCancel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UIKit.drawCancel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegister2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 62, height: 18), false, 0)
        UIKit.drawRegister2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWindowLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 344, height: 113), false, 0)
        UIKit.drawWindowLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonWhitePressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UIKit.drawButtonWhitePressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonWhite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UIKit.drawButtonWhite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonBlackPressed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UIKit.drawButtonBlackPressed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonBlack2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UIKit.drawButtonBlack2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfButtonBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        UIKit.drawButtonBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfShapesTouchID() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 61, height: 62), false, 0)
        UIKit.drawShapesTouchID()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderLightDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsSliderLightDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderLightVolume() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsSliderLightVolume()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderDarkDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsSliderDarkDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSliderDarkVolume() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsSliderDarkVolume()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTextFieldLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTextFieldLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTextFieldDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTextFieldDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenuLightTextSelection() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 115, height: 46), false, 0)
        UIKit.drawControlsEditMenuLightTextSelection()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenuDarkTextSelection() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 115, height: 46), false, 0)
        UIKit.drawControlsEditMenuDarkTextSelection()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenuMultiAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 317, height: 110), false, 0)
        UIKit.drawControlsEditMenuMultiAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsEditMenuSingleAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 64, height: 44), false, 0)
        UIKit.drawControlsEditMenuSingleAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 85, height: 44), false, 0)
        UIKit.drawControlsButtonsLightDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        UIKit.drawControlsButtonsLightInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        UIKit.drawControlsButtonsLightAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightTableViewCellDefaultCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsLightTableViewCellDefaultCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightTableViewCellDefaultLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsLightTableViewCellDefaultLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightTableViewCellDestructiveCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsLightTableViewCellDestructiveCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsLightTableViewCellDestructiveLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsLightTableViewCellDestructiveLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 85, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkAdd() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 44, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkAdd()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkTableViewCellDefaultCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkTableViewCellDefaultCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkTableViewCellDefaultLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkTableViewCellDefaultLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkTableViewCellDestructiveCenter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkTableViewCellDestructiveCenter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsButtonsDarkTableViewCellDestructiveLeft() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsButtonsDarkTableViewCellDestructiveLeft()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftActionsRemoveLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftActionsRemoveLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftActionsAddLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftActionsAddLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftActionsUncheckedLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftActionsUncheckedLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftActionsChecked() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftActionsChecked()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 5, height: 5), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesPlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesSlideActionAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 72, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesSlideActionAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesSlideActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 72, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesSlideActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1Line() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1Line()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LineAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LinePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmallAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesSmallAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 160, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LineSmallPlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesCheckmark2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesCheckmark2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosure2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosure2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesInfo2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesInfo2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesInfoDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesInfoDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMove2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMove2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveInfo2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfo2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesStepper2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesStepper2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesSwitchON2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 190, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesSwitchON2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LineLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargeAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargeAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight1LineLargePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargeAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargeAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryLight2LinesLargePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesBordersIntent16ptLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesBordersIntent16ptLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesBordersEdgeToEdgeLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesBordersEdgeToEdgeLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellLightDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightDefaultDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellLightDefaultDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightDefaultActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellLightDefaultActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellLightLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightLargeDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellLightLargeDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellLightLargeActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellLightLargeActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1Line() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1Line()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LineAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LinePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmallAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesSmallAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 159, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LineSmallPlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesCheckmark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesCheckmark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesCheckmarkDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosure() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosure()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDisclosureInfoDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesDiscloureInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesInfoDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesInfoDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMove() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMove()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveCheckmarkDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosure()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveDisclosureInfoDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesMoveInfoDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesStepper() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesStepper()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesSwitchOFF()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesRightAccessoriesSwitchON() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 189, height: 44), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesRightAccessoriesSwitchON()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LineLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargeAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargeAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark1LineLargePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargeAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargeAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholderAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 199, height: 60), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesLeftAccessoryDark2LinesLargePlaceholderAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesBordersEdgeToEdgeDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 2), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesBordersEdgeToEdgeDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCell_ResourcesBordersIntent16ptDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 2), false, 0)
        UIKit.drawControlsTableViewCell_ResourcesBordersIntent16ptDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellDarkDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkDefaultDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellDarkDefaultDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkDefaultActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsTableViewCellDarkDefaultActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkLarge() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellDarkLarge()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkLargeDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellDarkLargeDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsTableViewCellDarkLargeActionDelete() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawControlsTableViewCellDarkLargeActionDelete()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersLightGroupedHeader() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 38), false, 0)
        UIKit.drawControlsSectionHeadersLightGroupedHeader()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersDarkGroupedHeader() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 38), false, 0)
        UIKit.drawControlsSectionHeadersDarkGroupedHeader()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersLightGroupedFooter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 38), false, 0)
        UIKit.drawControlsSectionHeadersLightGroupedFooter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersDarkGroupedFooter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 38), false, 0)
        UIKit.drawControlsSectionHeadersDarkGroupedFooter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersLightDefaultHeader() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 28), false, 0)
        UIKit.drawControlsSectionHeadersLightDefaultHeader()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersDarkDefaultHeader() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 28), false, 0)
        UIKit.drawControlsSectionHeadersDarkDefaultHeader()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorLightIndeterminedSpinner() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        UIKit.drawControlsProgressIndicatorLightIndeterminedSpinner()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorDarkIndeterminedSpinner() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        UIKit.drawControlsProgressIndicatorDarkIndeterminedSpinner()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorLightIndeterminedSpinnerWithLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 62), false, 0)
        UIKit.drawControlsProgressIndicatorLightIndeterminedSpinnerWithLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorDarkIndeterminedSpinnerWithLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 62), false, 0)
        UIKit.drawControlsProgressIndicatorDarkIndeterminedSpinnerWithLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorLightProgressBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsProgressIndicatorLightProgressBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorDarkProgressBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsProgressIndicatorDarkProgressBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorLightToolbarProgressIndicator() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsProgressIndicatorLightToolbarProgressIndicator()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsProgressIndicatorDarkToolbarProgressIndicator() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawControlsProgressIndicatorDarkToolbarProgressIndicator()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersLightSectionIndex() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 667), false, 0)
        UIKit.drawControlsSectionHeadersLightSectionIndex()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSectionHeadersDarkSectionIndex() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 667), false, 0)
        UIKit.drawControlsSectionHeadersDarkSectionIndex()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesBorder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 1), false, 0)
        UIKit.drawViewsActionSheet_ResourcesBorder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 50), false, 0)
        UIKit.drawViewsActionSheet_ResourcesDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesDestructive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 50), false, 0)
        UIKit.drawViewsActionSheet_ResourcesDestructive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesDisabled() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 50), false, 0)
        UIKit.drawViewsActionSheet_ResourcesDisabled()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesTop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 56), false, 0)
        UIKit.drawViewsActionSheet_ResourcesTop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesMiddle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 56), false, 0)
        UIKit.drawViewsActionSheet_ResourcesMiddle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesBottom() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 355, height: 56), false, 0)
        UIKit.drawViewsActionSheet_ResourcesBottom()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetOption() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 56), false, 0)
        UIKit.drawViewsActionSheetOption()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetHeader() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 45), false, 0)
        UIKit.drawViewsActionSheetHeader()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheet_ResourcesCancelButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 75), false, 0)
        UIKit.drawViewsActionSheet_ResourcesCancelButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetBaseSheet() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawViewsActionSheetBaseSheet()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActivityViewActivityView() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawViewsActivityViewActivityView()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlerts_ResourcesPrimaryAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 44), false, 0)
        UIKit.drawViewsAlerts_ResourcesPrimaryAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlerts_ResourcesSecondaryAction() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 44), false, 0)
        UIKit.drawViewsAlerts_ResourcesSecondaryAction()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlerts_Resources2Buttons() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 44), false, 0)
        UIKit.drawViewsAlerts_Resources2Buttons()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsDefault1LineTitle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 140), false, 0)
        UIKit.drawViewsAlertsDefault1LineTitle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsDefault2LineTitle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 163), false, 0)
        UIKit.drawViewsAlertsDefault2LineTitle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsDefault3Options() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 230), false, 0)
        UIKit.drawViewsAlertsDefault3Options()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsTextField() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 178), false, 0)
        UIKit.drawViewsAlertsTextField()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsUsernamePassword() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 208), false, 0)
        UIKit.drawViewsAlertsUsernamePassword()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsAlertsTouchID() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 270, height: 161), false, 0)
        UIKit.drawViewsAlertsTouchID()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotificationCompact() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 128), false, 0)
        UIKit.drawViewsNotificationCompact()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotificationExpanded() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 392), false, 0)
        UIKit.drawViewsNotificationExpanded()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotification_ResourcesTop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 60), false, 0)
        UIKit.drawViewsNotification_ResourcesTop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotification_ResourcesMiddle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 60), false, 0)
        UIKit.drawViewsNotification_ResourcesMiddle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotification_ResourcesBottom() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 60), false, 0)
        UIKit.drawViewsNotification_ResourcesBottom()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotification_ResourcesSingle() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 60), false, 0)
        UIKit.drawViewsNotification_ResourcesSingle()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsNotificationExpandedOption() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UIKit.drawViewsNotificationExpandedOption()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesSearchGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 14), false, 0)
        UIKit.drawBarsSearchBar_ResourcesSearchGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesDictationGlyph() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 19), false, 0)
        UIKit.drawBarsSearchBar_ResourcesDictationGlyph()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesDarkSearchFieldEmpty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesDarkSearchFieldEmpty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesDarkSearchFieldFocus1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesDarkSearchFieldFocus1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesDarkSearchFieldFocus2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesDarkSearchFieldFocus2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesLightSearchFieldFocus2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesLightSearchFieldFocus2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesLightSearchFieldFocus1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesLightSearchFieldFocus1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBar_ResourcesLightSearchFieldEmpty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 359, height: 36), false, 0)
        UIKit.drawBarsSearchBar_ResourcesLightSearchFieldEmpty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBarAsNavigationBarLightSearchBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 66), false, 0)
        UIKit.drawBarsSearchBarAsNavigationBarLightSearchBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBarLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 51), false, 0)
        UIKit.drawBarsSearchBarLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBarAsNavigationBarDarkSearchBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 66), false, 0)
        UIKit.drawBarsSearchBarAsNavigationBarDarkSearchBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsSearchBarDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 51), false, 0)
        UIKit.drawBarsSearchBarDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightLeftCombinationsActionButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightLeftCombinationsActionButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightLeftCombinationsBackButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightLeftCombinationsBackButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightLeftCombinationsLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightLeftCombinationsLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightLeftCombinationsLabelEmphasized() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 180, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightLeftCombinationsLabelEmphasized()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightRightCombinations1Action() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 170, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightRightCombinations1Action()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightRightCombinations2Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 170, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightRightCombinations2Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightRightCombinationsLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 170, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightRightCombinationsLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesLightRightCombinationsLabelEmphasized() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 170, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesLightRightCombinationsLabelEmphasized()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarLightLargeNavigationBarWithSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 170), false, 0)
        UIKit.drawBarsNavigationBarLightLargeNavigationBarWithSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarLightLargeNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 116), false, 0)
        UIKit.drawBarsNavigationBarLightLargeNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarLightDefaultNavigationBarWithSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 118), false, 0)
        UIKit.drawBarsNavigationBarLightDefaultNavigationBarWithSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarLightDefaultNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 64), false, 0)
        UIKit.drawBarsNavigationBarLightDefaultNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkLeftCombinationsActionButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 179, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkLeftCombinationsActionButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkLeftCombinationsBackButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 179, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkLeftCombinationsBackButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkLeftCombinationsLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 179, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkLeftCombinationsLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkLeftCombinationsLabelEmphasized() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 179, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkLeftCombinationsLabelEmphasized()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkRightCombinations1Action() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 169, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkRightCombinations1Action()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkRightCombinations2Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 169, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkRightCombinations2Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkRightCombinationsLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 169, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkRightCombinationsLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBar_ResourcesDarkRightCombinationsLabelEmphasized() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 169, height: 44), false, 0)
        UIKit.drawBarsNavigationBar_ResourcesDarkRightCombinationsLabelEmphasized()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarDarkLargeNavigationBarWithSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 170), false, 0)
        UIKit.drawBarsNavigationBarDarkLargeNavigationBarWithSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarDarkLargeNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 116), false, 0)
        UIKit.drawBarsNavigationBarDarkLargeNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarDarkDefaultNavigationBarWithSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 118), false, 0)
        UIKit.drawBarsNavigationBarDarkDefaultNavigationBarWithSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsNavigationBarDarkDefaultNavigationBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 64), false, 0)
        UIKit.drawBarsNavigationBarDarkDefaultNavigationBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsTabBarIconsFavoriteActiveOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 32), false, 0)
        UIKit.drawGlyphsTabBarIconsFavoriteActiveOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsTabBarIconsFavoriteInactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 32), false, 0)
        UIKit.drawGlyphsTabBarIconsFavoriteInactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsTabBarIconsFavoriteActiveOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 32), false, 0)
        UIKit.drawGlyphsTabBarIconsFavoriteActiveOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight2Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight2Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight3Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight3Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight4Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight4Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight5Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight5Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight2Labels() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight2Labels()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarLight3Labels() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarLight3Labels()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark2Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark2Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark3Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark3Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark4Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark4Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark5Actions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark5Actions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark2Labels() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark2Labels()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsToolbarDark3Labels() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        UIKit.drawBarsToolbarDark3Labels()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarDarkStatusBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        UIKit.drawBarsStatusBarDarkStatusBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarLightStatusBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        UIKit.drawBarsStatusBarLightStatusBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarLightStatusBarWithBack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        UIKit.drawBarsStatusBarLightStatusBarWithBack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarDarkStatusBarWithBack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        UIKit.drawBarsStatusBarDarkStatusBarWithBack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarDoubleHeightInCall() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        UIKit.drawBarsStatusBarDoubleHeightInCall()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarDoubleHeightRecording() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        UIKit.drawBarsStatusBarDoubleHeightRecording()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBarDoubleHeightLocation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        UIKit.drawBarsStatusBarDoubleHeightLocation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbar_ResourcesInactive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 49), false, 0)
        UIKit.drawBarsTabbar_ResourcesInactive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbar_ResourcesLightActive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 49), false, 0)
        UIKit.drawBarsTabbar_ResourcesLightActive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbar_ResourcesDarkActive() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 49), false, 0)
        UIKit.drawBarsTabbar_ResourcesDarkActive()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarLight3Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarLight3Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarLight4Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarLight4Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarLight5Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarLight5Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarDark3Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarDark3Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarDark4Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarDark4Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsTabbarDark5Tabs() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 49), false, 0)
        UIKit.drawBarsTabbarDark5Tabs()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphs_GuidesSizeGuideNavigationBarAndToolbar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphs_GuidesSizeGuideNavigationBarAndToolbar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder1OnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder1OnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder2OnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder2OnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder3OnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder3OnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder4OnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder4OnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder5OnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder5OnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder1OnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder1OnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder2OnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder2OnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder3OnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder3OnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder4OnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder4OnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphsNavigationOrToolbarPlaceholder5OnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
        UIKit.drawGlyphsNavigationOrToolbarPlaceholder5OnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGlyphs_GuidesSizeGuideTabBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 32), false, 0)
        UIKit.drawGlyphs_GuidesSizeGuideTabBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl2ButtonsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl2ButtonsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl3ButtonsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl3ButtonsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl4ButtonsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl4ButtonsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl2ButtonsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl2ButtonsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl3ButtonsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl3ButtonsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl4ButtonsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 343, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl4ButtonsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_ResourcesButtonActiveOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl_ResourcesButtonActiveOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_ResourcesButtonOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl_ResourcesButtonOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_ResourcesButtonActiveOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl_ResourcesButtonActiveOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsSegmentedControl_ResourcesButtonOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 28), false, 0)
        UIKit.drawControlsSegmentedControl_ResourcesButtonOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots2DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots2DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots3DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots3DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots4DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots4DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots5DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots5DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots6DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots6DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots7DotsOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots7DotsOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots_ResourcesPageDotOnLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 7, height: 7), false, 0)
        UIKit.drawControlsPaginationDots_ResourcesPageDotOnLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots2DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots2DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots3DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots3DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots4DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots4DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots5DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots5DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots6DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots6DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots7DotsOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 20), false, 0)
        UIKit.drawControlsPaginationDots7DotsOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsPaginationDots_ResourcesPageDotOnDark() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 7, height: 7), false, 0)
        UIKit.drawControlsPaginationDots_ResourcesPageDotOnDark()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsText_ResourcesCursorOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 2, height: 16), false, 0)
        UIKit.drawControlsText_ResourcesCursorOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfControlsText_ResourcesCursorBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 2, height: 16), false, 0)
        UIKit.drawControlsText_ResourcesCursorBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetActionSheet() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawViewsActionSheetActionSheet()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetActionSheetWithDescription() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawViewsActionSheetActionSheetWithDescription()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActionSheetActionSheetLongWithDescription() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawViewsActionSheetActionSheetLongWithDescription()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfViewsActivityView_ResourcesActionIconShape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
        UIKit.drawViewsActivityView_ResourcesActionIconShape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightKeyboardAlphabetic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemLightKeyboardAlphabetic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkKeyboardAlphabetic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemDarkKeyboardAlphabetic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightSuggestionsExpanded() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 42), false, 0)
        UIKit.drawSystemLightSuggestionsExpanded()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkSuggestionsExpanded() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 42), false, 0)
        UIKit.drawSystemDarkSuggestionsExpanded()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightSuggestionsCollapsed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 9), false, 0)
        UIKit.drawSystemLightSuggestionsCollapsed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkSuggestionsCollapsed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 9), false, 0)
        UIKit.drawSystemDarkSuggestionsCollapsed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightKeyboardEmoji() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 259), false, 0)
        UIKit.drawSystemLightKeyboardEmoji()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkKeyboardEmoji() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 258), false, 0)
        UIKit.drawSystemDarkKeyboardEmoji()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightKeyboardNumberic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemLightKeyboardNumberic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkKeyboardNumberic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemDarkKeyboardNumberic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemLightDictation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemLightDictation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSystemDarkDictation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 216), false, 0)
        UIKit.drawSystemDarkDictation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_OtherResourcesScreenDimmingOverlay() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.draw_OtherResourcesScreenDimmingOverlay()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_OtherResourcesGuide2Across() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.draw_OtherResourcesGuide2Across()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_OtherResourcesGuide3Across() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.draw_OtherResourcesGuide3Across()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_OtherResourcesGuide4Across() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.draw_OtherResourcesGuide4Across()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOf_TemplateResourcesHeaderAndFooter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 2020, height: 1000), false, 0)
        UIKit.draw_TemplateResourcesHeaderAndFooter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Model
    
    class func imageOfTab10() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab10()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab9() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab9()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab8() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab8()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab7() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab7()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTab6() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        UIKit.drawTab6()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
